using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using ReLogic.Utilities;
using Terraria.Audio;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.Shaders;
using Terraria.GameContent.UI;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Localization;
using Terraria.Utilities;
using Terraria.World.Generation;

namespace Terraria
{
	// Token: 0x02000024 RID: 36
	public class Projectile : Entity
	{
		// Token: 0x060001CF RID: 463 RVA: 0x0004AD1C File Offset: 0x00048F1C
		public void AI()
		{
			if (this.aiStyle == 1)
			{
				this.AI_001();
				return;
			}
			if (this.aiStyle == 2)
			{
				if (this.type == 93 && Main.rand.Next(5) == 0)
				{
					int num = Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 0.3f);
					Dust var_2_A0_cp_0_cp_0 = Main.dust[num];
					var_2_A0_cp_0_cp_0.velocity.X = var_2_A0_cp_0_cp_0.velocity.X * 0.3f;
					Dust var_2_BC_cp_0_cp_0 = Main.dust[num];
					var_2_BC_cp_0_cp_0.velocity.Y = var_2_BC_cp_0_cp_0.velocity.Y * 0.3f;
				}
				if (this.type == 304 && this.localAI[0] == 0f)
				{
					this.localAI[0] += 1f;
					this.alpha = 0;
				}
				if (this.type == 335)
				{
					this.frame = (int)this.ai[1];
				}
				if (this.type == 510)
				{
					this.rotation += Math.Abs(this.velocity.X) * 0.04f * (float)this.direction;
				}
				else
				{
					this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.03f * (float)this.direction;
				}
				if (this.type == 162)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						Main.PlaySound(SoundID.Item14, this.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						this.velocity.Y = this.velocity.Y + 0.28f;
						this.velocity.X = this.velocity.X * 0.99f;
					}
					if (this.ai[0] > 2f)
					{
						this.alpha = 0;
						if (this.ai[0] == 3f)
						{
							int num3;
							for (int i = 0; i < 10; i = num3 + 1)
							{
								int num2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust = Main.dust[num2];
								dust.velocity *= 0.5f;
								dust = Main.dust[num2];
								dust.velocity += this.velocity * 0.1f;
								num3 = i;
							}
							for (int j = 0; j < 5; j = num3 + 1)
							{
								int num4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num4].noGravity = true;
								Dust dust = Main.dust[num4];
								dust.velocity *= 3f;
								dust = Main.dust[num4];
								dust.velocity += this.velocity * 0.2f;
								num4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
								dust = Main.dust[num4];
								dust.velocity *= 2f;
								dust = Main.dust[num4];
								dust.velocity += this.velocity * 0.3f;
								num3 = j;
							}
							for (int k = 0; k < 1; k = num3 + 1)
							{
								int num5 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64), 1f);
								Gore gore = Main.gore[num5];
								gore.position += this.velocity * 1.25f;
								Main.gore[num5].scale = 1.5f;
								gore = Main.gore[num5];
								gore.velocity += this.velocity * 0.5f;
								gore = Main.gore[num5];
								gore.velocity *= 0.02f;
								num3 = k;
							}
						}
					}
				}
				else if (this.type == 281)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						Main.PlaySound(SoundID.Item14, this.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						this.velocity.Y = this.velocity.Y + 0.28f;
						this.velocity.X = this.velocity.X * 0.99f;
					}
					if (this.ai[0] > 2f)
					{
						this.alpha = 0;
						if (this.ai[0] == 3f)
						{
							int num3;
							for (int l = 0; l < 10; l = num3 + 1)
							{
								int num6 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust = Main.dust[num6];
								dust.velocity *= 0.5f;
								dust = Main.dust[num6];
								dust.velocity += this.velocity * 0.1f;
								num3 = l;
							}
							for (int m = 0; m < 5; m = num3 + 1)
							{
								int num7 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num7].noGravity = true;
								Dust dust = Main.dust[num7];
								dust.velocity *= 3f;
								dust = Main.dust[num7];
								dust.velocity += this.velocity * 0.2f;
								num7 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
								dust = Main.dust[num7];
								dust.velocity *= 2f;
								dust = Main.dust[num7];
								dust.velocity += this.velocity * 0.3f;
								num3 = m;
							}
							for (int n = 0; n < 1; n = num3 + 1)
							{
								int num8 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64), 1f);
								Gore gore = Main.gore[num8];
								gore.position += this.velocity * 1.25f;
								Main.gore[num8].scale = 1.5f;
								gore = Main.gore[num8];
								gore.velocity += this.velocity * 0.5f;
								gore = Main.gore[num8];
								gore.velocity *= 0.02f;
								num3 = n;
							}
						}
					}
				}
				else if (this.type == 240)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						Main.PlaySound(SoundID.Item14, this.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 16f)
					{
						this.velocity.Y = this.velocity.Y + 0.18f;
						this.velocity.X = this.velocity.X * 0.991f;
					}
					if (this.ai[0] > 2f)
					{
						this.alpha = 0;
						if (this.ai[0] == 3f)
						{
							int num3;
							for (int num9 = 0; num9 < 7; num9 = num3 + 1)
							{
								int num10 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust = Main.dust[num10];
								dust.velocity *= 0.5f;
								dust = Main.dust[num10];
								dust.velocity += this.velocity * 0.1f;
								num3 = num9;
							}
							for (int num11 = 0; num11 < 3; num11 = num3 + 1)
							{
								int num12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num12].noGravity = true;
								Dust dust = Main.dust[num12];
								dust.velocity *= 3f;
								dust = Main.dust[num12];
								dust.velocity += this.velocity * 0.2f;
								num12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
								dust = Main.dust[num12];
								dust.velocity *= 2f;
								dust = Main.dust[num12];
								dust.velocity += this.velocity * 0.3f;
								num3 = num11;
							}
							for (int num13 = 0; num13 < 1; num13 = num3 + 1)
							{
								int num14 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64), 1f);
								Gore gore = Main.gore[num14];
								gore.position += this.velocity * 1.25f;
								Main.gore[num14].scale = 1.25f;
								gore = Main.gore[num14];
								gore.velocity += this.velocity * 0.5f;
								gore = Main.gore[num14];
								gore.velocity *= 0.02f;
								num3 = num13;
							}
						}
					}
				}
				else if (this.type == 497)
				{
					int num15 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num15].position = (Main.dust[num15].position + base.Center) / 2f;
					Main.dust[num15].noGravity = true;
					Dust dust = Main.dust[num15];
					dust.velocity *= 0.3f;
					dust = Main.dust[num15];
					dust.velocity -= this.velocity * 0.1f;
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						this.velocity.X = this.velocity.X * 0.99f;
						this.velocity.Y = this.velocity.Y + 0.5f;
					}
					else
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				else if (this.type == 249)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 0f)
					{
						this.velocity.Y = this.velocity.Y + 0.25f;
					}
				}
				else if (this.type == 347)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 5f)
					{
						this.velocity.Y = this.velocity.Y + 0.25f;
					}
				}
				else if (this.type == 501)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						this.velocity.X = this.velocity.X * 0.995f;
						this.velocity.Y = this.velocity.Y + 0.2f;
					}
				}
				else if (this.type == 504)
				{
					this.alpha = 255;
					this.ai[0] += 1f;
					if (this.ai[0] > 3f)
					{
						int num16 = 100;
						if (this.ai[0] > 20f)
						{
							int num17 = 40;
							float num18 = this.ai[0] - 20f;
							num16 = (int)(100f * (1f - num18 / (float)num17));
							if (num18 >= (float)num17)
							{
								this.Kill();
							}
						}
						if (this.ai[0] <= 10f)
						{
							num16 = (int)this.ai[0] * 10;
						}
						if (Main.rand.Next(100) < num16)
						{
							int num19 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 150, default(Color), 1f);
							Main.dust[num19].position = (Main.dust[num19].position + base.Center) / 2f;
							Main.dust[num19].noGravity = true;
							Dust dust = Main.dust[num19];
							dust.velocity *= 2f;
							dust = Main.dust[num19];
							dust.scale *= 1.2f;
							dust = Main.dust[num19];
							dust.velocity += this.velocity;
						}
					}
					if (this.ai[0] >= 20f)
					{
						this.velocity.X = this.velocity.X * 0.99f;
						this.velocity.Y = this.velocity.Y + 0.1f;
					}
				}
				else if (this.type == 69 || this.type == 70 || this.type == 621)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 10f)
					{
						this.velocity.Y = this.velocity.Y + 0.25f;
						this.velocity.X = this.velocity.X * 0.99f;
					}
				}
				else if (this.type == 166)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 20f)
					{
						this.velocity.Y = this.velocity.Y + 0.3f;
						this.velocity.X = this.velocity.X * 0.98f;
					}
				}
				else if (this.type == 300)
				{
					if (this.ai[0] == 0f)
					{
						Main.PlaySound(SoundID.Item1, this.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 60f)
					{
						this.velocity.Y = this.velocity.Y + 0.2f;
						this.velocity.X = this.velocity.X * 0.99f;
					}
				}
				else if (this.type == 306)
				{
					if (this.alpha <= 200)
					{
						int num3;
						for (int num20 = 0; num20 < 4; num20 = num3 + 1)
						{
							float num21 = this.velocity.X / 4f * (float)num20;
							float num22 = this.velocity.Y / 4f * (float)num20;
							int num23 = Dust.NewDust(this.position, this.width, this.height, 184, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num23].position.X = base.Center.X - num21;
							Main.dust[num23].position.Y = base.Center.Y - num22;
							Dust dust = Main.dust[num23];
							dust.velocity *= 0f;
							Main.dust[num23].scale = 0.7f;
							num3 = num20;
						}
					}
					this.alpha -= 50;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 0.785f;
				}
				else if (this.type == 304)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						this.alpha += 10;
						this.damage = (int)((double)this.damage * 0.9);
						this.knockBack = (float)((int)((double)this.knockBack * 0.9));
						if (this.alpha >= 255)
						{
							this.active = false;
						}
					}
					if (this.ai[0] < 30f)
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				else if (this.type == 370 || this.type == 371)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 15f)
					{
						this.velocity.Y = this.velocity.Y + 0.3f;
						this.velocity.X = this.velocity.X * 0.98f;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 20f)
					{
						this.velocity.Y = this.velocity.Y + 0.4f;
						this.velocity.X = this.velocity.X * 0.97f;
					}
					else if (this.type == 48 || this.type == 54 || this.type == 93 || this.type == 520 || this.type == 599)
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
				}
				if (this.type == 54 && Main.rand.Next(20) == 0)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.75f);
					return;
				}
			}
			else if (this.aiStyle == 3)
			{
				if (this.soundDelay == 0 && this.type != 383)
				{
					this.soundDelay = 8;
					Main.PlaySound(SoundID.Item7, this.position);
				}
				if (this.type == 19)
				{
					int num3;
					for (int num24 = 0; num24 < 2; num24 = num3 + 1)
					{
						int num25 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num25].noGravity = true;
						Dust var_2_174E_cp_0_cp_0 = Main.dust[num25];
						var_2_174E_cp_0_cp_0.velocity.X = var_2_174E_cp_0_cp_0.velocity.X * 0.3f;
						Dust var_2_176B_cp_0_cp_0 = Main.dust[num25];
						var_2_176B_cp_0_cp_0.velocity.Y = var_2_176B_cp_0_cp_0.velocity.Y * 0.3f;
						num3 = num24;
					}
				}
				else if (this.type == 33)
				{
					if (Main.rand.Next(1) == 0)
					{
						int num26 = Dust.NewDust(this.position, this.width, this.height, 40, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 0, default(Color), 1.4f);
						Main.dust[num26].noGravity = true;
					}
				}
				else if (this.type == 320)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num27 = Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 0, default(Color), 1.1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num27].scale = 0.9f;
							Dust dust = Main.dust[num27];
							dust.velocity *= 0.2f;
						}
						else
						{
							Main.dust[num27].noGravity = true;
						}
					}
				}
				else if (this.type == 6)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num28 = Main.rand.Next(3);
						if (num28 == 0)
						{
							num28 = 15;
						}
						else if (num28 == 1)
						{
							num28 = 57;
						}
						else
						{
							num28 = 58;
						}
						Dust.NewDust(this.position, this.width, this.height, num28, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, default(Color), 0.7f);
					}
				}
				else if (this.type == 113 && Main.rand.Next(1) == 0)
				{
					int num29 = Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X * 0.15f, this.velocity.Y * 0.15f, 0, default(Color), 1.1f);
					Main.dust[num29].noGravity = true;
					Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.05f, this.velocity.Y * 0.05f, 150, default(Color), 0.6f);
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if (this.type == 106 && this.ai[1] >= 45f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
					if (this.type == 320 || this.type == 383)
					{
						if (this.ai[1] >= 10f)
						{
							this.velocity.Y = this.velocity.Y + 0.5f;
							if (this.type == 383 && this.velocity.Y < 0f)
							{
								this.velocity.Y = this.velocity.Y + 0.35f;
							}
							this.velocity.X = this.velocity.X * 0.95f;
							if (this.velocity.Y > 16f)
							{
								this.velocity.Y = 16f;
							}
							if (this.type == 383 && Vector2.Distance(base.Center, Main.player[this.owner].Center) > 800f)
							{
								this.ai[0] = 1f;
							}
						}
					}
					else if (this.type == 182)
					{
						if (Main.rand.Next(2) == 0)
						{
							int num30 = Dust.NewDust(this.position, this.width, this.height, 57, 0f, 0f, 255, default(Color), 0.75f);
							Dust dust = Main.dust[num30];
							dust.velocity *= 0.1f;
							Main.dust[num30].noGravity = true;
						}
						if (this.velocity.X > 0f)
						{
							this.spriteDirection = 1;
						}
						else if (this.velocity.X < 0f)
						{
							this.spriteDirection = -1;
						}
						float num31 = this.position.X;
						float num32 = this.position.Y;
						bool flag = false;
						if (this.ai[1] > 10f)
						{
							int num3;
							for (int num33 = 0; num33 < 200; num33 = num3 + 1)
							{
								if (Main.npc[num33].CanBeChasedBy(this, false))
								{
									float num34 = Main.npc[num33].position.X + (float)(Main.npc[num33].width / 2);
									float num35 = Main.npc[num33].position.Y + (float)(Main.npc[num33].height / 2);
									float num36 = Math.Abs(this.position.X + (float)(this.width / 2) - num34) + Math.Abs(this.position.Y + (float)(this.height / 2) - num35);
									if (num36 < 800f && Collision.CanHit(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), 1, 1, Main.npc[num33].position, Main.npc[num33].width, Main.npc[num33].height))
									{
										num31 = num34;
										num32 = num35;
										flag = true;
									}
								}
								num3 = num33;
							}
						}
						if (!flag)
						{
							num31 = this.position.X + (float)(this.width / 2) + this.velocity.X * 100f;
							num32 = this.position.Y + (float)(this.height / 2) + this.velocity.Y * 100f;
							if (this.ai[1] >= 30f)
							{
								this.ai[0] = 1f;
								this.ai[1] = 0f;
								this.netUpdate = true;
							}
						}
						float num37 = 12f;
						float num38 = 0.25f;
						Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num39 = num31 - vector.X;
						float num40 = num32 - vector.Y;
						float num41 = (float)Math.Sqrt((double)(num39 * num39 + num40 * num40));
						num41 = num37 / num41;
						num39 *= num41;
						num40 *= num41;
						if (this.velocity.X < num39)
						{
							this.velocity.X = this.velocity.X + num38;
							if (this.velocity.X < 0f && num39 > 0f)
							{
								this.velocity.X = this.velocity.X + num38 * 2f;
							}
						}
						else if (this.velocity.X > num39)
						{
							this.velocity.X = this.velocity.X - num38;
							if (this.velocity.X > 0f && num39 < 0f)
							{
								this.velocity.X = this.velocity.X - num38 * 2f;
							}
						}
						if (this.velocity.Y < num40)
						{
							this.velocity.Y = this.velocity.Y + num38;
							if (this.velocity.Y < 0f && num40 > 0f)
							{
								this.velocity.Y = this.velocity.Y + num38 * 2f;
							}
						}
						else if (this.velocity.Y > num40)
						{
							this.velocity.Y = this.velocity.Y - num38;
							if (this.velocity.Y > 0f && num40 < 0f)
							{
								this.velocity.Y = this.velocity.Y - num38 * 2f;
							}
						}
					}
					else if (this.type == 301)
					{
						if (this.ai[1] >= 20f)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							this.netUpdate = true;
						}
					}
					else if (this.ai[1] >= 30f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
				}
				else
				{
					this.tileCollide = false;
					float num42 = 9f;
					float num43 = 0.4f;
					if (this.type == 19)
					{
						num42 = 13f;
						num43 = 0.6f;
					}
					else if (this.type == 33)
					{
						num42 = 15f;
						num43 = 0.8f;
					}
					else if (this.type == 182)
					{
						num42 = 16f;
						num43 = 1.2f;
					}
					else if (this.type == 106)
					{
						num42 = 16f;
						num43 = 1.2f;
					}
					else if (this.type == 272)
					{
						num42 = 15f;
						num43 = 1f;
					}
					else if (this.type == 333)
					{
						num42 = 12f;
						num43 = 0.6f;
					}
					else if (this.type == 301)
					{
						num42 = 15f;
						num43 = 3f;
					}
					else if (this.type == 320)
					{
						num42 = 15f;
						num43 = 3f;
					}
					else if (this.type == 383)
					{
						num42 = 16f;
						num43 = 4f;
					}
					Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num44 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector2.X;
					float num45 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector2.Y;
					float num46 = (float)Math.Sqrt((double)(num44 * num44 + num45 * num45));
					if (num46 > 3000f)
					{
						this.Kill();
					}
					num46 = num42 / num46;
					num44 *= num46;
					num45 *= num46;
					if (this.type == 383)
					{
						Vector2 vector3 = new Vector2(num44, num45) - this.velocity;
						if (vector3 != Vector2.Zero)
						{
							Vector2 value = vector3;
							value.Normalize();
							this.velocity += value * Math.Min(num43, vector3.Length());
						}
					}
					else
					{
						if (this.velocity.X < num44)
						{
							this.velocity.X = this.velocity.X + num43;
							if (this.velocity.X < 0f && num44 > 0f)
							{
								this.velocity.X = this.velocity.X + num43;
							}
						}
						else if (this.velocity.X > num44)
						{
							this.velocity.X = this.velocity.X - num43;
							if (this.velocity.X > 0f && num44 < 0f)
							{
								this.velocity.X = this.velocity.X - num43;
							}
						}
						if (this.velocity.Y < num45)
						{
							this.velocity.Y = this.velocity.Y + num43;
							if (this.velocity.Y < 0f && num45 > 0f)
							{
								this.velocity.Y = this.velocity.Y + num43;
							}
						}
						else if (this.velocity.Y > num45)
						{
							this.velocity.Y = this.velocity.Y - num43;
							if (this.velocity.Y > 0f && num45 < 0f)
							{
								this.velocity.Y = this.velocity.Y - num43;
							}
						}
					}
					if (Main.myPlayer == this.owner)
					{
						Rectangle rectangle = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
						Rectangle value2 = new Rectangle((int)Main.player[this.owner].position.X, (int)Main.player[this.owner].position.Y, Main.player[this.owner].width, Main.player[this.owner].height);
						if (rectangle.Intersects(value2))
						{
							this.Kill();
						}
					}
				}
				if (this.type == 106)
				{
					this.rotation += 0.3f * (float)this.direction;
					return;
				}
				if (this.type != 383)
				{
					this.rotation += 0.4f * (float)this.direction;
					return;
				}
				if (this.ai[0] == 0f)
				{
					Vector2 velocity = this.velocity;
					velocity.Normalize();
					this.rotation = (float)Math.Atan2((double)velocity.Y, (double)velocity.X) + 1.57f;
					return;
				}
				Vector2 vector4 = base.Center - Main.player[this.owner].Center;
				vector4.Normalize();
				this.rotation = (float)Math.Atan2((double)vector4.Y, (double)vector4.X) + 1.57f;
				return;
			}
			else if (this.aiStyle == 4)
			{
				this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				if (this.ai[0] == 0f)
				{
					if (this.type >= 150 && this.type <= 152 && this.ai[1] == 0f && this.alpha == 255 && Main.rand.Next(2) == 0)
					{
						this.type++;
						this.netUpdate = true;
					}
					this.alpha -= 50;
					if (this.type >= 150 && this.type <= 152)
					{
						this.alpha -= 25;
					}
					else if (this.type == 493 || this.type == 494)
					{
						this.alpha -= 50;
					}
					if (this.alpha <= 0)
					{
						this.alpha = 0;
						this.ai[0] = 1f;
						if (this.ai[1] == 0f)
						{
							this.ai[1] += 1f;
							this.position += this.velocity * 1f;
						}
						if (this.type == 7 && Main.myPlayer == this.owner)
						{
							int num47 = this.type;
							if (this.ai[1] >= 6f)
							{
								num47++;
							}
							int num48 = Projectile.NewProjectile(this.position.X + this.velocity.X + (float)(this.width / 2), this.position.Y + this.velocity.Y + (float)(this.height / 2), this.velocity.X, this.velocity.Y, num47, this.damage, this.knockBack, this.owner, 0f, 0f);
							Main.projectile[num48].damage = this.damage;
							Main.projectile[num48].ai[1] = this.ai[1] + 1f;
							NetMessage.SendData(27, -1, -1, null, num48, 0f, 0f, 0f, 0, 0, 0);
							return;
						}
						if (this.type == 494 && Main.myPlayer == this.owner)
						{
							int num49 = this.type;
							if (this.ai[1] >= (float)(7 + Main.rand.Next(2)))
							{
								num49--;
							}
							int num50 = this.damage;
							float num51 = this.knockBack;
							if (num49 == 493)
							{
								num50 = (int)((double)this.damage * 1.25);
								num51 = this.knockBack * 1.25f;
							}
							int number = Projectile.NewProjectile(this.position.X + this.velocity.X + (float)(this.width / 2), this.position.Y + this.velocity.Y + (float)(this.height / 2), this.velocity.X, this.velocity.Y, num49, num50, num51, this.owner, 0f, this.ai[1] + 1f);
							NetMessage.SendData(27, -1, -1, null, number, 0f, 0f, 0f, 0, 0, 0);
							return;
						}
						if ((this.type == 150 || this.type == 151) && Main.myPlayer == this.owner)
						{
							int num52 = this.type;
							if (this.type == 150)
							{
								num52 = 151;
							}
							else if (this.type == 151)
							{
								num52 = 150;
							}
							if (this.ai[1] >= 10f && this.type == 151)
							{
								num52 = 152;
							}
							int num53 = Projectile.NewProjectile(this.position.X + this.velocity.X + (float)(this.width / 2), this.position.Y + this.velocity.Y + (float)(this.height / 2), this.velocity.X, this.velocity.Y, num52, this.damage, this.knockBack, this.owner, 0f, 0f);
							Main.projectile[num53].damage = this.damage;
							Main.projectile[num53].ai[1] = this.ai[1] + 1f;
							NetMessage.SendData(27, -1, -1, null, num53, 0f, 0f, 0f, 0, 0, 0);
							return;
						}
					}
				}
				else
				{
					if (this.alpha < 170 && this.alpha + 5 >= 170)
					{
						if (this.type >= 150 && this.type <= 152)
						{
							int num3;
							for (int num54 = 0; num54 < 8; num54 = num3 + 1)
							{
								int num55 = Dust.NewDust(this.position, this.width, this.height, 7, this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 200, default(Color), 1.3f);
								Main.dust[num55].noGravity = true;
								Dust dust = Main.dust[num55];
								dust.velocity *= 0.5f;
								num3 = num54;
							}
						}
						else if (this.type == 493 || this.type == 494)
						{
							int num3;
							for (int num56 = 0; num56 < 8; num56 = num3 + 1)
							{
								int num57 = Dust.NewDust(this.position, this.width, this.height, Main.rand.Next(68, 71), this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 200, default(Color), 1.3f);
								Main.dust[num57].noGravity = true;
								Dust dust = Main.dust[num57];
								dust.velocity *= 0.5f;
								num3 = num56;
							}
						}
						else
						{
							int num3;
							for (int num58 = 0; num58 < 3; num58 = num3 + 1)
							{
								Dust.NewDust(this.position, this.width, this.height, 18, this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 170, default(Color), 1.2f);
								num3 = num58;
							}
							Dust.NewDust(this.position, this.width, this.height, 14, 0f, 0f, 170, default(Color), 1.1f);
						}
					}
					if (this.type >= 150 && this.type <= 152)
					{
						this.alpha += 3;
					}
					else if (this.type == 493 || this.type == 494)
					{
						this.alpha += 7;
					}
					else
					{
						this.alpha += 5;
					}
					if (this.alpha >= 255)
					{
						this.Kill();
						return;
					}
				}
			}
			else if (this.aiStyle == 5)
			{
				if (this.type == 503)
				{
					if (base.Center.Y > this.ai[1])
					{
						this.tileCollide = true;
					}
				}
				else if (this.type == 92)
				{
					if (this.position.Y > this.ai[1])
					{
						this.tileCollide = true;
					}
				}
				else
				{
					if (this.ai[1] == 0f && !Collision.SolidCollision(this.position, this.width, this.height))
					{
						this.ai[1] = 1f;
						this.netUpdate = true;
					}
					if (this.ai[1] != 0f)
					{
						this.tileCollide = true;
					}
				}
				if (this.soundDelay == 0)
				{
					this.soundDelay = 20 + Main.rand.Next(40);
					Main.PlaySound(SoundID.Item9, this.position);
				}
				if (this.type == 503)
				{
					this.alpha -= 15;
					int num59 = 150;
					if (base.Center.Y >= this.ai[1])
					{
						num59 = 0;
					}
					if (this.alpha < num59)
					{
						this.alpha = num59;
					}
					this.localAI[0] += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f * (float)this.direction;
				}
				else
				{
					if (this.localAI[0] == 0f)
					{
						this.localAI[0] = 1f;
					}
					this.alpha += (int)(25f * this.localAI[0]);
					if (this.alpha > 200)
					{
						this.alpha = 200;
						this.localAI[0] = -1f;
					}
					if (this.alpha < 0)
					{
						this.alpha = 0;
						this.localAI[0] = 1f;
					}
				}
				if (this.type == 503)
				{
					this.rotation = this.velocity.ToRotation() - 1.57079637f;
				}
				else
				{
					this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f * (float)this.direction;
				}
				if (this.type == 503)
				{
					if (Main.rand.Next(16) == 0)
					{
						Vector2 value3 = Vector2.UnitX.RotatedByRandom(1.5707963705062866).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num60 = Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.2f);
						Main.dust[num60].velocity = value3 * 0.66f;
						Main.dust[num60].position = base.Center + value3 * 12f;
					}
					if (Main.rand.Next(48) == 0)
					{
						int num61 = Gore.NewGore(base.Center, new Vector2(this.velocity.X * 0.2f, this.velocity.Y * 0.2f), 16, 1f);
						Gore gore = Main.gore[num61];
						gore.velocity *= 0.66f;
						gore = Main.gore[num61];
						gore.velocity += this.velocity * 0.3f;
					}
				}
				if (this.ai[1] == 1f || this.type == 92)
				{
					this.light = 0.9f;
					if (Main.rand.Next(10) == 0)
					{
						Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.2f);
					}
					if (Main.rand.Next(20) == 0)
					{
						Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.2f, this.velocity.Y * 0.2f), Main.rand.Next(16, 18), 1f);
						return;
					}
				}
			}
			else if (this.aiStyle == 6)
			{
				this.velocity *= 0.95f;
				this.ai[0] += 1f;
				if (this.ai[0] == 180f)
				{
					this.Kill();
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					int num62 = 10 + this.type;
					if (this.type == 463)
					{
						num62 = 231;
					}
					int num3;
					for (int num63 = 0; num63 < 30; num63 = num3 + 1)
					{
						Dust.NewDust(this.position, this.width, this.height, num62, this.velocity.X, this.velocity.Y, 50, default(Color), 1f);
						num3 = num63;
					}
				}
				if (this.type == 10 || this.type == 11 || this.type == 463)
				{
					int num64 = (int)(this.position.X / 16f) - 1;
					int num65 = (int)((this.position.X + (float)this.width) / 16f) + 2;
					int num66 = (int)(this.position.Y / 16f) - 1;
					int num67 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
					if (num64 < 0)
					{
						num64 = 0;
					}
					if (num65 > Main.maxTilesX)
					{
						num65 = Main.maxTilesX;
					}
					if (num66 < 0)
					{
						num66 = 0;
					}
					if (num67 > Main.maxTilesY)
					{
						num67 = Main.maxTilesY;
					}
					int num3;
					for (int num68 = num64; num68 < num65; num68 = num3 + 1)
					{
						for (int num69 = num66; num69 < num67; num69 = num3 + 1)
						{
							Vector2 vector5;
							vector5.X = (float)(num68 * 16);
							vector5.Y = (float)(num69 * 16);
							if (this.position.X + (float)this.width > vector5.X && this.position.X < vector5.X + 16f && this.position.Y + (float)this.height > vector5.Y && this.position.Y < vector5.Y + 16f && Main.myPlayer == this.owner && Main.tile[num68, num69].active())
							{
								if (this.type == 10)
								{
									if (Main.tile[num68, num69].type == 23 || Main.tile[num68, num69].type == 199)
									{
										Main.tile[num68, num69].type = 2;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
									if (Main.tile[num68, num69].type == 25 || Main.tile[num68, num69].type == 203)
									{
										Main.tile[num68, num69].type = 1;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
									if (Main.tile[num68, num69].type == 112 || Main.tile[num68, num69].type == 234)
									{
										Main.tile[num68, num69].type = 53;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
									if (Main.tile[num68, num69].type == 163 || Main.tile[num68, num69].type == 200)
									{
										Main.tile[num68, num69].type = 161;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
									if (Main.tile[num68, num69].type == 400 || Main.tile[num68, num69].type == 401)
									{
										Main.tile[num68, num69].type = 396;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
									if (Main.tile[num68, num69].type == 398 || Main.tile[num68, num69].type == 399)
									{
										Main.tile[num68, num69].type = 397;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
								}
								else if (this.type == 11 || this.type == 463)
								{
									if (Main.tile[num68, num69].type == 109)
									{
										Main.tile[num68, num69].type = 2;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
									if (Main.tile[num68, num69].type == 116)
									{
										Main.tile[num68, num69].type = 53;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
									if (Main.tile[num68, num69].type == 117)
									{
										Main.tile[num68, num69].type = 1;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
									if (Main.tile[num68, num69].type == 164)
									{
										Main.tile[num68, num69].type = 161;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
									if (Main.tile[num68, num69].type == 403)
									{
										Main.tile[num68, num69].type = 396;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
									if (Main.tile[num68, num69].type == 402)
									{
										Main.tile[num68, num69].type = 397;
										WorldGen.SquareTileFrame(num68, num69, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num68, num69, 1, TileChangeType.None);
										}
									}
								}
							}
							num3 = num69;
						}
						num3 = num68;
					}
					return;
				}
			}
			else if (this.aiStyle == 7)
			{
				if (Main.player[this.owner].dead || Main.player[this.owner].stoned || Main.player[this.owner].webbed || Main.player[this.owner].frozen)
				{
					this.Kill();
					return;
				}
				Vector2 mountedCenter = Main.player[this.owner].MountedCenter;
				Vector2 vector6 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num70 = mountedCenter.X - vector6.X;
				float num71 = mountedCenter.Y - vector6.Y;
				float num72 = (float)Math.Sqrt((double)(num70 * num70 + num71 * num71));
				this.rotation = (float)Math.Atan2((double)num71, (double)num70) - 1.57f;
				if (this.type == 256)
				{
					this.rotation = (float)Math.Atan2((double)num71, (double)num70) + 3.92500019f;
				}
				if (this.type == 446)
				{
					Lighting.AddLight(mountedCenter, 0f, 0.4f, 0.3f);
					float[] var_2_3A49_cp_0 = this.localAI;
					int var_2_3A49_cp_1 = 0;
					float num73 = var_2_3A49_cp_0[var_2_3A49_cp_1];
					var_2_3A49_cp_0[var_2_3A49_cp_1] = num73 + 1f;
					if (this.localAI[0] >= 28f)
					{
						this.localAI[0] = 0f;
					}
					DelegateMethods.v3_1 = new Vector3(0f, 0.4f, 0.3f);
					Utils.PlotTileLine(base.Center, mountedCenter, 8f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
				}
				if (this.type == 652)
				{
					int num3 = this.frameCounter + 1;
					this.frameCounter = num3;
					if (num3 >= 7)
					{
						this.frameCounter = 0;
						num3 = this.frame + 1;
						this.frame = num3;
						if (num3 >= Main.projFrames[this.type])
						{
							this.frame = 0;
						}
					}
				}
				if (this.type >= 646 && this.type <= 649)
				{
					Vector3 zero = Vector3.Zero;
					switch (this.type)
					{
						case 646:
							zero = new Vector3(0.7f, 0.5f, 0.1f);
							break;
						case 647:
							zero = new Vector3(0f, 0.6f, 0.7f);
							break;
						case 648:
							zero = new Vector3(0.6f, 0.2f, 0.6f);
							break;
						case 649:
							zero = new Vector3(0.6f, 0.6f, 0.9f);
							break;
					}
					Lighting.AddLight(mountedCenter, zero);
					Lighting.AddLight(base.Center, zero);
					DelegateMethods.v3_1 = zero;
					Utils.PlotTileLine(base.Center, mountedCenter, 8f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
				}
				if (this.ai[0] == 0f)
				{
					if ((num72 > 300f && this.type == 13) || (num72 > 400f && this.type == 32) || (num72 > 440f && this.type == 73) || (num72 > 440f && this.type == 74) || (num72 > 250f && this.type == 165) || (num72 > 350f && this.type == 256) || (num72 > 500f && this.type == 315) || (num72 > 550f && this.type == 322) || (num72 > 400f && this.type == 331) || (num72 > 550f && this.type == 332) || (num72 > 400f && this.type == 372) || (num72 > 300f && this.type == 396) || (num72 > 550f && this.type >= 646 && this.type <= 649) || (num72 > 600f && this.type == 652) || (num72 > 480f && this.type >= 486 && this.type <= 489) || (num72 > 500f && this.type == 446))
					{
						this.ai[0] = 1f;
					}
					else if (this.type >= 230 && this.type <= 235)
					{
						int num74 = 300 + (this.type - 230) * 30;
						if (num72 > (float)num74)
						{
							this.ai[0] = 1f;
						}
					}
					Vector2 vector7 = base.Center - new Vector2(5f);
					Vector2 value4 = base.Center + new Vector2(5f);
					Point point = (vector7 - new Vector2(16f)).ToTileCoordinates();
					Point point2 = (value4 + new Vector2(32f)).ToTileCoordinates();
					int num75 = point.X;
					int num76 = point2.X;
					int num77 = point.Y;
					int num78 = point2.Y;
					if (num75 < 0)
					{
						num75 = 0;
					}
					if (num76 > Main.maxTilesX)
					{
						num76 = Main.maxTilesX;
					}
					if (num77 < 0)
					{
						num77 = 0;
					}
					if (num78 > Main.maxTilesY)
					{
						num78 = Main.maxTilesY;
					}
					int num3;
					for (int num79 = num75; num79 < num76; num79 = num3 + 1)
					{
						int num80 = num77;
						while (num80 < num78)
						{
							if (Main.tile[num79, num80] == null)
							{
								Main.tile[num79, num80] = new Tile();
							}
							Vector2 vector8;
							vector8.X = (float)(num79 * 16);
							vector8.Y = (float)(num80 * 16);
							if (vector7.X + 10f > vector8.X && vector7.X < vector8.X + 16f && vector7.Y + 10f > vector8.Y && vector7.Y < vector8.Y + 16f && Main.tile[num79, num80].nactive() && (Main.tileSolid[(int)Main.tile[num79, num80].type] || Main.tile[num79, num80].type == 314) && (this.type != 403 || Main.tile[num79, num80].type == 314))
							{
								if (Main.player[this.owner].grapCount < 10)
								{
									Main.player[this.owner].grappling[Main.player[this.owner].grapCount] = this.whoAmI;
									Player player = Main.player[this.owner];
									player.grapCount++;
								}
								if (Main.myPlayer == this.owner)
								{
									int num81 = 0;
									int num82 = -1;
									int num83 = 100000;
									if (this.type == 73 || this.type == 74)
									{
										for (int num84 = 0; num84 < 1000; num84 = num3 + 1)
										{
											if (num84 != this.whoAmI && Main.projectile[num84].active && Main.projectile[num84].owner == this.owner && Main.projectile[num84].aiStyle == 7 && Main.projectile[num84].ai[0] == 2f)
											{
												Main.projectile[num84].Kill();
											}
											num3 = num84;
										}
									}
									else
									{
										int num85 = 3;
										if (this.type == 165)
										{
											num85 = 8;
										}
										if (this.type == 256)
										{
											num85 = 2;
										}
										if (this.type == 372)
										{
											num85 = 2;
										}
										if (this.type == 652)
										{
											num85 = 1;
										}
										if (this.type >= 646 && this.type <= 649)
										{
											num85 = 4;
										}
										for (int num86 = 0; num86 < 1000; num86 = num3 + 1)
										{
											if (Main.projectile[num86].active && Main.projectile[num86].owner == this.owner && Main.projectile[num86].aiStyle == 7)
											{
												if (Main.projectile[num86].timeLeft < num83)
												{
													num82 = num86;
													num83 = Main.projectile[num86].timeLeft;
												}
												num81++;
											}
											num3 = num86;
										}
										if (num81 > num85)
										{
											Main.projectile[num82].Kill();
										}
									}
								}
								WorldGen.KillTile(num79, num80, true, true, false);
								Main.PlaySound(0, num79 * 16, num80 * 16, 1, 1f, 0f);
								this.velocity.X = 0f;
								this.velocity.Y = 0f;
								this.ai[0] = 2f;
								this.position.X = (float)(num79 * 16 + 8 - this.width / 2);
								this.position.Y = (float)(num80 * 16 + 8 - this.height / 2);
								this.damage = 0;
								this.netUpdate = true;
								if (Main.myPlayer == this.owner)
								{
									NetMessage.SendData(13, -1, -1, null, this.owner, 0f, 0f, 0f, 0, 0, 0);
									break;
								}
								break;
							}
							else
							{
								num3 = num80;
								num80 = num3 + 1;
							}
						}
						if (this.ai[0] == 2f)
						{
							return;
						}
						num3 = num79;
					}
					return;
				}
				if (this.ai[0] == 1f)
				{
					float num87 = 11f;
					if (this.type == 32)
					{
						num87 = 15f;
					}
					if (this.type == 73 || this.type == 74)
					{
						num87 = 17f;
					}
					if (this.type == 315)
					{
						num87 = 20f;
					}
					if (this.type == 322)
					{
						num87 = 22f;
					}
					if (this.type >= 230 && this.type <= 235)
					{
						num87 = 11f + (float)(this.type - 230) * 0.75f;
					}
					if (this.type == 446)
					{
						num87 = 20f;
					}
					if (this.type >= 486 && this.type <= 489)
					{
						num87 = 18f;
					}
					if (this.type >= 646 && this.type <= 649)
					{
						num87 = 24f;
					}
					if (this.type == 652)
					{
						num87 = 24f;
					}
					if (this.type == 332)
					{
						num87 = 17f;
					}
					if (num72 < 24f)
					{
						this.Kill();
					}
					num72 = num87 / num72;
					num70 *= num72;
					num71 *= num72;
					this.velocity.X = num70;
					this.velocity.Y = num71;
					return;
				}
				if (this.ai[0] == 2f)
				{
					int num88 = (int)(this.position.X / 16f) - 1;
					int num89 = (int)((this.position.X + (float)this.width) / 16f) + 2;
					int num90 = (int)(this.position.Y / 16f) - 1;
					int num91 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
					if (num88 < 0)
					{
						num88 = 0;
					}
					if (num89 > Main.maxTilesX)
					{
						num89 = Main.maxTilesX;
					}
					if (num90 < 0)
					{
						num90 = 0;
					}
					if (num91 > Main.maxTilesY)
					{
						num91 = Main.maxTilesY;
					}
					bool flag2 = true;
					int num3;
					for (int num92 = num88; num92 < num89; num92 = num3 + 1)
					{
						for (int num93 = num90; num93 < num91; num93 = num3 + 1)
						{
							if (Main.tile[num92, num93] == null)
							{
								Main.tile[num92, num93] = new Tile();
							}
							Vector2 vector9;
							vector9.X = (float)(num92 * 16);
							vector9.Y = (float)(num93 * 16);
							if (this.position.X + (float)(this.width / 2) > vector9.X && this.position.X + (float)(this.width / 2) < vector9.X + 16f && this.position.Y + (float)(this.height / 2) > vector9.Y && this.position.Y + (float)(this.height / 2) < vector9.Y + 16f && Main.tile[num92, num93].nactive() && (Main.tileSolid[(int)Main.tile[num92, num93].type] || Main.tile[num92, num93].type == 314 || Main.tile[num92, num93].type == 5))
							{
								flag2 = false;
							}
							num3 = num93;
						}
						num3 = num92;
					}
					if (flag2)
					{
						this.ai[0] = 1f;
						return;
					}
					if (Main.player[this.owner].grapCount < 10)
					{
						Main.player[this.owner].grappling[Main.player[this.owner].grapCount] = this.whoAmI;
						Player player = Main.player[this.owner];
						player.grapCount++;
						return;
					}
				}
			}
			else if (this.aiStyle == 8)
			{
				if (this.type == 258 && this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlaySound(SoundID.Item20, this.position);
				}
				if (this.type == 96 && this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlaySound(SoundID.Item20, this.position);
				}
				if (this.type == 27)
				{
					int num3;
					for (int num94 = 0; num94 < 5; num94 = num3 + 1)
					{
						float num95 = this.velocity.X / 3f * (float)num94;
						float num96 = this.velocity.Y / 3f * (float)num94;
						int num97 = 4;
						int num98 = Dust.NewDust(new Vector2(this.position.X + (float)num97, this.position.Y + (float)num97), this.width - num97 * 2, this.height - num97 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num98].noGravity = true;
						Dust dust = Main.dust[num98];
						dust.velocity *= 0.1f;
						dust = Main.dust[num98];
						dust.velocity += this.velocity * 0.1f;
						Dust var_2_4829_cp_0_cp_0 = Main.dust[num98];
						var_2_4829_cp_0_cp_0.position.X = var_2_4829_cp_0_cp_0.position.X - num95;
						Dust var_2_4843_cp_0_cp_0 = Main.dust[num98];
						var_2_4843_cp_0_cp_0.position.Y = var_2_4843_cp_0_cp_0.position.Y - num96;
						num3 = num94;
					}
					if (Main.rand.Next(5) == 0)
					{
						int num99 = 4;
						int num100 = Dust.NewDust(new Vector2(this.position.X + (float)num99, this.position.Y + (float)num99), this.width - num99 * 2, this.height - num99 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
						Dust dust = Main.dust[num100];
						dust.velocity *= 0.25f;
						dust = Main.dust[num100];
						dust.velocity += this.velocity * 0.5f;
					}
				}
				else if (this.type == 502)
				{
					float num101 = (float)Main.DiscoR / 255f;
					float num102 = (float)Main.DiscoG / 255f;
					float num103 = (float)Main.DiscoB / 255f;
					num101 = (0.5f + num101) / 2f;
					num102 = (0.5f + num102) / 2f;
					num103 = (0.5f + num103) / 2f;
					Lighting.AddLight(base.Center, num101, num102, num103);
				}
				else if (this.type == 95 || this.type == 96)
				{
					int num104 = Dust.NewDust(new Vector2(this.position.X + this.velocity.X, this.position.Y + this.velocity.Y), this.width, this.height, 75, this.velocity.X, this.velocity.Y, 100, default(Color), 3f * this.scale);
					Main.dust[num104].noGravity = true;
				}
				else if (this.type == 253)
				{
					int num3;
					for (int num105 = 0; num105 < 2; num105 = num3 + 1)
					{
						int num106 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num106].noGravity = true;
						Dust var_2_4ADC_cp_0_cp_0 = Main.dust[num106];
						var_2_4ADC_cp_0_cp_0.velocity.X = var_2_4ADC_cp_0_cp_0.velocity.X * 0.3f;
						Dust var_2_4AF9_cp_0_cp_0 = Main.dust[num106];
						var_2_4AF9_cp_0_cp_0.velocity.Y = var_2_4AF9_cp_0_cp_0.velocity.Y * 0.3f;
						num3 = num105;
					}
				}
				else
				{
					int num3;
					for (int num107 = 0; num107 < 2; num107 = num3 + 1)
					{
						int num108 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num108].noGravity = true;
						Dust var_2_4BA4_cp_0_cp_0 = Main.dust[num108];
						var_2_4BA4_cp_0_cp_0.velocity.X = var_2_4BA4_cp_0_cp_0.velocity.X * 0.3f;
						Dust var_2_4BC1_cp_0_cp_0 = Main.dust[num108];
						var_2_4BC1_cp_0_cp_0.velocity.Y = var_2_4BC1_cp_0_cp_0.velocity.Y * 0.3f;
						num3 = num107;
					}
				}
				if (this.type != 27 && this.type != 96 && this.type != 258)
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] >= 20f)
				{
					this.velocity.Y = this.velocity.Y + 0.2f;
				}
				if (this.type == 502)
				{
					this.rotation = this.velocity.ToRotation() + 1.57079637f;
					if (this.velocity.X != 0f)
					{
						this.spriteDirection = (this.direction = Math.Sign(this.velocity.X));
					}
				}
				else
				{
					this.rotation += 0.3f * (float)this.direction;
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
					return;
				}
			}
			else if (this.aiStyle == 9)
			{
				if (this.type == 491)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num109 = Main.rand.Next(3);
						if (num109 == 0)
						{
							num109 = 15;
						}
						else if (num109 == 1)
						{
							num109 = 57;
						}
						else
						{
							num109 = 58;
						}
						int num110 = Dust.NewDust(this.position, this.width, this.height, num109, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 255, default(Color), 0.7f);
						Dust dust = Main.dust[num110];
						dust.velocity *= 0.25f;
						Main.dust[num110].position = (Main.dust[num110].position + this.position) / 2f;
					}
				}
				else if (this.type == 34)
				{
					int num111 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 3.5f);
					Main.dust[num111].noGravity = true;
					Dust dust = Main.dust[num111];
					dust.velocity *= 1.4f;
					num111 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1.5f);
				}
				else if (this.type == 79)
				{
					if (this.soundDelay == 0 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 2f)
					{
						this.soundDelay = 10;
						Main.PlaySound(SoundID.Item9, this.position);
					}
					int num3;
					for (int num112 = 0; num112 < 1; num112 = num3 + 1)
					{
						int num113 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2.5f);
						Dust dust = Main.dust[num113];
						dust.velocity *= 0.1f;
						dust = Main.dust[num113];
						dust.velocity += this.velocity * 0.2f;
						Main.dust[num113].position.X = this.position.X + (float)(this.width / 2) + 4f + (float)Main.rand.Next(-2, 3);
						Main.dust[num113].position.Y = this.position.Y + (float)(this.height / 2) + (float)Main.rand.Next(-2, 3);
						Main.dust[num113].noGravity = true;
						num3 = num112;
					}
				}
				else
				{
					if (this.soundDelay == 0 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 2f)
					{
						this.soundDelay = 10;
						Main.PlaySound(SoundID.Item9, this.position);
					}
					int num114 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 15, 0f, 0f, 100, default(Color), 2f);
					Dust dust = Main.dust[num114];
					dust.velocity *= 0.3f;
					Main.dust[num114].position.X = this.position.X + (float)(this.width / 2) + 4f + (float)Main.rand.Next(-4, 5);
					Main.dust[num114].position.Y = this.position.Y + (float)(this.height / 2) + (float)Main.rand.Next(-4, 5);
					Main.dust[num114].noGravity = true;
				}
				if (Main.myPlayer == this.owner && this.ai[0] <= 0f)
				{
					if (Main.player[this.owner].channel)
					{
						float num115 = 12f;
						if (this.type == 16)
						{
							num115 = 15f;
						}
						if (this.type == 491)
						{
							num115 = 20f;
						}
						Vector2 vector10 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num116 = (float)Main.mouseX + Main.screenPosition.X - vector10.X;
						float num117 = (float)Main.mouseY + Main.screenPosition.Y - vector10.Y;
						if (Main.player[this.owner].gravDir == -1f)
						{
							num117 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector10.Y;
						}
						float num118 = (float)Math.Sqrt((double)(num116 * num116 + num117 * num117));
						num118 = (float)Math.Sqrt((double)(num116 * num116 + num117 * num117));
						if (this.ai[0] < 0f)
						{
							this.ai[0] += 1f;
						}
						if (this.type == 491 && num118 < 100f)
						{
							if (this.velocity.Length() < num115)
							{
								this.velocity *= 1.1f;
								if (this.velocity.Length() > num115)
								{
									this.velocity.Normalize();
									this.velocity *= num115;
								}
							}
							if (this.ai[0] == 0f)
							{
								this.ai[0] = -10f;
							}
						}
						else if (num118 > num115)
						{
							num118 = num115 / num118;
							num116 *= num118;
							num117 *= num118;
							int num119 = (int)(num116 * 1000f);
							int num120 = (int)(this.velocity.X * 1000f);
							int num121 = (int)(num117 * 1000f);
							int num122 = (int)(this.velocity.Y * 1000f);
							if (num119 != num120 || num121 != num122)
							{
								this.netUpdate = true;
							}
							if (this.type == 491)
							{
								Vector2 value5 = new Vector2(num116, num117);
								this.velocity = (this.velocity * 4f + value5) / 5f;
							}
							else
							{
								this.velocity.X = num116;
								this.velocity.Y = num117;
							}
						}
						else
						{
							int num123 = (int)(num116 * 1000f);
							int num124 = (int)(this.velocity.X * 1000f);
							int num125 = (int)(num117 * 1000f);
							int num126 = (int)(this.velocity.Y * 1000f);
							if (num123 != num124 || num125 != num126)
							{
								this.netUpdate = true;
							}
							this.velocity.X = num116;
							this.velocity.Y = num117;
						}
					}
					else if (this.ai[0] <= 0f)
					{
						this.netUpdate = true;
						if (this.type != 491)
						{
							float num127 = 12f;
							Vector2 vector11 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num128 = (float)Main.mouseX + Main.screenPosition.X - vector11.X;
							float num129 = (float)Main.mouseY + Main.screenPosition.Y - vector11.Y;
							if (Main.player[this.owner].gravDir == -1f)
							{
								num129 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector11.Y;
							}
							float num130 = (float)Math.Sqrt((double)(num128 * num128 + num129 * num129));
							if (num130 == 0f || this.ai[0] < 0f)
							{
								vector11 = new Vector2(Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2), Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2));
								num128 = this.position.X + (float)this.width * 0.5f - vector11.X;
								num129 = this.position.Y + (float)this.height * 0.5f - vector11.Y;
								num130 = (float)Math.Sqrt((double)(num128 * num128 + num129 * num129));
							}
							num130 = num127 / num130;
							num128 *= num130;
							num129 *= num130;
							this.velocity.X = num128;
							this.velocity.Y = num129;
							if (this.velocity.X == 0f && this.velocity.Y == 0f)
							{
								this.Kill();
							}
						}
						this.ai[0] = 1f;
					}
				}
				if (this.type == 491)
				{
					this.localAI[0] += 1f;
					if (this.ai[0] > 0f && this.localAI[0] > 15f)
					{
						this.tileCollide = false;
						Vector2 vector12 = Main.player[this.owner].Center - base.Center;
						if (vector12.Length() < 20f)
						{
							this.Kill();
						}
						vector12.Normalize();
						vector12 *= 25f;
						this.velocity = (this.velocity * 5f + vector12) / 6f;
					}
					if (this.ai[0] < 0f || (this.velocity.X == 0f && this.velocity.Y == 0f))
					{
						this.rotation += 0.3f;
					}
					else if (this.ai[0] > 0f)
					{
						this.rotation += 0.3f * (float)this.direction;
					}
					else
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				else if (this.type == 34)
				{
					this.rotation += 0.3f * (float)this.direction;
				}
				else if (this.velocity.X != 0f || this.velocity.Y != 0f)
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 2.355f;
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
					return;
				}
			}
			else if (this.aiStyle == 10)
			{
				if (this.type == 31 && this.ai[0] != 2f)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num131 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
						Dust var_2_598B_cp_0_cp_0 = Main.dust[num131];
						var_2_598B_cp_0_cp_0.velocity.X = var_2_598B_cp_0_cp_0.velocity.X * 0.4f;
					}
				}
				else if (this.type == 39)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num132 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 38, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
						Dust var_2_5A1F_cp_0_cp_0 = Main.dust[num132];
						var_2_5A1F_cp_0_cp_0.velocity.X = var_2_5A1F_cp_0_cp_0.velocity.X * 0.4f;
					}
				}
				else if (this.type >= 411 && this.type <= 414)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num133 = 9;
						if (this.type == 412 || this.type == 414)
						{
							num133 = 11;
						}
						if (this.type == 413)
						{
							num133 = 19;
						}
						int num134 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num133, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
						Main.dust[num134].noGravity = true;
						Dust dust = Main.dust[num134];
						dust.velocity -= this.velocity * 0.5f;
					}
				}
				else if (this.type == 40)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num135 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
						Dust dust = Main.dust[num135];
						dust.velocity *= 0.4f;
					}
				}
				else if (this.type == 42 || this.type == 31)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num136 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32, 0f, 0f, 0, default(Color), 1f);
						Dust var_2_5C3F_cp_0_cp_0 = Main.dust[num136];
						var_2_5C3F_cp_0_cp_0.velocity.X = var_2_5C3F_cp_0_cp_0.velocity.X * 0.4f;
					}
				}
				else if (this.type == 56 || this.type == 65)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num137 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0f, 0f, 0, default(Color), 1f);
						Dust var_2_5CCE_cp_0_cp_0 = Main.dust[num137];
						var_2_5CCE_cp_0_cp_0.velocity.X = var_2_5CCE_cp_0_cp_0.velocity.X * 0.4f;
					}
				}
				else if (this.type == 67 || this.type == 68)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num138 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 51, 0f, 0f, 0, default(Color), 1f);
						Dust var_2_5D5D_cp_0_cp_0 = Main.dust[num138];
						var_2_5D5D_cp_0_cp_0.velocity.X = var_2_5D5D_cp_0_cp_0.velocity.X * 0.4f;
					}
				}
				else if (this.type == 71)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num139 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 53, 0f, 0f, 0, default(Color), 1f);
						Dust var_2_5DE2_cp_0_cp_0 = Main.dust[num139];
						var_2_5DE2_cp_0_cp_0.velocity.X = var_2_5DE2_cp_0_cp_0.velocity.X * 0.4f;
					}
				}
				else if (this.type == 179)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num140 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 149, 0f, 0f, 0, default(Color), 1f);
						Dust var_2_5E6D_cp_0_cp_0 = Main.dust[num140];
						var_2_5E6D_cp_0_cp_0.velocity.X = var_2_5E6D_cp_0_cp_0.velocity.X * 0.4f;
					}
				}
				else if (this.type == 241 || this.type == 354)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num141 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36, 0f, 0f, 0, default(Color), 1f);
						Dust var_2_5F02_cp_0_cp_0 = Main.dust[num141];
						var_2_5F02_cp_0_cp_0.velocity.X = var_2_5F02_cp_0_cp_0.velocity.X * 0.4f;
					}
				}
				else if (this.type != 109 && Main.rand.Next(20) == 0)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0f, 0f, 0, default(Color), 1f);
				}
				this.tileCollide = true;
				this.localAI[1] = 0f;
				if (Main.myPlayer == this.owner && this.ai[0] == 0f)
				{
					this.tileCollide = false;
					if (Main.player[this.owner].channel)
					{
						this.localAI[1] = -1f;
						float num142 = 12f;
						Vector2 vector13 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num143 = (float)Main.mouseX + Main.screenPosition.X - vector13.X;
						float num144 = (float)Main.mouseY + Main.screenPosition.Y - vector13.Y;
						if (Main.player[this.owner].gravDir == -1f)
						{
							num144 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector13.Y;
						}
						float num145 = (float)Math.Sqrt((double)(num143 * num143 + num144 * num144));
						num145 = (float)Math.Sqrt((double)(num143 * num143 + num144 * num144));
						if (num145 > num142)
						{
							num145 = num142 / num145;
							num143 *= num145;
							num144 *= num145;
							if (num143 != this.velocity.X || num144 != this.velocity.Y)
							{
								this.netUpdate = true;
							}
							this.velocity.X = num143;
							this.velocity.Y = num144;
						}
						else
						{
							if (num143 != this.velocity.X || num144 != this.velocity.Y)
							{
								this.netUpdate = true;
							}
							this.velocity.X = num143;
							this.velocity.Y = num144;
						}
					}
					else
					{
						this.ai[0] = 1f;
						this.netUpdate = true;
					}
				}
				if (this.ai[0] == 1f && this.type != 109)
				{
					if (this.type == 42 || this.type == 65 || this.type == 68 || this.type == 354)
					{
						this.ai[1] += 1f;
						if (this.ai[1] >= 60f)
						{
							this.ai[1] = 60f;
							this.velocity.Y = this.velocity.Y + 0.2f;
						}
					}
					else
					{
						this.velocity.Y = this.velocity.Y + 0.41f;
					}
				}
				else if (this.ai[0] == 2f && this.type != 109)
				{
					this.velocity.Y = this.velocity.Y + 0.2f;
					if ((double)this.velocity.X < -0.04)
					{
						this.velocity.X = this.velocity.X + 0.04f;
					}
					else if ((double)this.velocity.X > 0.04)
					{
						this.velocity.X = this.velocity.X - 0.04f;
					}
					else
					{
						this.velocity.X = 0f;
					}
				}
				this.rotation += 0.1f;
				if (this.velocity.Y > 10f)
				{
					this.velocity.Y = 10f;
					return;
				}
			}
			else if (this.aiStyle == 11)
			{
				if (this.type == 72 || this.type == 86 || this.type == 87)
				{
					if (this.velocity.X > 0f)
					{
						this.spriteDirection = -1;
					}
					else if (this.velocity.X < 0f)
					{
						this.spriteDirection = 1;
					}
					this.rotation = this.velocity.X * 0.1f;
					this.frameCounter++;
					if (this.frameCounter >= 4)
					{
						this.frame++;
						this.frameCounter = 0;
					}
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
					if (Main.rand.Next(6) == 0)
					{
						int num146 = 56;
						if (this.type == 86)
						{
							num146 = 73;
						}
						else if (this.type == 87)
						{
							num146 = 74;
						}
						int num147 = Dust.NewDust(this.position, this.width, this.height, num146, 0f, 0f, 200, default(Color), 0.8f);
						Dust dust = Main.dust[num147];
						dust.velocity *= 0.3f;
						Main.dust[num147].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
					}
				}
				else
				{
					this.rotation += 0.02f;
				}
				if (Main.myPlayer == this.owner)
				{
					if (this.type == 72)
					{
						if (Main.player[Main.myPlayer].blueFairy)
						{
							this.timeLeft = 2;
						}
					}
					else if (this.type == 86)
					{
						if (Main.player[Main.myPlayer].redFairy)
						{
							this.timeLeft = 2;
						}
					}
					else if (this.type == 87)
					{
						if (Main.player[Main.myPlayer].greenFairy)
						{
							this.timeLeft = 2;
						}
					}
					else if (Main.player[Main.myPlayer].lightOrb)
					{
						this.timeLeft = 2;
					}
				}
				if (Main.player[this.owner].dead)
				{
					this.Kill();
					return;
				}
				float num148 = 3f;
				if (this.type == 72 || this.type == 86 || this.type == 87)
				{
					num148 = 3.75f;
				}
				Vector2 vector14 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num149 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector14.X;
				float num150 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector14.Y;
				int num151 = 70;
				if (this.type == 18)
				{
					if (Main.player[this.owner].controlUp)
					{
						num150 = Main.player[this.owner].position.Y - 40f - vector14.Y;
						num149 -= 6f;
						num151 = 4;
					}
					else if (Main.player[this.owner].controlDown)
					{
						num150 = Main.player[this.owner].position.Y + (float)Main.player[this.owner].height + 40f - vector14.Y;
						num149 -= 6f;
						num151 = 4;
					}
				}
				float num152 = (float)Math.Sqrt((double)(num149 * num149 + num150 * num150));
				num152 = (float)Math.Sqrt((double)(num149 * num149 + num150 * num150));
				if (this.type == 72 || this.type == 86 || this.type == 87)
				{
					num151 = 40;
				}
				if (num152 > 800f)
				{
					this.position.X = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - (float)(this.width / 2);
					this.position.Y = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - (float)(this.height / 2);
					return;
				}
				if (num152 > (float)num151)
				{
					num152 = num148 / num152;
					num149 *= num152;
					num150 *= num152;
					this.velocity.X = num149;
					this.velocity.Y = num150;
					return;
				}
				this.velocity.X = 0f;
				this.velocity.Y = 0f;
				return;
			}
			else if (this.aiStyle == 12)
			{
				if (this.type == 288 && this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlaySound(SoundID.Item17, this.position);
				}
				if (this.type == 280 || this.type == 288)
				{
					this.scale -= 0.002f;
					if (this.scale <= 0f)
					{
						this.Kill();
					}
					if (this.type == 288)
					{
						this.ai[0] = 4f;
					}
					if (this.ai[0] <= 3f)
					{
						this.ai[0] += 1f;
						return;
					}
					this.velocity.Y = this.velocity.Y + 0.075f;
					int num3;
					for (int num153 = 0; num153 < 3; num153 = num3 + 1)
					{
						float num154 = this.velocity.X / 3f * (float)num153;
						float num155 = this.velocity.Y / 3f * (float)num153;
						int num156 = 14;
						int num157 = Dust.NewDust(new Vector2(this.position.X + (float)num156, this.position.Y + (float)num156), this.width - num156 * 2, this.height - num156 * 2, 170, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num157].noGravity = true;
						Dust dust = Main.dust[num157];
						dust.velocity *= 0.1f;
						dust = Main.dust[num157];
						dust.velocity += this.velocity * 0.5f;
						Dust var_2_69A9_cp_0_cp_0 = Main.dust[num157];
						var_2_69A9_cp_0_cp_0.position.X = var_2_69A9_cp_0_cp_0.position.X - num154;
						Dust var_2_69C3_cp_0_cp_0 = Main.dust[num157];
						var_2_69C3_cp_0_cp_0.position.Y = var_2_69C3_cp_0_cp_0.position.Y - num155;
						num3 = num153;
					}
					if (Main.rand.Next(8) == 0)
					{
						int num158 = 16;
						int num159 = Dust.NewDust(new Vector2(this.position.X + (float)num158, this.position.Y + (float)num158), this.width - num158 * 2, this.height - num158 * 2, 170, 0f, 0f, 100, default(Color), 0.5f);
						Dust dust = Main.dust[num159];
						dust.velocity *= 0.25f;
						dust = Main.dust[num159];
						dust.velocity += this.velocity * 0.5f;
						return;
					}
				}
				else
				{
					this.scale -= 0.02f;
					if (this.scale <= 0f)
					{
						this.Kill();
					}
					if (this.ai[0] > 3f)
					{
						this.velocity.Y = this.velocity.Y + 0.2f;
						int num3;
						for (int num160 = 0; num160 < 1; num160 = num3 + 1)
						{
							for (int num161 = 0; num161 < 3; num161 = num3 + 1)
							{
								float num162 = this.velocity.X / 3f * (float)num161;
								float num163 = this.velocity.Y / 3f * (float)num161;
								int num164 = 6;
								int num165 = Dust.NewDust(new Vector2(this.position.X + (float)num164, this.position.Y + (float)num164), this.width - num164 * 2, this.height - num164 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
								Main.dust[num165].noGravity = true;
								Dust dust = Main.dust[num165];
								dust.velocity *= 0.3f;
								dust = Main.dust[num165];
								dust.velocity += this.velocity * 0.5f;
								Dust var_2_6C14_cp_0_cp_0 = Main.dust[num165];
								var_2_6C14_cp_0_cp_0.position.X = var_2_6C14_cp_0_cp_0.position.X - num162;
								Dust var_2_6C2E_cp_0_cp_0 = Main.dust[num165];
								var_2_6C2E_cp_0_cp_0.position.Y = var_2_6C2E_cp_0_cp_0.position.Y - num163;
								num3 = num161;
							}
							if (Main.rand.Next(8) == 0)
							{
								int num166 = 6;
								int num167 = Dust.NewDust(new Vector2(this.position.X + (float)num166, this.position.Y + (float)num166), this.width - num166 * 2, this.height - num166 * 2, 172, 0f, 0f, 100, default(Color), 0.75f);
								Dust dust = Main.dust[num167];
								dust.velocity *= 0.5f;
								dust = Main.dust[num167];
								dust.velocity += this.velocity * 0.5f;
							}
							num3 = num160;
						}
						return;
					}
					this.ai[0] += 1f;
					return;
				}
			}
			else if (this.aiStyle == 13)
			{
				if (Main.player[this.owner].dead)
				{
					this.Kill();
					return;
				}
				if (this.type != 481)
				{
					Main.player[this.owner].itemAnimation = 5;
					Main.player[this.owner].itemTime = 5;
				}
				if (this.alpha == 0)
				{
					if (this.position.X + (float)(this.width / 2) > Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2))
					{
						Main.player[this.owner].ChangeDir(1);
					}
					else
					{
						Main.player[this.owner].ChangeDir(-1);
					}
				}
				if (this.type == 481)
				{
					if (this.ai[0] == 0f)
					{
						this.extraUpdates = 0;
					}
					else
					{
						this.extraUpdates = 1;
					}
				}
				Vector2 vector15 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num168 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector15.X;
				float num169 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector15.Y;
				float num170 = (float)Math.Sqrt((double)(num168 * num168 + num169 * num169));
				if (this.ai[0] == 0f)
				{
					if (num170 > 700f)
					{
						this.ai[0] = 1f;
					}
					else if (this.type == 262 && num170 > 500f)
					{
						this.ai[0] = 1f;
					}
					else if (this.type == 271 && num170 > 200f)
					{
						this.ai[0] = 1f;
					}
					else if (this.type == 273 && num170 > 150f)
					{
						this.ai[0] = 1f;
					}
					else if (this.type == 481 && num170 > 350f)
					{
						this.ai[0] = 1f;
					}
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					this.ai[1] += 1f;
					if (this.ai[1] > 5f)
					{
						this.alpha = 0;
					}
					if (this.type == 262 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (this.type == 271 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (this.type == 273 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (this.type == 481 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (this.type == 404 && this.ai[1] > 8f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] >= 10f)
					{
						this.ai[1] = 15f;
						this.velocity.Y = this.velocity.Y + 0.3f;
					}
					if (this.type == 262 && this.velocity.X < 0f)
					{
						this.spriteDirection = -1;
					}
					else if (this.type == 262)
					{
						this.spriteDirection = 1;
					}
					if (this.type == 271 && this.velocity.X < 0f)
					{
						this.spriteDirection = -1;
						return;
					}
					if (this.type == 271)
					{
						this.spriteDirection = 1;
						return;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.tileCollide = false;
					this.rotation = (float)Math.Atan2((double)num169, (double)num168) - 1.57f;
					float num171 = 20f;
					if (this.type == 262)
					{
						num171 = 30f;
					}
					if (num170 < 50f)
					{
						this.Kill();
					}
					num170 = num171 / num170;
					num168 *= num170;
					num169 *= num170;
					this.velocity.X = num168;
					this.velocity.Y = num169;
					if (this.type == 262 && this.velocity.X < 0f)
					{
						this.spriteDirection = 1;
					}
					else if (this.type == 262)
					{
						this.spriteDirection = -1;
					}
					if (this.type == 271 && this.velocity.X < 0f)
					{
						this.spriteDirection = 1;
						return;
					}
					if (this.type == 271)
					{
						this.spriteDirection = -1;
						return;
					}
				}
			}
			else if (this.aiStyle == 14)
			{
				if (this.type == 473 && Main.netMode != 2)
				{
					this.localAI[0] += 1f;
					if (this.localAI[0] >= 10f)
					{
						this.localAI[0] = 0f;
						int num172 = 30;
						if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num172 * 16))
						{
							int num173 = (int)base.Center.X / 16;
							int num174 = (int)base.Center.Y / 16;
							int num3;
							for (int num175 = num173 - num172; num175 <= num173 + num172; num175 = num3 + 1)
							{
								for (int num176 = num174 - num172; num176 <= num174 + num172; num176 = num3 + 1)
								{
									if (Main.rand.Next(4) == 0)
									{
										Vector2 vector16 = new Vector2((float)(num173 - num175), (float)(num174 - num176));
										if (vector16.Length() < (float)num172 && num175 > 0 && num175 < Main.maxTilesX - 1 && num176 > 0 && num176 < Main.maxTilesY - 1 && Main.tile[num175, num176] != null && Main.tile[num175, num176].active())
										{
											bool flag3 = false;
											if (Main.tile[num175, num176].type == 185 && Main.tile[num175, num176].frameY == 18)
											{
												if (Main.tile[num175, num176].frameX >= 576 && Main.tile[num175, num176].frameX <= 882)
												{
													flag3 = true;
												}
											}
											else if (Main.tile[num175, num176].type == 186 && Main.tile[num175, num176].frameX >= 864 && Main.tile[num175, num176].frameX <= 1170)
											{
												flag3 = true;
											}
											if (flag3 || Main.tileSpelunker[(int)Main.tile[num175, num176].type] || (Main.tileAlch[(int)Main.tile[num175, num176].type] && Main.tile[num175, num176].type != 82))
											{
												int num177 = Dust.NewDust(new Vector2((float)(num175 * 16), (float)(num176 * 16)), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
												Main.dust[num177].fadeIn = 0.75f;
												Dust dust = Main.dust[num177];
												dust.velocity *= 0.1f;
												Main.dust[num177].noLight = true;
											}
										}
									}
									num3 = num176;
								}
								num3 = num175;
							}
						}
					}
				}
				if (this.type == 352)
				{
					if (this.localAI[1] == 0f)
					{
						this.localAI[1] = 1f;
					}
					this.alpha += (int)(25f * this.localAI[1]);
					if (this.alpha <= 0)
					{
						this.alpha = 0;
						this.localAI[1] = 1f;
					}
					else if (this.alpha >= 255)
					{
						this.alpha = 255;
						this.localAI[1] = -1f;
					}
					this.scale += this.localAI[1] * 0.01f;
				}
				if (this.type == 346)
				{
					if (this.localAI[0] == 0f)
					{
						this.localAI[0] = 1f;
						Main.PlaySound(SoundID.Item1, this.position);
					}
					this.frame = (int)this.ai[1];
					if (this.owner == Main.myPlayer && this.timeLeft == 1)
					{
						int num3;
						for (int num178 = 0; num178 < 5; num178 = num3 + 1)
						{
							float num179 = 10f;
							Vector2 vector17 = new Vector2(base.Center.X, base.Center.Y);
							float num180 = (float)Main.rand.Next(-20, 21);
							float num181 = (float)Main.rand.Next(-20, 0);
							float num182 = (float)Math.Sqrt((double)(num180 * num180 + num181 * num181));
							num182 = num179 / num182;
							num180 *= num182;
							num181 *= num182;
							num180 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num181 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							int num183 = Projectile.NewProjectile(vector17.X, vector17.Y, num180, num181, 347, 40, 0f, Main.myPlayer, 0f, this.ai[1]);
							num3 = num178;
						}
					}
				}
				if (this.type == 196)
				{
					int num184 = Main.rand.Next(1, 3);
					int num3;
					for (int num185 = 0; num185 < num184; num185 = num3 + 1)
					{
						int num186 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
						Dust dust = Main.dust[num186];
						dust.alpha += Main.rand.Next(100);
						dust = Main.dust[num186];
						dust.velocity *= 0.3f;
						Dust var_2_7851_cp_0_cp_0 = Main.dust[num186];
						var_2_7851_cp_0_cp_0.velocity.X = var_2_7851_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.025f;
						Dust var_2_787E_cp_0_cp_0 = Main.dust[num186];
						var_2_787E_cp_0_cp_0.velocity.Y = var_2_787E_cp_0_cp_0.velocity.Y - (0.4f + (float)Main.rand.Next(-3, 14) * 0.15f);
						Main.dust[num186].fadeIn = 1.25f + (float)Main.rand.Next(20) * 0.15f;
						num3 = num185;
					}
				}
				if (this.type == 53)
				{
					try
					{
						int num187 = (int)(this.position.X / 16f) - 1;
						int num188 = (int)((this.position.X + (float)this.width) / 16f) + 2;
						int num189 = (int)(this.position.Y / 16f) - 1;
						int num190 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
						if (num187 < 0)
						{
							num187 = 0;
						}
						if (num188 > Main.maxTilesX)
						{
							num188 = Main.maxTilesX;
						}
						if (num189 < 0)
						{
							num189 = 0;
						}
						if (num190 > Main.maxTilesY)
						{
							num190 = Main.maxTilesY;
						}
						int num3;
						for (int num191 = num187; num191 < num188; num191 = num3 + 1)
						{
							for (int num192 = num189; num192 < num190; num192 = num3 + 1)
							{
								if (Main.tile[num191, num192] != null && Main.tile[num191, num192].nactive() && (Main.tileSolid[(int)Main.tile[num191, num192].type] || (Main.tileSolidTop[(int)Main.tile[num191, num192].type] && Main.tile[num191, num192].frameY == 0)))
								{
									Vector2 vector18;
									vector18.X = (float)(num191 * 16);
									vector18.Y = (float)(num192 * 16);
									if (this.position.X + (float)this.width > vector18.X && this.position.X < vector18.X + 16f && this.position.Y + (float)this.height > vector18.Y && this.position.Y < vector18.Y + 16f)
									{
										this.velocity.X = 0f;
										this.velocity.Y = -0.2f;
									}
								}
								num3 = num192;
							}
							num3 = num191;
						}
					}
					catch
					{
					}
				}
				if (this.type == 277)
				{
					if (this.alpha > 0)
					{
						this.alpha -= 30;
						if (this.alpha < 0)
						{
							this.alpha = 0;
						}
					}
					if (Main.expertMode)
					{
						float scaleFactor = 12f;
						int num193 = (int)Player.FindClosest(base.Center, 1, 1);
						Vector2 vector19 = Main.player[num193].Center - base.Center;
						vector19.Normalize();
						vector19 *= scaleFactor;
						int num194 = 200;
						this.velocity.X = (this.velocity.X * (float)(num194 - 1) + vector19.X) / (float)num194;
						if (this.velocity.Length() > 16f)
						{
							this.velocity.Normalize();
							this.velocity *= 16f;
						}
					}
				}
				if (this.type == 261 || this.type == 277)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 15f)
					{
						this.ai[0] = 15f;
						if (this.velocity.Y == 0f && this.velocity.X != 0f)
						{
							this.velocity.X = this.velocity.X * 0.97f;
							if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
							{
								this.Kill();
							}
						}
						this.velocity.Y = this.velocity.Y + 0.2f;
					}
					this.rotation += this.velocity.X * 0.05f;
				}
				else if (this.type == 378)
				{
					if (this.localAI[0] == 0f)
					{
						Main.PlaySound(SoundID.Item17, this.position);
						this.localAI[0] += 1f;
					}
					Rectangle rectangle2 = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
					int num3;
					for (int num195 = 0; num195 < 200; num195 = num3 + 1)
					{
						if (Main.npc[num195].CanBeChasedBy(this, true))
						{
							Rectangle value6 = new Rectangle((int)Main.npc[num195].position.X, (int)Main.npc[num195].position.Y, Main.npc[num195].width, Main.npc[num195].height);
							if (rectangle2.Intersects(value6))
							{
								this.Kill();
								return;
							}
						}
						num3 = num195;
					}
					this.ai[0] += 1f;
					if (this.ai[0] > 10f)
					{
						this.ai[0] = 90f;
						if (this.velocity.Y == 0f && this.velocity.X != 0f)
						{
							this.velocity.X = this.velocity.X * 0.96f;
							if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
							{
								this.Kill();
							}
						}
						this.velocity.Y = this.velocity.Y + 0.2f;
					}
					this.rotation += this.velocity.X * 0.1f;
				}
				else if (this.type == 483)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 5f)
					{
						if (this.owner == Main.myPlayer && this.ai[0] > (float)Main.rand.Next(20, 130))
						{
							this.Kill();
						}
						if (this.velocity.Y == 0f && this.velocity.X != 0f)
						{
							this.velocity.X = this.velocity.X * 0.97f;
							if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
							{
								this.velocity.X = 0f;
								this.netUpdate = true;
							}
						}
						this.velocity.Y = this.velocity.Y + 0.3f;
						this.velocity.X = this.velocity.X * 0.99f;
					}
					this.rotation += this.velocity.X * 0.05f;
				}
				else if (this.type == 538)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 60f || this.velocity.Y >= 0f)
					{
						this.alpha += 6;
						this.velocity *= 0.5f;
					}
					else if (this.ai[0] > 5f)
					{
						this.velocity.Y = this.velocity.Y + 0.1f;
						this.velocity.X = this.velocity.X * 1.025f;
						this.alpha -= 23;
						this.scale = 0.8f * (255f - (float)this.alpha) / 255f;
						if (this.alpha < 0)
						{
							this.alpha = 0;
						}
					}
					if (this.alpha >= 255 && this.ai[0] > 5f)
					{
						this.Kill();
						return;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 5f)
					{
						this.ai[0] = 5f;
						if (this.velocity.Y == 0f && this.velocity.X != 0f)
						{
							this.velocity.X = this.velocity.X * 0.97f;
							if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
							{
								this.velocity.X = 0f;
								this.netUpdate = true;
							}
						}
						this.velocity.Y = this.velocity.Y + 0.2f;
					}
					this.rotation += this.velocity.X * 0.1f;
				}
				if (this.type == 538)
				{
					if (this.localAI[1] == 0f)
					{
						this.localAI[1] = 1f;
						Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 7, 1f, 0f);
					}
					if (this.velocity.Y < 0f && this.ai[0] < 60f)
					{
						if (Main.rand.Next(4) == 0)
						{
							int num196 = Dust.NewDust(this.position, this.width, this.height, 180, 0f, 0f, 100, default(Color), 1f);
							Main.dust[num196].position = base.Center;
							Dust dust = Main.dust[num196];
							dust.scale += (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num196].noGravity = true;
							Dust var_2_82E0_cp_0_cp_0 = Main.dust[num196];
							var_2_82E0_cp_0_cp_0.velocity.Y = var_2_82E0_cp_0_cp_0.velocity.Y - 2f;
						}
						if (Main.rand.Next(6) == 0)
						{
							int num197 = Dust.NewDust(this.position, this.width, this.height, 176, 0f, 0f, 100, default(Color), 1f);
							Main.dust[num197].position = base.Center;
							Dust dust = Main.dust[num197];
							dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num197].noGravity = true;
							dust = Main.dust[num197];
							dust.velocity *= 0.1f;
						}
					}
				}
				if (this.type == 450)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						Main.PlaySound(SoundID.Item13, this.position);
					}
					if (Main.rand.Next(2) == 0)
					{
						int num198 = Dust.NewDust(this.position, this.width, this.height, 228, 0f, 0f, 100, default(Color), 1f);
						Dust var_2_843F_cp_0_cp_0 = Main.dust[num198];
						var_2_843F_cp_0_cp_0.position.X = var_2_843F_cp_0_cp_0.position.X - 2f;
						Dust var_2_845C_cp_0_cp_0 = Main.dust[num198];
						var_2_845C_cp_0_cp_0.position.Y = var_2_845C_cp_0_cp_0.position.Y + 2f;
						Dust dust = Main.dust[num198];
						dust.scale += (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num198].noGravity = true;
						Dust var_2_84B3_cp_0_cp_0 = Main.dust[num198];
						var_2_84B3_cp_0_cp_0.velocity.Y = var_2_84B3_cp_0_cp_0.velocity.Y - 2f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num199 = Dust.NewDust(this.position, this.width, this.height, 228, 0f, 0f, 100, default(Color), 1f);
						Dust var_2_8518_cp_0_cp_0 = Main.dust[num199];
						var_2_8518_cp_0_cp_0.position.X = var_2_8518_cp_0_cp_0.position.X - 2f;
						Dust var_2_8535_cp_0_cp_0 = Main.dust[num199];
						var_2_8535_cp_0_cp_0.position.Y = var_2_8535_cp_0_cp_0.position.Y + 2f;
						Dust dust = Main.dust[num199];
						dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num199].noGravity = true;
						dust = Main.dust[num199];
						dust.velocity *= 0.1f;
					}
					int num3 = this.frameCounter + 1;
					this.frameCounter = num3;
					if (num3 >= 3)
					{
						this.frameCounter = 0;
						num3 = this.frame + 1;
						this.frame = num3;
						if (num3 >= 5)
						{
							this.frame = 0;
						}
					}
					if ((double)this.velocity.Y < 0.25 && (double)this.velocity.Y > 0.15)
					{
						this.velocity.X = this.velocity.X * 0.8f;
					}
					this.rotation = -this.velocity.X * 0.05f;
				}
				if (this.type == 480)
				{
					this.alpha = 255;
					int num200 = Dust.NewDust(this.position, this.width, this.height, 75, 0f, 0f, 100, default(Color), 1f);
					Dust var_2_869C_cp_0_cp_0 = Main.dust[num200];
					var_2_869C_cp_0_cp_0.position.X = var_2_869C_cp_0_cp_0.position.X - 2f;
					Dust var_2_86B9_cp_0_cp_0 = Main.dust[num200];
					var_2_86B9_cp_0_cp_0.position.Y = var_2_86B9_cp_0_cp_0.position.Y + 2f;
					Dust dust = Main.dust[num200];
					dust.scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num200].noGravity = true;
					Dust var_2_8710_cp_0_cp_0 = Main.dust[num200];
					var_2_8710_cp_0_cp_0.velocity.Y = var_2_8710_cp_0_cp_0.velocity.Y - 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num201 = Dust.NewDust(this.position, this.width, this.height, 75, 0f, 0f, 100, default(Color), 1f);
						Dust var_2_8772_cp_0_cp_0 = Main.dust[num201];
						var_2_8772_cp_0_cp_0.position.X = var_2_8772_cp_0_cp_0.position.X - 2f;
						Dust var_2_878F_cp_0_cp_0 = Main.dust[num201];
						var_2_878F_cp_0_cp_0.position.Y = var_2_878F_cp_0_cp_0.position.Y + 2f;
						dust = Main.dust[num201];
						dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num201].noGravity = true;
						dust = Main.dust[num201];
						dust.velocity *= 0.1f;
					}
				}
				if ((this.type >= 326 && this.type <= 328) || (this.type >= 400 && this.type <= 402))
				{
					if (this.wet)
					{
						this.Kill();
					}
					if (this.ai[1] == 0f && this.type >= 326 && this.type <= 328)
					{
						this.ai[1] = 1f;
						Main.PlaySound(SoundID.Item13, this.position);
					}
					int num202 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
					Dust var_2_88D1_cp_0_cp_0 = Main.dust[num202];
					var_2_88D1_cp_0_cp_0.position.X = var_2_88D1_cp_0_cp_0.position.X - 2f;
					Dust var_2_88EE_cp_0_cp_0 = Main.dust[num202];
					var_2_88EE_cp_0_cp_0.position.Y = var_2_88EE_cp_0_cp_0.position.Y + 2f;
					Dust dust = Main.dust[num202];
					dust.scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num202].noGravity = true;
					Dust var_2_8945_cp_0_cp_0 = Main.dust[num202];
					var_2_8945_cp_0_cp_0.velocity.Y = var_2_8945_cp_0_cp_0.velocity.Y - 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num203 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
						Dust var_2_89A6_cp_0_cp_0 = Main.dust[num203];
						var_2_89A6_cp_0_cp_0.position.X = var_2_89A6_cp_0_cp_0.position.X - 2f;
						Dust var_2_89C3_cp_0_cp_0 = Main.dust[num203];
						var_2_89C3_cp_0_cp_0.position.Y = var_2_89C3_cp_0_cp_0.position.Y + 2f;
						dust = Main.dust[num203];
						dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num203].noGravity = true;
						dust = Main.dust[num203];
						dust.velocity *= 0.1f;
					}
					if ((double)this.velocity.Y < 0.25 && (double)this.velocity.Y > 0.15)
					{
						this.velocity.X = this.velocity.X * 0.8f;
					}
					this.rotation = -this.velocity.X * 0.05f;
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
					return;
				}
			}
			else if (this.aiStyle == 15)
			{
				if (this.type == 25)
				{
					if (Main.rand.Next(15) == 0)
					{
						Dust.NewDust(this.position, this.width, this.height, 14, 0f, 0f, 150, default(Color), 1.3f);
					}
				}
				else if (this.type == 26)
				{
					int num204 = Dust.NewDust(this.position, this.width, this.height, 172, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, default(Color), 1.5f);
					Main.dust[num204].noGravity = true;
					Dust var_2_8B9F_cp_0_cp_0 = Main.dust[num204];
					var_2_8B9F_cp_0_cp_0.velocity.X = var_2_8B9F_cp_0_cp_0.velocity.X / 2f;
					Dust var_2_8BC0_cp_0_cp_0 = Main.dust[num204];
					var_2_8BC0_cp_0_cp_0.velocity.Y = var_2_8BC0_cp_0_cp_0.velocity.Y / 2f;
				}
				else if (this.type == 35)
				{
					int num205 = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, default(Color), 3f);
					Main.dust[num205].noGravity = true;
					Dust var_2_8C55_cp_0_cp_0 = Main.dust[num205];
					var_2_8C55_cp_0_cp_0.velocity.X = var_2_8C55_cp_0_cp_0.velocity.X * 2f;
					Dust var_2_8C76_cp_0_cp_0 = Main.dust[num205];
					var_2_8C76_cp_0_cp_0.velocity.Y = var_2_8C76_cp_0_cp_0.velocity.Y * 2f;
				}
				else if (this.type == 154)
				{
					int num206 = Dust.NewDust(this.position, this.width, this.height, 115, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 140, default(Color), 1.5f);
					Main.dust[num206].noGravity = true;
					Dust dust = Main.dust[num206];
					dust.velocity *= 0.25f;
				}
				if (Main.player[this.owner].dead)
				{
					this.Kill();
					return;
				}
				Main.player[this.owner].itemAnimation = 10;
				Main.player[this.owner].itemTime = 10;
				if (this.position.X + (float)(this.width / 2) > Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2))
				{
					Main.player[this.owner].ChangeDir(1);
					this.direction = 1;
				}
				else
				{
					Main.player[this.owner].ChangeDir(-1);
					this.direction = -1;
				}
				Vector2 mountedCenter2 = Main.player[this.owner].MountedCenter;
				Vector2 vector20 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num207 = mountedCenter2.X - vector20.X;
				float num208 = mountedCenter2.Y - vector20.Y;
				float num209 = (float)Math.Sqrt((double)(num207 * num207 + num208 * num208));
				if (this.ai[0] == 0f)
				{
					float num210 = 160f;
					if (this.type == 63)
					{
						num210 *= 1.5f;
					}
					if (this.type == 247)
					{
						num210 *= 1.5f;
					}
					this.tileCollide = true;
					if (num209 > num210)
					{
						this.ai[0] = 1f;
						this.netUpdate = true;
					}
					else if (!Main.player[this.owner].channel)
					{
						if (this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.9f;
						}
						this.velocity.Y = this.velocity.Y + 1f;
						this.velocity.X = this.velocity.X * 0.9f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					float num211 = 14f / Main.player[this.owner].meleeSpeed;
					float num212 = 0.9f / Main.player[this.owner].meleeSpeed;
					float num213 = 300f;
					if (this.type == 63)
					{
						num213 *= 1.5f;
						num211 *= 1.5f;
						num212 *= 1.5f;
					}
					if (this.type == 247)
					{
						num213 *= 1.5f;
						num211 = 15.9f;
						num212 *= 2f;
					}
					float num214 = Math.Abs(num207);
					float num215 = Math.Abs(num208);
					if (this.ai[1] == 1f)
					{
						this.tileCollide = false;
					}
					if (!Main.player[this.owner].channel || num209 > num213 || !this.tileCollide)
					{
						this.ai[1] = 1f;
						if (this.tileCollide)
						{
							this.netUpdate = true;
						}
						this.tileCollide = false;
						if (num209 < 20f)
						{
							this.Kill();
						}
					}
					if (!this.tileCollide)
					{
						num212 *= 2f;
					}
					int num216 = 60;
					if (this.type == 247)
					{
						num216 = 100;
					}
					if (num209 > (float)num216 || !this.tileCollide)
					{
						num209 = num211 / num209;
						num207 *= num209;
						num208 *= num209;
						Vector2 vector21 = new Vector2(this.velocity.X, this.velocity.Y);
						float num217 = num207 - this.velocity.X;
						float num218 = num208 - this.velocity.Y;
						float num219 = (float)Math.Sqrt((double)(num217 * num217 + num218 * num218));
						num219 = num212 / num219;
						num217 *= num219;
						num218 *= num219;
						this.velocity.X = this.velocity.X * 0.98f;
						this.velocity.Y = this.velocity.Y * 0.98f;
						this.velocity.X = this.velocity.X + num217;
						this.velocity.Y = this.velocity.Y + num218;
					}
					else
					{
						if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 6f)
						{
							this.velocity.X = this.velocity.X * 0.96f;
							this.velocity.Y = this.velocity.Y + 0.2f;
						}
						if (Main.player[this.owner].velocity.X == 0f)
						{
							this.velocity.X = this.velocity.X * 0.96f;
						}
					}
				}
				if (this.type != 247)
				{
					this.rotation = (float)Math.Atan2((double)num208, (double)num207) - this.velocity.X * 0.1f;
					return;
				}
				if (this.velocity.X < 0f)
				{
					this.rotation -= (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f;
				}
				else
				{
					this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f;
				}
				float num220 = this.position.X;
				float num221 = this.position.Y;
				float num222 = 600f;
				bool flag4 = false;
				if (this.owner == Main.myPlayer)
				{
					this.localAI[1] += 1f;
					if (this.localAI[1] > 20f)
					{
						this.localAI[1] = 20f;
						int num3;
						for (int num223 = 0; num223 < 200; num223 = num3 + 1)
						{
							if (Main.npc[num223].CanBeChasedBy(this, false))
							{
								float num224 = Main.npc[num223].position.X + (float)(Main.npc[num223].width / 2);
								float num225 = Main.npc[num223].position.Y + (float)(Main.npc[num223].height / 2);
								float num226 = Math.Abs(this.position.X + (float)(this.width / 2) - num224) + Math.Abs(this.position.Y + (float)(this.height / 2) - num225);
								if (num226 < num222 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num223].position, Main.npc[num223].width, Main.npc[num223].height))
								{
									num222 = num226;
									num220 = num224;
									num221 = num225;
									flag4 = true;
								}
							}
							num3 = num223;
						}
					}
				}
				if (flag4)
				{
					this.localAI[1] = 0f;
					float num227 = 14f;
					vector20 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					num207 = num220 - vector20.X;
					num208 = num221 - vector20.Y;
					num209 = (float)Math.Sqrt((double)(num207 * num207 + num208 * num208));
					num209 = num227 / num209;
					num207 *= num209;
					num208 *= num209;
					int num228 = Projectile.NewProjectile(vector20.X, vector20.Y, num207, num208, 248, (int)((double)this.damage / 1.5), this.knockBack / 2f, Main.myPlayer, 0f, 0f);
					return;
				}
			}
			else if (this.aiStyle == 16)
			{
				if (this.type == 108 || this.type == 164)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 3f)
					{
						this.Kill();
					}
				}
				if (this.type == 37 || this.type == 397 || this.type == 470 || this.type == 519)
				{
					try
					{
						int num229 = (int)(this.position.X / 16f) - 1;
						int num230 = (int)((this.position.X + (float)this.width) / 16f) + 2;
						int num231 = (int)(this.position.Y / 16f) - 1;
						int num232 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
						if (num229 < 0)
						{
							num229 = 0;
						}
						if (num230 > Main.maxTilesX)
						{
							num230 = Main.maxTilesX;
						}
						if (num231 < 0)
						{
							num231 = 0;
						}
						if (num232 > Main.maxTilesY)
						{
							num232 = Main.maxTilesY;
						}
						int num3;
						for (int num233 = num229; num233 < num230; num233 = num3 + 1)
						{
							for (int num234 = num231; num234 < num232; num234 = num3 + 1)
							{
								if (Main.tile[num233, num234] != null && Main.tile[num233, num234].nactive() && (Main.tileSolid[(int)Main.tile[num233, num234].type] || (Main.tileSolidTop[(int)Main.tile[num233, num234].type] && Main.tile[num233, num234].frameY == 0)))
								{
									Vector2 vector22;
									vector22.X = (float)(num233 * 16);
									vector22.Y = (float)(num234 * 16);
									if (this.position.X + (float)this.width - 4f > vector22.X && this.position.X + 4f < vector22.X + 16f && this.position.Y + (float)this.height - 4f > vector22.Y && this.position.Y + 4f < vector22.Y + 16f)
									{
										this.velocity.X = 0f;
										this.velocity.Y = -0.2f;
									}
								}
								num3 = num234;
							}
							num3 = num233;
						}
					}
					catch
					{
					}
				}
				if (this.type == 519)
				{
					this.localAI[1] += 1f;
					float num235 = 180f - this.localAI[1];
					if (num235 < 0f)
					{
						num235 = 0f;
					}
					this.frameCounter++;
					if (num235 < 15f)
					{
						this.frameCounter++;
					}
					if ((float)this.frameCounter >= (num235 / 10f + 6f) / 2f)
					{
						this.frame++;
						this.frameCounter = 0;
						if (this.frame >= Main.projFrames[this.type])
						{
							this.frame = 0;
						}
					}
				}
				if (this.type == 681 && this.localAI[1] == 0f)
				{
					this.localAI[1] = 1f;
				}
				if (this.type == 102)
				{
					if (this.velocity.Y > 10f)
					{
						this.velocity.Y = 10f;
					}
					if (this.localAI[0] == 0f)
					{
						this.localAI[0] = 1f;
						Main.PlaySound(SoundID.Item10, this.position);
					}
					this.frameCounter++;
					if (this.frameCounter > 3)
					{
						this.frame++;
						this.frameCounter = 0;
					}
					if (this.frame > 1)
					{
						this.frame = 0;
					}
					if (this.velocity.Y == 0f)
					{
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 128;
						this.height = 128;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.damage = 40;
						this.knockBack = 8f;
						this.timeLeft = 3;
						this.netUpdate = true;
					}
				}
				if (this.type == 303 && this.timeLeft <= 3 && this.hostile)
				{
					this.position.X = this.position.X + (float)(this.width / 2);
					this.position.Y = this.position.Y + (float)(this.height / 2);
					this.width = 128;
					this.height = 128;
					this.position.X = this.position.X - (float)(this.width / 2);
					this.position.Y = this.position.Y - (float)(this.height / 2);
				}
				if (this.owner == Main.myPlayer && this.timeLeft <= 3)
				{
					this.tileCollide = false;
					this.ai[1] = 0f;
					this.alpha = 255;
					if (this.type == 28 || this.type == 37 || this.type == 75 || this.type == 516 || this.type == 519)
					{
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 128;
						this.height = 128;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.damage = 100;
						this.knockBack = 8f;
					}
					else if (this.type == 29 || this.type == 470 || this.type == 637)
					{
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 250;
						this.height = 250;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.damage = 250;
						this.knockBack = 10f;
					}
					else if (this.type == 30 || this.type == 397 || this.type == 517 || this.type == 588)
					{
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 128;
						this.height = 128;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.knockBack = 8f;
					}
					else if (this.type == 681)
					{
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 80;
						this.height = 80;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.knockBack = 8f;
					}
					else if (this.type == 133 || this.type == 134 || this.type == 135 || this.type == 136 || this.type == 137 || this.type == 138 || this.type == 338 || this.type == 339)
					{
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 128;
						this.height = 128;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.knockBack = 8f;
					}
					else if (this.type == 139 || this.type == 140 || this.type == 141 || this.type == 142 || this.type == 143 || this.type == 144 || this.type == 340 || this.type == 341)
					{
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 200;
						this.height = 200;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.knockBack = 10f;
					}
				}
				else
				{
					if (this.type != 30 && this.type != 517 && this.type != 681 && this.type != 588 && this.type != 397 && this.type != 108 && this.type != 133 && this.type != 134 && this.type != 135 && this.type != 136 && this.type != 137 && this.type != 138 && this.type != 139 && this.type != 140 && this.type != 141 && this.type != 142 && this.type != 143 && this.type != 144 && this.type != 164 && this.type != 303 && this.type < 338 && this.type < 341)
					{
						this.damage = 0;
					}
					if (this.type == 338 || this.type == 339 || this.type == 340 || this.type == 341)
					{
						this.localAI[1] += 1f;
						if (this.localAI[1] > 6f)
						{
							this.alpha = 0;
						}
						else
						{
							this.alpha = (int)(255f - 42f * this.localAI[1]) + 100;
							if (this.alpha > 255)
							{
								this.alpha = 255;
							}
						}
						int num3;
						for (int num236 = 0; num236 < 2; num236 = num3 + 1)
						{
							float num237 = 0f;
							float num238 = 0f;
							if (num236 == 1)
							{
								num237 = this.velocity.X * 0.5f;
								num238 = this.velocity.Y * 0.5f;
							}
							if (this.localAI[1] > 9f)
							{
								if (Main.rand.Next(2) == 0)
								{
									int num239 = Dust.NewDust(new Vector2(this.position.X + 3f + num237, this.position.Y + 3f + num238) - this.velocity * 0.5f, this.width - 8, this.height - 8, 6, 0f, 0f, 100, default(Color), 1f);
									Dust dust = Main.dust[num239];
									dust.scale *= 1.4f + (float)Main.rand.Next(10) * 0.1f;
									dust = Main.dust[num239];
									dust.velocity *= 0.2f;
									Main.dust[num239].noGravity = true;
								}
								if (Main.rand.Next(2) == 0)
								{
									int num240 = Dust.NewDust(new Vector2(this.position.X + 3f + num237, this.position.Y + 3f + num238) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
									Main.dust[num240].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.1f;
									Dust dust = Main.dust[num240];
									dust.velocity *= 0.05f;
								}
							}
							num3 = num236;
						}
						float num241 = this.position.X;
						float num242 = this.position.Y;
						float num243 = 600f;
						bool flag5 = false;
						this.ai[0] += 1f;
						if (this.ai[0] > 30f)
						{
							this.ai[0] = 30f;
							for (int num244 = 0; num244 < 200; num244 = num3 + 1)
							{
								if (Main.npc[num244].CanBeChasedBy(this, false))
								{
									float num245 = Main.npc[num244].position.X + (float)(Main.npc[num244].width / 2);
									float num246 = Main.npc[num244].position.Y + (float)(Main.npc[num244].height / 2);
									float num247 = Math.Abs(this.position.X + (float)(this.width / 2) - num245) + Math.Abs(this.position.Y + (float)(this.height / 2) - num246);
									if (num247 < num243 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num244].position, Main.npc[num244].width, Main.npc[num244].height))
									{
										num243 = num247;
										num241 = num245;
										num242 = num246;
										flag5 = true;
									}
								}
								num3 = num244;
							}
						}
						if (!flag5)
						{
							num241 = this.position.X + (float)(this.width / 2) + this.velocity.X * 100f;
							num242 = this.position.Y + (float)(this.height / 2) + this.velocity.Y * 100f;
						}
						float num248 = 16f;
						Vector2 vector23 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num249 = num241 - vector23.X;
						float num250 = num242 - vector23.Y;
						float num251 = (float)Math.Sqrt((double)(num249 * num249 + num250 * num250));
						num251 = num248 / num251;
						num249 *= num251;
						num250 *= num251;
						this.velocity.X = (this.velocity.X * 11f + num249) / 12f;
						this.velocity.Y = (this.velocity.Y * 11f + num250) / 12f;
					}
					else if (this.type == 134 || this.type == 137 || this.type == 140 || this.type == 143 || this.type == 303)
					{
						if (Math.Abs(this.velocity.X) >= 8f || Math.Abs(this.velocity.Y) >= 8f)
						{
							int num3;
							for (int num252 = 0; num252 < 2; num252 = num3 + 1)
							{
								float num253 = 0f;
								float num254 = 0f;
								if (num252 == 1)
								{
									num253 = this.velocity.X * 0.5f;
									num254 = this.velocity.Y * 0.5f;
								}
								int num255 = Dust.NewDust(new Vector2(this.position.X + 3f + num253, this.position.Y + 3f + num254) - this.velocity * 0.5f, this.width - 8, this.height - 8, 6, 0f, 0f, 100, default(Color), 1f);
								Dust dust = Main.dust[num255];
								dust.scale *= 2f + (float)Main.rand.Next(10) * 0.1f;
								dust = Main.dust[num255];
								dust.velocity *= 0.2f;
								Main.dust[num255].noGravity = true;
								num255 = Dust.NewDust(new Vector2(this.position.X + 3f + num253, this.position.Y + 3f + num254) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
								Main.dust[num255].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
								dust = Main.dust[num255];
								dust.velocity *= 0.05f;
								num3 = num252;
							}
						}
						if (Math.Abs(this.velocity.X) < 15f && Math.Abs(this.velocity.Y) < 15f)
						{
							this.velocity *= 1.1f;
						}
					}
					else if (this.type == 133 || this.type == 136 || this.type == 139 || this.type == 142)
					{
						int num256 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
						Dust dust = Main.dust[num256];
						dust.scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
						dust = Main.dust[num256];
						dust.velocity *= 0.2f;
						Main.dust[num256].noGravity = true;
					}
					else if (this.type == 135 || this.type == 138 || this.type == 141 || this.type == 144)
					{
						if ((double)this.velocity.X > -0.2 && (double)this.velocity.X < 0.2 && (double)this.velocity.Y > -0.2 && (double)this.velocity.Y < 0.2)
						{
							this.alpha += 2;
							if (this.alpha > 200)
							{
								this.alpha = 200;
							}
						}
						else
						{
							this.alpha = 0;
							int num257 = Dust.NewDust(new Vector2(this.position.X + 3f, this.position.Y + 3f) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, 0f, 0f, 100, default(Color), 1f);
							Dust dust = Main.dust[num257];
							dust.scale *= 1.6f + (float)Main.rand.Next(5) * 0.1f;
							dust = Main.dust[num257];
							dust.velocity *= 0.05f;
							Main.dust[num257].noGravity = true;
						}
					}
					else if (this.type != 30 && this.type != 517 && this.type != 681 && this.type != 397 && this.type != 519 && this.type != 588 && Main.rand.Next(2) == 0)
					{
						int num258 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num258].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num258].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num258].noGravity = true;
						Main.dust[num258].position = base.Center + new Vector2(0f, (float)(-(float)this.height / 2)).RotatedBy((double)this.rotation, default(Vector2)) * 1.1f;
						Main.rand.Next(2);
						num258 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num258].scale = 1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num258].noGravity = true;
						Main.dust[num258].position = base.Center + new Vector2(0f, (float)(-(float)this.height / 2 - 6)).RotatedBy((double)this.rotation, default(Vector2)) * 1.1f;
					}
					else if (this.type == 681)
					{
						Dust dust2 = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
						dust2.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
						dust2.noGravity = true;
						dust2.position = base.Center + new Vector2((float)(6 * Math.Sign(this.velocity.X)), (float)(-(float)this.height / 2 - 6)).RotatedBy((double)this.rotation, default(Vector2)) * 1.1f;
					}
				}
				this.ai[0] += 1f;
				if (this.type == 338 || this.type == 339 || this.type == 340 || this.type == 341)
				{
					if (this.velocity.X < 0f)
					{
						this.spriteDirection = -1;
						this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X)) - 1.57f;
					}
					else
					{
						this.spriteDirection = 1;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				else if (this.type == 134 || this.type == 137 || this.type == 140 || this.type == 143 || this.type == 303)
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				}
				else if (this.type == 135 || this.type == 138 || this.type == 141 || this.type == 144)
				{
					this.velocity.Y = this.velocity.Y + 0.2f;
					this.velocity *= 0.97f;
					if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
					{
						this.velocity.X = 0f;
					}
					if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
					{
						this.velocity.Y = 0f;
					}
				}
				else if (this.type == 133 || this.type == 136 || this.type == 139 || this.type == 142)
				{
					if (this.ai[0] > 15f)
					{
						if (this.velocity.Y == 0f)
						{
							this.velocity.X = this.velocity.X * 0.95f;
						}
						this.velocity.Y = this.velocity.Y + 0.2f;
					}
				}
				else if (((this.type == 30 || this.type == 397 || this.type == 517 || this.type == 681 || this.type == 588) && this.ai[0] > 10f) || (this.type != 30 && this.type != 397 && this.type != 517 && this.type != 588 && this.ai[0] > 5f))
				{
					this.ai[0] = 10f;
					if (this.velocity.Y == 0f && this.velocity.X != 0f)
					{
						this.velocity.X = this.velocity.X * 0.97f;
						if (this.type == 29 || this.type == 470 || this.type == 637)
						{
							this.velocity.X = this.velocity.X * 0.99f;
						}
						if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
						{
							this.velocity.X = 0f;
							this.netUpdate = true;
						}
					}
					this.velocity.Y = this.velocity.Y + 0.2f;
				}
				if (this.type == 519)
				{
					this.rotation += this.velocity.X * 0.06f;
					return;
				}
				if (this.type != 134 && this.type != 137 && this.type != 140 && this.type != 143 && this.type != 303 && (this.type < 338 || this.type > 341))
				{
					this.rotation += this.velocity.X * 0.1f;
					return;
				}
			}
			else if (this.aiStyle == 17)
			{
				if (this.velocity.Y == 0f)
				{
					this.velocity.X = this.velocity.X * 0.98f;
				}
				this.rotation += this.velocity.X * 0.1f;
				this.velocity.Y = this.velocity.Y + 0.2f;
				if (this.owner == Main.myPlayer)
				{
					int num259 = (int)((this.position.X + (float)(this.width / 2)) / 16f);
					int num260 = (int)((this.position.Y + (float)this.height - 4f) / 16f);
					if (Main.tile[num259, num260] != null && !Main.tile[num259, num260].active())
					{
						int num261 = 0;
						if (this.type >= 201 && this.type <= 205)
						{
							num261 = this.type - 200;
						}
						if (this.type >= 527 && this.type <= 531)
						{
							num261 = this.type - 527 + 6;
						}
						WorldGen.PlaceTile(num259, num260, 85, false, false, this.owner, num261);
						if (Main.tile[num259, num260].active())
						{
							if (Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 1, (float)num259, (float)num260, 85f, num261, 0, 0);
							}
							int num262 = Sign.ReadSign(num259, num260, true);
							if (num262 >= 0)
							{
								Sign.TextSign(num262, this.miscText);
							}
							this.Kill();
							return;
						}
					}
				}
			}
			else if (this.aiStyle == 18)
			{
				if (this.ai[1] == 0f && this.type == 44)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item8, this.position);
				}
				if (this.type != 263 && this.type != 274)
				{
					this.rotation += (float)this.direction * 0.8f;
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						if (this.ai[0] < 100f)
						{
							this.velocity *= 1.06f;
						}
						else
						{
							this.ai[0] = 200f;
						}
					}
					int num3;
					for (int num263 = 0; num263 < 2; num263 = num3 + 1)
					{
						int num264 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num264].noGravity = true;
						num3 = num263;
					}
					return;
				}
				if (this.type == 274 && this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
				}
				this.rotation += (float)this.direction * 0.05f;
				this.rotation += (float)this.direction * 0.5f * ((float)this.timeLeft / 180f);
				if (this.type == 274)
				{
					this.velocity *= 0.96f;
					return;
				}
				this.velocity *= 0.95f;
				return;
			}
			else if (this.aiStyle == 19)
			{
				Vector2 vector24 = Main.player[this.owner].RotatedRelativePoint(Main.player[this.owner].MountedCenter, true);
				this.direction = Main.player[this.owner].direction;
				Main.player[this.owner].heldProj = this.whoAmI;
				Main.player[this.owner].itemTime = Main.player[this.owner].itemAnimation;
				this.position.X = vector24.X - (float)(this.width / 2);
				this.position.Y = vector24.Y - (float)(this.height / 2);
				if (!Main.player[this.owner].frozen)
				{
					if (this.type == 46)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.6f;
						}
						else
						{
							this.ai[0] += 1.4f;
						}
					}
					else if (this.type == 105)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 2.4f;
						}
						else
						{
							this.ai[0] += 2.1f;
						}
					}
					else if (this.type == 367)
					{
						this.spriteDirection = -this.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.6f;
						}
						else
						{
							this.ai[0] += 1.5f;
						}
					}
					else if (this.type == 368)
					{
						this.spriteDirection = -this.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.5f;
						}
						else
						{
							this.ai[0] += 1.4f;
						}
					}
					else if (this.type == 222)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 2.4f;
							if (this.localAI[0] == 0f && Main.myPlayer == this.owner)
							{
								this.localAI[0] = 1f;
								Projectile.NewProjectile(base.Center.X + this.velocity.X * this.ai[0], base.Center.Y + this.velocity.Y * this.ai[0], this.velocity.X, this.velocity.Y, 228, this.damage, this.knockBack, this.owner, 0f, 0f);
							}
						}
						else
						{
							this.ai[0] += 2.1f;
						}
					}
					else if (this.type == 342)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 2.4f;
							if (this.localAI[0] == 0f && Main.myPlayer == this.owner)
							{
								this.localAI[0] = 1f;
								if (Collision.CanHit(Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height, new Vector2(base.Center.X + this.velocity.X * this.ai[0], base.Center.Y + this.velocity.Y * this.ai[0]), this.width, this.height))
								{
									Projectile.NewProjectile(base.Center.X + this.velocity.X * this.ai[0], base.Center.Y + this.velocity.Y * this.ai[0], this.velocity.X * 2.4f, this.velocity.Y * 2.4f, 343, (int)((double)this.damage * 0.8), this.knockBack * 0.85f, this.owner, 0f, 0f);
								}
							}
						}
						else
						{
							this.ai[0] += 2.1f;
						}
					}
					else if (this.type == 47)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 4f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.2f;
						}
						else
						{
							this.ai[0] += 0.9f;
						}
					}
					else if (this.type == 153)
					{
						this.spriteDirection = -this.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 4f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.5f;
						}
						else
						{
							this.ai[0] += 1.3f;
						}
					}
					else if (this.type == 49)
					{
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 4f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.1f;
						}
						else
						{
							this.ai[0] += 0.85f;
						}
					}
					else if (this.type == 64 || this.type == 215)
					{
						this.spriteDirection = -this.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.9f;
						}
						else
						{
							this.ai[0] += 1.7f;
						}
					}
					else if (this.type == 66 || this.type == 97 || this.type == 212 || this.type == 218)
					{
						this.spriteDirection = -this.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 2.1f;
						}
						else
						{
							this.ai[0] += 1.9f;
						}
					}
					else if (this.type == 130)
					{
						this.spriteDirection = -this.direction;
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 3f;
							this.netUpdate = true;
						}
						if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
						{
							this.ai[0] -= 1.3f;
						}
						else
						{
							this.ai[0] += 1f;
						}
					}
				}
				this.position += this.velocity * this.ai[0];
				if (this.type == 130)
				{
					if (this.ai[1] == 0f || this.ai[1] == 4f || this.ai[1] == 8f || this.ai[1] == 12f || this.ai[1] == 16f || this.ai[1] == 20f || this.ai[1] == 24f)
					{
						Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), this.velocity.X, this.velocity.Y, 131, this.damage / 3, 0f, this.owner, 0f, 0f);
					}
					this.ai[1] += 1f;
				}
				if (Main.player[this.owner].itemAnimation == 0)
				{
					this.Kill();
				}
				this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 2.355f;
				if (this.spriteDirection == -1)
				{
					this.rotation -= 1.57f;
				}
				if (this.type == 46)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust.NewDust(this.position, this.width, this.height, 14, 0f, 0f, 150, default(Color), 1.4f);
					}
					int num265 = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.2f);
					Main.dust[num265].noGravity = true;
					Dust var_2_C81F_cp_0_cp_0 = Main.dust[num265];
					var_2_C81F_cp_0_cp_0.velocity.X = var_2_C81F_cp_0_cp_0.velocity.X / 2f;
					Dust var_2_C840_cp_0_cp_0 = Main.dust[num265];
					var_2_C840_cp_0_cp_0.velocity.Y = var_2_C840_cp_0_cp_0.velocity.Y / 2f;
					num265 = Dust.NewDust(this.position - this.velocity * 2f, this.width, this.height, 27, 0f, 0f, 150, default(Color), 1.4f);
					Dust var_2_C8B2_cp_0_cp_0 = Main.dust[num265];
					var_2_C8B2_cp_0_cp_0.velocity.X = var_2_C8B2_cp_0_cp_0.velocity.X / 5f;
					Dust var_2_C8D3_cp_0_cp_0 = Main.dust[num265];
					var_2_C8D3_cp_0_cp_0.velocity.Y = var_2_C8D3_cp_0_cp_0.velocity.Y / 5f;
					return;
				}
				if (this.type == 105)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num266 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 57, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 200, default(Color), 1.2f);
						Dust dust = Main.dust[num266];
						dust.velocity += this.velocity * 0.3f;
						dust = Main.dust[num266];
						dust.velocity *= 0.2f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num267 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 43, 0f, 0f, 254, default(Color), 0.3f);
						Dust dust = Main.dust[num267];
						dust.velocity += this.velocity * 0.5f;
						dust = Main.dust[num267];
						dust.velocity *= 0.5f;
						return;
					}
				}
				else if (this.type == 153)
				{
					int num268 = Dust.NewDust(this.position - this.velocity * 3f, this.width, this.height, 115, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 140, default(Color), 1f);
					Main.dust[num268].noGravity = true;
					Main.dust[num268].fadeIn = 1.25f;
					Dust dust = Main.dust[num268];
					dust.velocity *= 0.25f;
					return;
				}
			}
			else if (this.aiStyle == 20)
			{
				if (this.type == 252)
				{
					this.frameCounter++;
					if (this.frameCounter >= 4)
					{
						this.frameCounter = 0;
						this.frame++;
					}
					if (this.frame > 3)
					{
						this.frame = 0;
					}
				}
				if (this.type == 509)
				{
					this.frameCounter++;
					if (this.frameCounter >= 2)
					{
						this.frameCounter = 0;
						this.frame++;
					}
					if (this.frame > 1)
					{
						this.frame = 0;
					}
				}
				if (this.soundDelay <= 0)
				{
					Main.PlaySound(SoundID.Item22, this.position);
					this.soundDelay = 30;
				}
				Vector2 vector25 = Main.player[this.owner].RotatedRelativePoint(Main.player[this.owner].MountedCenter, true);
				if (Main.myPlayer == this.owner)
				{
					if (Main.player[this.owner].channel)
					{
						float num269 = Main.player[this.owner].inventory[Main.player[this.owner].selectedItem].shootSpeed * this.scale;
						Vector2 vector26 = vector25;
						float num270 = (float)Main.mouseX + Main.screenPosition.X - vector26.X;
						float num271 = (float)Main.mouseY + Main.screenPosition.Y - vector26.Y;
						if (Main.player[this.owner].gravDir == -1f)
						{
							num271 = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector26.Y;
						}
						float num272 = (float)Math.Sqrt((double)(num270 * num270 + num271 * num271));
						num272 = (float)Math.Sqrt((double)(num270 * num270 + num271 * num271));
						num272 = num269 / num272;
						num270 *= num272;
						num271 *= num272;
						if (num270 != this.velocity.X || num271 != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity.X = num270;
						this.velocity.Y = num271;
					}
					else
					{
						this.Kill();
					}
				}
				if (this.velocity.X > 0f)
				{
					Main.player[this.owner].ChangeDir(1);
				}
				else if (this.velocity.X < 0f)
				{
					Main.player[this.owner].ChangeDir(-1);
				}
				this.spriteDirection = this.direction;
				Main.player[this.owner].ChangeDir(this.direction);
				Main.player[this.owner].heldProj = this.whoAmI;
				Main.player[this.owner].itemTime = 2;
				Main.player[this.owner].itemAnimation = 2;
				this.position.X = vector25.X - (float)(this.width / 2);
				this.position.Y = vector25.Y - (float)(this.height / 2);
				this.rotation = (float)(Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.5700000524520874);
				if (Main.player[this.owner].direction == 1)
				{
					Main.player[this.owner].itemRotation = (float)Math.Atan2((double)(this.velocity.Y * (float)this.direction), (double)(this.velocity.X * (float)this.direction));
				}
				else
				{
					Main.player[this.owner].itemRotation = (float)Math.Atan2((double)(this.velocity.Y * (float)this.direction), (double)(this.velocity.X * (float)this.direction));
				}
				this.velocity.X = this.velocity.X * (1f + (float)Main.rand.Next(-3, 4) * 0.01f);
				if (Main.rand.Next(6) == 0)
				{
					int num273 = Dust.NewDust(this.position + this.velocity * (float)Main.rand.Next(6, 10) * 0.1f, this.width, this.height, 31, 0f, 0f, 80, default(Color), 1.4f);
					Dust var_2_D051_cp_0_cp_0 = Main.dust[num273];
					var_2_D051_cp_0_cp_0.position.X = var_2_D051_cp_0_cp_0.position.X - 4f;
					Main.dust[num273].noGravity = true;
					Dust dust = Main.dust[num273];
					dust.velocity *= 0.2f;
					Main.dust[num273].velocity.Y = (float)(-(float)Main.rand.Next(7, 13)) * 0.15f;
					return;
				}
			}
			else if (this.aiStyle == 21)
			{
				this.rotation = this.velocity.X * 0.1f;
				this.spriteDirection = -this.direction;
				if (Main.rand.Next(3) == 0)
				{
					int num274 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 80, default(Color), 1f);
					Main.dust[num274].noGravity = true;
					Dust dust = Main.dust[num274];
					dust.velocity *= 0.2f;
				}
				if (this.ai[1] == 1f)
				{
					this.ai[1] = 0f;
					Main.harpNote = this.ai[0];
					Main.PlaySound(SoundID.Item26, this.position);
					return;
				}
			}
			else if (this.aiStyle == 22)
			{
				if (this.velocity.X == 0f && this.velocity.Y == 0f)
				{
					this.alpha = 255;
				}
				if (this.ai[1] < 0f)
				{
					if (this.velocity.X > 0f)
					{
						this.rotation += 0.3f;
					}
					else
					{
						this.rotation -= 0.3f;
					}
					int num275 = (int)(this.position.X / 16f) - 1;
					int num276 = (int)((this.position.X + (float)this.width) / 16f) + 2;
					int num277 = (int)(this.position.Y / 16f) - 1;
					int num278 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
					if (num275 < 0)
					{
						num275 = 0;
					}
					if (num276 > Main.maxTilesX)
					{
						num276 = Main.maxTilesX;
					}
					if (num277 < 0)
					{
						num277 = 0;
					}
					if (num278 > Main.maxTilesY)
					{
						num278 = Main.maxTilesY;
					}
					int num279 = (int)this.position.X + 4;
					int num280 = (int)this.position.Y + 4;
					int num3;
					for (int num281 = num275; num281 < num276; num281 = num3 + 1)
					{
						for (int num282 = num277; num282 < num278; num282 = num3 + 1)
						{
							if (Main.tile[num281, num282] != null && Main.tile[num281, num282].active() && Main.tile[num281, num282].type != 127 && Main.tileSolid[(int)Main.tile[num281, num282].type] && !Main.tileSolidTop[(int)Main.tile[num281, num282].type])
							{
								Vector2 vector27;
								vector27.X = (float)(num281 * 16);
								vector27.Y = (float)(num282 * 16);
								if ((float)(num279 + 8) > vector27.X && (float)num279 < vector27.X + 16f && (float)(num280 + 8) > vector27.Y && (float)num280 < vector27.Y + 16f)
								{
									this.Kill();
								}
							}
							num3 = num282;
						}
						num3 = num281;
					}
					int num283 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num283].noGravity = true;
					Dust dust = Main.dust[num283];
					dust.velocity *= 0.3f;
					return;
				}
				if (this.ai[0] < 0f)
				{
					if (this.ai[0] == -1f)
					{
						int num3;
						for (int num284 = 0; num284 < 10; num284 = num3 + 1)
						{
							int num285 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0f, 0f, 0, default(Color), 1.1f);
							Main.dust[num285].noGravity = true;
							Dust dust = Main.dust[num285];
							dust.velocity *= 1.3f;
							num3 = num284;
						}
					}
					else if (Main.rand.Next(30) == 0)
					{
						int num286 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0f, 0f, 100, default(Color), 1f);
						Dust dust = Main.dust[num286];
						dust.velocity *= 0.2f;
					}
					int num287 = (int)this.position.X / 16;
					int num288 = (int)this.position.Y / 16;
					if (Main.tile[num287, num288] == null || !Main.tile[num287, num288].active())
					{
						this.Kill();
					}
					this.ai[0] -= 1f;
					if (this.ai[0] <= -900f && (Main.myPlayer == this.owner || Main.netMode == 2) && Main.tile[num287, num288].active() && Main.tile[num287, num288].type == 127)
					{
						WorldGen.KillTile(num287, num288, false, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)num287, (float)num288, 0f, 0, 0, 0);
						}
						this.Kill();
						return;
					}
				}
				else
				{
					int num289 = (int)(this.position.X / 16f) - 1;
					int num290 = (int)((this.position.X + (float)this.width) / 16f) + 2;
					int num291 = (int)(this.position.Y / 16f) - 1;
					int num292 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
					if (num289 < 0)
					{
						num289 = 0;
					}
					if (num290 > Main.maxTilesX)
					{
						num290 = Main.maxTilesX;
					}
					if (num291 < 0)
					{
						num291 = 0;
					}
					if (num292 > Main.maxTilesY)
					{
						num292 = Main.maxTilesY;
					}
					int num293 = (int)this.position.X + 4;
					int num294 = (int)this.position.Y + 4;
					int num3;
					for (int num295 = num289; num295 < num290; num295 = num3 + 1)
					{
						for (int num296 = num291; num296 < num292; num296 = num3 + 1)
						{
							if (Main.tile[num295, num296] != null && Main.tile[num295, num296].nactive() && Main.tile[num295, num296].type != 127 && Main.tileSolid[(int)Main.tile[num295, num296].type] && !Main.tileSolidTop[(int)Main.tile[num295, num296].type])
							{
								Vector2 vector28;
								vector28.X = (float)(num295 * 16);
								vector28.Y = (float)(num296 * 16);
								if ((float)(num293 + 8) > vector28.X && (float)num293 < vector28.X + 16f && (float)(num294 + 8) > vector28.Y && (float)num294 < vector28.Y + 16f)
								{
									this.Kill();
								}
							}
							num3 = num296;
						}
						num3 = num295;
					}
					if (this.lavaWet)
					{
						this.Kill();
					}
					if (this.active)
					{
						int num297 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num297].noGravity = true;
						Dust dust = Main.dust[num297];
						dust.velocity *= 0.3f;
						int num298 = (int)this.ai[0];
						int num299 = (int)this.ai[1];
						if (WorldGen.SolidTile(num298, num299))
						{
							if (Math.Abs(this.velocity.X) > Math.Abs(this.velocity.Y))
							{
								if (base.Center.Y < (float)(num299 * 16 + 8) && !WorldGen.SolidTile(num298, num299 - 1))
								{
									num299--;
								}
								else if (!WorldGen.SolidTile(num298, num299 + 1))
								{
									num299++;
								}
								else if (!WorldGen.SolidTile(num298, num299 - 1))
								{
									num299--;
								}
								else if (base.Center.X < (float)(num298 * 16 + 8) && !WorldGen.SolidTile(num298 - 1, num299))
								{
									num298--;
								}
								else if (!WorldGen.SolidTile(num298 + 1, num299))
								{
									num298++;
								}
								else if (!WorldGen.SolidTile(num298 - 1, num299))
								{
									num298--;
								}
							}
							else if (base.Center.X < (float)(num298 * 16 + 8) && !WorldGen.SolidTile(num298 - 1, num299))
							{
								num298--;
							}
							else if (!WorldGen.SolidTile(num298 + 1, num299))
							{
								num298++;
							}
							else if (!WorldGen.SolidTile(num298 - 1, num299))
							{
								num298--;
							}
							else if (base.Center.Y < (float)(num299 * 16 + 8) && !WorldGen.SolidTile(num298, num299 - 1))
							{
								num299--;
							}
							else if (!WorldGen.SolidTile(num298, num299 + 1))
							{
								num299++;
							}
							else if (!WorldGen.SolidTile(num298, num299 - 1))
							{
								num299--;
							}
						}
						if (this.velocity.X > 0f)
						{
							this.rotation += 0.3f;
						}
						else
						{
							this.rotation -= 0.3f;
						}
						if (Main.myPlayer == this.owner)
						{
							int num300 = (int)((this.position.X + (float)(this.width / 2)) / 16f);
							int num301 = (int)((this.position.Y + (float)(this.height / 2)) / 16f);
							bool flag6 = false;
							if (num300 == num298 && num301 == num299)
							{
								flag6 = true;
							}
							if (((this.velocity.X <= 0f && num300 <= num298) || (this.velocity.X >= 0f && num300 >= num298)) && ((this.velocity.Y <= 0f && num301 <= num299) || (this.velocity.Y >= 0f && num301 >= num299)))
							{
								flag6 = true;
							}
							if (flag6)
							{
								if (WorldGen.PlaceTile(num298, num299, 127, false, false, this.owner, 0))
								{
									if (Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, null, 1, (float)((int)this.ai[0]), (float)((int)this.ai[1]), 127f, 0, 0, 0);
									}
									this.damage = 0;
									this.ai[0] = -1f;
									this.velocity *= 0f;
									this.alpha = 255;
									this.position.X = (float)(num298 * 16);
									this.position.Y = (float)(num299 * 16);
									this.netUpdate = true;
									return;
								}
								this.ai[1] = -1f;
								return;
							}
						}
					}
				}
			}
			else
			{
				if (this.aiStyle == 23)
				{
					if (this.type == 188 && this.ai[0] < 8f)
					{
						this.ai[0] = 8f;
					}
					if (this.timeLeft > 60)
					{
						this.timeLeft = 60;
					}
					if (this.ai[0] > 7f)
					{
						float num302 = 1f;
						if (this.ai[0] == 8f)
						{
							num302 = 0.25f;
						}
						else if (this.ai[0] == 9f)
						{
							num302 = 0.5f;
						}
						else if (this.ai[0] == 10f)
						{
							num302 = 0.75f;
						}
						this.ai[0] += 1f;
						int num303 = 6;
						if (this.type == 101)
						{
							num303 = 75;
						}
						if (num303 == 6 || Main.rand.Next(2) == 0)
						{
							int num3;
							for (int num304 = 0; num304 < 1; num304 = num3 + 1)
							{
								int num305 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num303, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1f);
								Dust dust;
								if (Main.rand.Next(3) != 0 || (num303 == 75 && Main.rand.Next(3) == 0))
								{
									Main.dust[num305].noGravity = true;
									dust = Main.dust[num305];
									dust.scale *= 3f;
									Dust var_2_E189_cp_0_cp_0 = Main.dust[num305];
									var_2_E189_cp_0_cp_0.velocity.X = var_2_E189_cp_0_cp_0.velocity.X * 2f;
									Dust var_2_E1AA_cp_0_cp_0 = Main.dust[num305];
									var_2_E1AA_cp_0_cp_0.velocity.Y = var_2_E1AA_cp_0_cp_0.velocity.Y * 2f;
								}
								if (this.type == 188)
								{
									dust = Main.dust[num305];
									dust.scale *= 1.25f;
								}
								else
								{
									dust = Main.dust[num305];
									dust.scale *= 1.5f;
								}
								Dust var_2_E21E_cp_0_cp_0 = Main.dust[num305];
								var_2_E21E_cp_0_cp_0.velocity.X = var_2_E21E_cp_0_cp_0.velocity.X * 1.2f;
								Dust var_2_E23F_cp_0_cp_0 = Main.dust[num305];
								var_2_E23F_cp_0_cp_0.velocity.Y = var_2_E23F_cp_0_cp_0.velocity.Y * 1.2f;
								dust = Main.dust[num305];
								dust.scale *= num302;
								if (num303 == 75)
								{
									dust = Main.dust[num305];
									dust.velocity += this.velocity;
									if (!Main.dust[num305].noGravity)
									{
										dust = Main.dust[num305];
										dust.velocity *= 0.5f;
									}
								}
								num3 = num304;
							}
						}
					}
					else
					{
						this.ai[0] += 1f;
					}
					this.rotation += 0.3f * (float)this.direction;
					return;
				}
				if (this.aiStyle == 24)
				{
					this.light = this.scale * 0.5f;
					this.rotation += this.velocity.X * 0.2f;
					this.ai[1] += 1f;
					if (this.type == 94)
					{
						if (Main.rand.Next(4) == 0)
						{
							int num306 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 70, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num306].noGravity = true;
							Dust dust = Main.dust[num306];
							dust.velocity *= 0.5f;
							dust = Main.dust[num306];
							dust.scale *= 0.9f;
						}
						this.velocity *= 0.985f;
						if (this.ai[1] > 130f)
						{
							this.scale -= 0.05f;
							if ((double)this.scale <= 0.2)
							{
								this.scale = 0.2f;
								this.Kill();
								return;
							}
						}
					}
					else
					{
						this.velocity *= 0.96f;
						if (this.ai[1] > 15f)
						{
							this.scale -= 0.05f;
							if ((double)this.scale <= 0.2)
							{
								this.scale = 0.2f;
								this.Kill();
								return;
							}
						}
					}
				}
				else if (this.aiStyle == 25)
				{
					if (this.ai[0] != 0f && this.velocity.Y <= 0f && this.velocity.X == 0f)
					{
						float num307 = 0.5f;
						int i2 = (int)((this.position.X - 8f) / 16f);
						int num308 = (int)(this.position.Y / 16f);
						bool flag7 = false;
						bool flag8 = false;
						if (WorldGen.SolidTile(i2, num308) || WorldGen.SolidTile(i2, num308 + 1))
						{
							flag7 = true;
						}
						i2 = (int)((this.position.X + (float)this.width + 8f) / 16f);
						if (WorldGen.SolidTile(i2, num308) || WorldGen.SolidTile(i2, num308 + 1))
						{
							flag8 = true;
						}
						if (flag7)
						{
							this.velocity.X = num307;
						}
						else if (flag8)
						{
							this.velocity.X = -num307;
						}
						else
						{
							i2 = (int)((this.position.X - 8f - 16f) / 16f);
							num308 = (int)(this.position.Y / 16f);
							flag7 = false;
							flag8 = false;
							if (WorldGen.SolidTile(i2, num308) || WorldGen.SolidTile(i2, num308 + 1))
							{
								flag7 = true;
							}
							i2 = (int)((this.position.X + (float)this.width + 8f + 16f) / 16f);
							if (WorldGen.SolidTile(i2, num308) || WorldGen.SolidTile(i2, num308 + 1))
							{
								flag8 = true;
							}
							if (flag7)
							{
								this.velocity.X = num307;
							}
							else if (flag8)
							{
								this.velocity.X = -num307;
							}
							else
							{
								i2 = (int)((this.position.X + 4f) / 16f);
								num308 = (int)((this.position.Y + (float)this.height + 8f) / 16f);
								if (WorldGen.SolidTile(i2, num308) || WorldGen.SolidTile(i2, num308 + 1))
								{
									flag7 = true;
								}
								if (!flag7)
								{
									this.velocity.X = num307;
								}
								else
								{
									this.velocity.X = -num307;
								}
							}
						}
					}
					this.rotation += this.velocity.X * 0.06f;
					this.ai[0] = 1f;
					if (this.velocity.Y > 16f)
					{
						this.velocity.Y = 16f;
					}
					if (this.velocity.Y <= 6f)
					{
						if (this.velocity.X > 0f && this.velocity.X < 7f)
						{
							this.velocity.X = this.velocity.X + 0.05f;
						}
						if (this.velocity.X < 0f && this.velocity.X > -7f)
						{
							this.velocity.X = this.velocity.X - 0.05f;
						}
					}
					this.velocity.Y = this.velocity.Y + 0.3f;
					if (this.type == 655 && this.wet)
					{
						this.Kill();
						return;
					}
				}
				else
				{
					if (this.aiStyle == 26)
					{
						this.AI_026();
						return;
					}
					if (this.aiStyle == 27)
					{
						if (this.type == 115)
						{
							this.ai[0] += 1f;
							if (this.ai[0] < 30f)
							{
								this.velocity *= 1.125f;
							}
						}
						if (this.type == 115 && this.localAI[1] < 5f)
						{
							this.localAI[1] = 5f;
							int num3;
							for (int num309 = 5; num309 < 25; num309 = num3 + 1)
							{
								float num310 = this.velocity.X * (30f / (float)num309);
								float num311 = this.velocity.Y * (30f / (float)num309);
								num310 *= 80f;
								num311 *= 80f;
								int num312 = Dust.NewDust(new Vector2(this.position.X - num310, this.position.Y - num311), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 0.9f);
								Dust dust = Main.dust[num312];
								dust.velocity *= 0.25f;
								dust = Main.dust[num312];
								dust.velocity -= this.velocity * 5f;
								num3 = num309;
							}
						}
						if (this.localAI[1] > 7f && this.type == 173)
						{
							int num313 = Main.rand.Next(3);
							if (num313 == 0)
							{
								num313 = 15;
							}
							else if (num313 == 1)
							{
								num313 = 57;
							}
							else
							{
								num313 = 58;
							}
							int num314 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 4f + 2f, this.position.Y + 2f - this.velocity.Y * 4f), 8, 8, num313, 0f, 0f, 100, default(Color), 1.25f);
							Dust dust = Main.dust[num314];
							dust.velocity *= 0.1f;
						}
						if (this.localAI[1] > 7f && this.type == 132)
						{
							int num315 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 4f + 2f, this.position.Y + 2f - this.velocity.Y * 4f), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.25f);
							Dust dust = Main.dust[num315];
							dust.velocity *= -0.25f;
							num315 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 4f + 2f, this.position.Y + 2f - this.velocity.Y * 4f), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.25f);
							dust = Main.dust[num315];
							dust.velocity *= -0.25f;
							dust = Main.dust[num315];
							dust.position -= this.velocity * 0.5f;
						}
						if (this.localAI[1] < 15f)
						{
							this.localAI[1] += 1f;
						}
						else
						{
							if (this.type == 114 || this.type == 115)
							{
								int num316 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 0.6f);
								Dust dust = Main.dust[num316];
								dust.velocity *= -0.25f;
							}
							else if (this.type == 116)
							{
								int num317 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 5f + 2f, this.position.Y + 2f - this.velocity.Y * 5f), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.5f);
								Dust dust = Main.dust[num317];
								dust.velocity *= -0.25f;
								Main.dust[num317].noGravity = true;
							}
							if (this.localAI[0] == 0f)
							{
								this.scale -= 0.02f;
								this.alpha += 30;
								if (this.alpha >= 250)
								{
									this.alpha = 255;
									this.localAI[0] = 1f;
								}
							}
							else if (this.localAI[0] == 1f)
							{
								this.scale += 0.02f;
								this.alpha -= 30;
								if (this.alpha <= 0)
								{
									this.alpha = 0;
									this.localAI[0] = 0f;
								}
							}
						}
						if (this.ai[1] == 0f)
						{
							this.ai[1] = 1f;
							if (this.type == 132)
							{
								Main.PlaySound(SoundID.Item60, this.position);
							}
							else
							{
								Main.PlaySound(SoundID.Item8, this.position);
							}
						}
						if (this.type == 157)
						{
							this.rotation += (float)this.direction * 0.4f;
							this.spriteDirection = this.direction;
						}
						else
						{
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 0.785f;
						}
						if (this.velocity.Y > 16f)
						{
							this.velocity.Y = 16f;
							return;
						}
					}
					else if (this.aiStyle == 28)
					{
						if (this.type == 177)
						{
							int num3;
							for (int num318 = 0; num318 < 3; num318 = num3 + 1)
							{
								int num319 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 137, this.velocity.X, this.velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
								Main.dust[num319].noGravity = true;
								Dust dust = Main.dust[num319];
								dust.velocity *= 0.3f;
								num3 = num318;
							}
						}
						if (this.type == 118)
						{
							int num3;
							for (int num320 = 0; num320 < 2; num320 = num3 + 1)
							{
								int num321 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, 50, default(Color), 1.2f);
								Main.dust[num321].noGravity = true;
								Dust dust = Main.dust[num321];
								dust.velocity *= 0.3f;
								num3 = num320;
							}
						}
						if (this.type == 119 || this.type == 128 || this.type == 359)
						{
							int num3;
							for (int num322 = 0; num322 < 3; num322 = num3 + 1)
							{
								int num323 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, 50, default(Color), 1.2f);
								Main.dust[num323].noGravity = true;
								Dust dust = Main.dust[num323];
								dust.velocity *= 0.3f;
								num3 = num322;
							}
						}
						if (this.type == 309)
						{
							int num3;
							for (int num324 = 0; num324 < 3; num324 = num3 + 1)
							{
								int num325 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 185, this.velocity.X, this.velocity.Y, 50, default(Color), 1.2f);
								Main.dust[num325].noGravity = true;
								Dust dust = Main.dust[num325];
								dust.velocity *= 0.3f;
								num3 = num324;
							}
						}
						if (this.type == 129)
						{
							int num3;
							for (int num326 = 0; num326 < 6; num326 = num3 + 1)
							{
								int num327 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 106, this.velocity.X, this.velocity.Y, 100, default(Color), 1f);
								Main.dust[num327].noGravity = true;
								Dust dust = Main.dust[num327];
								dust.velocity *= 0.1f + (float)Main.rand.Next(4) * 0.1f;
								dust = Main.dust[num327];
								dust.scale *= 1f + (float)Main.rand.Next(5) * 0.1f;
								num3 = num326;
							}
						}
						if (this.ai[1] == 0f)
						{
							this.ai[1] = 1f;
							Main.PlaySound(SoundID.Item28, this.position);
							return;
						}
					}
					else if (this.aiStyle == 29)
					{
						int num3;
						if (this.type == 619)
						{
							int num328 = (int)this.ai[0];
							for (int num329 = 0; num329 < 3; num329 = num3 + 1)
							{
								int num330 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, num328, default(Color), 1.2f);
								Main.dust[num330].position = (Main.dust[num330].position + base.Center) / 2f;
								Main.dust[num330].noGravity = true;
								Dust dust = Main.dust[num330];
								dust.velocity *= 0.5f;
								num3 = num329;
							}
							for (int num331 = 0; num331 < 2; num331 = num3 + 1)
							{
								int num330 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 255, this.velocity.X, this.velocity.Y, num328, default(Color), 0.4f);
								if (num331 == 0)
								{
									Main.dust[num330].position = (Main.dust[num330].position + base.Center * 5f) / 6f;
								}
								else if (num331 == 1)
								{
									Main.dust[num330].position = (Main.dust[num330].position + (base.Center + this.velocity / 2f) * 5f) / 6f;
								}
								Dust dust = Main.dust[num330];
								dust.velocity *= 0.1f;
								Main.dust[num330].noGravity = true;
								Main.dust[num330].fadeIn = 1f;
								num3 = num331;
							}
							return;
						}
						if (this.type == 620)
						{
							int num332 = (int)this.ai[0];
							this.ai[1] += 1f;
							float num333 = (60f - this.ai[1]) / 60f;
							if (this.ai[1] > 40f)
							{
								this.Kill();
							}
							this.velocity.Y = this.velocity.Y + 0.2f;
							if (this.velocity.Y > 18f)
							{
								this.velocity.Y = 18f;
							}
							this.velocity.X = this.velocity.X * 0.98f;
							for (int num334 = 0; num334 < 2; num334 = num3 + 1)
							{
								int num335 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num332, this.velocity.X, this.velocity.Y, 50, default(Color), 1.1f);
								Main.dust[num335].position = (Main.dust[num335].position + base.Center) / 2f;
								Main.dust[num335].noGravity = true;
								Dust dust = Main.dust[num335];
								dust.velocity *= 0.3f;
								dust = Main.dust[num335];
								dust.scale *= num333;
								num3 = num334;
							}
							for (int num336 = 0; num336 < 1; num336 = num3 + 1)
							{
								int num335 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num332, this.velocity.X, this.velocity.Y, 50, default(Color), 0.6f);
								Main.dust[num335].position = (Main.dust[num335].position + base.Center * 5f) / 6f;
								Dust dust = Main.dust[num335];
								dust.velocity *= 0.1f;
								Main.dust[num335].noGravity = true;
								Main.dust[num335].fadeIn = 0.9f * num333;
								dust = Main.dust[num335];
								dust.scale *= num333;
								num3 = num336;
							}
							return;
						}
						if (this.type == 521)
						{
							for (int num337 = 0; num337 < 3; num337 = num3 + 1)
							{
								int num338 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, 50, default(Color), 1.2f);
								Main.dust[num338].position = (Main.dust[num338].position + base.Center) / 2f;
								Main.dust[num338].noGravity = true;
								Dust dust = Main.dust[num338];
								dust.velocity *= 0.5f;
								num3 = num337;
							}
							for (int num339 = 0; num339 < 2; num339 = num3 + 1)
							{
								int num338 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 255, this.velocity.X, this.velocity.Y, 50, default(Color), 0.4f);
								if (num339 == 0)
								{
									Main.dust[num338].position = (Main.dust[num338].position + base.Center * 5f) / 6f;
								}
								else if (num339 == 1)
								{
									Main.dust[num338].position = (Main.dust[num338].position + (base.Center + this.velocity / 2f) * 5f) / 6f;
								}
								Dust dust = Main.dust[num338];
								dust.velocity *= 0.1f;
								Main.dust[num338].noGravity = true;
								Main.dust[num338].fadeIn = 1f;
								num3 = num339;
							}
							return;
						}
						if (this.type == 522)
						{
							this.ai[1] += 1f;
							float num340 = (60f - this.ai[1]) / 60f;
							if (this.ai[1] > 40f)
							{
								this.Kill();
							}
							this.velocity.Y = this.velocity.Y + 0.2f;
							if (this.velocity.Y > 18f)
							{
								this.velocity.Y = 18f;
							}
							this.velocity.X = this.velocity.X * 0.98f;
							for (int num341 = 0; num341 < 2; num341 = num3 + 1)
							{
								int num342 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, 50, default(Color), 1.1f);
								Main.dust[num342].position = (Main.dust[num342].position + base.Center) / 2f;
								Main.dust[num342].noGravity = true;
								Dust dust = Main.dust[num342];
								dust.velocity *= 0.3f;
								dust = Main.dust[num342];
								dust.scale *= num340;
								num3 = num341;
							}
							for (int num343 = 0; num343 < 1; num343 = num3 + 1)
							{
								int num342 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 255, this.velocity.X, this.velocity.Y, 50, default(Color), 0.6f);
								Main.dust[num342].position = (Main.dust[num342].position + base.Center * 5f) / 6f;
								Dust dust = Main.dust[num342];
								dust.velocity *= 0.1f;
								Main.dust[num342].noGravity = true;
								Main.dust[num342].fadeIn = 0.9f * num340;
								dust = Main.dust[num342];
								dust.scale *= num340;
								num3 = num343;
							}
							return;
						}
						int num344 = this.type - 121 + 86;
						if (this.type == 597)
						{
							num344 = 262;
						}
						for (int num345 = 0; num345 < 2; num345 = num3 + 1)
						{
							int num346 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num344, this.velocity.X, this.velocity.Y, 50, default(Color), 1.2f);
							Main.dust[num346].noGravity = true;
							Dust dust = Main.dust[num346];
							dust.velocity *= 0.3f;
							num3 = num345;
						}
						if (this.ai[1] == 0f)
						{
							this.ai[1] = 1f;
							Main.PlaySound(SoundID.Item8, this.position);
							return;
						}
					}
					else if (this.aiStyle == 30)
					{
						this.velocity *= 0.8f;
						this.rotation += 0.2f;
						this.alpha += 4;
						if (this.alpha >= 255)
						{
							this.Kill();
							return;
						}
					}
					else
					{
						if (this.aiStyle == 31)
						{
							int num347 = 110;
							int conversionType = 0;
							if (this.type == 146)
							{
								num347 = 111;
								conversionType = 2;
							}
							if (this.type == 147)
							{
								num347 = 112;
								conversionType = 1;
							}
							if (this.type == 148)
							{
								num347 = 113;
								conversionType = 3;
							}
							if (this.type == 149)
							{
								num347 = 114;
								conversionType = 4;
							}
							if (this.owner == Main.myPlayer)
							{
								WorldGen.Convert((int)(this.position.X + (float)(this.width / 2)) / 16, (int)(this.position.Y + (float)(this.height / 2)) / 16, conversionType, 2);
							}
							if (this.timeLeft > 133)
							{
								this.timeLeft = 133;
							}
							if (this.ai[0] > 7f)
							{
								float num348 = 1f;
								if (this.ai[0] == 8f)
								{
									num348 = 0.2f;
								}
								else if (this.ai[0] == 9f)
								{
									num348 = 0.4f;
								}
								else if (this.ai[0] == 10f)
								{
									num348 = 0.6f;
								}
								else if (this.ai[0] == 11f)
								{
									num348 = 0.8f;
								}
								this.ai[0] += 1f;
								int num3;
								for (int num349 = 0; num349 < 1; num349 = num3 + 1)
								{
									int num350 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num347, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1f);
									Main.dust[num350].noGravity = true;
									Dust dust = Main.dust[num350];
									dust.scale *= 1.75f;
									Dust var_2_10442_cp_0_cp_0 = Main.dust[num350];
									var_2_10442_cp_0_cp_0.velocity.X = var_2_10442_cp_0_cp_0.velocity.X * 2f;
									Dust var_2_10463_cp_0_cp_0 = Main.dust[num350];
									var_2_10463_cp_0_cp_0.velocity.Y = var_2_10463_cp_0_cp_0.velocity.Y * 2f;
									dust = Main.dust[num350];
									dust.scale *= num348;
									num3 = num349;
								}
							}
							else
							{
								this.ai[0] += 1f;
							}
							this.rotation += 0.3f * (float)this.direction;
							return;
						}
						if (this.aiStyle == 32)
						{
							this.timeLeft = 10;
							this.ai[0] += 1f;
							if (this.ai[0] >= 20f)
							{
								this.ai[0] = 15f;
								int num3;
								for (int num351 = 0; num351 < 255; num351 = num3 + 1)
								{
									Rectangle rectangle3 = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
									if (Main.player[num351].active)
									{
										Rectangle value7 = new Rectangle((int)Main.player[num351].position.X, (int)Main.player[num351].position.Y, Main.player[num351].width, Main.player[num351].height);
										if (rectangle3.Intersects(value7))
										{
											this.ai[0] = 0f;
											this.velocity.Y = -4.5f;
											if (this.velocity.X > 2f)
											{
												this.velocity.X = 2f;
											}
											if (this.velocity.X < -2f)
											{
												this.velocity.X = -2f;
											}
											this.velocity.X = (this.velocity.X + (float)Main.player[num351].direction * 1.75f) / 2f;
											this.velocity.X = this.velocity.X + Main.player[num351].velocity.X * 3f;
											this.velocity.Y = this.velocity.Y + Main.player[num351].velocity.Y;
											if (this.velocity.X > 6f)
											{
												this.velocity.X = 6f;
											}
											if (this.velocity.X < -6f)
											{
												this.velocity.X = -6f;
											}
											this.netUpdate = true;
											this.ai[1] += 1f;
										}
									}
									num3 = num351;
								}
							}
							if (this.velocity.X == 0f && this.velocity.Y == 0f)
							{
								this.Kill();
							}
							this.rotation += 0.02f * this.velocity.X;
							if (this.velocity.Y == 0f)
							{
								this.velocity.X = this.velocity.X * 0.98f;
							}
							else if (this.wet)
							{
								this.velocity.X = this.velocity.X * 0.99f;
							}
							else
							{
								this.velocity.X = this.velocity.X * 0.995f;
							}
							if ((double)this.velocity.X > -0.03 && (double)this.velocity.X < 0.03)
							{
								this.velocity.X = 0f;
							}
							if (this.wet)
							{
								this.ai[1] = 0f;
								if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y * 0.95f;
								}
								this.velocity.Y = this.velocity.Y - 0.1f;
								if (this.velocity.Y < -4f)
								{
									this.velocity.Y = -4f;
								}
								if (this.velocity.X == 0f)
								{
									this.Kill();
								}
							}
							else
							{
								this.velocity.Y = this.velocity.Y + 0.1f;
							}
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
								return;
							}
						}
						else
						{
							if (this.aiStyle == 33)
							{
								if (this.alpha > 0)
								{
									this.alpha -= 50;
									if (this.alpha < 0)
									{
										this.alpha = 0;
									}
								}
								float num352 = 4f;
								float num353 = this.ai[0];
								float num354 = this.ai[1];
								if (num353 == 0f && num354 == 0f)
								{
									num353 = 1f;
								}
								float num355 = (float)Math.Sqrt((double)(num353 * num353 + num354 * num354));
								num355 = num352 / num355;
								num353 *= num355;
								num354 *= num355;
								if (this.alpha < 70)
								{
									int num356 = 127;
									if (this.type == 310)
									{
										num356 = 187;
									}
									int num357 = Dust.NewDust(new Vector2(this.position.X, this.position.Y - 2f), 6, 6, num356, this.velocity.X, this.velocity.Y, 100, default(Color), 1.6f);
									Main.dust[num357].noGravity = true;
									Dust var_2_10AA3_cp_0_cp_0 = Main.dust[num357];
									var_2_10AA3_cp_0_cp_0.position.X = var_2_10AA3_cp_0_cp_0.position.X - num353 * 1f;
									Dust var_2_10ACB_cp_0_cp_0 = Main.dust[num357];
									var_2_10ACB_cp_0_cp_0.position.Y = var_2_10ACB_cp_0_cp_0.position.Y - num354 * 1f;
									Dust var_2_10AF3_cp_0_cp_0 = Main.dust[num357];
									var_2_10AF3_cp_0_cp_0.velocity.X = var_2_10AF3_cp_0_cp_0.velocity.X - num353;
									Dust var_2_10B15_cp_0_cp_0 = Main.dust[num357];
									var_2_10B15_cp_0_cp_0.velocity.Y = var_2_10B15_cp_0_cp_0.velocity.Y - num354;
								}
								if (this.localAI[0] == 0f)
								{
									this.ai[0] = this.velocity.X;
									this.ai[1] = this.velocity.Y;
									this.localAI[1] += 1f;
									if (this.localAI[1] >= 30f)
									{
										this.velocity.Y = this.velocity.Y + 0.09f;
										this.localAI[1] = 30f;
									}
								}
								else
								{
									if (!Collision.SolidCollision(this.position, this.width, this.height))
									{
										this.localAI[0] = 0f;
										this.localAI[1] = 30f;
									}
									this.damage = 0;
								}
								if (this.velocity.Y > 16f)
								{
									this.velocity.Y = 16f;
								}
								this.rotation = (float)Math.Atan2((double)this.ai[1], (double)this.ai[0]) + 1.57f;
								return;
							}
							if (this.aiStyle == 34)
							{
								this.rotation = this.velocity.ToRotation() + 1.57079637f;
								if (this.ai[1] == 1f)
								{
									float[] var_2_10C64_cp_0 = this.ai;
									int var_2_10C64_cp_1 = 0;
									float num73 = var_2_10C64_cp_0[var_2_10C64_cp_1];
									var_2_10C64_cp_0[var_2_10C64_cp_1] = num73 + 1f;
									if (this.ai[0] == 1f)
									{
										int num3;
										for (int num358 = 0; num358 < 8; num358 = num3 + 1)
										{
											int num359 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.8f);
											Main.dust[num359].noGravity = true;
											Dust dust = Main.dust[num359];
											dust.velocity *= 3f;
											Main.dust[num359].fadeIn = 0.5f;
											dust = Main.dust[num359];
											dust.position += this.velocity / 2f;
											dust = Main.dust[num359];
											dust.velocity += this.velocity / 4f + Main.player[this.owner].velocity * 0.1f;
											num3 = num358;
										}
									}
									if (this.ai[0] > 2f)
									{
										int num360 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
										Main.dust[num360].noGravity = true;
										Dust dust = Main.dust[num360];
										dust.velocity *= 0.2f;
										Main.dust[num360].position = Main.dust[num360].position.RotatedBy((double)this.rotation, base.Center);
										num360 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 15f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
										Main.dust[num360].noGravity = true;
										dust = Main.dust[num360];
										dust.velocity *= 0.2f;
										Main.dust[num360].position = Main.dust[num360].position.RotatedBy((double)this.rotation, base.Center);
										num360 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 10f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
										Main.dust[num360].noGravity = true;
										dust = Main.dust[num360];
										dust.velocity *= 0.2f;
										Main.dust[num360].position = Main.dust[num360].position.RotatedBy((double)this.rotation, base.Center);
										return;
									}
								}
								else
								{
									if (this.type < 415 || this.type > 418)
									{
										int num361 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
										Main.dust[num361].noGravity = true;
										Dust dust = Main.dust[num361];
										dust.velocity *= 0.2f;
										Main.dust[num361].position = Main.dust[num361].position.RotatedBy((double)this.rotation, base.Center);
										return;
									}
									float[] var_2_1104B_cp_0 = this.ai;
									int var_2_1104B_cp_1 = 0;
									float num73 = var_2_1104B_cp_0[var_2_1104B_cp_1];
									var_2_1104B_cp_0[var_2_1104B_cp_1] = num73 + 1f;
									if (this.ai[0] > 4f)
									{
										int num362 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
										Main.dust[num362].noGravity = true;
										Dust dust = Main.dust[num362];
										dust.velocity *= 0.2f;
										Main.dust[num362].position = Main.dust[num362].position.RotatedBy((double)this.rotation, base.Center);
										return;
									}
								}
							}
							else if (this.aiStyle == 35)
							{
								this.ai[0] += 1f;
								if (this.ai[0] > 30f)
								{
									this.velocity.Y = this.velocity.Y + 0.2f;
									this.velocity.X = this.velocity.X * 0.985f;
									if (this.velocity.Y > 14f)
									{
										this.velocity.Y = 14f;
									}
								}
								this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * (float)this.direction * 0.02f;
								if (this.owner == Main.myPlayer)
								{
									Vector2 vector29 = Collision.TileCollision(this.position, this.velocity, this.width, this.height, true, true, 1);
									bool flag9 = false;
									if (vector29 != this.velocity)
									{
										flag9 = true;
									}
									else
									{
										int num363 = (int)(base.Center.X + this.velocity.X) / 16;
										int num364 = (int)(base.Center.Y + this.velocity.Y) / 16;
										if (Main.tile[num363, num364] != null && Main.tile[num363, num364].active() && Main.tile[num363, num364].bottomSlope())
										{
											flag9 = true;
											this.position.Y = (float)(num364 * 16 + 16 + 8);
											this.position.X = (float)(num363 * 16 + 8);
										}
									}
									if (flag9)
									{
										int num365 = 213;
										if (this.type == 475)
										{
											num365 = 353;
										}
										if (this.type == 506)
										{
											num365 = 366;
										}
										if (this.type == 505)
										{
											num365 = 365;
										}
										int num366 = (int)(this.position.X + (float)(this.width / 2)) / 16;
										int num367 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
										this.position += vector29;
										int num368 = 10;
										if (Main.tile[num366, num367] != null)
										{
											while (Main.tile[num366, num367] != null && Main.tile[num366, num367].active())
											{
												if (!Main.tileRope[(int)Main.tile[num366, num367].type])
												{
													break;
												}
												num367++;
											}
											while (num368 > 0)
											{
												num368--;
												if (Main.tile[num366, num367] == null)
												{
													break;
												}
												if (Main.tile[num366, num367].active() && (Main.tileCut[(int)Main.tile[num366, num367].type] || Main.tile[num366, num367].type == 165))
												{
													WorldGen.KillTile(num366, num367, false, false, false);
													NetMessage.SendData(17, -1, -1, null, 0, (float)num366, (float)num367, 0f, 0, 0, 0);
												}
												if (!Main.tile[num366, num367].active())
												{
													WorldGen.PlaceTile(num366, num367, num365, false, false, -1, 0);
													NetMessage.SendData(17, -1, -1, null, 1, (float)num366, (float)num367, (float)num365, 0, 0, 0);
													this.ai[1] += 1f;
												}
												else
												{
													num368 = 0;
												}
												num367++;
											}
											this.Kill();
											return;
										}
									}
								}
							}
							else if (this.aiStyle == 36)
							{
								if (this.type != 307 && this.wet && !this.honeyWet)
								{
									this.Kill();
								}
								if (this.alpha > 0)
								{
									this.alpha -= 50;
								}
								else
								{
									this.extraUpdates = 0;
								}
								if (this.alpha < 0)
								{
									this.alpha = 0;
								}
								if (this.type == 307)
								{
									this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
									this.frameCounter++;
									if (this.frameCounter >= 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 2)
									{
										this.frame = 0;
									}
									int num3;
									for (int num369 = 0; num369 < 3; num369 = num3 + 1)
									{
										float num370 = this.velocity.X / 3f * (float)num369;
										float num371 = this.velocity.Y / 3f * (float)num369;
										int num372 = Dust.NewDust(this.position, this.width, this.height, 184, 0f, 0f, 0, default(Color), 1f);
										Main.dust[num372].position.X = base.Center.X - num370;
										Main.dust[num372].position.Y = base.Center.Y - num371;
										Dust dust = Main.dust[num372];
										dust.velocity *= 0f;
										Main.dust[num372].scale = 0.5f;
										num3 = num369;
									}
								}
								else
								{
									if (this.type == 316)
									{
										if (this.velocity.X > 0f)
										{
											this.spriteDirection = -1;
										}
										else if (this.velocity.X < 0f)
										{
											this.spriteDirection = 1;
										}
									}
									else if (this.velocity.X > 0f)
									{
										this.spriteDirection = 1;
									}
									else if (this.velocity.X < 0f)
									{
										this.spriteDirection = -1;
									}
									this.rotation = this.velocity.X * 0.1f;
									this.frameCounter++;
									if (this.frameCounter >= 3)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 3)
									{
										this.frame = 0;
									}
								}
								float num373 = this.position.X;
								float num374 = this.position.Y;
								float num375 = 100000f;
								bool flag10 = false;
								this.ai[0] += 1f;
								if (this.ai[0] > 30f)
								{
									this.ai[0] = 30f;
									int num3;
									for (int num376 = 0; num376 < 200; num376 = num3 + 1)
									{
										if (Main.npc[num376].CanBeChasedBy(this, false) && (!Main.npc[num376].wet || this.type == 307))
										{
											float num377 = Main.npc[num376].position.X + (float)(Main.npc[num376].width / 2);
											float num378 = Main.npc[num376].position.Y + (float)(Main.npc[num376].height / 2);
											float num379 = Math.Abs(this.position.X + (float)(this.width / 2) - num377) + Math.Abs(this.position.Y + (float)(this.height / 2) - num378);
											if (num379 < 800f && num379 < num375 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num376].position, Main.npc[num376].width, Main.npc[num376].height))
											{
												num375 = num379;
												num373 = num377;
												num374 = num378;
												flag10 = true;
											}
										}
										num3 = num376;
									}
								}
								if (!flag10)
								{
									num373 = this.position.X + (float)(this.width / 2) + this.velocity.X * 100f;
									num374 = this.position.Y + (float)(this.height / 2) + this.velocity.Y * 100f;
								}
								else if (this.type == 307)
								{
									this.friendly = true;
								}
								float num380 = 6f;
								float num381 = 0.1f;
								if (this.type == 189)
								{
									num380 = 7f;
									num381 = 0.15f;
								}
								if (this.type == 307)
								{
									num380 = 9f;
									num381 = 0.2f;
								}
								if (this.type == 316)
								{
									num380 = 10f;
									num381 = 0.25f;
								}
								if (this.type == 566)
								{
									num380 = 6.8f;
									num381 = 0.14f;
								}
								Vector2 vector30 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
								float num382 = num373 - vector30.X;
								float num383 = num374 - vector30.Y;
								float num384 = (float)Math.Sqrt((double)(num382 * num382 + num383 * num383));
								num384 = num380 / num384;
								num382 *= num384;
								num383 *= num384;
								if (this.velocity.X < num382)
								{
									this.velocity.X = this.velocity.X + num381;
									if (this.velocity.X < 0f && num382 > 0f)
									{
										this.velocity.X = this.velocity.X + num381 * 2f;
									}
								}
								else if (this.velocity.X > num382)
								{
									this.velocity.X = this.velocity.X - num381;
									if (this.velocity.X > 0f && num382 < 0f)
									{
										this.velocity.X = this.velocity.X - num381 * 2f;
									}
								}
								if (this.velocity.Y < num383)
								{
									this.velocity.Y = this.velocity.Y + num381;
									if (this.velocity.Y < 0f && num383 > 0f)
									{
										this.velocity.Y = this.velocity.Y + num381 * 2f;
										return;
									}
								}
								else if (this.velocity.Y > num383)
								{
									this.velocity.Y = this.velocity.Y - num381;
									if (this.velocity.Y > 0f && num383 < 0f)
									{
										this.velocity.Y = this.velocity.Y - num381 * 2f;
										return;
									}
								}
							}
							else if (this.aiStyle == 37)
							{
								if (this.ai[1] == 0f)
								{
									this.ai[1] = 1f;
									this.localAI[0] = base.Center.X - this.velocity.X * 1.5f;
									this.localAI[1] = base.Center.Y - this.velocity.Y * 1.5f;
								}
								Vector2 value8 = new Vector2(this.localAI[0], this.localAI[1]);
								this.rotation = (base.Center - value8).ToRotation() - 1.57079637f;
								if (this.ai[0] == 0f)
								{
									if (Collision.SolidCollision(this.position, this.width, this.height))
									{
										this.velocity *= -1f;
										this.ai[0] += 1f;
										return;
									}
									float num385 = Vector2.Distance(base.Center, value8);
									if (num385 > 300f)
									{
										this.velocity *= -1f;
										this.ai[0] += 1f;
										return;
									}
								}
								else if (Collision.SolidCollision(this.position, this.width, this.height) || Vector2.Distance(base.Center, value8) < this.velocity.Length())
								{
									this.Kill();
									return;
								}
							}
							else if (this.aiStyle == 38)
							{
								this.ai[0] += 1f;
								if (this.ai[0] >= 6f)
								{
									this.ai[0] = 0f;
									Main.PlaySound(SoundID.Item34, this.position);
									if (Main.myPlayer == this.owner)
									{
										Projectile.NewProjectile(this.position.X, this.position.Y, this.velocity.X, this.velocity.Y, 188, this.damage, this.knockBack, this.owner, 0f, 0f);
										return;
									}
								}
							}
							else if (this.aiStyle == 39)
							{
								this.alpha -= 50;
								if (this.alpha < 0)
								{
									this.alpha = 0;
								}
								if (Main.player[this.owner].dead)
								{
									this.Kill();
									return;
								}
								if (this.alpha == 0)
								{
									Main.player[this.owner].itemAnimation = 5;
									Main.player[this.owner].itemTime = 5;
									if (this.position.X + (float)(this.width / 2) > Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2))
									{
										Main.player[this.owner].ChangeDir(1);
									}
									else
									{
										Main.player[this.owner].ChangeDir(-1);
									}
								}
								Vector2 vector31 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
								float num386 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector31.X;
								float num387 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector31.Y;
								float num388 = (float)Math.Sqrt((double)(num386 * num386 + num387 * num387));
								if (!Main.player[this.owner].channel && this.alpha == 0)
								{
									this.ai[0] = 1f;
									this.ai[1] = -1f;
								}
								if (this.ai[1] > 0f && num388 > 1500f)
								{
									this.ai[1] = 0f;
									this.ai[0] = 1f;
								}
								if (this.ai[1] > 0f)
								{
									this.tileCollide = false;
									int num389 = (int)this.ai[1] - 1;
									if (Main.npc[num389].active && Main.npc[num389].life > 0)
									{
										float num390 = 16f;
										vector31 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										num386 = Main.npc[num389].position.X + (float)(Main.npc[num389].width / 2) - vector31.X;
										num387 = Main.npc[num389].position.Y + (float)(Main.npc[num389].height / 2) - vector31.Y;
										num388 = (float)Math.Sqrt((double)(num386 * num386 + num387 * num387));
										if (num388 < num390)
										{
											this.velocity.X = num386;
											this.velocity.Y = num387;
											if (num388 > num390 / 2f)
											{
												if (this.velocity.X < 0f)
												{
													this.spriteDirection = -1;
													this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
												}
												else
												{
													this.spriteDirection = 1;
													this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
												}
											}
										}
										else
										{
											num388 = num390 / num388;
											num386 *= num388;
											num387 *= num388;
											this.velocity.X = num386;
											this.velocity.Y = num387;
											if (this.velocity.X < 0f)
											{
												this.spriteDirection = -1;
												this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
											}
											else
											{
												this.spriteDirection = 1;
												this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
											}
										}
										this.ai[0] = 1f;
									}
									else
									{
										this.ai[1] = 0f;
										float num391 = this.position.X;
										float num392 = this.position.Y;
										float num393 = 3000f;
										int num394 = -1;
										int num3;
										for (int num395 = 0; num395 < 200; num395 = num3 + 1)
										{
											if (Main.npc[num395].CanBeChasedBy(this, false))
											{
												float num396 = Main.npc[num395].position.X + (float)(Main.npc[num395].width / 2);
												float num397 = Main.npc[num395].position.Y + (float)(Main.npc[num395].height / 2);
												float num398 = Math.Abs(this.position.X + (float)(this.width / 2) - num396) + Math.Abs(this.position.Y + (float)(this.height / 2) - num397);
												if (num398 < num393 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num395].position, Main.npc[num395].width, Main.npc[num395].height))
												{
													num393 = num398;
													num391 = num396;
													num392 = num397;
													num394 = num395;
												}
											}
											num3 = num395;
										}
										if (num394 >= 0)
										{
											float num399 = 16f;
											vector31 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											num386 = num391 - vector31.X;
											num387 = num392 - vector31.Y;
											num388 = (float)Math.Sqrt((double)(num386 * num386 + num387 * num387));
											num388 = num399 / num388;
											num386 *= num388;
											num387 *= num388;
											this.velocity.X = num386;
											this.velocity.Y = num387;
											this.ai[0] = 0f;
											this.ai[1] = (float)(num394 + 1);
										}
									}
								}
								else if (this.ai[0] == 0f)
								{
									if (num388 > 700f)
									{
										this.ai[0] = 1f;
									}
									if (this.velocity.X < 0f)
									{
										this.spriteDirection = -1;
										this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
									}
									else
									{
										this.spriteDirection = 1;
										this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
									}
								}
								else if (this.ai[0] == 1f)
								{
									this.tileCollide = false;
									if (this.velocity.X < 0f)
									{
										this.spriteDirection = 1;
										this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
									}
									else
									{
										this.spriteDirection = -1;
										this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
									}
									if (this.velocity.X < 0f)
									{
										this.spriteDirection = -1;
										this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
									}
									else
									{
										this.spriteDirection = 1;
										this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
									}
									float num400 = 20f;
									if (num388 < 70f)
									{
										this.Kill();
									}
									num388 = num400 / num388;
									num386 *= num388;
									num387 *= num388;
									this.velocity.X = num386;
									this.velocity.Y = num387;
								}
								this.frameCounter++;
								if (this.frameCounter >= 4)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame >= 4)
								{
									this.frame = 0;
									return;
								}
							}
							else
							{
								if (this.aiStyle == 40)
								{
									this.localAI[0] += 1f;
									if (this.localAI[0] > 3f)
									{
										this.localAI[0] = 100f;
										this.alpha -= 50;
										if (this.alpha < 0)
										{
											this.alpha = 0;
										}
									}
									this.frameCounter++;
									if (this.frameCounter >= 3)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 5)
									{
										this.frame = 0;
									}
									this.velocity.X = this.velocity.X + this.ai[0];
									this.velocity.Y = this.velocity.Y + this.ai[1];
									this.localAI[1] += 1f;
									if (this.localAI[1] == 50f)
									{
										this.localAI[1] = 51f;
										this.ai[0] = (float)Main.rand.Next(-100, 101) * 6E-05f;
										this.ai[1] = (float)Main.rand.Next(-100, 101) * 6E-05f;
									}
									if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 16f)
									{
										this.velocity.X = this.velocity.X * 0.95f;
										this.velocity.Y = this.velocity.Y * 0.95f;
									}
									if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 12f)
									{
										this.velocity.X = this.velocity.X * 1.05f;
										this.velocity.Y = this.velocity.Y * 1.05f;
									}
									this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 3.14f;
									return;
								}
								if (this.aiStyle == 41)
								{
									if (this.localAI[0] == 0f)
									{
										this.localAI[0] = 1f;
										this.frame = Main.rand.Next(3);
									}
									this.rotation += this.velocity.X * 0.01f;
									return;
								}
								if (this.aiStyle == 42)
								{
									if (!Main.player[this.owner].crystalLeaf)
									{
										this.Kill();
										return;
									}
									this.position.X = Main.player[this.owner].Center.X - (float)(this.width / 2);
									this.position.Y = Main.player[this.owner].Center.Y - (float)(this.height / 2) + Main.player[this.owner].gfxOffY - 60f;
									if (Main.player[this.owner].gravDir == -1f)
									{
										this.position.Y = this.position.Y + 120f;
										this.rotation = 3.14f;
									}
									else
									{
										this.rotation = 0f;
									}
									this.position.X = (float)((int)this.position.X);
									this.position.Y = (float)((int)this.position.Y);
									float num401 = (float)Main.mouseTextColor / 200f - 0.35f;
									num401 *= 0.2f;
									this.scale = num401 + 0.95f;
									if (this.owner == Main.myPlayer)
									{
										if (this.ai[0] != 0f)
										{
											this.ai[0] -= 1f;
											return;
										}
										float num402 = this.position.X;
										float num403 = this.position.Y;
										float num404 = 700f;
										bool flag11 = false;
										int num3;
										for (int num405 = 0; num405 < 200; num405 = num3 + 1)
										{
											if (Main.npc[num405].CanBeChasedBy(this, true))
											{
												float num406 = Main.npc[num405].position.X + (float)(Main.npc[num405].width / 2);
												float num407 = Main.npc[num405].position.Y + (float)(Main.npc[num405].height / 2);
												float num408 = Math.Abs(this.position.X + (float)(this.width / 2) - num406) + Math.Abs(this.position.Y + (float)(this.height / 2) - num407);
												if (num408 < num404 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num405].position, Main.npc[num405].width, Main.npc[num405].height))
												{
													num404 = num408;
													num402 = num406;
													num403 = num407;
													flag11 = true;
												}
											}
											num3 = num405;
										}
										if (flag11)
										{
											float num409 = 12f;
											Vector2 vector32 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num410 = num402 - vector32.X;
											float num411 = num403 - vector32.Y;
											float num412 = (float)Math.Sqrt((double)(num410 * num410 + num411 * num411));
											num412 = num409 / num412;
											num410 *= num412;
											num411 *= num412;
											Projectile.NewProjectile(base.Center.X - 4f, base.Center.Y, num410, num411, 227, Player.crystalLeafDamage, (float)Player.crystalLeafKB, this.owner, 0f, 0f);
											this.ai[0] = 50f;
											return;
										}
									}
								}
								else
								{
									if (this.aiStyle == 43)
									{
										Dust dust;
										if (this.localAI[1] == 0f)
										{
											Main.PlaySound(6, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
											this.localAI[1] += 1f;
											int num3;
											for (int num413 = 0; num413 < 5; num413 = num3 + 1)
											{
												int num414 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0f, 0f, 0, default(Color), 1f);
												Main.dust[num414].noGravity = true;
												dust = Main.dust[num414];
												dust.velocity *= 3f;
												Main.dust[num414].scale = 1.5f;
												num3 = num413;
											}
										}
										this.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0025f;
										this.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0025f;
										if (this.localAI[0] == 0f)
										{
											this.scale += 0.05f;
											if ((double)this.scale > 1.2)
											{
												this.localAI[0] = 1f;
											}
										}
										else
										{
											this.scale -= 0.05f;
											if ((double)this.scale < 0.8)
											{
												this.localAI[0] = 0f;
											}
										}
										this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 3.14f;
										int num415 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0f, 0f, 0, default(Color), 1f);
										Main.dust[num415].noGravity = true;
										dust = Main.dust[num415];
										dust.velocity *= 0.1f;
										Main.dust[num415].scale = 1.5f;
										return;
									}
									if (this.aiStyle == 44)
									{
										if (this.type == 228)
										{
											this.velocity *= 0.96f;
											this.alpha += 4;
											if (this.alpha > 255)
											{
												this.Kill();
											}
										}
										else if (this.type == 229)
										{
											if (this.ai[0] == 0f)
											{
												Main.PlaySound(SoundID.Item8, this.position);
											}
											this.ai[0] += 1f;
											if (this.ai[0] > 20f)
											{
												this.velocity.Y = this.velocity.Y + 0.3f;
												this.velocity.X = this.velocity.X * 0.98f;
											}
										}
										this.frameCounter++;
										if (this.frameCounter > 5)
										{
											this.frame++;
											this.frameCounter = 0;
										}
										if (this.frame >= Main.projFrames[this.type])
										{
											this.frame = 0;
											return;
										}
									}
									else if (this.aiStyle == 45)
									{
										if (this.type == 237 || this.type == 243)
										{
											float num416 = this.ai[0];
											float num417 = this.ai[1];
											if (num416 != 0f && num417 != 0f)
											{
												bool flag12 = false;
												bool flag13 = false;
												if ((this.velocity.X < 0f && base.Center.X < num416) || (this.velocity.X > 0f && base.Center.X > num416))
												{
													flag12 = true;
												}
												if ((this.velocity.Y < 0f && base.Center.Y < num417) || (this.velocity.Y > 0f && base.Center.Y > num417))
												{
													flag13 = true;
												}
												if (flag12 & flag13)
												{
													this.Kill();
												}
											}
											this.rotation += this.velocity.X * 0.02f;
											this.frameCounter++;
											if (this.frameCounter > 4)
											{
												this.frameCounter = 0;
												this.frame++;
												if (this.frame > 3)
												{
													this.frame = 0;
													return;
												}
											}
										}
										else if (this.type == 238 || this.type == 244)
										{
											this.frameCounter++;
											if (this.frameCounter > 8)
											{
												this.frameCounter = 0;
												this.frame++;
												if (this.frame > 5)
												{
													this.frame = 0;
												}
											}
											this.ai[1] += 1f;
											if (this.type == 244 && this.ai[1] >= 3600f)
											{
												this.alpha += 5;
												if (this.alpha > 255)
												{
													this.alpha = 255;
													this.Kill();
												}
											}
											else if (this.type == 238 && this.ai[1] >= 7200f)
											{
												this.alpha += 5;
												if (this.alpha > 255)
												{
													this.alpha = 255;
													this.Kill();
												}
											}
											else
											{
												this.ai[0] += 1f;
												if (this.type == 244)
												{
													if (this.ai[0] > 10f)
													{
														this.ai[0] = 0f;
														if (this.owner == Main.myPlayer)
														{
															int num418 = (int)(this.position.X + 14f + (float)Main.rand.Next(this.width - 28));
															int num419 = (int)(this.position.Y + (float)this.height + 4f);
															Projectile.NewProjectile((float)num418, (float)num419, 0f, 5f, 245, this.damage, 0f, this.owner, 0f, 0f);
														}
													}
												}
												else if (this.ai[0] > 8f)
												{
													this.ai[0] = 0f;
													if (this.owner == Main.myPlayer)
													{
														int num420 = (int)(this.position.X + 14f + (float)Main.rand.Next(this.width - 28));
														int num421 = (int)(this.position.Y + (float)this.height + 4f);
														Projectile.NewProjectile((float)num420, (float)num421, 0f, 5f, 239, this.damage, 0f, this.owner, 0f, 0f);
													}
												}
											}
											this.localAI[0] += 1f;
											if (this.localAI[0] >= 10f)
											{
												this.localAI[0] = 0f;
												int num422 = 0;
												int num423 = 0;
												float num424 = 0f;
												int num425 = this.type;
												int num3;
												for (int num426 = 0; num426 < 1000; num426 = num3 + 1)
												{
													if (Main.projectile[num426].active && Main.projectile[num426].owner == this.owner && Main.projectile[num426].type == num425 && Main.projectile[num426].ai[1] < 3600f)
													{
														num422++;
														if (Main.projectile[num426].ai[1] > num424)
														{
															num423 = num426;
															num424 = Main.projectile[num426].ai[1];
														}
													}
													num3 = num426;
												}
												if (this.type == 244)
												{
													if (num422 > 1)
													{
														Main.projectile[num423].netUpdate = true;
														Main.projectile[num423].ai[1] = 36000f;
														return;
													}
												}
												else if (num422 > 2)
												{
													Main.projectile[num423].netUpdate = true;
													Main.projectile[num423].ai[1] = 36000f;
													return;
												}
											}
										}
										else
										{
											if (this.type == 239)
											{
												this.alpha = 50;
												return;
											}
											if (this.type == 245)
											{
												this.alpha = 100;
												return;
											}
											if (this.type == 264)
											{
												this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
												return;
											}
										}
									}
									else if (this.aiStyle == 46)
									{
										int num427 = 1200;
										if (this.type == 250)
										{
											if (this.owner == Main.myPlayer)
											{
												this.localAI[0] += 1f;
												if (this.localAI[0] > 4f)
												{
													this.localAI[0] = 3f;
													Projectile.NewProjectile(base.Center.X, base.Center.Y, this.velocity.X * 0.001f, this.velocity.Y * 0.001f, 251, this.damage, this.knockBack, this.owner, 0f, 0f);
												}
												if (this.timeLeft > num427)
												{
													this.timeLeft = num427;
												}
											}
											float num428 = 1f;
											if (this.velocity.Y < 0f)
											{
												num428 -= this.velocity.Y / 3f;
											}
											this.ai[0] += num428;
											if (this.ai[0] > 30f)
											{
												this.velocity.Y = this.velocity.Y + 0.5f;
												if (this.velocity.Y > 0f)
												{
													this.velocity.X = this.velocity.X * 0.95f;
												}
												else
												{
													this.velocity.X = this.velocity.X * 1.05f;
												}
											}
											float num429 = this.velocity.X;
											float num430 = this.velocity.Y;
											float num431 = (float)Math.Sqrt((double)(num429 * num429 + num430 * num430));
											num431 = 15.95f * this.scale / num431;
											num429 *= num431;
											num430 *= num431;
											this.velocity.X = num429;
											this.velocity.Y = num430;
											this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
											return;
										}
										if (this.localAI[0] == 0f)
										{
											if (this.velocity.X > 0f)
											{
												this.spriteDirection = -1;
												this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
											}
											else
											{
												this.spriteDirection = 1;
												this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
											}
											this.localAI[0] = 1f;
											this.timeLeft = num427;
										}
										this.velocity.X = this.velocity.X * 0.98f;
										this.velocity.Y = this.velocity.Y * 0.98f;
										if (this.rotation == 0f)
										{
											this.alpha = 255;
											return;
										}
										if (this.timeLeft < 10)
										{
											this.alpha = 255 - (int)(255f * (float)this.timeLeft / 10f);
											return;
										}
										if (this.timeLeft > num427 - 10)
										{
											int num432 = num427 - this.timeLeft;
											this.alpha = 255 - (int)(255f * (float)num432 / 10f);
											return;
										}
										this.alpha = 0;
										return;
									}
									else if (this.aiStyle == 47)
									{
										if (this.ai[0] == 0f)
										{
											this.ai[0] = this.velocity.X;
											this.ai[1] = this.velocity.Y;
										}
										if (this.velocity.X > 0f)
										{
											this.rotation += (Math.Abs(this.velocity.Y) + Math.Abs(this.velocity.X)) * 0.001f;
										}
										else
										{
											this.rotation -= (Math.Abs(this.velocity.Y) + Math.Abs(this.velocity.X)) * 0.001f;
										}
										this.frameCounter++;
										if (this.frameCounter > 6)
										{
											this.frameCounter = 0;
											this.frame++;
											if (this.frame > 4)
											{
												this.frame = 0;
											}
										}
										if (Math.Sqrt((double)(this.velocity.X * this.velocity.X + this.velocity.Y * this.velocity.Y)) > 2.0)
										{
											this.velocity *= 0.98f;
										}
										int num3;
										for (int num433 = 0; num433 < 1000; num433 = num3 + 1)
										{
											if (num433 != this.whoAmI && Main.projectile[num433].active && Main.projectile[num433].owner == this.owner && Main.projectile[num433].type == this.type && this.timeLeft > Main.projectile[num433].timeLeft && Main.projectile[num433].timeLeft > 30)
											{
												Main.projectile[num433].timeLeft = 30;
											}
											num3 = num433;
										}
										int[] array = new int[20];
										int num434 = 0;
										float num435 = 300f;
										bool flag14 = false;
										for (int num436 = 0; num436 < 200; num436 = num3 + 1)
										{
											if (Main.npc[num436].CanBeChasedBy(this, false))
											{
												float num437 = Main.npc[num436].position.X + (float)(Main.npc[num436].width / 2);
												float num438 = Main.npc[num436].position.Y + (float)(Main.npc[num436].height / 2);
												float num439 = Math.Abs(this.position.X + (float)(this.width / 2) - num437) + Math.Abs(this.position.Y + (float)(this.height / 2) - num438);
												if (num439 < num435 && Collision.CanHit(base.Center, 1, 1, Main.npc[num436].Center, 1, 1))
												{
													if (num434 < 20)
													{
														array[num434] = num436;
														num434++;
													}
													flag14 = true;
												}
											}
											num3 = num436;
										}
										if (this.timeLeft < 30)
										{
											flag14 = false;
										}
										if (flag14)
										{
											int num440 = Main.rand.Next(num434);
											num440 = array[num440];
											float num441 = Main.npc[num440].position.X + (float)(Main.npc[num440].width / 2);
											float num442 = Main.npc[num440].position.Y + (float)(Main.npc[num440].height / 2);
											this.localAI[0] += 1f;
											if (this.localAI[0] > 8f)
											{
												this.localAI[0] = 0f;
												float num443 = 6f;
												Vector2 vector33 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												vector33 += this.velocity * 4f;
												float num444 = num441 - vector33.X;
												float num445 = num442 - vector33.Y;
												float num446 = (float)Math.Sqrt((double)(num444 * num444 + num445 * num445));
												num446 = num443 / num446;
												num444 *= num446;
												num445 *= num446;
												Projectile.NewProjectile(vector33.X, vector33.Y, num444, num445, 255, this.damage, this.knockBack, this.owner, 0f, 0f);
												return;
											}
										}
									}
									else if (this.aiStyle == 48)
									{
										if (this.type == 255)
										{
											int num3;
											for (int num447 = 0; num447 < 4; num447 = num3 + 1)
											{
												Vector2 vector34 = this.position;
												vector34 -= this.velocity * ((float)num447 * 0.25f);
												this.alpha = 255;
												int num448 = Dust.NewDust(vector34, 1, 1, 160, 0f, 0f, 0, default(Color), 1f);
												Main.dust[num448].position = vector34;
												Dust var_2_1470C_cp_0_cp_0 = Main.dust[num448];
												var_2_1470C_cp_0_cp_0.position.X = var_2_1470C_cp_0_cp_0.position.X + (float)(this.width / 2);
												Dust var_2_14731_cp_0_cp_0 = Main.dust[num448];
												var_2_14731_cp_0_cp_0.position.Y = var_2_14731_cp_0_cp_0.position.Y + (float)(this.height / 2);
												Main.dust[num448].scale = (float)Main.rand.Next(70, 110) * 0.013f;
												Dust dust = Main.dust[num448];
												dust.velocity *= 0.2f;
												num3 = num447;
											}
											return;
										}
										if (this.type == 433)
										{
											int num3;
											for (int num449 = 0; num449 < 2; num449 = num3 + 1)
											{
												Vector2 vector35 = this.position;
												vector35 -= this.velocity * ((float)num449 * 0.25f);
												this.alpha = 255;
												int num450 = Dust.NewDust(vector35, 1, 1, 160, 0f, 0f, 0, default(Color), 1f);
												Main.dust[num450].position = vector35;
												Dust var_2_14865_cp_0_cp_0 = Main.dust[num450];
												var_2_14865_cp_0_cp_0.position.X = var_2_14865_cp_0_cp_0.position.X + (float)(this.width / 2);
												Dust var_2_1488A_cp_0_cp_0 = Main.dust[num450];
												var_2_1488A_cp_0_cp_0.position.Y = var_2_1488A_cp_0_cp_0.position.Y + (float)(this.height / 2);
												if (Main.rand.Next(2) == 0)
												{
													Main.dust[num450].color = Color.LimeGreen;
												}
												else
												{
													Main.dust[num450].color = Color.CornflowerBlue;
												}
												Main.dust[num450].scale = (float)Main.rand.Next(70, 110) * 0.013f;
												Dust dust = Main.dust[num450];
												dust.velocity *= 0.2f;
												num3 = num449;
											}
											return;
										}
										if (this.type == 290)
										{
											if (this.localAI[0] == 0f)
											{
												Main.PlaySound(SoundID.Item8, this.position);
											}
											this.localAI[0] += 1f;
											if (this.localAI[0] > 3f)
											{
												int num3;
												for (int num451 = 0; num451 < 3; num451 = num3 + 1)
												{
													Vector2 vector36 = this.position;
													vector36 -= this.velocity * ((float)num451 * 0.3334f);
													this.alpha = 255;
													int num452 = Dust.NewDust(vector36, 1, 1, 173, 0f, 0f, 0, default(Color), 1f);
													Main.dust[num452].position = vector36;
													Main.dust[num452].scale = (float)Main.rand.Next(70, 110) * 0.013f;
													Dust dust = Main.dust[num452];
													dust.velocity *= 0.2f;
													num3 = num451;
												}
												return;
											}
										}
										else if (this.type == 294)
										{
											this.localAI[0] += 1f;
											if (this.localAI[0] > 9f)
											{
												int num3;
												for (int num453 = 0; num453 < 4; num453 = num3 + 1)
												{
													Vector2 vector37 = this.position;
													vector37 -= this.velocity * ((float)num453 * 0.25f);
													this.alpha = 255;
													int num454 = Dust.NewDust(vector37, 1, 1, 173, 0f, 0f, 0, default(Color), 1f);
													Main.dust[num454].position = vector37;
													Main.dust[num454].scale = (float)Main.rand.Next(70, 110) * 0.013f;
													Dust dust = Main.dust[num454];
													dust.velocity *= 0.2f;
													num3 = num453;
												}
												return;
											}
										}
										else
										{
											this.localAI[0] += 1f;
											if (this.localAI[0] > 3f)
											{
												int num3;
												for (int num455 = 0; num455 < 4; num455 = num3 + 1)
												{
													Vector2 vector38 = this.position;
													vector38 -= this.velocity * ((float)num455 * 0.25f);
													this.alpha = 255;
													int num456 = Dust.NewDust(vector38, 1, 1, 162, 0f, 0f, 0, default(Color), 1f);
													Main.dust[num456].position = vector38;
													Dust var_2_14CA2_cp_0_cp_0 = Main.dust[num456];
													var_2_14CA2_cp_0_cp_0.position.X = var_2_14CA2_cp_0_cp_0.position.X + (float)(this.width / 2);
													Dust var_2_14CC7_cp_0_cp_0 = Main.dust[num456];
													var_2_14CC7_cp_0_cp_0.position.Y = var_2_14CC7_cp_0_cp_0.position.Y + (float)(this.height / 2);
													Main.dust[num456].scale = (float)Main.rand.Next(70, 110) * 0.013f;
													Dust dust = Main.dust[num456];
													dust.velocity *= 0.2f;
													num3 = num455;
												}
												return;
											}
										}
									}
									else if (this.aiStyle == 49)
									{
										if (this.ai[1] == 0f)
										{
											this.ai[1] = 1f;
											Main.PlaySound(SoundID.Item14, this.position);
										}
										if (this.ai[1] == 1f)
										{
											if (this.velocity.X > 0f)
											{
												this.direction = 1;
											}
											else if (this.velocity.X < 0f)
											{
												this.direction = -1;
											}
											this.spriteDirection = this.direction;
											this.ai[0] += 1f;
											this.rotation += this.velocity.X * 0.05f + (float)this.direction * 0.05f;
											if (this.ai[0] >= 18f)
											{
												this.velocity.Y = this.velocity.Y + 0.28f;
												this.velocity.X = this.velocity.X * 0.99f;
											}
											if ((double)this.velocity.Y > 15.9)
											{
												this.velocity.Y = 15.9f;
											}
											if (this.ai[0] > 2f)
											{
												this.alpha = 0;
												if (this.ai[0] == 3f)
												{
													int num3;
													for (int num457 = 0; num457 < 10; num457 = num3 + 1)
													{
														int num458 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
														Dust dust = Main.dust[num458];
														dust.velocity *= 0.5f;
														dust = Main.dust[num458];
														dust.velocity += this.velocity * 0.1f;
														num3 = num457;
													}
													for (int num459 = 0; num459 < 5; num459 = num3 + 1)
													{
														int num460 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
														Main.dust[num460].noGravity = true;
														Dust dust = Main.dust[num460];
														dust.velocity *= 3f;
														dust = Main.dust[num460];
														dust.velocity += this.velocity * 0.2f;
														num460 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
														dust = Main.dust[num460];
														dust.velocity *= 2f;
														dust = Main.dust[num460];
														dust.velocity += this.velocity * 0.3f;
														num3 = num459;
													}
													for (int num461 = 0; num461 < 1; num461 = num3 + 1)
													{
														int num462 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64), 1f);
														Gore gore = Main.gore[num462];
														gore.position += this.velocity * 1.25f;
														Main.gore[num462].scale = 1.5f;
														gore = Main.gore[num462];
														gore.velocity += this.velocity * 0.5f;
														gore = Main.gore[num462];
														gore.velocity *= 0.02f;
														num3 = num461;
													}
													return;
												}
											}
										}
										else if (this.ai[1] == 2f)
										{
											this.rotation = 0f;
											this.velocity.X = this.velocity.X * 0.95f;
											this.velocity.Y = this.velocity.Y + 0.2f;
											return;
										}
									}
									else if (this.aiStyle == 50)
									{
										if (this.type == 291)
										{
											if (this.localAI[0] == 0f)
											{
												Main.PlaySound(SoundID.Item20, this.position);
												this.localAI[0] += 1f;
											}
											bool flag15 = false;
											bool flag16 = false;
											if (this.velocity.X < 0f && this.position.X < this.ai[0])
											{
												flag15 = true;
											}
											if (this.velocity.X > 0f && this.position.X > this.ai[0])
											{
												flag15 = true;
											}
											if (this.velocity.Y < 0f && this.position.Y < this.ai[1])
											{
												flag16 = true;
											}
											if (this.velocity.Y > 0f && this.position.Y > this.ai[1])
											{
												flag16 = true;
											}
											if (flag15 & flag16)
											{
												this.Kill();
											}
											int num3;
											for (int num463 = 0; num463 < 10; num463 = num3 + 1)
											{
												int num464 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0f, 0f, 100, default(Color), 1.2f);
												Main.dust[num464].noGravity = true;
												Dust dust = Main.dust[num464];
												dust.velocity *= 0.5f;
												dust = Main.dust[num464];
												dust.velocity += this.velocity * 0.1f;
												num3 = num463;
											}
											return;
										}
										if (this.type == 295)
										{
											int num3;
											for (int num465 = 0; num465 < 8; num465 = num3 + 1)
											{
												int num466 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0f, 0f, 100, default(Color), 1.2f);
												Main.dust[num466].noGravity = true;
												Dust dust = Main.dust[num466];
												dust.velocity *= 0.5f;
												dust = Main.dust[num466];
												dust.velocity += this.velocity * 0.1f;
												num3 = num465;
											}
											return;
										}
										if (this.localAI[0] == 0f)
										{
											Main.PlaySound(SoundID.Item74, this.position);
											this.localAI[0] += 1f;
										}
										this.ai[0] += 1f;
										if (this.type == 296)
										{
											this.ai[0] += 3f;
										}
										float num467 = 25f;
										if (this.ai[0] > 180f)
										{
											num467 -= (this.ai[0] - 180f) / 2f;
										}
										if (num467 <= 0f)
										{
											num467 = 0f;
											this.Kill();
										}
										if (this.type == 296)
										{
											num467 *= 0.7f;
										}
										int num468 = 0;
										while ((float)num468 < num467)
										{
											float num469 = (float)Main.rand.Next(-10, 11);
											float num470 = (float)Main.rand.Next(-10, 11);
											float num471 = (float)Main.rand.Next(3, 9);
											float num472 = (float)Math.Sqrt((double)(num469 * num469 + num470 * num470));
											num472 = num471 / num472;
											num469 *= num472;
											num470 *= num472;
											int num473 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0f, 0f, 100, default(Color), 1.5f);
											Main.dust[num473].noGravity = true;
											Main.dust[num473].position.X = base.Center.X;
											Main.dust[num473].position.Y = base.Center.Y;
											Dust var_2_157AD_cp_0_cp_0 = Main.dust[num473];
											var_2_157AD_cp_0_cp_0.position.X = var_2_157AD_cp_0_cp_0.position.X + (float)Main.rand.Next(-10, 11);
											Dust var_2_157D8_cp_0_cp_0 = Main.dust[num473];
											var_2_157D8_cp_0_cp_0.position.Y = var_2_157D8_cp_0_cp_0.position.Y + (float)Main.rand.Next(-10, 11);
											Main.dust[num473].velocity.X = num469;
											Main.dust[num473].velocity.Y = num470;
											int num3 = num468;
											num468 = num3 + 1;
										}
										return;
									}
									else if (this.aiStyle == 51)
									{
										if (this.type == 297)
										{
											this.localAI[0] += 1f;
											if (this.localAI[0] > 4f)
											{
												int num3;
												for (int num474 = 0; num474 < 5; num474 = num3 + 1)
												{
													int num475 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0f, 0f, 100, default(Color), 2f);
													Main.dust[num475].noGravity = true;
													Dust dust = Main.dust[num475];
													dust.velocity *= 0f;
													num3 = num474;
												}
											}
										}
										else
										{
											if (this.localAI[0] == 0f)
											{
												Main.PlaySound(SoundID.Item8, this.position);
												this.localAI[0] += 1f;
											}
											int num3;
											for (int num476 = 0; num476 < 9; num476 = num3 + 1)
											{
												int num477 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0f, 0f, 100, default(Color), 1.3f);
												Main.dust[num477].noGravity = true;
												Dust dust = Main.dust[num477];
												dust.velocity *= 0f;
												num3 = num476;
											}
										}
										float num478 = base.Center.X;
										float num479 = base.Center.Y;
										float num480 = 400f;
										bool flag17 = false;
										if (this.type == 297)
										{
											int num3;
											for (int num481 = 0; num481 < 200; num481 = num3 + 1)
											{
												if (Main.npc[num481].CanBeChasedBy(this, false) && base.Distance(Main.npc[num481].Center) < num480 && Collision.CanHit(base.Center, 1, 1, Main.npc[num481].Center, 1, 1))
												{
													float num482 = Main.npc[num481].position.X + (float)(Main.npc[num481].width / 2);
													float num483 = Main.npc[num481].position.Y + (float)(Main.npc[num481].height / 2);
													float num484 = Math.Abs(this.position.X + (float)(this.width / 2) - num482) + Math.Abs(this.position.Y + (float)(this.height / 2) - num483);
													if (num484 < num480)
													{
														num480 = num484;
														num478 = num482;
														num479 = num483;
														flag17 = true;
													}
												}
												num3 = num481;
											}
										}
										else
										{
											num480 = 200f;
											int num3;
											for (int num485 = 0; num485 < 255; num485 = num3 + 1)
											{
												if (Main.player[num485].active && !Main.player[num485].dead)
												{
													float num486 = Main.player[num485].position.X + (float)(Main.player[num485].width / 2);
													float num487 = Main.player[num485].position.Y + (float)(Main.player[num485].height / 2);
													float num488 = Math.Abs(this.position.X + (float)(this.width / 2) - num486) + Math.Abs(this.position.Y + (float)(this.height / 2) - num487);
													if (num488 < num480)
													{
														num480 = num488;
														num478 = num486;
														num479 = num487;
														flag17 = true;
													}
												}
												num3 = num485;
											}
										}
										if (flag17)
										{
											float num489 = 3f;
											if (this.type == 297)
											{
												num489 = 6f;
											}
											Vector2 vector39 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num490 = num478 - vector39.X;
											float num491 = num479 - vector39.Y;
											float num492 = (float)Math.Sqrt((double)(num490 * num490 + num491 * num491));
											num492 = num489 / num492;
											num490 *= num492;
											num491 *= num492;
											if (this.type == 297)
											{
												this.velocity.X = (this.velocity.X * 20f + num490) / 21f;
												this.velocity.Y = (this.velocity.Y * 20f + num491) / 21f;
												return;
											}
											this.velocity.X = (this.velocity.X * 100f + num490) / 101f;
											this.velocity.Y = (this.velocity.Y * 100f + num491) / 101f;
											return;
										}
									}
									else if (this.aiStyle == 52)
									{
										int num493 = (int)this.ai[0];
										float num494 = 4f;
										Vector2 vector40 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										float num495 = Main.player[num493].Center.X - vector40.X;
										float num496 = Main.player[num493].Center.Y - vector40.Y;
										float num497 = (float)Math.Sqrt((double)(num495 * num495 + num496 * num496));
										if (num497 < 50f && this.position.X < Main.player[num493].position.X + (float)Main.player[num493].width && this.position.X + (float)this.width > Main.player[num493].position.X && this.position.Y < Main.player[num493].position.Y + (float)Main.player[num493].height && this.position.Y + (float)this.height > Main.player[num493].position.Y)
										{
											if (this.owner == Main.myPlayer && !Main.player[Main.myPlayer].moonLeech)
											{
												int num498 = (int)this.ai[1];
												Main.player[num493].HealEffect(num498, false);
												Player player = Main.player[num493];
												player.statLife += num498;
												if (Main.player[num493].statLife > Main.player[num493].statLifeMax2)
												{
													Main.player[num493].statLife = Main.player[num493].statLifeMax2;
												}
												NetMessage.SendData(66, -1, -1, null, num493, (float)num498, 0f, 0f, 0, 0, 0);
											}
											this.Kill();
										}
										num497 = num494 / num497;
										num495 *= num497;
										num496 *= num497;
										this.velocity.X = (this.velocity.X * 15f + num495) / 16f;
										this.velocity.Y = (this.velocity.Y * 15f + num496) / 16f;
										int num3;
										if (this.type == 305)
										{
											for (int num499 = 0; num499 < 3; num499 = num3 + 1)
											{
												float num500 = this.velocity.X * 0.334f * (float)num499;
												float num501 = -(this.velocity.Y * 0.334f) * (float)num499;
												int num502 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 183, 0f, 0f, 100, default(Color), 1.1f);
												Main.dust[num502].noGravity = true;
												Dust dust = Main.dust[num502];
												dust.velocity *= 0f;
												Dust var_2_1633A_cp_0_cp_0 = Main.dust[num502];
												var_2_1633A_cp_0_cp_0.position.X = var_2_1633A_cp_0_cp_0.position.X - num500;
												Dust var_2_1635C_cp_0_cp_0 = Main.dust[num502];
												var_2_1635C_cp_0_cp_0.position.Y = var_2_1635C_cp_0_cp_0.position.Y - num501;
												num3 = num499;
											}
											return;
										}
										for (int num503 = 0; num503 < 5; num503 = num3 + 1)
										{
											float num504 = this.velocity.X * 0.2f * (float)num503;
											float num505 = -(this.velocity.Y * 0.2f) * (float)num503;
											int num506 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0f, 0f, 100, default(Color), 1.3f);
											Main.dust[num506].noGravity = true;
											Dust dust = Main.dust[num506];
											dust.velocity *= 0f;
											Dust var_2_16471_cp_0_cp_0 = Main.dust[num506];
											var_2_16471_cp_0_cp_0.position.X = var_2_16471_cp_0_cp_0.position.X - num504;
											Dust var_2_16493_cp_0_cp_0 = Main.dust[num506];
											var_2_16493_cp_0_cp_0.position.Y = var_2_16493_cp_0_cp_0.position.Y - num505;
											num3 = num503;
										}
										return;
									}
									else if (this.aiStyle == 53)
									{
										if (this.localAI[0] == 0f)
										{
											this.localAI[1] = 1f;
											this.localAI[0] = 1f;
											this.ai[0] = 120f;
											int num507 = 80;
											Main.PlaySound(SoundID.Item46, this.position);
											if (this.type == 308)
											{
												int num3;
												for (int num508 = 0; num508 < num507; num508 = num3 + 1)
												{
													int num509 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 16f), this.width, this.height - 16, 185, 0f, 0f, 0, default(Color), 1f);
													Dust dust = Main.dust[num509];
													dust.velocity *= 2f;
													Main.dust[num509].noGravity = true;
													dust = Main.dust[num509];
													dust.scale *= 1.15f;
													num3 = num508;
												}
											}
											if (this.type == 377)
											{
												this.frame = 4;
												num507 = 40;
												int num3;
												for (int num510 = 0; num510 < num507; num510 = num3 + 1)
												{
													int num511 = Dust.NewDust(this.position + Vector2.UnitY * 16f, this.width, this.height - 16, 171, 0f, 0f, 100, default(Color), 1f);
													Main.dust[num511].scale = (float)Main.rand.Next(1, 10) * 0.1f;
													Main.dust[num511].noGravity = true;
													Main.dust[num511].fadeIn = 1.5f;
													Dust dust = Main.dust[num511];
													dust.velocity *= 0.75f;
													num3 = num510;
												}
											}
										}
										this.velocity.X = 0f;
										this.velocity.Y = this.velocity.Y + 0.2f;
										if (this.velocity.Y > 16f)
										{
											this.velocity.Y = 16f;
										}
										bool flag18 = false;
										float num512 = base.Center.X;
										float num513 = base.Center.Y;
										float num514 = 1000f;
										NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
										if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
										{
											float num515 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
											float num516 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
											float num517 = Math.Abs(this.position.X + (float)(this.width / 2) - num515) + Math.Abs(this.position.Y + (float)(this.height / 2) - num516);
											if (num517 < num514 && Collision.CanHit(this.position, this.width, this.height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
											{
												num514 = num517;
												num512 = num515;
												num513 = num516;
												flag18 = true;
											}
										}
										if (!flag18)
										{
											int num3;
											for (int num518 = 0; num518 < 200; num518 = num3 + 1)
											{
												if (Main.npc[num518].CanBeChasedBy(this, false))
												{
													float num519 = Main.npc[num518].position.X + (float)(Main.npc[num518].width / 2);
													float num520 = Main.npc[num518].position.Y + (float)(Main.npc[num518].height / 2);
													float num521 = Math.Abs(this.position.X + (float)(this.width / 2) - num519) + Math.Abs(this.position.Y + (float)(this.height / 2) - num520);
													if (num521 < num514 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num518].position, Main.npc[num518].width, Main.npc[num518].height))
													{
														num514 = num521;
														num512 = num519;
														num513 = num520;
														flag18 = true;
													}
												}
												num3 = num518;
											}
										}
										if (flag18)
										{
											float num522 = num512;
											float num523 = num513;
											num512 -= base.Center.X;
											num513 -= base.Center.Y;
											int num524 = 0;
											if (this.frameCounter > 0)
											{
												int num3 = this.frameCounter;
												this.frameCounter = num3 - 1;
											}
											if (this.frameCounter <= 0)
											{
												int num525 = this.spriteDirection;
												if (num512 < 0f)
												{
													this.spriteDirection = -1;
												}
												else
												{
													this.spriteDirection = 1;
												}
												if (num513 > 0f)
												{
													num524 = 0;
												}
												else if (Math.Abs(num513) > Math.Abs(num512) * 3f)
												{
													num524 = 4;
												}
												else if (Math.Abs(num513) > Math.Abs(num512) * 2f)
												{
													num524 = 3;
												}
												else if (Math.Abs(num512) > Math.Abs(num513) * 3f)
												{
													num524 = 0;
												}
												else if (Math.Abs(num512) > Math.Abs(num513) * 2f)
												{
													num524 = 1;
												}
												else
												{
													num524 = 2;
												}
												int num526 = this.frame;
												if (this.type == 308)
												{
													this.frame = num524 * 2;
												}
												else if (this.type == 377)
												{
													this.frame = num524;
												}
												if (this.ai[0] > 40f && this.localAI[1] == 0f && this.type == 308)
												{
													this.frame++;
												}
												if (num526 != this.frame || num525 != this.spriteDirection)
												{
													this.frameCounter = 8;
													if (this.ai[0] <= 0f)
													{
														this.frameCounter = 4;
													}
												}
											}
											if (this.ai[0] <= 0f)
											{
												this.localAI[1] = 0f;
												this.ai[0] = 60f;
												if (Main.myPlayer == this.owner)
												{
													float num527 = 6f;
													int num528 = 309;
													if (this.type == 377)
													{
														num528 = 378;
														num527 = 9f;
													}
													Vector2 vector41 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
													if (num524 == 0)
													{
														vector41.Y += 12f;
														vector41.X += (float)(24 * this.spriteDirection);
													}
													else if (num524 == 1)
													{
														vector41.Y += 0f;
														vector41.X += (float)(24 * this.spriteDirection);
													}
													else if (num524 == 2)
													{
														vector41.Y -= 2f;
														vector41.X += (float)(24 * this.spriteDirection);
													}
													else if (num524 == 3)
													{
														vector41.Y -= 6f;
														vector41.X += (float)(14 * this.spriteDirection);
													}
													else if (num524 == 4)
													{
														vector41.Y -= 14f;
														vector41.X += (float)(2 * this.spriteDirection);
													}
													if (this.spriteDirection < 0)
													{
														vector41.X += 10f;
													}
													float num529 = num522 - vector41.X;
													float num530 = num523 - vector41.Y;
													float num531 = (float)Math.Sqrt((double)(num529 * num529 + num530 * num530));
													num531 = num527 / num531;
													num529 *= num531;
													num530 *= num531;
													int num532 = this.damage;
													int num533 = Projectile.NewProjectile(vector41.X, vector41.Y, num529, num530, num528, num532, this.knockBack, Main.myPlayer, 0f, 0f);
												}
											}
										}
										else if (this.ai[0] <= 60f && (this.frame == 1 || this.frame == 3 || this.frame == 5 || this.frame == 7 || this.frame == 9))
										{
											this.frame--;
										}
										if (this.ai[0] > 0f)
										{
											this.ai[0] -= 1f;
											return;
										}
									}
									else if (this.aiStyle == 54)
									{
										if (this.type == 317)
										{
											if (Main.player[Main.myPlayer].dead)
											{
												Main.player[Main.myPlayer].raven = false;
											}
											if (Main.player[Main.myPlayer].raven)
											{
												this.timeLeft = 2;
											}
										}
										int num3;
										for (int num534 = 0; num534 < 1000; num534 = num3 + 1)
										{
											if (num534 != this.whoAmI && Main.projectile[num534].active && Main.projectile[num534].owner == this.owner && Main.projectile[num534].type == this.type && Math.Abs(this.position.X - Main.projectile[num534].position.X) + Math.Abs(this.position.Y - Main.projectile[num534].position.Y) < (float)this.width)
											{
												if (this.position.X < Main.projectile[num534].position.X)
												{
													this.velocity.X = this.velocity.X - 0.05f;
												}
												else
												{
													this.velocity.X = this.velocity.X + 0.05f;
												}
												if (this.position.Y < Main.projectile[num534].position.Y)
												{
													this.velocity.Y = this.velocity.Y - 0.05f;
												}
												else
												{
													this.velocity.Y = this.velocity.Y + 0.05f;
												}
											}
											num3 = num534;
										}
										float num535 = this.position.X;
										float num536 = this.position.Y;
										float num537 = 900f;
										bool flag19 = false;
										int num538 = 500;
										if (this.ai[1] != 0f || this.friendly)
										{
											num538 = 1400;
										}
										if (Math.Abs(base.Center.X - Main.player[this.owner].Center.X) + Math.Abs(base.Center.Y - Main.player[this.owner].Center.Y) > (float)num538)
										{
											this.ai[0] = 1f;
										}
										if (this.ai[0] == 0f)
										{
											this.tileCollide = true;
											NPC ownerMinionAttackTargetNPC2 = this.OwnerMinionAttackTargetNPC;
											if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this, false))
											{
												float num539 = ownerMinionAttackTargetNPC2.position.X + (float)(ownerMinionAttackTargetNPC2.width / 2);
												float num540 = ownerMinionAttackTargetNPC2.position.Y + (float)(ownerMinionAttackTargetNPC2.height / 2);
												float num541 = Math.Abs(this.position.X + (float)(this.width / 2) - num539) + Math.Abs(this.position.Y + (float)(this.height / 2) - num540);
												if (num541 < num537 && Collision.CanHit(this.position, this.width, this.height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
												{
													num537 = num541;
													num535 = num539;
													num536 = num540;
													flag19 = true;
												}
											}
											if (!flag19)
											{
												for (int num542 = 0; num542 < 200; num542 = num3 + 1)
												{
													if (Main.npc[num542].CanBeChasedBy(this, false))
													{
														float num543 = Main.npc[num542].position.X + (float)(Main.npc[num542].width / 2);
														float num544 = Main.npc[num542].position.Y + (float)(Main.npc[num542].height / 2);
														float num545 = Math.Abs(this.position.X + (float)(this.width / 2) - num543) + Math.Abs(this.position.Y + (float)(this.height / 2) - num544);
														if (num545 < num537 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num542].position, Main.npc[num542].width, Main.npc[num542].height))
														{
															num537 = num545;
															num535 = num543;
															num536 = num544;
															flag19 = true;
														}
													}
													num3 = num542;
												}
											}
										}
										else
										{
											this.tileCollide = false;
										}
										if (!flag19)
										{
											this.friendly = true;
											float num546 = 8f;
											if (this.ai[0] == 1f)
											{
												num546 = 12f;
											}
											Vector2 vector42 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num547 = Main.player[this.owner].Center.X - vector42.X;
											float num548 = Main.player[this.owner].Center.Y - vector42.Y - 60f;
											float num549 = (float)Math.Sqrt((double)(num547 * num547 + num548 * num548));
											if (num549 < 100f && this.ai[0] == 1f && !Collision.SolidCollision(this.position, this.width, this.height))
											{
												this.ai[0] = 0f;
											}
											if (num549 > 2000f)
											{
												this.position.X = Main.player[this.owner].Center.X - (float)(this.width / 2);
												this.position.Y = Main.player[this.owner].Center.Y - (float)(this.width / 2);
											}
											if (num549 > 70f)
											{
												num549 = num546 / num549;
												num547 *= num549;
												num548 *= num549;
												this.velocity.X = (this.velocity.X * 20f + num547) / 21f;
												this.velocity.Y = (this.velocity.Y * 20f + num548) / 21f;
											}
											else
											{
												if (this.velocity.X == 0f && this.velocity.Y == 0f)
												{
													this.velocity.X = -0.15f;
													this.velocity.Y = -0.05f;
												}
												this.velocity *= 1.01f;
											}
											this.friendly = false;
											this.rotation = this.velocity.X * 0.05f;
											this.frameCounter++;
											if (this.frameCounter >= 4)
											{
												this.frameCounter = 0;
												this.frame++;
											}
											if (this.frame > 3)
											{
												this.frame = 0;
											}
											if ((double)Math.Abs(this.velocity.X) > 0.2)
											{
												this.spriteDirection = -this.direction;
												return;
											}
										}
										else
										{
											if (this.ai[1] == -1f)
											{
												this.ai[1] = 17f;
											}
											if (this.ai[1] > 0f)
											{
												this.ai[1] -= 1f;
											}
											if (this.ai[1] == 0f)
											{
												this.friendly = true;
												float num550 = 8f;
												Vector2 vector43 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												float num551 = num535 - vector43.X;
												float num552 = num536 - vector43.Y;
												float num553 = (float)Math.Sqrt((double)(num551 * num551 + num552 * num552));
												if (num553 < 100f)
												{
													num550 = 10f;
												}
												num553 = num550 / num553;
												num551 *= num553;
												num552 *= num553;
												this.velocity.X = (this.velocity.X * 14f + num551) / 15f;
												this.velocity.Y = (this.velocity.Y * 14f + num552) / 15f;
											}
											else
											{
												this.friendly = false;
												if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 10f)
												{
													this.velocity *= 1.05f;
												}
											}
											this.rotation = this.velocity.X * 0.05f;
											this.frameCounter++;
											if (this.frameCounter >= 4)
											{
												this.frameCounter = 0;
												this.frame++;
											}
											if (this.frame < 4)
											{
												this.frame = 4;
											}
											if (this.frame > 7)
											{
												this.frame = 4;
											}
											if ((double)Math.Abs(this.velocity.X) > 0.2)
											{
												this.spriteDirection = -this.direction;
												return;
											}
										}
									}
									else if (this.aiStyle == 55)
									{
										this.frameCounter++;
										if (this.frameCounter > 0)
										{
											this.frame++;
											this.frameCounter = 0;
											if (this.frame > 2)
											{
												this.frame = 0;
											}
										}
										if (this.velocity.X < 0f)
										{
											this.spriteDirection = -1;
											this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
										}
										else
										{
											this.spriteDirection = 1;
											this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
										}
										if (this.ai[0] >= 0f && this.ai[0] < 200f)
										{
											int num554 = (int)this.ai[0];
											if (Main.npc[num554].active)
											{
												float num555 = 8f;
												Vector2 vector44 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												float num556 = Main.npc[num554].position.X - vector44.X;
												float num557 = Main.npc[num554].position.Y - vector44.Y;
												float num558 = (float)Math.Sqrt((double)(num556 * num556 + num557 * num557));
												num558 = num555 / num558;
												num556 *= num558;
												num557 *= num558;
												this.velocity.X = (this.velocity.X * 14f + num556) / 15f;
												this.velocity.Y = (this.velocity.Y * 14f + num557) / 15f;
											}
											else
											{
												float num559 = 1000f;
												int num3;
												for (int num560 = 0; num560 < 200; num560 = num3 + 1)
												{
													if (Main.npc[num560].CanBeChasedBy(this, false))
													{
														float num561 = Main.npc[num560].position.X + (float)(Main.npc[num560].width / 2);
														float num562 = Main.npc[num560].position.Y + (float)(Main.npc[num560].height / 2);
														float num563 = Math.Abs(this.position.X + (float)(this.width / 2) - num561) + Math.Abs(this.position.Y + (float)(this.height / 2) - num562);
														if (num563 < num559 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num560].position, Main.npc[num560].width, Main.npc[num560].height))
														{
															num559 = num563;
															this.ai[0] = (float)num560;
														}
													}
													num3 = num560;
												}
											}
											int num564 = 8;
											int num565 = Dust.NewDust(new Vector2(this.position.X + (float)num564, this.position.Y + (float)num564), this.width - num564 * 2, this.height - num564 * 2, 6, 0f, 0f, 0, default(Color), 1f);
											Dust dust = Main.dust[num565];
											dust.velocity *= 0.5f;
											dust = Main.dust[num565];
											dust.velocity += this.velocity * 0.5f;
											Main.dust[num565].noGravity = true;
											Main.dust[num565].noLight = true;
											Main.dust[num565].scale = 1.4f;
											return;
										}
										this.Kill();
										return;
									}
									else
									{
										if (this.aiStyle == 56)
										{
											if (this.localAI[0] == 0f)
											{
												this.localAI[0] = 1f;
												this.rotation = this.ai[0];
												this.spriteDirection = -(int)this.ai[1];
											}
											if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 16f)
											{
												this.velocity *= 1.05f;
											}
											if (this.velocity.X < 0f)
											{
												this.direction = -1;
											}
											else
											{
												this.direction = 1;
											}
											this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.025f * (float)this.direction;
											return;
										}
										if (this.aiStyle == 57)
										{
											this.ai[0] += 1f;
											if (this.ai[0] > 30f)
											{
												this.ai[0] = 30f;
												this.velocity.Y = this.velocity.Y + 0.25f;
												if (this.velocity.Y > 16f)
												{
													this.velocity.Y = 16f;
												}
												this.velocity.X = this.velocity.X * 0.995f;
											}
											this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
											this.alpha -= 50;
											if (this.alpha < 0)
											{
												this.alpha = 0;
											}
											if (this.owner == Main.myPlayer)
											{
												this.localAI[0] += 1f;
												if (this.localAI[0] >= 4f)
												{
													this.localAI[0] = 0f;
													int num566 = 0;
													int num3;
													for (int num567 = 0; num567 < 1000; num567 = num3 + 1)
													{
														if (Main.projectile[num567].active && Main.projectile[num567].owner == this.owner && Main.projectile[num567].type == 344)
														{
															num566++;
														}
														num3 = num567;
													}
													float num568 = (float)this.damage * 0.8f;
													if (num566 > 100)
													{
														float num569 = (float)(num566 - 100);
														num569 = 1f - num569 / 100f;
														num568 *= num569;
													}
													if (num566 > 100)
													{
														this.localAI[0] -= 1f;
													}
													if (num566 > 120)
													{
														this.localAI[0] -= 1f;
													}
													if (num566 > 140)
													{
														this.localAI[0] -= 1f;
													}
													if (num566 > 150)
													{
														this.localAI[0] -= 1f;
													}
													if (num566 > 160)
													{
														this.localAI[0] -= 1f;
													}
													if (num566 > 165)
													{
														this.localAI[0] -= 1f;
													}
													if (num566 > 170)
													{
														this.localAI[0] -= 2f;
													}
													if (num566 > 175)
													{
														this.localAI[0] -= 3f;
													}
													if (num566 > 180)
													{
														this.localAI[0] -= 4f;
													}
													if (num566 > 185)
													{
														this.localAI[0] -= 5f;
													}
													if (num566 > 190)
													{
														this.localAI[0] -= 6f;
													}
													if (num566 > 195)
													{
														this.localAI[0] -= 7f;
													}
													if (num568 > (float)this.damage * 0.1f)
													{
														Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 344, (int)num568, this.knockBack * 0.55f, this.owner, 0f, (float)Main.rand.Next(3));
														return;
													}
												}
											}
										}
										else
										{
											if (this.aiStyle == 58)
											{
												this.alpha -= 50;
												if (this.alpha < 0)
												{
													this.alpha = 0;
												}
												if (this.ai[0] == 0f)
												{
													this.frame = 0;
													this.ai[1] += 1f;
													if (this.ai[1] > 30f)
													{
														this.velocity.Y = this.velocity.Y + 0.1f;
													}
													if (this.velocity.Y >= 0f)
													{
														this.ai[0] = 1f;
													}
												}
												if (this.ai[0] == 1f)
												{
													this.frame = 1;
													this.velocity.Y = this.velocity.Y + 0.1f;
													if (this.velocity.Y > 3f)
													{
														this.velocity.Y = 3f;
													}
													this.velocity.X = this.velocity.X * 0.99f;
												}
												this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
												return;
											}
											if (this.aiStyle == 59)
											{
												this.ai[1] += 1f;
												int num3;
												if (this.ai[1] >= 60f)
												{
													this.friendly = true;
													int num570 = (int)this.ai[0];
													if (!Main.npc[num570].active)
													{
														int[] array2 = new int[200];
														int num571 = 0;
														for (int num572 = 0; num572 < 200; num572 = num3 + 1)
														{
															if (Main.npc[num572].CanBeChasedBy(this, false))
															{
																float num573 = Math.Abs(Main.npc[num572].position.X + (float)(Main.npc[num572].width / 2) - this.position.X + (float)(this.width / 2)) + Math.Abs(Main.npc[num572].position.Y + (float)(Main.npc[num572].height / 2) - this.position.Y + (float)(this.height / 2));
																if (num573 < 800f)
																{
																	array2[num571] = num572;
																	num571++;
																}
															}
															num3 = num572;
														}
														if (num571 == 0)
														{
															this.Kill();
															return;
														}
														num570 = array2[Main.rand.Next(num571)];
														this.ai[0] = (float)num570;
													}
													float num574 = 4f;
													Vector2 vector45 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
													float num575 = Main.npc[num570].Center.X - vector45.X;
													float num576 = Main.npc[num570].Center.Y - vector45.Y;
													float num577 = (float)Math.Sqrt((double)(num575 * num575 + num576 * num576));
													num577 = num574 / num577;
													num575 *= num577;
													num576 *= num577;
													int num578 = 30;
													this.velocity.X = (this.velocity.X * (float)(num578 - 1) + num575) / (float)num578;
													this.velocity.Y = (this.velocity.Y * (float)(num578 - 1) + num576) / (float)num578;
												}
												for (int num579 = 0; num579 < 5; num579 = num3 + 1)
												{
													float num580 = this.velocity.X * 0.2f * (float)num579;
													float num581 = -(this.velocity.Y * 0.2f) * (float)num579;
													int num582 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0f, 0f, 100, default(Color), 1.3f);
													Main.dust[num582].noGravity = true;
													Dust dust = Main.dust[num582];
													dust.velocity *= 0f;
													Dust var_2_18A09_cp_0_cp_0 = Main.dust[num582];
													var_2_18A09_cp_0_cp_0.position.X = var_2_18A09_cp_0_cp_0.position.X - num580;
													Dust var_2_18A2B_cp_0_cp_0 = Main.dust[num582];
													var_2_18A2B_cp_0_cp_0.position.Y = var_2_18A2B_cp_0_cp_0.position.Y - num581;
													num3 = num579;
												}
												return;
											}
											if (this.aiStyle == 60)
											{
												this.scale -= 0.015f;
												if (this.scale <= 0f)
												{
													this.velocity *= 5f;
													this.oldVelocity = this.velocity;
													this.Kill();
												}
												if (this.ai[0] <= 3f)
												{
													this.ai[0] += 1f;
													return;
												}
												int num583 = 103;
												if (this.type == 406)
												{
													num583 = 137;
												}
												if (this.owner == Main.myPlayer)
												{
													Rectangle rectangle4 = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
													int num3;
													for (int num584 = 0; num584 < 200; num584 = num3 + 1)
													{
														if (Main.npc[num584].active && !Main.npc[num584].dontTakeDamage && Main.npc[num584].lifeMax > 1)
														{
															Rectangle value9 = new Rectangle((int)Main.npc[num584].position.X, (int)Main.npc[num584].position.Y, Main.npc[num584].width, Main.npc[num584].height);
															if (rectangle4.Intersects(value9))
															{
																Main.npc[num584].AddBuff(num583, 1500, false);
																this.Kill();
															}
														}
														num3 = num584;
													}
													for (int num585 = 0; num585 < 255; num585 = num3 + 1)
													{
														if (num585 != this.owner && Main.player[num585].active && !Main.player[num585].dead)
														{
															Rectangle value10 = new Rectangle((int)Main.player[num585].position.X, (int)Main.player[num585].position.Y, Main.player[num585].width, Main.player[num585].height);
															if (rectangle4.Intersects(value10))
															{
																Main.player[num585].AddBuff(num583, 1500, false);
																this.Kill();
															}
														}
														num3 = num585;
													}
												}
												this.ai[0] += this.ai[1];
												if (this.ai[0] > 30f)
												{
													this.velocity.Y = this.velocity.Y + 0.1f;
												}
												if (this.type == 358)
												{
													int num3;
													for (int num586 = 0; num586 < 1; num586 = num3 + 1)
													{
														for (int num587 = 0; num587 < 6; num587 = num3 + 1)
														{
															float num588 = this.velocity.X / 6f * (float)num587;
															float num589 = this.velocity.Y / 6f * (float)num587;
															int num590 = 6;
															int num591 = Dust.NewDust(new Vector2(this.position.X + (float)num590, this.position.Y + (float)num590), this.width - num590 * 2, this.height - num590 * 2, 211, 0f, 0f, 75, default(Color), 1.2f);
															Dust dust;
															if (Main.rand.Next(2) == 0)
															{
																dust = Main.dust[num591];
																dust.alpha += 25;
															}
															if (Main.rand.Next(2) == 0)
															{
																dust = Main.dust[num591];
																dust.alpha += 25;
															}
															if (Main.rand.Next(2) == 0)
															{
																dust = Main.dust[num591];
																dust.alpha += 25;
															}
															Main.dust[num591].noGravity = true;
															dust = Main.dust[num591];
															dust.velocity *= 0.3f;
															dust = Main.dust[num591];
															dust.velocity += this.velocity * 0.5f;
															Main.dust[num591].position = base.Center;
															Dust var_2_18F52_cp_0_cp_0 = Main.dust[num591];
															var_2_18F52_cp_0_cp_0.position.X = var_2_18F52_cp_0_cp_0.position.X - num588;
															Dust var_2_18F74_cp_0_cp_0 = Main.dust[num591];
															var_2_18F74_cp_0_cp_0.position.Y = var_2_18F74_cp_0_cp_0.position.Y - num589;
															dust = Main.dust[num591];
															dust.velocity *= 0.2f;
															num3 = num587;
														}
														if (Main.rand.Next(4) == 0)
														{
															int num592 = 6;
															int num593 = Dust.NewDust(new Vector2(this.position.X + (float)num592, this.position.Y + (float)num592), this.width - num592 * 2, this.height - num592 * 2, 211, 0f, 0f, 75, default(Color), 0.65f);
															Dust dust = Main.dust[num593];
															dust.velocity *= 0.5f;
															dust = Main.dust[num593];
															dust.velocity += this.velocity * 0.5f;
														}
														num3 = num586;
													}
												}
												if (this.type == 406)
												{
													int num594 = 175;
													Color newColor = new Color(0, 80, 255, 100);
													int num3;
													for (int num595 = 0; num595 < 6; num595 = num3 + 1)
													{
														Vector2 vector46 = this.velocity * (float)num595 / 6f;
														int num596 = 6;
														int num597 = Dust.NewDust(this.position + Vector2.One * 6f, this.width - num596 * 2, this.height - num596 * 2, 4, 0f, 0f, num594, newColor, 1.2f);
														Dust dust;
														if (Main.rand.Next(2) == 0)
														{
															dust = Main.dust[num597];
															dust.alpha += 25;
														}
														if (Main.rand.Next(2) == 0)
														{
															dust = Main.dust[num597];
															dust.alpha += 25;
														}
														if (Main.rand.Next(2) == 0)
														{
															dust = Main.dust[num597];
															dust.alpha += 25;
														}
														Main.dust[num597].noGravity = true;
														dust = Main.dust[num597];
														dust.velocity *= 0.3f;
														dust = Main.dust[num597];
														dust.velocity += this.velocity * 0.5f;
														Main.dust[num597].position = base.Center;
														Dust var_2_192A1_cp_0_cp_0 = Main.dust[num597];
														var_2_192A1_cp_0_cp_0.position.X = var_2_192A1_cp_0_cp_0.position.X - vector46.X;
														Dust var_2_192C8_cp_0_cp_0 = Main.dust[num597];
														var_2_192C8_cp_0_cp_0.position.Y = var_2_192C8_cp_0_cp_0.position.Y - vector46.Y;
														dust = Main.dust[num597];
														dust.velocity *= 0.2f;
														num3 = num595;
													}
													if (Main.rand.Next(4) == 0)
													{
														int num598 = 6;
														int num599 = Dust.NewDust(this.position + Vector2.One * 6f, this.width - num598 * 2, this.height - num598 * 2, 4, 0f, 0f, num594, newColor, 1.2f);
														Dust dust = Main.dust[num599];
														dust.velocity *= 0.5f;
														dust = Main.dust[num599];
														dust.velocity += this.velocity * 0.5f;
														return;
													}
												}
											}
											else
											{
												if (this.aiStyle == 61)
												{
													this.AI_061_FishingBobber();
													return;
												}
												if (this.aiStyle == 62)
												{
													this.AI_062();
													return;
												}
												if (this.aiStyle == 63)
												{
													if (!Main.player[this.owner].active)
													{
														this.active = false;
														return;
													}
													Vector2 vector47 = this.position;
													bool flag20 = false;
													float num600 = 500f;
													int num3;
													for (int num601 = 0; num601 < 200; num601 = num3 + 1)
													{
														NPC nPC = Main.npc[num601];
														if (nPC.CanBeChasedBy(this, false))
														{
															float num602 = Vector2.Distance(nPC.Center, base.Center);
															if (((Vector2.Distance(base.Center, vector47) > num602 && num602 < num600) || !flag20) && Collision.CanHit(this.position, this.width, this.height, nPC.position, nPC.width, nPC.height))
															{
																num600 = num602;
																vector47 = nPC.Center;
																flag20 = true;
															}
														}
														num3 = num601;
													}
													if (!flag20)
													{
														this.velocity.X = this.velocity.X * 0.95f;
													}
													else
													{
														float num603 = 5f;
														float num604 = 0.08f;
														if (this.velocity.Y == 0f)
														{
															bool flag21 = false;
															if (base.Center.Y - 50f > vector47.Y)
															{
																flag21 = true;
															}
															if (flag21)
															{
																this.velocity.Y = -6f;
															}
														}
														else
														{
															num603 = 8f;
															num604 = 0.12f;
														}
														this.velocity.X = this.velocity.X + (float)Math.Sign(vector47.X - base.Center.X) * num604;
														if (this.velocity.X < -num603)
														{
															this.velocity.X = -num603;
														}
														if (this.velocity.X > num603)
														{
															this.velocity.X = num603;
														}
													}
													float num605 = 0f;
													Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref num605, ref this.gfxOffY, 1, false, 0);
													if (this.velocity.Y != 0f)
													{
														this.frame = 3;
													}
													else
													{
														if (Math.Abs(this.velocity.X) > 0.2f)
														{
															num3 = this.frameCounter;
															this.frameCounter = num3 + 1;
														}
														if (this.frameCounter >= 9)
														{
															this.frameCounter = 0;
														}
														if (this.frameCounter >= 6)
														{
															this.frame = 2;
														}
														else if (this.frameCounter >= 3)
														{
															this.frame = 1;
														}
														else
														{
															this.frame = 0;
														}
													}
													if (this.velocity.X != 0f)
													{
														this.direction = Math.Sign(this.velocity.X);
													}
													this.spriteDirection = -this.direction;
													this.velocity.Y = this.velocity.Y + 0.2f;
													if (this.velocity.Y > 16f)
													{
														this.velocity.Y = 16f;
														return;
													}
												}
												else if (this.aiStyle == 64)
												{
													int num606 = 10;
													int num607 = 15;
													float num608 = 1f;
													int num609 = 150;
													int num610 = 42;
													if (this.type == 386)
													{
														num606 = 16;
														num607 = 16;
														num608 = 1.5f;
													}
													if (this.velocity.X != 0f)
													{
														this.direction = (this.spriteDirection = -Math.Sign(this.velocity.X));
													}
													int num3 = this.frameCounter;
													this.frameCounter = num3 + 1;
													if (this.frameCounter > 2)
													{
														num3 = this.frame;
														this.frame = num3 + 1;
														this.frameCounter = 0;
													}
													if (this.frame >= 6)
													{
														this.frame = 0;
													}
													if (this.localAI[0] == 0f && Main.myPlayer == this.owner)
													{
														this.localAI[0] = 1f;
														this.position.X = this.position.X + (float)(this.width / 2);
														this.position.Y = this.position.Y + (float)(this.height / 2);
														this.scale = ((float)(num606 + num607) - this.ai[1]) * num608 / (float)(num607 + num606);
														this.width = (int)((float)num609 * this.scale);
														this.height = (int)((float)num610 * this.scale);
														this.position.X = this.position.X - (float)(this.width / 2);
														this.position.Y = this.position.Y - (float)(this.height / 2);
														this.netUpdate = true;
													}
													if (this.ai[1] != -1f)
													{
														this.scale = ((float)(num606 + num607) - this.ai[1]) * num608 / (float)(num607 + num606);
														this.width = (int)((float)num609 * this.scale);
														this.height = (int)((float)num610 * this.scale);
													}
													if (!Collision.SolidCollision(this.position, this.width, this.height))
													{
														this.alpha -= 30;
														if (this.alpha < 60)
														{
															this.alpha = 60;
														}
														if (this.type == 386 && this.alpha < 100)
														{
															this.alpha = 100;
														}
													}
													else
													{
														this.alpha += 30;
														if (this.alpha > 150)
														{
															this.alpha = 150;
														}
													}
													if (this.ai[0] > 0f)
													{
														float[] var_2_19A93_cp_0 = this.ai;
														int var_2_19A93_cp_1 = 0;
														float num73 = var_2_19A93_cp_0[var_2_19A93_cp_1];
														var_2_19A93_cp_0[var_2_19A93_cp_1] = num73 - 1f;
													}
													if (this.ai[0] == 1f && this.ai[1] > 0f && this.owner == Main.myPlayer)
													{
														this.netUpdate = true;
														Vector2 center = base.Center;
														center.Y -= (float)num610 * this.scale / 2f;
														float num611 = ((float)(num606 + num607) - this.ai[1] + 1f) * num608 / (float)(num607 + num606);
														center.Y -= (float)num610 * num611 / 2f;
														center.Y += 2f;
														Projectile.NewProjectile(center.X, center.Y, this.velocity.X, this.velocity.Y, this.type, this.damage, this.knockBack, this.owner, 10f, this.ai[1] - 1f);
														int num612 = 4;
														if (this.type == 386)
														{
															num612 = 2;
														}
														if ((int)this.ai[1] % num612 == 0 && this.ai[1] != 0f)
														{
															int num613 = 372;
															if (this.type == 386)
															{
																num613 = 373;
															}
															int num614 = NPC.NewNPC((int)center.X, (int)center.Y, num613, 0, 0f, 0f, 0f, 0f, 255);
															Main.npc[num614].velocity = this.velocity;
															Main.npc[num614].netUpdate = true;
															if (this.type == 386)
															{
																Main.npc[num614].ai[2] = (float)this.width;
																Main.npc[num614].ai[3] = -1.5f;
															}
														}
													}
													if (this.ai[0] <= 0f)
													{
														float num615 = 0.104719758f;
														float num616 = (float)this.width / 5f;
														if (this.type == 386)
														{
															num616 *= 2f;
														}
														float num617 = (float)(Math.Cos((double)(num615 * -(double)this.ai[0])) - 0.5) * num616;
														this.position.X = this.position.X - num617 * (float)(-(float)this.direction);
														float[] var_2_19D98_cp_0 = this.ai;
														int var_2_19D98_cp_1 = 0;
														float num73 = var_2_19D98_cp_0[var_2_19D98_cp_1];
														var_2_19D98_cp_0[var_2_19D98_cp_1] = num73 - 1f;
														num617 = (float)(Math.Cos((double)(num615 * -(double)this.ai[0])) - 0.5) * num616;
														this.position.X = this.position.X + num617 * (float)(-(float)this.direction);
														return;
													}
												}
												else if (this.aiStyle == 65)
												{
													if (this.ai[1] > 0f)
													{
														int num618 = (int)this.ai[1] - 1;
														if (num618 < 255)
														{
															float[] var_2_19E42_cp_0 = this.localAI;
															int var_2_19E42_cp_1 = 0;
															float num73 = var_2_19E42_cp_0[var_2_19E42_cp_1];
															var_2_19E42_cp_0[var_2_19E42_cp_1] = num73 + 1f;
															if (this.localAI[0] > 10f)
															{
																int num619 = 6;
																int num3;
																for (int num620 = 0; num620 < num619; num620 = num3 + 1)
																{
																	Vector2 vector48 = Vector2.Normalize(this.velocity) * new Vector2((float)this.width / 2f, (float)this.height) * 0.75f;
																	vector48 = vector48.RotatedBy((double)(num620 - (num619 / 2 - 1)) * 3.1415926535897931 / (double)((float)num619), default(Vector2)) + base.Center;
																	Vector2 vector49 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
																	int num621 = Dust.NewDust(vector48 + vector49, 0, 0, 172, vector49.X * 2f, vector49.Y * 2f, 100, default(Color), 1.4f);
																	Main.dust[num621].noGravity = true;
																	Main.dust[num621].noLight = true;
																	Dust dust = Main.dust[num621];
																	dust.velocity /= 4f;
																	dust = Main.dust[num621];
																	dust.velocity -= this.velocity;
																	num3 = num620;
																}
																this.alpha -= 5;
																if (this.alpha < 100)
																{
																	this.alpha = 100;
																}
																this.rotation += this.velocity.X * 0.1f;
																this.frame = (int)(this.localAI[0] / 3f) % 3;
															}
															Vector2 value11 = Main.player[num618].Center - base.Center;
															float num622 = 4f;
															num622 += this.localAI[0] / 20f;
															this.velocity = Vector2.Normalize(value11) * num622;
															if (value11.Length() < 50f)
															{
																this.Kill();
															}
														}
													}
													else
													{
														float num623 = 0.209439516f;
														float num624 = 4f;
														float num625 = (float)(Math.Cos((double)(num623 * this.ai[0])) - 0.5) * num624;
														this.velocity.Y = this.velocity.Y - num625;
														float[] var_2_1A15A_cp_0 = this.ai;
														int var_2_1A15A_cp_1 = 0;
														float num73 = var_2_1A15A_cp_0[var_2_1A15A_cp_1];
														var_2_1A15A_cp_0[var_2_1A15A_cp_1] = num73 + 1f;
														num625 = (float)(Math.Cos((double)(num623 * this.ai[0])) - 0.5) * num624;
														this.velocity.Y = this.velocity.Y + num625;
														float[] var_2_1A1B9_cp_0 = this.localAI;
														int var_2_1A1B9_cp_1 = 0;
														num73 = var_2_1A1B9_cp_0[var_2_1A1B9_cp_1];
														var_2_1A1B9_cp_0[var_2_1A1B9_cp_1] = num73 + 1f;
														if (this.localAI[0] > 10f)
														{
															this.alpha -= 5;
															if (this.alpha < 100)
															{
																this.alpha = 100;
															}
															this.rotation += this.velocity.X * 0.1f;
															this.frame = (int)(this.localAI[0] / 3f) % 3;
														}
													}
													if (this.wet)
													{
														this.position.Y = this.position.Y - 16f;
														this.Kill();
														return;
													}
												}
												else if (this.aiStyle == 66)
												{
													float num626 = 0f;
													float num627 = 0f;
													float num628 = 0f;
													float num629 = 0f;
													if (this.type == 387 || this.type == 388)
													{
														num626 = 700f;
														num627 = 800f;
														num628 = 1200f;
														num629 = 150f;
														if (Main.player[this.owner].dead)
														{
															Main.player[this.owner].twinsMinion = false;
														}
														if (Main.player[this.owner].twinsMinion)
														{
															this.timeLeft = 2;
														}
													}
													if (this.type == 533)
													{
														num626 = 1500f;
														num627 = 900f;
														num628 = 1500f;
														num629 = 450f;
														if (Main.player[this.owner].dead)
														{
															Main.player[this.owner].DeadlySphereMinion = false;
														}
														if (Main.player[this.owner].DeadlySphereMinion)
														{
															this.timeLeft = 2;
														}
													}
													float num630 = 0.05f;
													int num3;
													for (int num631 = 0; num631 < 1000; num631 = num3 + 1)
													{
														bool flag22 = (Main.projectile[num631].type == 387 || Main.projectile[num631].type == 388) && (this.type == 387 || this.type == 388);
														if (!flag22)
														{
															flag22 = (this.type == 533 && Main.projectile[num631].type == 533);
														}
														if (((num631 != this.whoAmI && Main.projectile[num631].active && Main.projectile[num631].owner == this.owner) & flag22) && Math.Abs(this.position.X - Main.projectile[num631].position.X) + Math.Abs(this.position.Y - Main.projectile[num631].position.Y) < (float)this.width)
														{
															if (this.position.X < Main.projectile[num631].position.X)
															{
																this.velocity.X = this.velocity.X - num630;
															}
															else
															{
																this.velocity.X = this.velocity.X + num630;
															}
															if (this.position.Y < Main.projectile[num631].position.Y)
															{
																this.velocity.Y = this.velocity.Y - num630;
															}
															else
															{
																this.velocity.Y = this.velocity.Y + num630;
															}
														}
														num3 = num631;
													}
													if (this.type == 533)
													{
														if ((int)this.ai[0] % 3 != 2)
														{
															Lighting.AddLight(base.Center, 0.8f, 0.3f, 0.1f);
														}
														else
														{
															Lighting.AddLight(base.Center, 0.3f, 0.5f, 0.7f);
														}
													}
													bool flag23 = false;
													if (this.ai[0] == 2f && this.type == 388)
													{
														float[] var_2_1A61F_cp_0 = this.ai;
														int var_2_1A61F_cp_1 = 1;
														float num73 = var_2_1A61F_cp_0[var_2_1A61F_cp_1];
														var_2_1A61F_cp_0[var_2_1A61F_cp_1] = num73 + 1f;
														this.extraUpdates = 1;
														this.rotation = this.velocity.ToRotation() + 3.14159274f;
														this.frameCounter++;
														if (this.frameCounter > 1)
														{
															this.frame++;
															this.frameCounter = 0;
														}
														if (this.frame > 2)
														{
															this.frame = 0;
														}
														if (this.ai[1] > 40f)
														{
															this.ai[1] = 1f;
															this.ai[0] = 0f;
															this.extraUpdates = 0;
															this.numUpdates = 0;
															this.netUpdate = true;
														}
														else
														{
															flag23 = true;
														}
													}
													if (this.type == 533 && this.ai[0] >= 3f && this.ai[0] <= 5f)
													{
														int num632 = 2;
														flag23 = true;
														this.velocity *= 0.9f;
														float[] var_2_1A733_cp_0 = this.ai;
														int var_2_1A733_cp_1 = 1;
														float num73 = var_2_1A733_cp_0[var_2_1A733_cp_1];
														var_2_1A733_cp_0[var_2_1A733_cp_1] = num73 + 1f;
														int num633 = (int)this.ai[1] / num632 + (int)(this.ai[0] - 3f) * 8;
														if (num633 < 4)
														{
															this.frame = 17 + num633;
														}
														else if (num633 < 5)
														{
															this.frame = 0;
														}
														else if (num633 < 8)
														{
															this.frame = 1 + num633 - 5;
														}
														else if (num633 < 11)
														{
															this.frame = 11 - num633;
														}
														else if (num633 < 12)
														{
															this.frame = 0;
														}
														else if (num633 < 16)
														{
															this.frame = num633 - 2;
														}
														else if (num633 < 20)
														{
															this.frame = 29 - num633;
														}
														else if (num633 < 21)
														{
															this.frame = 0;
														}
														else
														{
															this.frame = num633 - 4;
														}
														if (this.ai[1] > (float)(num632 * 8))
														{
															this.ai[0] -= 3f;
															this.ai[1] = 0f;
														}
													}
													if (this.type == 533 && this.ai[0] >= 6f && this.ai[0] <= 8f)
													{
														float[] var_2_1A8B5_cp_0 = this.ai;
														int var_2_1A8B5_cp_1 = 1;
														float num73 = var_2_1A8B5_cp_0[var_2_1A8B5_cp_1];
														var_2_1A8B5_cp_0[var_2_1A8B5_cp_1] = num73 + 1f;
														this.MaxUpdates = 2;
														if (this.ai[0] == 7f)
														{
															this.rotation = this.velocity.ToRotation() + 3.14159274f;
														}
														else
														{
															this.rotation += 0.5235988f;
														}
														int num634 = 0;
														switch ((int)this.ai[0])
														{
															case 6:
																this.frame = 5;
																num634 = 40;
																break;
															case 7:
																this.frame = 13;
																num634 = 30;
																break;
															case 8:
																this.frame = 17;
																num634 = 30;
																break;
														}
														if (this.ai[1] > (float)num634)
														{
															this.ai[1] = 1f;
															this.ai[0] -= 6f;
															float[] var_2_1A9A2_cp_0 = this.localAI;
															int var_2_1A9A2_cp_1 = 0;
															num73 = var_2_1A9A2_cp_0[var_2_1A9A2_cp_1];
															var_2_1A9A2_cp_0[var_2_1A9A2_cp_1] = num73 + 1f;
															this.extraUpdates = 0;
															this.numUpdates = 0;
															this.netUpdate = true;
														}
														else
														{
															flag23 = true;
														}
														if (this.ai[0] == 8f)
														{
															for (int num635 = 0; num635 < 4; num635 = num3 + 1)
															{
																int num636 = Utils.SelectRandom<int>(Main.rand, new int[]
																{
																	226,
																	228,
																	75
																});
																int num637 = Dust.NewDust(base.Center, 0, 0, num636, 0f, 0f, 0, default(Color), 1f);
																Dust dust3 = Main.dust[num637];
																Vector2 value12 = Vector2.One.RotatedBy((double)((float)num635 * 1.57079637f), default(Vector2)).RotatedBy((double)this.rotation, default(Vector2));
																dust3.position = base.Center + value12 * 10f;
																dust3.velocity = value12 * 1f;
																dust3.scale = 0.6f + Main.rand.NextFloat() * 0.5f;
																dust3.noGravity = true;
																num3 = num635;
															}
														}
													}
													if (flag23)
													{
														return;
													}
													Vector2 vector50 = this.position;
													bool flag24 = false;
													if (this.ai[0] != 1f && (this.type == 387 || this.type == 388))
													{
														this.tileCollide = true;
													}
													if (this.type == 533 && this.ai[0] < 9f)
													{
														this.tileCollide = true;
													}
													if (this.tileCollide && WorldGen.SolidTile(Framing.GetTileSafely((int)base.Center.X / 16, (int)base.Center.Y / 16)))
													{
														this.tileCollide = false;
													}
													NPC ownerMinionAttackTargetNPC3 = this.OwnerMinionAttackTargetNPC;
													if (ownerMinionAttackTargetNPC3 != null && ownerMinionAttackTargetNPC3.CanBeChasedBy(this, false))
													{
														float num638 = Vector2.Distance(ownerMinionAttackTargetNPC3.Center, base.Center);
														if (((Vector2.Distance(base.Center, vector50) > num638 && num638 < num626) || !flag24) && Collision.CanHitLine(this.position, this.width, this.height, ownerMinionAttackTargetNPC3.position, ownerMinionAttackTargetNPC3.width, ownerMinionAttackTargetNPC3.height))
														{
															num626 = num638;
															vector50 = ownerMinionAttackTargetNPC3.Center;
															flag24 = true;
														}
													}
													if (!flag24)
													{
														for (int num639 = 0; num639 < 200; num639 = num3 + 1)
														{
															NPC nPC2 = Main.npc[num639];
															if (nPC2.CanBeChasedBy(this, false))
															{
																float num640 = Vector2.Distance(nPC2.Center, base.Center);
																if (((Vector2.Distance(base.Center, vector50) > num640 && num640 < num626) || !flag24) && Collision.CanHitLine(this.position, this.width, this.height, nPC2.position, nPC2.width, nPC2.height))
																{
																	num626 = num640;
																	vector50 = nPC2.Center;
																	flag24 = true;
																}
															}
															num3 = num639;
														}
													}
													float num641 = num627;
													if (flag24)
													{
														num641 = num628;
													}
													Player player2 = Main.player[this.owner];
													if (Vector2.Distance(player2.Center, base.Center) > num641)
													{
														if (this.type == 387 || this.type == 388)
														{
															this.ai[0] = 1f;
														}
														if (this.type == 533 && this.ai[0] < 9f)
														{
															this.ai[0] += (float)(3 * (3 - (int)(this.ai[0] / 3f)));
														}
														this.tileCollide = false;
														this.netUpdate = true;
													}
													if (((this.type == 388 || this.type == 387) & flag24) && this.ai[0] == 0f)
													{
														Vector2 vector51 = vector50 - base.Center;
														float num642 = vector51.Length();
														vector51.Normalize();
														if (num642 > 200f)
														{
															float scaleFactor2 = 6f;
															if (this.type == 388)
															{
																scaleFactor2 = 8f;
															}
															vector51 *= scaleFactor2;
															this.velocity = (this.velocity * 40f + vector51) / 41f;
														}
														else
														{
															float num643 = 4f;
															vector51 *= -num643;
															this.velocity = (this.velocity * 40f + vector51) / 41f;
														}
													}
													else
													{
														bool flag25 = false;
														if (!flag25)
														{
															flag25 = (this.ai[0] == 1f && (this.type == 387 || this.type == 388));
														}
														if (!flag25)
														{
															flag25 = (this.ai[0] >= 9f && this.type == 533);
														}
														float num644 = 6f;
														if (this.type == 533)
														{
															num644 = 12f;
														}
														if (flag25)
														{
															num644 = 15f;
														}
														Vector2 center2 = base.Center;
														Vector2 vector52 = player2.Center - center2 + new Vector2(0f, -60f);
														float num645 = vector52.Length();
														if (num645 > 200f && num644 < 8f)
														{
															num644 = 8f;
														}
														if ((num645 < num629 & flag25) && !Collision.SolidCollision(this.position, this.width, this.height))
														{
															if (this.type == 387 || this.type == 388)
															{
																this.ai[0] = 0f;
															}
															if (this.type == 533)
															{
																this.ai[0] -= 9f;
															}
															this.netUpdate = true;
														}
														if (num645 > 2000f)
														{
															this.position.X = Main.player[this.owner].Center.X - (float)(this.width / 2);
															this.position.Y = Main.player[this.owner].Center.Y - (float)(this.height / 2);
															this.netUpdate = true;
														}
														if (num645 > 70f)
														{
															vector52.Normalize();
															vector52 *= num644;
															this.velocity = (this.velocity * 40f + vector52) / 41f;
														}
														else if (this.velocity.X == 0f && this.velocity.Y == 0f)
														{
															this.velocity.X = -0.15f;
															this.velocity.Y = -0.05f;
														}
													}
													if (this.type == 388)
													{
														this.rotation = this.velocity.ToRotation() + 3.14159274f;
													}
													if (this.type == 387)
													{
														if (flag24)
														{
															this.rotation = (vector50 - base.Center).ToRotation() + 3.14159274f;
														}
														else
														{
															this.rotation = this.velocity.ToRotation() + 3.14159274f;
														}
													}
													if (this.type == 533 && (this.ai[0] < 3f || this.ai[0] >= 9f))
													{
														this.rotation += this.velocity.X * 0.04f;
													}
													if (this.type == 388 || this.type == 387)
													{
														this.frameCounter++;
														if (this.frameCounter > 3)
														{
															this.frame++;
															this.frameCounter = 0;
														}
														if (this.frame > 2)
														{
															this.frame = 0;
														}
													}
													else if (this.type == 533)
													{
														if (this.ai[0] < 3f || this.ai[0] >= 9f)
														{
															num3 = this.frameCounter;
															this.frameCounter = num3 + 1;
															if (this.frameCounter >= 24)
															{
																this.frameCounter = 0;
															}
															int num646 = this.frameCounter / 4;
															this.frame = 4 + num646;
															num3 = (int)this.ai[0];
															switch (num3)
															{
																case 0:
																	break;
																case 1:
																	goto IL_1B429;
																case 2:
																	goto IL_1B448;
																default:
																	switch (num3)
																	{
																		case 9:
																			break;
																		case 10:
																			goto IL_1B429;
																		case 11:
																			goto IL_1B448;
																		default:
																			goto IL_1B47C;
																	}
																	break;
															}
															this.frame = 4 + num646;
															goto IL_1B47C;
															IL_1B429:
															num646 = this.frameCounter / 8;
															this.frame = 14 + num646;
															goto IL_1B47C;
															IL_1B448:
															num646 = this.frameCounter / 3;
															if (num646 >= 4)
															{
																num646 -= 4;
															}
															this.frame = 17 + num646;
														}
														IL_1B47C:
														if (this.ai[0] == 2f && Main.rand.Next(2) == 0)
														{
															for (int num647 = 0; num647 < 4; num647 = num3 + 1)
															{
																if (Main.rand.Next(2) != 0)
																{
																	int num648 = Utils.SelectRandom<int>(Main.rand, new int[]
																	{
																		226,
																		228,
																		75
																	});
																	int num649 = Dust.NewDust(base.Center, 0, 0, num648, 0f, 0f, 0, default(Color), 1f);
																	Dust dust4 = Main.dust[num649];
																	Vector2 value13 = Vector2.One.RotatedBy((double)((float)num647 * 1.57079637f), default(Vector2)).RotatedBy((double)this.rotation, default(Vector2));
																	dust4.position = base.Center + value13 * 10f;
																	dust4.velocity = value13 * 1f;
																	dust4.scale = 0.3f + Main.rand.NextFloat() * 0.5f;
																	dust4.noGravity = true;
																	dust4.customData = this;
																	dust4.noLight = true;
																}
																num3 = num647;
															}
														}
													}
													if (this.ai[1] > 0f && (this.type == 387 || this.type == 388))
													{
														this.ai[1] += (float)Main.rand.Next(1, 4);
													}
													if (this.ai[1] > 90f && this.type == 387)
													{
														this.ai[1] = 0f;
														this.netUpdate = true;
													}
													if (this.ai[1] > 40f && this.type == 388)
													{
														this.ai[1] = 0f;
														this.netUpdate = true;
													}
													if (this.ai[1] > 0f && this.type == 533)
													{
														float[] var_2_1B6D1_cp_0 = this.ai;
														int var_2_1B6D1_cp_1 = 1;
														float num73 = var_2_1B6D1_cp_0[var_2_1B6D1_cp_1];
														var_2_1B6D1_cp_0[var_2_1B6D1_cp_1] = num73 + 1f;
														int num650 = 10;
														if (this.ai[1] > (float)num650)
														{
															this.ai[1] = 0f;
															this.netUpdate = true;
														}
													}
													if (this.ai[0] == 0f && (this.type == 387 || this.type == 388))
													{
														if (this.type == 387)
														{
															float scaleFactor3 = 8f;
															int num651 = 389;
															if (flag24 && this.ai[1] == 0f)
															{
																float[] var_2_1B78B_cp_0 = this.ai;
																int var_2_1B78B_cp_1 = 1;
																float num73 = var_2_1B78B_cp_0[var_2_1B78B_cp_1];
																var_2_1B78B_cp_0[var_2_1B78B_cp_1] = num73 + 1f;
																if (Main.myPlayer == this.owner && Collision.CanHitLine(this.position, this.width, this.height, vector50, 0, 0))
																{
																	Vector2 vector53 = vector50 - base.Center;
																	vector53.Normalize();
																	vector53 *= scaleFactor3;
																	int num652 = Projectile.NewProjectile(base.Center.X, base.Center.Y, vector53.X, vector53.Y, num651, (int)((float)this.damage * 0.8f), 0f, Main.myPlayer, 0f, 0f);
																	Main.projectile[num652].timeLeft = 300;
																	this.netUpdate = true;
																}
															}
														}
														if (this.type == 388 && this.ai[1] == 0f && flag24 && num626 < 500f)
														{
															float[] var_2_1B8CC_cp_0 = this.ai;
															int var_2_1B8CC_cp_1 = 1;
															float num73 = var_2_1B8CC_cp_0[var_2_1B8CC_cp_1];
															var_2_1B8CC_cp_0[var_2_1B8CC_cp_1] = num73 + 1f;
															if (Main.myPlayer == this.owner)
															{
																this.ai[0] = 2f;
																Vector2 value14 = vector50 - base.Center;
																value14.Normalize();
																this.velocity = value14 * 8f;
																this.netUpdate = true;
																return;
															}
														}
													}
													else if (this.type == 533 && this.ai[0] < 3f)
													{
														int num653 = 0;
														switch ((int)this.ai[0])
														{
															case 0:
															case 3:
															case 6:
																num653 = 400;
																break;
															case 1:
															case 4:
															case 7:
																num653 = 400;
																break;
															case 2:
															case 5:
															case 8:
																num653 = 600;
																break;
														}
														if ((this.ai[1] == 0f & flag24) && num626 < (float)num653)
														{
															float[] var_2_1B9F7_cp_0 = this.ai;
															int var_2_1B9F7_cp_1 = 1;
															float num73 = var_2_1B9F7_cp_0[var_2_1B9F7_cp_1];
															var_2_1B9F7_cp_0[var_2_1B9F7_cp_1] = num73 + 1f;
															if (Main.myPlayer == this.owner)
															{
																if (this.localAI[0] >= 3f)
																{
																	this.ai[0] += 4f;
																	if (this.ai[0] == 6f)
																	{
																		this.ai[0] = 3f;
																	}
																	this.localAI[0] = 0f;
																	return;
																}
																this.ai[0] += 6f;
																Vector2 value15 = vector50 - base.Center;
																value15.Normalize();
																float scaleFactor4 = (this.ai[0] == 8f) ? 12f : 10f;
																this.velocity = value15 * scaleFactor4;
																this.netUpdate = true;
																return;
															}
														}
													}
												}
												else if (this.aiStyle == 67)
												{
													Player player3 = Main.player[this.owner];
													if (!player3.active)
													{
														this.active = false;
														return;
													}
													bool flag26 = this.type == 393 || this.type == 394 || this.type == 395;
													if (flag26)
													{
														if (player3.dead)
														{
															player3.pirateMinion = false;
														}
														if (player3.pirateMinion)
														{
															this.timeLeft = 2;
														}
													}
													if (this.type == 500)
													{
														if (player3.dead)
														{
															player3.crimsonHeart = false;
														}
														if (player3.crimsonHeart)
														{
															this.timeLeft = 2;
														}
													}
													if (this.type == 653)
													{
														if (player3.dead)
														{
															player3.companionCube = false;
														}
														if (player3.companionCube)
														{
															this.timeLeft = 2;
														}
													}
													Vector2 vector54 = player3.Center;
													if (flag26)
													{
														vector54.X -= (float)((15 + player3.width / 2) * player3.direction);
														vector54.X -= (float)(this.minionPos * 40 * player3.direction);
													}
													if (this.type == 500)
													{
														vector54.X -= (float)((15 + player3.width / 2) * player3.direction);
														vector54.X -= (float)(40 * player3.direction);
													}
													if (this.type == 653)
													{
														float num654 = (float)(15 + (player3.crimsonHeart ? 40 : 0));
														vector54.X -= (num654 + (float)(player3.width / 2)) * (float)player3.direction;
														vector54.X -= (float)(40 * player3.direction);
													}
													if (this.type == 500)
													{
														Lighting.AddLight(base.Center, 0.9f, 0.1f, 0.3f);
														int num655 = 6;
														if (this.frame == 0 || this.frame == 2)
														{
															num655 = 12;
														}
														int num3 = this.frameCounter + 1;
														this.frameCounter = num3;
														if (num3 >= num655)
														{
															this.frameCounter = 0;
															num3 = this.frame + 1;
															this.frame = num3;
															if (num3 >= Main.projFrames[this.type])
															{
																this.frame = 0;
															}
														}
														this.rotation += this.velocity.X / 20f;
														Vector2 vector55 = (-Vector2.UnitY).RotatedBy((double)this.rotation, default(Vector2)).RotatedBy((double)((float)this.direction * 0.2f), default(Vector2));
														int num656 = Dust.NewDust(base.Center + vector55 * 10f - new Vector2(4f), 0, 0, 5, vector55.X, vector55.Y, 0, Color.Transparent, 1f);
														Main.dust[num656].scale = 1f;
														Main.dust[num656].velocity = vector55.RotatedByRandom(0.78539818525314331) * 3.5f;
														Main.dust[num656].noGravity = true;
														Main.dust[num656].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
													}
													if (this.type == 653)
													{
														this.rotation += this.velocity.X / 20f;
														if (this.velocity.Y == 0f)
														{
															this.rotation = this.rotation.AngleTowards(0f, 0.7f);
														}
														if (this.owner >= 0 && this.owner < 255)
														{
															float[] var_2_1BF91_cp_0 = Projectile._CompanionCubeScreamCooldown;
															int var_2_1BF91_cp_1 = this.owner;
															float num73 = var_2_1BF91_cp_0[var_2_1BF91_cp_1];
															var_2_1BF91_cp_0[var_2_1BF91_cp_1] = num73 - 1f;
															if (Projectile._CompanionCubeScreamCooldown[this.owner] < 0f)
															{
																Projectile._CompanionCubeScreamCooldown[this.owner] = 0f;
															}
														}
														Tile tileSafely = Framing.GetTileSafely(base.Center);
														if (tileSafely.liquid > 0 && tileSafely.lava())
														{
															this.localAI[0] += 1f;
														}
														else
														{
															this.localAI[0] -= 1f;
														}
														this.localAI[0] = MathHelper.Clamp(this.localAI[0], 0f, 20f);
														if (this.localAI[0] >= 20f)
														{
															if (Projectile._CompanionCubeScreamCooldown[this.owner] == 0f)
															{
																Projectile._CompanionCubeScreamCooldown[this.owner] = 3600f;
																Main.PlaySound((Main.rand.Next(10) == 0) ? SoundID.NPCDeath61 : SoundID.NPCDeath59, this.position);
															}
															this.Kill();
														}
														Vector3 vector56 = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16).ToVector3();
														Vector3 vector57 = Lighting.GetColor((int)player3.Center.X / 16, (int)player3.Center.Y / 16).ToVector3();
														if (vector56.Length() < 0.15f && vector57.Length() < 0.15f)
														{
															this.localAI[1] += 1f;
														}
														else if (this.localAI[1] > 0f)
														{
															this.localAI[1] -= 1f;
														}
														this.localAI[1] = MathHelper.Clamp(this.localAI[1], -3600f, 120f);
														if (this.localAI[1] > (float)Main.rand.Next(30, 120) && !player3.immune && player3.velocity == Vector2.Zero)
														{
															if (Main.rand.Next(5) == 0)
															{
																Main.PlaySound(SoundID.Item16, base.Center);
																this.localAI[1] = -600f;
															}
															else
															{
																Main.PlaySound(SoundID.Item1, base.Center);
																player3.Hurt(PlayerDeathReason.ByOther(6), 3, 0, false, false, false, -1);
																player3.immune = false;
																player3.immuneTime = 0;
																this.localAI[1] = (float)(-300 + Main.rand.Next(30) * -10);
															}
														}
													}
													bool flag27 = true;
													if (this.type == 500 || this.type == 653)
													{
														flag27 = false;
													}
													int num657 = -1;
													float num658 = 450f;
													if (flag26)
													{
														num658 = 800f;
													}
													int num659 = 15;
													if (this.ai[0] == 0f & flag27)
													{
														NPC ownerMinionAttackTargetNPC4 = this.OwnerMinionAttackTargetNPC;
														if (ownerMinionAttackTargetNPC4 != null && ownerMinionAttackTargetNPC4.CanBeChasedBy(this, false))
														{
															float num660 = (ownerMinionAttackTargetNPC4.Center - base.Center).Length();
															if (num660 < num658)
															{
																num657 = ownerMinionAttackTargetNPC4.whoAmI;
																num658 = num660;
															}
														}
														if (num657 < 0)
														{
															int num3;
															for (int num661 = 0; num661 < 200; num661 = num3 + 1)
															{
																NPC nPC3 = Main.npc[num661];
																if (nPC3.CanBeChasedBy(this, false))
																{
																	float num662 = (nPC3.Center - base.Center).Length();
																	if (num662 < num658)
																	{
																		num657 = num661;
																		num658 = num662;
																	}
																}
																num3 = num661;
															}
														}
													}
													if (this.ai[0] == 1f)
													{
														this.tileCollide = false;
														float num663 = 0.2f;
														float num664 = 10f;
														int num665 = 200;
														if (num664 < Math.Abs(player3.velocity.X) + Math.Abs(player3.velocity.Y))
														{
															num664 = Math.Abs(player3.velocity.X) + Math.Abs(player3.velocity.Y);
														}
														Vector2 vector58 = player3.Center - base.Center;
														float num666 = vector58.Length();
														if (num666 > 2000f)
														{
															this.position = player3.Center - new Vector2((float)this.width, (float)this.height) / 2f;
														}
														if (num666 < (float)num665 && player3.velocity.Y == 0f && this.position.Y + (float)this.height <= player3.position.Y + (float)player3.height && !Collision.SolidCollision(this.position, this.width, this.height))
														{
															this.ai[0] = 0f;
															this.netUpdate = true;
															if (this.velocity.Y < -6f)
															{
																this.velocity.Y = -6f;
															}
														}
														if (num666 >= 60f)
														{
															vector58.Normalize();
															vector58 *= num664;
															if (this.velocity.X < vector58.X)
															{
																this.velocity.X = this.velocity.X + num663;
																if (this.velocity.X < 0f)
																{
																	this.velocity.X = this.velocity.X + num663 * 1.5f;
																}
															}
															if (this.velocity.X > vector58.X)
															{
																this.velocity.X = this.velocity.X - num663;
																if (this.velocity.X > 0f)
																{
																	this.velocity.X = this.velocity.X - num663 * 1.5f;
																}
															}
															if (this.velocity.Y < vector58.Y)
															{
																this.velocity.Y = this.velocity.Y + num663;
																if (this.velocity.Y < 0f)
																{
																	this.velocity.Y = this.velocity.Y + num663 * 1.5f;
																}
															}
															if (this.velocity.Y > vector58.Y)
															{
																this.velocity.Y = this.velocity.Y - num663;
																if (this.velocity.Y > 0f)
																{
																	this.velocity.Y = this.velocity.Y - num663 * 1.5f;
																}
															}
														}
														if (this.velocity.X != 0f)
														{
															this.spriteDirection = Math.Sign(this.velocity.X);
														}
														if (flag26)
														{
															int num3 = this.frameCounter;
															this.frameCounter = num3 + 1;
															if (this.frameCounter > 3)
															{
																num3 = this.frame;
																this.frame = num3 + 1;
																this.frameCounter = 0;
															}
															if (this.frame < 10 | this.frame > 13)
															{
																this.frame = 10;
															}
															this.rotation = this.velocity.X * 0.1f;
														}
													}
													if (this.ai[0] == 2f)
													{
														this.friendly = true;
														this.spriteDirection = this.direction;
														this.rotation = 0f;
														this.frame = 4 + (int)((float)num659 - this.ai[1]) / (num659 / 3);
														if (this.velocity.Y != 0f)
														{
															this.frame += 3;
														}
														this.velocity.Y = this.velocity.Y + 0.4f;
														if (this.velocity.Y > 10f)
														{
															this.velocity.Y = 10f;
														}
														float[] var_2_1C896_cp_0 = this.ai;
														int var_2_1C896_cp_1 = 1;
														float num73 = var_2_1C896_cp_0[var_2_1C896_cp_1];
														var_2_1C896_cp_0[var_2_1C896_cp_1] = num73 - 1f;
														if (this.ai[1] <= 0f)
														{
															this.ai[1] = 0f;
															this.ai[0] = 0f;
															this.friendly = false;
															this.netUpdate = true;
															return;
														}
													}
													if (num657 >= 0)
													{
														float num667 = 400f;
														float num668 = 20f;
														if (flag26)
														{
															num667 = 700f;
														}
														if ((double)this.position.Y > Main.worldSurface * 16.0)
														{
															num667 *= 0.7f;
														}
														NPC nPC4 = Main.npc[num657];
														Vector2 center3 = nPC4.Center;
														float num669 = (center3 - base.Center).Length();
														bool flag28 = Collision.CanHit(this.position, this.width, this.height, nPC4.position, nPC4.width, nPC4.height);
														if (num669 < num667)
														{
															vector54 = center3;
															if (center3.Y < base.Center.Y - 30f && this.velocity.Y == 0f)
															{
																float num670 = Math.Abs(center3.Y - base.Center.Y);
																if (num670 < 120f)
																{
																	this.velocity.Y = -10f;
																}
																else if (num670 < 210f)
																{
																	this.velocity.Y = -13f;
																}
																else if (num670 < 270f)
																{
																	this.velocity.Y = -15f;
																}
																else if (num670 < 310f)
																{
																	this.velocity.Y = -17f;
																}
																else if (num670 < 380f)
																{
																	this.velocity.Y = -18f;
																}
															}
														}
														if (num669 < num668)
														{
															this.ai[0] = 2f;
															this.ai[1] = (float)num659;
															this.netUpdate = true;
														}
													}
													if (this.ai[0] == 0f && num657 < 0)
													{
														float num671 = 500f;
														if (this.type == 500)
														{
															num671 = 200f;
														}
														if (this.type == 653)
														{
															num671 = 170f;
														}
														if (Main.player[this.owner].rocketDelay2 > 0)
														{
															this.ai[0] = 1f;
															this.netUpdate = true;
														}
														Vector2 vector59 = player3.Center - base.Center;
														if (vector59.Length() > 2000f)
														{
															this.position = player3.Center - new Vector2((float)this.width, (float)this.height) / 2f;
														}
														else if (vector59.Length() > num671 || Math.Abs(vector59.Y) > 300f)
														{
															this.ai[0] = 1f;
															this.netUpdate = true;
															if (this.velocity.Y > 0f && vector59.Y < 0f)
															{
																this.velocity.Y = 0f;
															}
															if (this.velocity.Y < 0f && vector59.Y > 0f)
															{
																this.velocity.Y = 0f;
															}
														}
													}
													if (this.ai[0] == 0f)
													{
														this.tileCollide = true;
														float num672 = 0.5f;
														float num673 = 4f;
														float num674 = 4f;
														float num675 = 0.1f;
														if (num674 < Math.Abs(player3.velocity.X) + Math.Abs(player3.velocity.Y))
														{
															num674 = Math.Abs(player3.velocity.X) + Math.Abs(player3.velocity.Y);
															num672 = 0.7f;
														}
														int num676 = 0;
														bool flag29 = false;
														float num677 = vector54.X - base.Center.X;
														if (Math.Abs(num677) > 5f)
														{
															if (num677 < 0f)
															{
																num676 = -1;
																if (this.velocity.X > -num673)
																{
																	this.velocity.X = this.velocity.X - num672;
																}
																else
																{
																	this.velocity.X = this.velocity.X - num675;
																}
															}
															else
															{
																num676 = 1;
																if (this.velocity.X < num673)
																{
																	this.velocity.X = this.velocity.X + num672;
																}
																else
																{
																	this.velocity.X = this.velocity.X + num675;
																}
															}
															if (!flag26)
															{
																flag29 = true;
															}
														}
														else
														{
															this.velocity.X = this.velocity.X * 0.9f;
															if (Math.Abs(this.velocity.X) < num672 * 2f)
															{
																this.velocity.X = 0f;
															}
														}
														if (num676 != 0)
														{
															int num678 = (int)(this.position.X + (float)(this.width / 2)) / 16;
															int num679 = (int)this.position.Y / 16;
															num678 += num676;
															num678 += (int)this.velocity.X;
															int num3;
															for (int num680 = num679; num680 < num679 + this.height / 16 + 1; num680 = num3 + 1)
															{
																if (WorldGen.SolidTile(num678, num680))
																{
																	flag29 = true;
																}
																num3 = num680;
															}
														}
														if (this.type == 500 && this.velocity.X != 0f)
														{
															flag29 = true;
														}
														if (this.type == 653 && this.velocity.X != 0f)
														{
															flag29 = true;
														}
														Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, 1, false, 0);
														if (this.velocity.Y == 0f && flag29)
														{
															int num3;
															for (int num681 = 0; num681 < 3; num681 = num3 + 1)
															{
																int num682 = (int)(this.position.X + (float)(this.width / 2)) / 16;
																if (num681 == 0)
																{
																	num682 = (int)this.position.X / 16;
																}
																if (num681 == 2)
																{
																	num682 = (int)(this.position.X + (float)this.width) / 16;
																}
																int num683 = (int)(this.position.Y + (float)this.height) / 16;
																if (WorldGen.SolidTile(num682, num683) || Main.tile[num682, num683].halfBrick() || Main.tile[num682, num683].slope() > 0 || (TileID.Sets.Platforms[(int)Main.tile[num682, num683].type] && Main.tile[num682, num683].active() && !Main.tile[num682, num683].inActive()))
																{
																	try
																	{
																		num682 = (int)(this.position.X + (float)(this.width / 2)) / 16;
																		num683 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
																		num682 += num676;
																		num682 += (int)this.velocity.X;
																		if (!WorldGen.SolidTile(num682, num683 - 1) && !WorldGen.SolidTile(num682, num683 - 2))
																		{
																			this.velocity.Y = -5.1f;
																		}
																		else if (!WorldGen.SolidTile(num682, num683 - 2))
																		{
																			this.velocity.Y = -7.1f;
																		}
																		else if (WorldGen.SolidTile(num682, num683 - 5))
																		{
																			this.velocity.Y = -11.1f;
																		}
																		else if (WorldGen.SolidTile(num682, num683 - 4))
																		{
																			this.velocity.Y = -10.1f;
																		}
																		else
																		{
																			this.velocity.Y = -9.1f;
																		}
																	}
																	catch
																	{
																		this.velocity.Y = -9.1f;
																	}
																}
																num3 = num681;
															}
														}
														if (this.velocity.X > num674)
														{
															this.velocity.X = num674;
														}
														if (this.velocity.X < -num674)
														{
															this.velocity.X = -num674;
														}
														if (this.velocity.X < 0f)
														{
															this.direction = -1;
														}
														if (this.velocity.X > 0f)
														{
															this.direction = 1;
														}
														if (this.velocity.X > num672 && num676 == 1)
														{
															this.direction = 1;
														}
														if (this.velocity.X < -num672 && num676 == -1)
														{
															this.direction = -1;
														}
														this.spriteDirection = this.direction;
														if (flag26)
														{
															this.rotation = 0f;
															if (this.velocity.Y == 0f)
															{
																if (this.velocity.X == 0f)
																{
																	this.frame = 0;
																	this.frameCounter = 0;
																}
																else if (Math.Abs(this.velocity.X) >= 0.5f)
																{
																	this.frameCounter += (int)Math.Abs(this.velocity.X);
																	this.frameCounter++;
																	if (this.frameCounter > 10)
																	{
																		this.frame++;
																		this.frameCounter = 0;
																	}
																	if (this.frame >= 4)
																	{
																		this.frame = 0;
																	}
																}
																else
																{
																	this.frame = 0;
																	this.frameCounter = 0;
																}
															}
															else if (this.velocity.Y != 0f)
															{
																this.frameCounter = 0;
																this.frame = 14;
															}
														}
														this.velocity.Y = this.velocity.Y + 0.4f;
														if (this.velocity.Y > 10f)
														{
															this.velocity.Y = 10f;
														}
													}
													if (flag26)
													{
														float[] var_2_1D48C_cp_0 = this.localAI;
														int var_2_1D48C_cp_1 = 0;
														float num73 = var_2_1D48C_cp_0[var_2_1D48C_cp_1];
														var_2_1D48C_cp_0[var_2_1D48C_cp_1] = num73 + 1f;
														if (this.velocity.X == 0f)
														{
															float[] var_2_1D4B9_cp_0 = this.localAI;
															int var_2_1D4B9_cp_1 = 0;
															num73 = var_2_1D4B9_cp_0[var_2_1D4B9_cp_1];
															var_2_1D4B9_cp_0[var_2_1D4B9_cp_1] = num73 + 1f;
														}
														if (this.localAI[0] >= (float)Main.rand.Next(900, 1200))
														{
															this.localAI[0] = 0f;
															int num3;
															for (int num684 = 0; num684 < 6; num684 = num3 + 1)
															{
																int num685 = Dust.NewDust(base.Center + Vector2.UnitX * (float)(-(float)this.direction) * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, (float)(-(float)this.direction), 1f, 0, default(Color), 1f);
																Dust dust = Main.dust[num685];
																dust.velocity /= 2f;
																Main.dust[num685].scale = 0.8f;
																num3 = num684;
															}
															int num686 = Gore.NewGore(base.Center + Vector2.UnitX * (float)(-(float)this.direction) * 8f, Vector2.Zero, Main.rand.Next(580, 583), 1f);
															Gore gore = Main.gore[num686];
															gore.velocity /= 2f;
															Main.gore[num686].velocity.Y = Math.Abs(Main.gore[num686].velocity.Y);
															Main.gore[num686].velocity.X = -Math.Abs(Main.gore[num686].velocity.X) * (float)this.direction;
															return;
														}
													}
												}
												else if (this.aiStyle == 68)
												{
													this.rotation += 0.25f * (float)this.direction;
													bool flag30 = this.type == 399;
													bool flag31 = this.type == 669;
													this.ai[0] += 1f;
													if (this.ai[0] >= 3f)
													{
														this.alpha -= 40;
														if (this.alpha < 0)
														{
															this.alpha = 0;
														}
													}
													if (this.ai[0] >= 15f)
													{
														this.velocity.Y = this.velocity.Y + 0.2f;
														if (this.velocity.Y > 16f)
														{
															this.velocity.Y = 16f;
														}
														this.velocity.X = this.velocity.X * 0.99f;
													}
													if (this.alpha == 0)
													{
														if (flag30)
														{
															Vector2 vector60 = new Vector2(4f, -8f);
															float num687 = this.rotation;
															if (this.direction == -1)
															{
																vector60.X = -4f;
															}
															vector60 = vector60.RotatedBy((double)num687, default(Vector2));
															int num3;
															for (int num688 = 0; num688 < 1; num688 = num3 + 1)
															{
																int num689 = Dust.NewDust(base.Center + vector60 - Vector2.One * 5f, 4, 4, 6, 0f, 0f, 0, default(Color), 1f);
																Main.dust[num689].scale = 1.5f;
																Main.dust[num689].noGravity = true;
																Main.dust[num689].velocity = Main.dust[num689].velocity * 0.25f + Vector2.Normalize(vector60) * 1f;
																Main.dust[num689].velocity = Main.dust[num689].velocity.RotatedBy((double)(-1.57079637f * (float)this.direction), default(Vector2));
																num3 = num688;
															}
														}
														if (flag31)
														{
															int num3;
															for (int num690 = 0; num690 < 2; num690 = num3 + 1)
															{
																Vector2 vector61 = new Vector2(MathHelper.Lerp(-8f, 8f, Main.rand.NextFloat()), -4f);
																float num691 = this.rotation;
																vector61 = vector61.RotatedBy((double)num691, default(Vector2));
																int num692 = Dust.NewDust(base.Center + vector61 - Vector2.One * 5f, 4, 4, 4, 0f, 0f, 0, default(Color), 1f);
																Main.dust[num692].scale = 0.8f - Main.rand.NextFloat() * 0.2f;
																Main.dust[num692].velocity = Main.dust[num692].velocity * 0.25f + Vector2.Normalize(vector61) * 1f;
																Main.dust[num692].velocity = Main.dust[num692].velocity.RotatedBy((double)(-1.57079637f * (float)this.direction), default(Vector2));
																Main.dust[num692].color = Utils.SelectRandom<Color>(Main.rand, new Color[]
																{
																	new Color(255, 255, 255, 110),
																	new Color(245, 200, 30, 110)
																});
																num3 = num690;
															}
														}
													}
													this.spriteDirection = this.direction;
													if (this.owner == Main.myPlayer && this.timeLeft <= 3)
													{
														this.tileCollide = false;
														this.alpha = 255;
														this.position.X = this.position.X + (float)(this.width / 2);
														this.position.Y = this.position.Y + (float)(this.height / 2);
														this.width = 80;
														this.height = 80;
														this.position.X = this.position.X - (float)(this.width / 2);
														this.position.Y = this.position.Y - (float)(this.height / 2);
														this.knockBack = 8f;
													}
													if (this.wet && this.timeLeft > 3)
													{
														this.timeLeft = 3;
														return;
													}
												}
												else if (this.aiStyle == 69)
												{
													Vector2 vector62 = Main.player[this.owner].Center - base.Center;
													this.rotation = vector62.ToRotation() - 1.57f;
													if (Main.player[this.owner].dead)
													{
														this.Kill();
														return;
													}
													Main.player[this.owner].itemAnimation = 10;
													Main.player[this.owner].itemTime = 10;
													float arg_1DC8F_0 = vector62.X;
													if (vector62.X < 0f)
													{
														Main.player[this.owner].ChangeDir(1);
														this.direction = 1;
													}
													else
													{
														Main.player[this.owner].ChangeDir(-1);
														this.direction = -1;
													}
													Main.player[this.owner].itemRotation = (vector62 * -1f * (float)this.direction).ToRotation();
													this.spriteDirection = ((vector62.X > 0f) ? -1 : 1);
													if (this.ai[0] == 0f && vector62.Length() > 400f)
													{
														this.ai[0] = 1f;
													}
													if (this.ai[0] == 1f || this.ai[0] == 2f)
													{
														float num693 = vector62.Length();
														if (num693 > 1500f)
														{
															this.Kill();
															return;
														}
														if (num693 > 600f)
														{
															this.ai[0] = 2f;
														}
														this.tileCollide = false;
														float num694 = 20f;
														if (this.ai[0] == 2f)
														{
															num694 = 40f;
														}
														this.velocity = Vector2.Normalize(vector62) * num694;
														if (vector62.Length() < num694)
														{
															this.Kill();
															return;
														}
													}
													float[] var_2_1DE21_cp_0 = this.ai;
													int var_2_1DE21_cp_1 = 1;
													float num73 = var_2_1DE21_cp_0[var_2_1DE21_cp_1];
													var_2_1DE21_cp_0[var_2_1DE21_cp_1] = num73 + 1f;
													if (this.ai[1] > 5f)
													{
														this.alpha = 0;
													}
													if ((int)this.ai[1] % 4 == 0 && this.owner == Main.myPlayer)
													{
														Vector2 vector63 = vector62 * -1f;
														vector63.Normalize();
														vector63 *= (float)Main.rand.Next(45, 65) * 0.1f;
														vector63 = vector63.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866, default(Vector2));
														Projectile.NewProjectile(base.Center.X, base.Center.Y, vector63.X, vector63.Y, 405, this.damage, this.knockBack, this.owner, -10f, 0f);
														return;
													}
												}
												else
												{
													if (this.aiStyle == 70)
													{
														if (this.ai[0] == 0f)
														{
															float num695 = 500f;
															int num696 = -1;
															int num3;
															for (int num697 = 0; num697 < 200; num697 = num3 + 1)
															{
																NPC nPC5 = Main.npc[num697];
																if (nPC5.CanBeChasedBy(this, false) && Collision.CanHit(this.position, this.width, this.height, nPC5.position, nPC5.width, nPC5.height))
																{
																	float num698 = (nPC5.Center - base.Center).Length();
																	if (num698 < num695)
																	{
																		num696 = num697;
																		num695 = num698;
																	}
																}
																num3 = num697;
															}
															this.ai[0] = (float)(num696 + 1);
															if (this.ai[0] == 0f)
															{
																this.ai[0] = -15f;
															}
															if (this.ai[0] > 0f)
															{
																float scaleFactor5 = (float)Main.rand.Next(35, 75) / 30f;
																this.velocity = (this.velocity * 20f + Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center + new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101))) * scaleFactor5) / 21f;
																this.netUpdate = true;
															}
														}
														else if (this.ai[0] > 0f)
														{
															Vector2 value16 = Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center);
															this.velocity = (this.velocity * 40f + value16 * 12f) / 41f;
														}
														else
														{
															float[] var_2_1E1A4_cp_0 = this.ai;
															int var_2_1E1A4_cp_1 = 0;
															float num73 = var_2_1E1A4_cp_0[var_2_1E1A4_cp_1];
															var_2_1E1A4_cp_0[var_2_1E1A4_cp_1] = num73 + 1f;
															this.alpha -= 25;
															if (this.alpha < 50)
															{
																this.alpha = 50;
															}
															this.velocity *= 0.95f;
														}
														if (this.ai[1] == 0f)
														{
															this.ai[1] = (float)Main.rand.Next(80, 121) / 100f;
															this.netUpdate = true;
														}
														this.scale = this.ai[1];
														return;
													}
													if (this.aiStyle == 71)
													{
														float[] var_2_1E245_cp_0 = this.localAI;
														int var_2_1E245_cp_1 = 1;
														float num73 = var_2_1E245_cp_0[var_2_1E245_cp_1];
														var_2_1E245_cp_0[var_2_1E245_cp_1] = num73 + 1f;
														if (this.localAI[1] > 10f && Main.rand.Next(3) == 0)
														{
															int num699 = 6;
															int num3;
															for (int num700 = 0; num700 < num699; num700 = num3 + 1)
															{
																Vector2 vector64 = Vector2.Normalize(this.velocity) * new Vector2((float)this.width, (float)this.height) / 2f;
																vector64 = vector64.RotatedBy((double)(num700 - (num699 / 2 - 1)) * 3.1415926535897931 / (double)((float)num699), default(Vector2)) + base.Center;
																Vector2 vector65 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
																int num701 = Dust.NewDust(vector64 + vector65, 0, 0, 217, vector65.X * 2f, vector65.Y * 2f, 100, default(Color), 1.4f);
																Main.dust[num701].noGravity = true;
																Main.dust[num701].noLight = true;
																Dust dust = Main.dust[num701];
																dust.velocity /= 4f;
																dust = Main.dust[num701];
																dust.velocity -= this.velocity;
																num3 = num700;
															}
															this.alpha -= 5;
															if (this.alpha < 50)
															{
																this.alpha = 50;
															}
															this.rotation += this.velocity.X * 0.1f;
															this.frame = (int)(this.localAI[1] / 3f) % 3;
															Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.4f, 0.6f);
														}
														int num702 = -1;
														Vector2 vector66 = base.Center;
														float num703 = 500f;
														if (this.localAI[0] > 0f)
														{
															float[] var_2_1E4E8_cp_0 = this.localAI;
															int var_2_1E4E8_cp_1 = 0;
															num73 = var_2_1E4E8_cp_0[var_2_1E4E8_cp_1];
															var_2_1E4E8_cp_0[var_2_1E4E8_cp_1] = num73 - 1f;
														}
														if (this.ai[0] == 0f && this.localAI[0] == 0f)
														{
															int num3;
															for (int num704 = 0; num704 < 200; num704 = num3 + 1)
															{
																NPC nPC6 = Main.npc[num704];
																if (nPC6.CanBeChasedBy(this, false) && (this.ai[0] == 0f || this.ai[0] == (float)(num704 + 1)))
																{
																	Vector2 center4 = nPC6.Center;
																	float num705 = Vector2.Distance(center4, vector66);
																	if (num705 < num703 && Collision.CanHit(this.position, this.width, this.height, nPC6.position, nPC6.width, nPC6.height))
																	{
																		num703 = num705;
																		vector66 = center4;
																		num702 = num704;
																	}
																}
																num3 = num704;
															}
															if (num702 >= 0)
															{
																this.ai[0] = (float)(num702 + 1);
																this.netUpdate = true;
															}
														}
														if (this.localAI[0] == 0f && this.ai[0] == 0f)
														{
															this.localAI[0] = 30f;
														}
														bool flag32 = false;
														if (this.ai[0] != 0f)
														{
															int num706 = (int)(this.ai[0] - 1f);
															if (Main.npc[num706].active && !Main.npc[num706].dontTakeDamage && Main.npc[num706].immune[this.owner] == 0)
															{
																float num707 = Main.npc[num706].position.X + (float)(Main.npc[num706].width / 2);
																float num708 = Main.npc[num706].position.Y + (float)(Main.npc[num706].height / 2);
																float num709 = Math.Abs(this.position.X + (float)(this.width / 2) - num707) + Math.Abs(this.position.Y + (float)(this.height / 2) - num708);
																if (num709 < 1000f)
																{
																	flag32 = true;
																	vector66 = Main.npc[num706].Center;
																}
															}
															else
															{
																this.ai[0] = 0f;
																flag32 = false;
																this.netUpdate = true;
															}
														}
														if (flag32)
														{
															Vector2 v = vector66 - base.Center;
															float num710 = this.velocity.ToRotation();
															float num711 = v.ToRotation();
															double num712 = (double)(num711 - num710);
															if (num712 > 3.1415926535897931)
															{
																num712 -= 6.2831853071795862;
															}
															if (num712 < -3.1415926535897931)
															{
																num712 += 6.2831853071795862;
															}
															this.velocity = this.velocity.RotatedBy(num712 * 0.10000000149011612, default(Vector2));
														}
														float num713 = this.velocity.Length();
														this.velocity.Normalize();
														this.velocity *= num713 + 0.0025f;
														return;
													}
													if (this.aiStyle == 72)
													{
														float[] var_2_1E907_cp_0 = this.localAI;
														int var_2_1E907_cp_1 = 0;
														float num73 = var_2_1E907_cp_0[var_2_1E907_cp_1];
														var_2_1E907_cp_0[var_2_1E907_cp_1] = num73 + 1f;
														if (this.localAI[0] > 5f)
														{
															this.alpha -= 25;
															if (this.alpha < 50)
															{
																this.alpha = 50;
															}
														}
														this.velocity *= 0.96f;
														if (this.ai[1] == 0f)
														{
															this.ai[1] = (float)Main.rand.Next(60, 121) / 100f;
															this.netUpdate = true;
														}
														this.scale = this.ai[1];
														this.position = base.Center;
														int num714 = 14;
														int num715 = 14;
														this.width = (int)((float)num714 * this.ai[1]);
														this.height = (int)((float)num715 * this.ai[1]);
														this.position -= new Vector2((float)(this.width / 2), (float)(this.height / 2));
														return;
													}
													if (this.aiStyle == 73)
													{
														int num716 = (int)this.ai[0];
														int num717 = (int)this.ai[1];
														Tile tile = Main.tile[num716, num717];
														if (tile == null || !tile.active() || tile.type != 338)
														{
															this.Kill();
															return;
														}
														float num718 = 2f;
														float num719 = (float)this.timeLeft / 60f;
														if (num719 < 1f)
														{
															num718 *= num719;
														}
														if (this.type == 419)
														{
															int num3;
															for (int num720 = 0; num720 < 2; num720 = num3 + 1)
															{
																Vector2 vector67 = new Vector2(0f, -num718);
																vector67 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
																vector67 = vector67.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866, default(Vector2));
																int num721 = Dust.NewDust(this.position, this.width, this.height, 222, 0f, 0f, 100, default(Color), 1f);
																Dust dust5 = Main.dust[num721];
																dust5.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
																Dust dust = dust5;
																dust.velocity *= 0.5f;
																if (dust5.velocity.Y > 0f)
																{
																	Dust var_2_1EC0E_cp_0_cp_0 = dust5;
																	var_2_1EC0E_cp_0_cp_0.velocity.Y = var_2_1EC0E_cp_0_cp_0.velocity.Y * -1f;
																}
																dust = dust5;
																dust.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
																dust = dust5;
																dust.velocity += vector67;
																dust5.scale = 0.6f;
																dust5.fadeIn = dust5.scale + 0.2f;
																Dust var_2_1ECAB_cp_0_cp_0 = dust5;
																var_2_1ECAB_cp_0_cp_0.velocity.Y = var_2_1ECAB_cp_0_cp_0.velocity.Y * 2f;
																num3 = num720;
															}
														}
														if (this.type == 420)
														{
															int num3;
															for (int num722 = 0; num722 < 2; num722 = num3 + 1)
															{
																Vector2 vector68 = new Vector2(0f, -num718);
																vector68 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
																vector68 = vector68.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866, default(Vector2));
																int num723 = 219;
																if (Main.rand.Next(5) == 0)
																{
																	num723 = 222;
																}
																int num724 = Dust.NewDust(this.position, this.width, this.height, num723, 0f, 0f, 100, default(Color), 1f);
																Dust dust6 = Main.dust[num724];
																dust6.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
																Dust dust = dust6;
																dust.velocity *= 0.5f;
																if (dust6.velocity.Y > 0f)
																{
																	Dust var_2_1EE43_cp_0_cp_0 = dust6;
																	var_2_1EE43_cp_0_cp_0.velocity.Y = var_2_1EE43_cp_0_cp_0.velocity.Y * -1f;
																}
																dust = dust6;
																dust.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
																dust = dust6;
																dust.velocity += vector68;
																Dust var_2_1EEB4_cp_0_cp_0 = dust6;
																var_2_1EEB4_cp_0_cp_0.velocity.X = var_2_1EEB4_cp_0_cp_0.velocity.X * 0.5f;
																dust6.scale = 0.6f;
																dust6.fadeIn = dust6.scale + 0.2f;
																Dust var_2_1EEFB_cp_0_cp_0 = dust6;
																var_2_1EEFB_cp_0_cp_0.velocity.Y = var_2_1EEFB_cp_0_cp_0.velocity.Y * 2f;
																num3 = num722;
															}
														}
														if (this.type == 421)
														{
															int num3;
															for (int num725 = 0; num725 < 2; num725 = num3 + 1)
															{
																Vector2 vector69 = new Vector2(0f, -num718);
																vector69 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
																vector69 = vector69.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331, default(Vector2));
																int num726 = Dust.NewDust(this.position, this.width, this.height, 221, 0f, 0f, 100, default(Color), 1f);
																Dust dust7 = Main.dust[num726];
																dust7.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
																Dust dust = dust7;
																dust.velocity *= 0.1f;
																if (dust7.velocity.Y > 0f)
																{
																	Dust var_2_1F06F_cp_0_cp_0 = dust7;
																	var_2_1F06F_cp_0_cp_0.velocity.Y = var_2_1F06F_cp_0_cp_0.velocity.Y * -1f;
																}
																dust = dust7;
																dust.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
																dust = dust7;
																dust.velocity += vector69;
																dust7.scale = 0.6f;
																dust7.fadeIn = dust7.scale + 0.2f;
																Dust var_2_1F10C_cp_0_cp_0 = dust7;
																var_2_1F10C_cp_0_cp_0.velocity.Y = var_2_1F10C_cp_0_cp_0.velocity.Y * 2.5f;
																num3 = num725;
															}
															if (this.timeLeft % 10 == 0)
															{
																float num727 = 0.85f + (float)Main.rand.NextDouble() * 0.2f;
																for (int num728 = 0; num728 < 9; num728 = num3 + 1)
																{
																	Vector2 value17 = new Vector2((float)(num728 - 4) / 5f, -num718 * num727);
																	int num729 = Dust.NewDust(this.position, this.width, this.height, 222, 0f, 0f, 100, default(Color), 1f);
																	Dust dust8 = Main.dust[num729];
																	dust8.scale = 0.7f + (float)Main.rand.NextDouble() * 0.3f;
																	Dust dust = dust8;
																	dust.velocity *= 0f;
																	if (dust8.velocity.Y > 0f)
																	{
																		Dust var_2_1F24B_cp_0_cp_0 = dust8;
																		var_2_1F24B_cp_0_cp_0.velocity.Y = var_2_1F24B_cp_0_cp_0.velocity.Y * -1f;
																	}
																	dust = dust8;
																	dust.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
																	dust = dust8;
																	dust.velocity += value17;
																	dust8.scale = 0.6f;
																	dust8.fadeIn = dust8.scale + 0.2f;
																	Dust var_2_1F2E8_cp_0_cp_0 = dust8;
																	var_2_1F2E8_cp_0_cp_0.velocity.Y = var_2_1F2E8_cp_0_cp_0.velocity.Y * 2f;
																	num3 = num728;
																}
															}
														}
														if (this.type == 422)
														{
															int num3;
															for (int num730 = 0; num730 < 2; num730 = num3 + 1)
															{
																Vector2 vector70 = new Vector2(0f, -num718);
																vector70 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
																vector70 = vector70.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866, default(Vector2));
																int num731 = Dust.NewDust(this.position, this.width, this.height, 219 + Main.rand.Next(5), 0f, 0f, 100, default(Color), 1f);
																Dust dust9 = Main.dust[num731];
																dust9.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
																Dust dust = dust9;
																dust.velocity *= 0.5f;
																if (dust9.velocity.Y > 0f)
																{
																	Dust var_2_1F469_cp_0_cp_0 = dust9;
																	var_2_1F469_cp_0_cp_0.velocity.Y = var_2_1F469_cp_0_cp_0.velocity.Y * -1f;
																}
																dust = dust9;
																dust.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
																dust = dust9;
																dust.velocity += vector70;
																dust9.scale = 0.6f;
																dust9.fadeIn = dust9.scale + 0.2f;
																Dust var_2_1F506_cp_0_cp_0 = dust9;
																var_2_1F506_cp_0_cp_0.velocity.Y = var_2_1F506_cp_0_cp_0.velocity.Y * 2f;
																num3 = num730;
															}
															return;
														}
													}
													else if (this.aiStyle == 74)
													{
														if (this.extraUpdates == 1)
														{
															this.localAI[0] *= this.localAI[1];
															this.localAI[1] -= 0.001f;
															if ((double)this.localAI[0] < 0.01)
															{
																this.Kill();
																return;
															}
														}
													}
													else
													{
														if (this.aiStyle == 75)
														{
															this.AI_075();
															return;
														}
														if (this.aiStyle == 76)
														{
															Player player4 = Main.player[this.owner];
															player4.heldProj = this.whoAmI;
															if (this.type == 441)
															{
																if (player4.mount.Type != 9)
																{
																	this.Kill();
																	return;
																}
															}
															else if (this.type == 453 && player4.mount.Type != 8)
															{
																this.Kill();
																return;
															}
															if (Main.myPlayer != this.owner)
															{
																this.position.X = player4.position.X + this.ai[0];
																this.position.Y = player4.position.Y + this.ai[1];
																if (this.type == 441)
																{
																	if (!player4.mount.AbilityCharging)
																	{
																		player4.mount.StartAbilityCharge(player4);
																	}
																}
																else if (this.type == 453 && !player4.mount.AbilityActive)
																{
																	player4.mount.UseAbility(player4, this.position, false);
																}
																player4.mount.AimAbility(player4, this.position);
																return;
															}
															this.position.X = Main.screenPosition.X + (float)Main.mouseX;
															this.position.Y = Main.screenPosition.Y + (float)Main.mouseY;
															if (this.ai[0] != this.position.X - player4.position.X || this.ai[1] != this.position.Y - player4.position.Y)
															{
																this.netUpdate = true;
															}
															this.ai[0] = this.position.X - player4.position.X;
															this.ai[1] = this.position.Y - player4.position.Y;
															player4.mount.AimAbility(player4, this.position);
															if (!player4.channel)
															{
																player4.mount.UseAbility(player4, this.position, false);
																this.Kill();
																return;
															}
														}
														else
														{
															if (this.aiStyle == 77)
															{
																ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
																if (activeSound != null)
																{
																	if (activeSound.Volume == 0f)
																	{
																		activeSound.Stop();
																		this.localAI[0] = SlotId.Invalid.ToFloat();
																	}
																	activeSound.Volume = Math.Max(0f, activeSound.Volume - 0.05f);
																}
																else
																{
																	this.localAI[0] = SlotId.Invalid.ToFloat();
																}
																if (this.ai[1] == 1f)
																{
																	this.friendly = false;
																	if (this.alpha < 255)
																	{
																		this.alpha += 51;
																	}
																	if (this.alpha >= 255)
																	{
																		this.alpha = 255;
																		this.Kill();
																		return;
																	}
																}
																else
																{
																	if (this.alpha > 0)
																	{
																		this.alpha -= 50;
																	}
																	if (this.alpha < 0)
																	{
																		this.alpha = 0;
																	}
																}
																float num732 = 30f;
																float num733 = num732 * 4f;
																float[] var_2_1F982_cp_0 = this.ai;
																int var_2_1F982_cp_1 = 0;
																float num73 = var_2_1F982_cp_0[var_2_1F982_cp_1];
																var_2_1F982_cp_0[var_2_1F982_cp_1] = num73 + 1f;
																if (this.ai[0] > num733)
																{
																	this.ai[0] = 0f;
																}
																Vector2 vector71 = -Vector2.UnitY.RotatedBy((double)(6.28318548f * this.ai[0] / num732), default(Vector2));
																float val = 0.75f + vector71.Y * 0.25f;
																float val2 = 0.8f - vector71.Y * 0.2f;
																float num734 = Math.Max(val, val2);
																this.position += new Vector2((float)this.width, (float)this.height) / 2f;
																this.width = (this.height = (int)(80f * num734));
																this.position -= new Vector2((float)this.width, (float)this.height) / 2f;
																this.frameCounter++;
																if (this.frameCounter >= 3)
																{
																	this.frameCounter = 0;
																	this.frame++;
																	if (this.frame >= 4)
																	{
																		this.frame = 0;
																	}
																}
																int num3;
																for (int num735 = 0; num735 < 1; num735 = num3 + 1)
																{
																	float num736 = 55f * num734;
																	float num737 = 11f * num734;
																	float num738 = 0.5f;
																	int num739 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.5f);
																	Main.dust[num739].noGravity = true;
																	Dust dust = Main.dust[num739];
																	dust.velocity *= 2f;
																	Main.dust[num739].position = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (num737 + num738 * (float)Main.rand.NextDouble() * num736) + base.Center;
																	Main.dust[num739].velocity = Main.dust[num739].velocity / 2f + Vector2.Normalize(Main.dust[num739].position - base.Center);
																	if (Main.rand.Next(2) == 0)
																	{
																		num739 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.9f);
																		Main.dust[num739].noGravity = true;
																		dust = Main.dust[num739];
																		dust.velocity *= 1.2f;
																		Main.dust[num739].position = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (num737 + num738 * (float)Main.rand.NextDouble() * num736) + base.Center;
																		Main.dust[num739].velocity = Main.dust[num739].velocity / 2f + Vector2.Normalize(Main.dust[num739].position - base.Center);
																	}
																	if (Main.rand.Next(4) == 0)
																	{
																		num739 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.7f);
																		Main.dust[num739].noGravity = true;
																		dust = Main.dust[num739];
																		dust.velocity *= 1.2f;
																		Main.dust[num739].position = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (num737 + num738 * (float)Main.rand.NextDouble() * num736) + base.Center;
																		Main.dust[num739].velocity = Main.dust[num739].velocity / 2f + Vector2.Normalize(Main.dust[num739].position - base.Center);
																	}
																	num3 = num735;
																}
																return;
															}
															if (this.aiStyle == 78)
															{
																if (this.alpha > 0)
																{
																	this.alpha -= 30;
																}
																if (this.alpha < 0)
																{
																	this.alpha = 0;
																}
																Vector2 v2 = this.ai[0].ToRotationVector2();
																float num740 = this.velocity.ToRotation();
																float num741 = v2.ToRotation();
																double num742 = (double)(num741 - num740);
																if (num742 > 3.1415926535897931)
																{
																	num742 -= 6.2831853071795862;
																}
																if (num742 < -3.1415926535897931)
																{
																	num742 += 6.2831853071795862;
																}
																this.velocity = this.velocity.RotatedBy(num742 * 0.05000000074505806, default(Vector2));
																this.velocity *= 0.96f;
																this.rotation = this.velocity.ToRotation() - 1.57079637f;
																if (Main.myPlayer == this.owner && this.timeLeft > 60)
																{
																	this.timeLeft = 60;
																	return;
																}
															}
															else if (this.aiStyle == 79)
															{
																bool flag33 = true;
																int num743 = (int)this.ai[0] - 1;
																if (this.type == 447 && (this.ai[0] == 0f || ((!Main.npc[num743].active || Main.npc[num743].type != 392) && (!Main.npc[num743].active || Main.npc[num743].type != 395 || Main.npc[num743].ai[3] % 120f < 60f || Main.npc[num743].ai[0] != 2f))))
																{
																	flag33 = false;
																}
																if (!flag33)
																{
																	this.Kill();
																	return;
																}
																NPC nPC7 = Main.npc[num743];
																float num744 = nPC7.Center.Y + 46f;
																int num745 = (int)nPC7.Center.X / 16;
																int num746 = (int)num744 / 16;
																int num747 = 0;
																bool flag34 = Main.tile[num745, num746].nactive() && Main.tileSolid[(int)Main.tile[num745, num746].type] && !Main.tileSolidTop[(int)Main.tile[num745, num746].type];
																if (flag34)
																{
																	num747 = 1;
																}
																else
																{
																	while (num747 < 150 && num746 + num747 < Main.maxTilesY)
																	{
																		int num748 = num746 + num747;
																		bool flag35 = Main.tile[num745, num748].nactive() && Main.tileSolid[(int)Main.tile[num745, num748].type] && !Main.tileSolidTop[(int)Main.tile[num745, num748].type];
																		if (flag35)
																		{
																			num747--;
																			break;
																		}
																		int num3 = num747;
																		num747 = num3 + 1;
																	}
																}
																this.position.X = nPC7.Center.X - (float)(this.width / 2);
																this.position.Y = num744;
																this.height = (num747 + 1) * 16;
																int num749 = (int)this.position.Y + this.height;
																if (Main.tile[num745, num749 / 16].nactive() && Main.tileSolid[(int)Main.tile[num745, num749 / 16].type] && !Main.tileSolidTop[(int)Main.tile[num745, num749 / 16].type])
																{
																	int num750 = num749 % 16;
																	this.height -= num750 - 2;
																}
																if (this.type == 447)
																{
																	int num3;
																	for (int num751 = 0; num751 < 2; num751 = num3 + 1)
																	{
																		int num752 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 16f), this.width, 16, 228, 0f, 0f, 0, default(Color), 1f);
																		Main.dust[num752].noGravity = true;
																		Dust dust = Main.dust[num752];
																		dust.velocity *= 0.5f;
																		Dust var_2_20457_cp_0_cp_0 = Main.dust[num752];
																		var_2_20457_cp_0_cp_0.velocity.X = var_2_20457_cp_0_cp_0.velocity.X - ((float)num751 - nPC7.velocity.X * 2f / 3f);
																		Main.dust[num752].scale = 2.8f;
																		num3 = num751;
																	}
																	if (Main.rand.Next(5) == 0)
																	{
																		int num753 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) - (float)(this.width / 2 * Math.Sign(nPC7.velocity.X)) - 4f, this.position.Y + (float)this.height - 16f), 4, 16, 31, 0f, 0f, 100, default(Color), 1.5f);
																		Dust dust = Main.dust[num753];
																		dust.velocity *= 0.5f;
																		Dust var_2_20584_cp_0_cp_0 = Main.dust[num753];
																		var_2_20584_cp_0_cp_0.velocity.X = var_2_20584_cp_0_cp_0.velocity.X - nPC7.velocity.X / 2f;
																		Main.dust[num753].velocity.Y = -Math.Abs(Main.dust[num753].velocity.Y);
																	}
																}
																if (this.type == 447)
																{
																	int num3 = this.frameCounter + 1;
																	this.frameCounter = num3;
																	if (num3 >= 5)
																	{
																		this.frameCounter = 0;
																		num3 = this.frame + 1;
																		this.frame = num3;
																		if (num3 >= 4)
																		{
																			this.frame = 0;
																			return;
																		}
																	}
																}
															}
															else
															{
																if (this.aiStyle == 80)
																{
																	int num3;
																	if (this.ai[0] == 0f && this.ai[1] > 0f)
																	{
																		float[] var_2_2065C_cp_0 = this.ai;
																		int var_2_2065C_cp_1 = 1;
																		float num73 = var_2_2065C_cp_0[var_2_2065C_cp_1];
																		var_2_2065C_cp_0[var_2_2065C_cp_1] = num73 - 1f;
																	}
																	else if (this.ai[0] == 0f && this.ai[1] == 0f)
																	{
																		this.ai[0] = 1f;
																		this.ai[1] = (float)Player.FindClosest(this.position, this.width, this.height);
																		this.netUpdate = true;
																		float num754 = this.velocity.Length();
																		this.velocity = Vector2.Normalize(this.velocity) * (num754 + 4f);
																		for (int num755 = 0; num755 < 8; num755 = num3 + 1)
																		{
																			Vector2 vector72 = Vector2.UnitX * -8f;
																			vector72 += -Vector2.UnitY.RotatedBy((double)((float)num755 * 3.14159274f / 4f), default(Vector2)) * new Vector2(2f, 8f);
																			vector72 = vector72.RotatedBy((double)(this.rotation - 1.57079637f), default(Vector2));
																			int num756 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 0, default(Color), 1f);
																			Main.dust[num756].scale = 1.5f;
																			Main.dust[num756].noGravity = true;
																			Main.dust[num756].position = base.Center + vector72;
																			Main.dust[num756].velocity = this.velocity * 0f;
																			num3 = num755;
																		}
																	}
																	else if (this.ai[0] == 1f)
																	{
																		this.tileCollide = true;
																		float[] var_2_2087A_cp_0 = this.localAI;
																		int var_2_2087A_cp_1 = 1;
																		float num73 = var_2_2087A_cp_0[var_2_2087A_cp_1];
																		var_2_2087A_cp_0[var_2_2087A_cp_1] = num73 + 1f;
																		float num757 = 180f;
																		float num758 = 0f;
																		float num759 = 30f;
																		if (this.localAI[1] == num757)
																		{
																			this.Kill();
																			return;
																		}
																		if (this.localAI[1] >= num758 && this.localAI[1] < num758 + num759)
																		{
																			Vector2 v3 = Main.player[(int)this.ai[1]].Center - base.Center;
																			float num760 = this.velocity.ToRotation();
																			float num761 = v3.ToRotation();
																			double num762 = (double)(num761 - num760);
																			if (num762 > 3.1415926535897931)
																			{
																				num762 -= 6.2831853071795862;
																			}
																			if (num762 < -3.1415926535897931)
																			{
																				num762 += 6.2831853071795862;
																			}
																			this.velocity = this.velocity.RotatedBy(num762 * 0.20000000298023224, default(Vector2));
																		}
																		if (this.localAI[1] % 5f == 0f)
																		{
																			for (int num763 = 0; num763 < 4; num763 = num3 + 1)
																			{
																				Vector2 vector73 = Vector2.UnitX * -8f;
																				vector73 += -Vector2.UnitY.RotatedBy((double)((float)num763 * 3.14159274f / 4f), default(Vector2)) * new Vector2(2f, 4f);
																				vector73 = vector73.RotatedBy((double)(this.rotation - 1.57079637f), default(Vector2));
																				int num764 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 0, default(Color), 1f);
																				Main.dust[num764].scale = 1.5f;
																				Main.dust[num764].noGravity = true;
																				Main.dust[num764].position = base.Center + vector73;
																				Main.dust[num764].velocity = this.velocity * 0f;
																				num3 = num763;
																			}
																		}
																	}
																	this.rotation = this.velocity.ToRotation() + 1.57079637f;
																	num3 = this.frameCounter + 1;
																	this.frameCounter = num3;
																	if (num3 >= 3)
																	{
																		this.frameCounter = 0;
																		num3 = this.frame + 1;
																		this.frame = num3;
																		if (num3 >= 3)
																		{
																			this.frame = 0;
																		}
																	}
																	int num765 = 0;
																	while ((float)num765 < 1f + this.ai[0])
																	{
																		Vector2 value18 = Vector2.UnitY.RotatedBy((double)this.rotation, default(Vector2)) * 8f * (float)(num765 + 1);
																		int num766 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 0, default(Color), 1f);
																		Main.dust[num766].position = base.Center + value18;
																		Main.dust[num766].scale = 1f;
																		Main.dust[num766].noGravity = true;
																		num3 = num765;
																		num765 = num3 + 1;
																	}
																	for (int num767 = 0; num767 < 255; num767 = num3 + 1)
																	{
																		Player player5 = Main.player[num767];
																		if (player5.active && !player5.dead && Vector2.Distance(player5.Center, base.Center) <= 42f)
																		{
																			this.Kill();
																			return;
																		}
																		num3 = num767;
																	}
																	return;
																}
																if (this.aiStyle == 81)
																{
																	int num768 = this.penetrate;
																	if (this.ai[0] == 0f)
																	{
																		this.tileCollide = true;
																		float[] var_2_20D25_cp_0 = this.localAI;
																		int var_2_20D25_cp_1 = 0;
																		float num73 = var_2_20D25_cp_0[var_2_20D25_cp_1];
																		var_2_20D25_cp_0[var_2_20D25_cp_1] = num73 + 1f;
																		if (this.localAI[0] > 7f)
																		{
																			int num769 = Utils.SelectRandom<int>(Main.rand, new int[]
																			{
																				226,
																				229
																			});
																			Vector2 center5 = base.Center;
																			Vector2 vector74 = new Vector2(-16f, 16f);
																			float num770 = 1f;
																			vector74 += new Vector2(-16f, 16f);
																			vector74 = vector74.RotatedBy((double)this.rotation, default(Vector2));
																			int num771 = 4;
																			int num772 = Dust.NewDust(center5 + vector74 + Vector2.One * (float)(-(float)num771), num771 * 2, num771 * 2, num769, 0f, 0f, 100, default(Color), num770);
																			Dust dust = Main.dust[num772];
																			dust.velocity *= 0.1f;
																			if (Main.rand.Next(6) != 0)
																			{
																				Main.dust[num772].noGravity = true;
																			}
																		}
																		float num773 = 0.01f;
																		int num774 = 5;
																		int num775 = num774 * 15;
																		int num776 = 0;
																		if (this.localAI[0] > 7f)
																		{
																			if (this.localAI[1] == 0f)
																			{
																				this.scale -= num773;
																				this.alpha += num774;
																				if (this.alpha > num775)
																				{
																					this.alpha = num775;
																					this.localAI[1] = 1f;
																				}
																			}
																			else if (this.localAI[1] == 1f)
																			{
																				this.scale += num773;
																				this.alpha -= num774;
																				if (this.alpha <= num776)
																				{
																					this.alpha = num776;
																					this.localAI[1] = 0f;
																				}
																			}
																		}
																		this.rotation = this.velocity.ToRotation() + 0.7853982f;
																	}
																	else if (this.ai[0] >= (float)1 && this.ai[0] < (float)(1 + num768))
																	{
																		this.tileCollide = false;
																		this.alpha += 15;
																		this.velocity *= 0.98f;
																		this.localAI[0] = 0f;
																		if (this.alpha >= 255)
																		{
																			if (this.ai[0] == 1f)
																			{
																				this.Kill();
																				return;
																			}
																			int num777 = -1;
																			Vector2 value19 = base.Center;
																			float num778 = 250f;
																			int num3;
																			for (int num779 = 0; num779 < 200; num779 = num3 + 1)
																			{
																				NPC nPC8 = Main.npc[num779];
																				if (nPC8.CanBeChasedBy(this, false))
																				{
																					Vector2 center6 = nPC8.Center;
																					float num780 = Vector2.Distance(center6, base.Center);
																					if (num780 < num778)
																					{
																						num778 = num780;
																						value19 = center6;
																						num777 = num779;
																					}
																				}
																				num3 = num779;
																			}
																			if (num777 >= 0)
																			{
																				this.netUpdate = true;
																				this.ai[0] += (float)num768;
																				this.position = value19 + ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * 100f - new Vector2((float)this.width, (float)this.height) / 2f;
																				this.velocity = Vector2.Normalize(value19 - base.Center) * 15f;
																				this.rotation = this.velocity.ToRotation() + 0.7853982f;
																			}
																			else
																			{
																				this.Kill();
																			}
																		}
																		if (Main.rand.Next(3) == 0)
																		{
																			int num781 = Utils.SelectRandom<int>(Main.rand, new int[]
																			{
																				226,
																				229
																			});
																			Vector2 center7 = base.Center;
																			Vector2 vector75 = new Vector2(-16f, 16f);
																			vector75 = vector75;
																			float num782 = 0.6f;
																			vector75 += new Vector2(-16f, 16f);
																			vector75 = vector75.RotatedBy((double)this.rotation, default(Vector2));
																			int num783 = 4;
																			int num784 = Dust.NewDust(center7 + vector75 + Vector2.One * (float)(-(float)num783), num783 * 2, num783 * 2, num781, 0f, 0f, 100, default(Color), num782);
																			Dust dust = Main.dust[num784];
																			dust.velocity *= 0.1f;
																			Main.dust[num784].noGravity = true;
																		}
																	}
																	else if (this.ai[0] >= (float)(1 + num768) && this.ai[0] < (float)(1 + num768 * 2))
																	{
																		this.scale = 0.9f;
																		this.tileCollide = false;
																		this.rotation = this.velocity.ToRotation() + 0.7853982f;
																		float[] var_2_21364_cp_0 = this.ai;
																		int var_2_21364_cp_1 = 1;
																		float num73 = var_2_21364_cp_0[var_2_21364_cp_1];
																		var_2_21364_cp_0[var_2_21364_cp_1] = num73 + 1f;
																		if (this.ai[1] >= 15f)
																		{
																			this.alpha += 51;
																			this.velocity *= 0.8f;
																			if (this.alpha >= 255)
																			{
																				this.Kill();
																			}
																		}
																		else
																		{
																			this.alpha -= 125;
																			if (this.alpha < 0)
																			{
																				this.alpha = 0;
																			}
																			this.velocity *= 0.98f;
																		}
																		float[] var_2_213FD_cp_0 = this.localAI;
																		int var_2_213FD_cp_1 = 0;
																		num73 = var_2_213FD_cp_0[var_2_213FD_cp_1];
																		var_2_213FD_cp_0[var_2_213FD_cp_1] = num73 + 1f;
																		int num785 = Utils.SelectRandom<int>(Main.rand, new int[]
																		{
																			226,
																			229
																		});
																		Vector2 center8 = base.Center;
																		Vector2 vector76 = new Vector2(-16f, 16f);
																		float num786 = 0.6f;
																		vector76 += new Vector2(-16f, 16f);
																		vector76 = vector76.RotatedBy((double)this.rotation, default(Vector2));
																		int num787 = 4;
																		int num788 = Dust.NewDust(center8 + vector76 + Vector2.One * (float)(-(float)num787), num787 * 2, num787 * 2, num785, 0f, 0f, 100, default(Color), num786);
																		Dust dust = Main.dust[num788];
																		dust.velocity *= 0.1f;
																		Main.dust[num788].noGravity = true;
																	}
																	float num789 = (float)this.alpha / 255f;
																	Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f * num789, 0.4f * num789, 1f * num789);
																	return;
																}
																if (this.aiStyle == 82)
																{
																	this.alpha -= 40;
																	if (this.alpha < 0)
																	{
																		this.alpha = 0;
																	}
																	if (this.ai[0] == 0f)
																	{
																		float[] var_2_215E8_cp_0 = this.localAI;
																		int var_2_215E8_cp_1 = 0;
																		float num73 = var_2_215E8_cp_0[var_2_215E8_cp_1];
																		var_2_215E8_cp_0[var_2_215E8_cp_1] = num73 + 1f;
																		if (this.localAI[0] >= 45f)
																		{
																			this.localAI[0] = 0f;
																			this.ai[0] = 1f;
																			this.ai[1] = -this.ai[1];
																			this.netUpdate = true;
																		}
																		this.velocity.X = this.velocity.RotatedBy((double)this.ai[1], default(Vector2)).X;
																		this.velocity.X = MathHelper.Clamp(this.velocity.X, -6f, 6f);
																		this.velocity.Y = this.velocity.Y - 0.08f;
																		if (this.velocity.Y > 0f)
																		{
																			this.velocity.Y = this.velocity.Y - 0.2f;
																		}
																		if (this.velocity.Y < -7f)
																		{
																			this.velocity.Y = -7f;
																		}
																	}
																	else if (this.ai[0] == 1f)
																	{
																		float[] var_2_21711_cp_0 = this.localAI;
																		int var_2_21711_cp_1 = 0;
																		float num73 = var_2_21711_cp_0[var_2_21711_cp_1];
																		var_2_21711_cp_0[var_2_21711_cp_1] = num73 + 1f;
																		if (this.localAI[0] >= 90f)
																		{
																			this.localAI[0] = 0f;
																			this.ai[0] = 2f;
																			this.ai[1] = (float)Player.FindClosest(this.position, this.width, this.height);
																			this.netUpdate = true;
																		}
																		this.velocity.X = this.velocity.RotatedBy((double)this.ai[1], default(Vector2)).X;
																		this.velocity.X = MathHelper.Clamp(this.velocity.X, -6f, 6f);
																		this.velocity.Y = this.velocity.Y - 0.08f;
																		if (this.velocity.Y > 0f)
																		{
																			this.velocity.Y = this.velocity.Y - 0.2f;
																		}
																		if (this.velocity.Y < -7f)
																		{
																			this.velocity.Y = -7f;
																		}
																	}
																	else if (this.ai[0] == 2f)
																	{
																		Vector2 vector77 = Main.player[(int)this.ai[1]].Center - base.Center;
																		if (vector77.Length() < 30f)
																		{
																			this.Kill();
																			return;
																		}
																		vector77.Normalize();
																		vector77 *= 14f;
																		vector77 = Vector2.Lerp(this.velocity, vector77, 0.6f);
																		if (vector77.Y < 6f)
																		{
																			vector77.Y = 6f;
																		}
																		float num790 = 0.4f;
																		if (this.velocity.X < vector77.X)
																		{
																			this.velocity.X = this.velocity.X + num790;
																			if (this.velocity.X < 0f && vector77.X > 0f)
																			{
																				this.velocity.X = this.velocity.X + num790;
																			}
																		}
																		else if (this.velocity.X > vector77.X)
																		{
																			this.velocity.X = this.velocity.X - num790;
																			if (this.velocity.X > 0f && vector77.X < 0f)
																			{
																				this.velocity.X = this.velocity.X - num790;
																			}
																		}
																		if (this.velocity.Y < vector77.Y)
																		{
																			this.velocity.Y = this.velocity.Y + num790;
																			if (this.velocity.Y < 0f && vector77.Y > 0f)
																			{
																				this.velocity.Y = this.velocity.Y + num790;
																			}
																		}
																		else if (this.velocity.Y > vector77.Y)
																		{
																			this.velocity.Y = this.velocity.Y - num790;
																			if (this.velocity.Y > 0f && vector77.Y < 0f)
																			{
																				this.velocity.Y = this.velocity.Y - num790;
																			}
																		}
																	}
																	if (this.alpha < 40)
																	{
																		int num791 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, -this.velocity.X / 3f, -this.velocity.Y / 3f, 150, Color.Transparent, 1.2f);
																		Main.dust[num791].noGravity = true;
																	}
																	this.rotation = this.velocity.ToRotation() + 1.57079637f;
																	return;
																}
																if (this.aiStyle == 83)
																{
																	if (this.alpha > 200)
																	{
																		this.alpha = 200;
																	}
																	this.alpha -= 5;
																	if (this.alpha < 0)
																	{
																		this.alpha = 0;
																	}
																	float num792 = (float)this.alpha / 255f;
																	this.scale = 1f - num792;
																	if (this.ai[0] >= 0f)
																	{
																		float[] var_2_21BB5_cp_0 = this.ai;
																		int var_2_21BB5_cp_1 = 0;
																		float num73 = var_2_21BB5_cp_0[var_2_21BB5_cp_1];
																		var_2_21BB5_cp_0[var_2_21BB5_cp_1] = num73 + 1f;
																	}
																	if (this.ai[0] == -1f)
																	{
																		this.frame = 1;
																		this.extraUpdates = 1;
																	}
																	else if (this.ai[0] < 30f)
																	{
																		this.position = Main.npc[(int)this.ai[1]].Center - new Vector2((float)this.width, (float)this.height) / 2f - this.velocity;
																	}
																	else
																	{
																		this.velocity *= 0.96f;
																		int num3 = this.frameCounter + 1;
																		this.frameCounter = num3;
																		if (num3 >= 6)
																		{
																			this.frameCounter = 0;
																			num3 = this.frame + 1;
																			this.frame = num3;
																			if (num3 >= 2)
																			{
																				this.frame = 0;
																			}
																		}
																	}
																	if (this.alpha < 40)
																	{
																		int num3;
																		for (int num793 = 0; num793 < 2; num793 = num3 + 1)
																		{
																			float num794 = (float)Main.rand.NextDouble() * 1f - 0.5f;
																			if (num794 < -0.5f)
																			{
																				num794 = -0.5f;
																			}
																			if (num794 > 0.5f)
																			{
																				num794 = 0.5f;
																			}
																			Vector2 value20 = new Vector2((float)(-(float)this.width) * 0.65f * this.scale, 0f).RotatedBy((double)(num794 * 6.28318548f), default(Vector2)).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
																			int num795 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, -this.velocity.X / 3f, -this.velocity.Y / 3f, 150, Color.Transparent, 0.7f);
																			Main.dust[num795].velocity = Vector2.Zero;
																			Main.dust[num795].position = base.Center + value20;
																			Main.dust[num795].noGravity = true;
																			num3 = num793;
																		}
																		return;
																	}
																}
																else if (this.aiStyle == 84)
																{
																	Vector2? vector78 = null;
																	if (this.velocity.HasNaNs() || this.velocity == Vector2.Zero)
																	{
																		this.velocity = -Vector2.UnitY;
																	}
																	if (this.type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 396)
																	{
																		Vector2 value21 = new Vector2(27f, 59f);
																		Vector2 value22 = Utils.Vector2FromElipse(Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2(), value21 * Main.npc[(int)this.ai[1]].localAI[1]);
																		this.position = Main.npc[(int)this.ai[1]].Center + value22 - new Vector2((float)this.width, (float)this.height) / 2f;
																	}
																	else if (this.type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 400)
																	{
																		Vector2 value23 = new Vector2(30f, 30f);
																		Vector2 value24 = Utils.Vector2FromElipse(Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2(), value23 * Main.npc[(int)this.ai[1]].localAI[1]);
																		this.position = Main.npc[(int)this.ai[1]].Center + value24 - new Vector2((float)this.width, (float)this.height) / 2f;
																	}
																	else if (this.type == 537 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 411)
																	{
																		Vector2 value25 = new Vector2((float)(Main.npc[(int)this.ai[1]].direction * 6), -4f);
																		this.position = Main.npc[(int)this.ai[1]].Center + value25 - base.Size / 2f + new Vector2(0f, -Main.npc[(int)this.ai[1]].gfxOffY);
																	}
																	else if (this.type == 461 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 460)
																	{
																		Vector2 value26 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
																		this.position = Main.projectile[(int)this.ai[1]].Center + value26 * 16f - new Vector2((float)this.width, (float)this.height) / 2f + new Vector2(0f, -Main.projectile[(int)this.ai[1]].gfxOffY);
																		this.velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
																	}
																	else if (this.type == 642 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 641)
																	{
																		base.Center = Main.projectile[(int)this.ai[1]].Center;
																		this.velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].ai[1].ToRotationVector2());
																	}
																	else
																	{
																		if (this.type != 632 || !Main.projectile[(int)this.ai[1]].active || Main.projectile[(int)this.ai[1]].type != 633)
																		{
																			this.Kill();
																			return;
																		}
																		float num796 = (float)((int)this.ai[0]) - 2.5f;
																		Vector2 value27 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
																		Projectile projectile = Main.projectile[(int)this.ai[1]];
																		float num797 = num796 * 0.5235988f;
																		Vector2 value28 = Vector2.Zero;
																		float num798;
																		float y;
																		float num799;
																		float scaleFactor6;
																		if (projectile.ai[0] < 180f)
																		{
																			num798 = 1f - projectile.ai[0] / 180f;
																			y = 20f - projectile.ai[0] / 180f * 14f;
																			if (projectile.ai[0] < 120f)
																			{
																				num799 = 20f - 4f * (projectile.ai[0] / 120f);
																				this.Opacity = projectile.ai[0] / 120f * 0.4f;
																			}
																			else
																			{
																				num799 = 16f - 10f * ((projectile.ai[0] - 120f) / 60f);
																				this.Opacity = 0.4f + (projectile.ai[0] - 120f) / 60f * 0.6f;
																			}
																			scaleFactor6 = -22f + projectile.ai[0] / 180f * 20f;
																		}
																		else
																		{
																			num798 = 0f;
																			num799 = 1.75f;
																			y = 6f;
																			this.Opacity = 1f;
																			scaleFactor6 = -2f;
																		}
																		float num800 = (projectile.ai[0] + num796 * num799) / (num799 * 6f) * 6.28318548f;
																		num797 = Vector2.UnitY.RotatedBy((double)num800, default(Vector2)).Y * 0.5235988f * num798;
																		value28 = (Vector2.UnitY.RotatedBy((double)num800, default(Vector2)) * new Vector2(4f, y)).RotatedBy((double)projectile.velocity.ToRotation(), default(Vector2));
																		this.position = projectile.Center + value27 * 16f - base.Size / 2f + new Vector2(0f, -Main.projectile[(int)this.ai[1]].gfxOffY);
																		this.position += projectile.velocity.ToRotation().ToRotationVector2() * scaleFactor6;
																		this.position += value28;
																		this.velocity = Vector2.Normalize(projectile.velocity).RotatedBy((double)num797, default(Vector2));
																		this.scale = 1.4f * (1f - num798);
																		this.damage = projectile.damage;
																		if (projectile.ai[0] >= 180f)
																		{
																			this.damage *= 3;
																			vector78 = new Vector2?(projectile.Center);
																		}
																		if (!Collision.CanHitLine(Main.player[this.owner].Center, 0, 0, projectile.Center, 0, 0))
																		{
																			vector78 = new Vector2?(Main.player[this.owner].Center);
																		}
																		this.friendly = (projectile.ai[0] > 30f);
																	}
																	if (this.velocity.HasNaNs() || this.velocity == Vector2.Zero)
																	{
																		this.velocity = -Vector2.UnitY;
																	}
																	if (this.type == 461)
																	{
																		float[] var_2_22777_cp_0 = this.ai;
																		int var_2_22777_cp_1 = 0;
																		float num73 = var_2_22777_cp_0[var_2_22777_cp_1];
																		var_2_22777_cp_0[var_2_22777_cp_1] = num73 + 1f;
																		if (this.ai[0] >= 300f)
																		{
																			this.Kill();
																			return;
																		}
																		this.scale = (float)Math.Sin((double)(this.ai[0] * 3.14159274f / 300f)) * 10f;
																		if (this.scale > 1f)
																		{
																			this.scale = 1f;
																		}
																	}
																	if (this.type == 455)
																	{
																		if (this.localAI[0] == 0f)
																		{
																			Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 104, 1f, 0f);
																		}
																		float num801 = 1f;
																		if (Main.npc[(int)this.ai[1]].type == 400)
																		{
																			num801 = 0.4f;
																		}
																		float[] var_2_22863_cp_0 = this.localAI;
																		int var_2_22863_cp_1 = 0;
																		float num73 = var_2_22863_cp_0[var_2_22863_cp_1];
																		var_2_22863_cp_0[var_2_22863_cp_1] = num73 + 1f;
																		if (this.localAI[0] >= 180f)
																		{
																			this.Kill();
																			return;
																		}
																		this.scale = (float)Math.Sin((double)(this.localAI[0] * 3.14159274f / 180f)) * 10f * num801;
																		if (this.scale > num801)
																		{
																			this.scale = num801;
																		}
																	}
																	if (this.type == 642)
																	{
																		float num802 = 1f;
																		float[] var_2_228F7_cp_0 = this.localAI;
																		int var_2_228F7_cp_1 = 0;
																		float num73 = var_2_228F7_cp_0[var_2_228F7_cp_1];
																		var_2_228F7_cp_0[var_2_228F7_cp_1] = num73 + 1f;
																		if (this.localAI[0] >= 50f)
																		{
																			this.Kill();
																			return;
																		}
																		this.scale = (float)Math.Sin((double)(this.localAI[0] * 3.14159274f / 50f)) * 10f * num802;
																		if (this.scale > num802)
																		{
																			this.scale = num802;
																		}
																	}
																	if (this.type == 537)
																	{
																		float num803 = 0.8f;
																		float[] var_2_2298B_cp_0 = this.localAI;
																		int var_2_2298B_cp_1 = 0;
																		float num73 = var_2_2298B_cp_0[var_2_2298B_cp_1];
																		var_2_2298B_cp_0[var_2_2298B_cp_1] = num73 + 1f;
																		if (this.localAI[0] >= 60f)
																		{
																			this.Kill();
																			return;
																		}
																		this.scale = (float)Math.Sin((double)(this.localAI[0] * 3.14159274f / 60f)) * 10f * num803;
																		if (this.scale > num803)
																		{
																			this.scale = num803;
																		}
																	}
																	float num804 = this.velocity.ToRotation();
																	if (this.type == 455)
																	{
																		num804 += this.ai[0];
																	}
																	this.rotation = num804 - 1.57079637f;
																	this.velocity = num804.ToRotationVector2();
																	float num805 = 0f;
																	float num806 = 0f;
																	Vector2 samplingPoint = base.Center;
																	if (vector78.HasValue)
																	{
																		samplingPoint = vector78.Value;
																	}
																	if (this.type == 455)
																	{
																		num805 = 3f;
																		num806 = (float)this.width;
																	}
																	else if (this.type == 461)
																	{
																		num805 = 2f;
																		num806 = 0f;
																	}
																	else if (this.type == 642)
																	{
																		num805 = 2f;
																		num806 = 0f;
																	}
																	else if (this.type == 632)
																	{
																		num805 = 2f;
																		num806 = 0f;
																	}
																	else if (this.type == 537)
																	{
																		num805 = 2f;
																		num806 = 0f;
																	}
																	float[] array3 = new float[(int)num805];
																	Collision.LaserScan(samplingPoint, this.velocity, num806 * this.scale, 2400f, array3);
																	float num807 = 0f;
																	int num3;
																	for (int num808 = 0; num808 < array3.Length; num808 = num3 + 1)
																	{
																		num807 += array3[num808];
																		num3 = num808;
																	}
																	num807 /= num805;
																	float amount = 0.5f;
																	if (this.type == 632)
																	{
																		amount = 0.75f;
																	}
																	this.localAI[1] = MathHelper.Lerp(this.localAI[1], num807, amount);
																	if (this.type == 455)
																	{
																		Vector2 vector79 = base.Center + this.velocity * (this.localAI[1] - 14f);
																		for (int num809 = 0; num809 < 2; num809 = num3 + 1)
																		{
																			float num810 = this.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
																			float num811 = (float)Main.rand.NextDouble() * 2f + 2f;
																			Vector2 vector80 = new Vector2((float)Math.Cos((double)num810) * num811, (float)Math.Sin((double)num810) * num811);
																			int num812 = Dust.NewDust(vector79, 0, 0, 229, vector80.X, vector80.Y, 0, default(Color), 1f);
																			Main.dust[num812].noGravity = true;
																			Main.dust[num812].scale = 1.7f;
																			num3 = num809;
																		}
																		if (Main.rand.Next(5) == 0)
																		{
																			Vector2 value29 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																			int num813 = Dust.NewDust(vector79 + value29 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																			Dust dust = Main.dust[num813];
																			dust.velocity *= 0.5f;
																			Main.dust[num813].velocity.Y = -Math.Abs(Main.dust[num813].velocity.Y);
																		}
																		DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
																		Utils.PlotTileLine(base.Center, base.Center + this.velocity * this.localAI[1], (float)this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CastLight));
																	}
																	else if (this.type == 642)
																	{
																		Vector2 vector81 = base.Center + this.velocity * (this.localAI[1] - 14f);
																		for (int num814 = 0; num814 < 2; num814 = num3 + 1)
																		{
																			float num815 = this.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
																			float num816 = (float)Main.rand.NextDouble() * 2f + 2f;
																			Vector2 vector82 = new Vector2((float)Math.Cos((double)num815) * num816, (float)Math.Sin((double)num815) * num816);
																			int num817 = Dust.NewDust(vector81, 0, 0, 229, vector82.X, vector82.Y, 0, default(Color), 1f);
																			Main.dust[num817].noGravity = true;
																			Main.dust[num817].scale = 1.7f;
																			num3 = num814;
																		}
																		if (Main.rand.Next(5) == 0)
																		{
																			Vector2 value30 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																			int num818 = Dust.NewDust(vector81 + value30 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																			Dust dust = Main.dust[num818];
																			dust.velocity *= 0.5f;
																			Main.dust[num818].velocity.Y = -Math.Abs(Main.dust[num818].velocity.Y);
																		}
																		DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
																		Utils.PlotTileLine(base.Center, base.Center + this.velocity * this.localAI[1], (float)this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CastLight));
																	}
																	if (this.type == 461)
																	{
																		Vector2 vector83 = base.Center + this.velocity * (this.localAI[1] - 8f);
																		for (int num819 = 0; num819 < 2; num819 = num3 + 1)
																		{
																			float num820 = this.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
																			float num821 = (float)Main.rand.NextDouble() * 0.8f + 1f;
																			Vector2 vector84 = new Vector2((float)Math.Cos((double)num820) * num821, (float)Math.Sin((double)num820) * num821);
																			int num822 = Dust.NewDust(vector83, 0, 0, 226, vector84.X, vector84.Y, 0, default(Color), 1f);
																			Main.dust[num822].noGravity = true;
																			Main.dust[num822].scale = 1.2f;
																			num3 = num819;
																		}
																		if (Main.rand.Next(5) == 0)
																		{
																			Vector2 value31 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																			int num823 = Dust.NewDust(vector83 + value31 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																			Dust dust = Main.dust[num823];
																			dust.velocity *= 0.5f;
																			Main.dust[num823].velocity.Y = -Math.Abs(Main.dust[num823].velocity.Y);
																		}
																		DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
																		Utils.PlotTileLine(base.Center, base.Center + this.velocity * this.localAI[1], (float)this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CastLight));
																	}
																	if (this.type == 537)
																	{
																		Vector2 vector85 = base.Center + this.velocity * (this.localAI[1] - 8f);
																		for (int num824 = 0; num824 < 2; num824 = num3 + 1)
																		{
																			float num825 = this.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
																			float num826 = (float)Main.rand.NextDouble() * 0.8f + 1f;
																			Vector2 vector86 = new Vector2((float)Math.Cos((double)num825) * num826, (float)Math.Sin((double)num825) * num826);
																			int num827 = Dust.NewDust(vector85, 0, 0, 226, vector86.X, vector86.Y, 0, default(Color), 1f);
																			Main.dust[num827].noGravity = true;
																			Main.dust[num827].scale = 1.2f;
																			num3 = num824;
																		}
																		if (Main.rand.Next(5) == 0)
																		{
																			Vector2 value32 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																			int num828 = Dust.NewDust(vector85 + value32 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																			Dust dust = Main.dust[num828];
																			dust.velocity *= 0.5f;
																			Main.dust[num828].velocity.Y = -Math.Abs(Main.dust[num828].velocity.Y);
																		}
																		DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
																		Utils.PlotTileLine(base.Center, base.Center + this.velocity * this.localAI[1], (float)this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CastLight));
																	}
																	if (this.type == 632 && Math.Abs(this.localAI[1] - num807) < 100f && this.scale > 0.15f)
																	{
																		float prismHue = this.GetPrismHue(this.ai[0]);
																		Color color = Main.hslToRgb(prismHue, 1f, 0.5f);
																		color.A = 0;
																		Vector2 vector87 = base.Center + this.velocity * (this.localAI[1] - 14.5f * this.scale);
																		float x = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
																		for (int num829 = 0; num829 < 2; num829 = num3 + 1)
																		{
																			float num830 = this.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
																			float num831 = (float)Main.rand.NextDouble() * 0.8f + 1f;
																			Vector2 vector88 = new Vector2((float)Math.Cos((double)num830) * num831, (float)Math.Sin((double)num830) * num831);
																			int num832 = Dust.NewDust(vector87, 0, 0, 267, vector88.X, vector88.Y, 0, default(Color), 1f);
																			Main.dust[num832].color = color;
																			Main.dust[num832].scale = 1.2f;
																			if (this.scale > 1f)
																			{
																				Dust dust = Main.dust[num832];
																				dust.velocity *= this.scale;
																				dust = Main.dust[num832];
																				dust.scale *= this.scale;
																			}
																			Main.dust[num832].noGravity = true;
																			if (this.scale != 1.4f)
																			{
																				Dust dust10 = Dust.CloneDust(num832);
																				dust10.color = Color.White;
																				Dust dust = dust10;
																				dust.scale /= 2f;
																			}
																			float hue = (x + Main.rand.NextFloat() * 0.4f) % 1f;
																			Main.dust[num832].color = Color.Lerp(color, Main.hslToRgb(hue, 1f, 0.75f), this.scale / 1.4f);
																			num3 = num829;
																		}
																		if (Main.rand.Next(5) == 0)
																		{
																			Vector2 value33 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																			int num833 = Dust.NewDust(vector87 + value33 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																			Dust dust = Main.dust[num833];
																			dust.velocity *= 0.5f;
																			Main.dust[num833].velocity.Y = -Math.Abs(Main.dust[num833].velocity.Y);
																		}
																		DelegateMethods.v3_1 = color.ToVector3() * 0.3f;
																		float value34 = 0.1f * (float)Math.Sin((double)(Main.GlobalTime * 20f));
																		Vector2 vector89 = new Vector2(this.velocity.Length() * this.localAI[1], (float)this.width * this.scale);
																		float num834 = this.velocity.ToRotation();
																		if (Main.netMode != 2)
																		{
																			((WaterShaderData)Filters.Scene["WaterDistortion"].GetShader()).QueueRipple(this.position + new Vector2(vector89.X * 0.5f, 0f).RotatedBy((double)num834, default(Vector2)), new Color(0.5f, 0.1f * (float)Math.Sign(value34) + 0.5f, 0f, 1f) * Math.Abs(value34), vector89, RippleShape.Square, num834);
																		}
																		Utils.PlotTileLine(base.Center, base.Center + this.velocity * this.localAI[1], (float)this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CastLight));
																		return;
																	}
																}
																else if (this.aiStyle == 85)
																{
																	Vector2 value35 = new Vector2(0f, 216f);
																	this.alpha -= 15;
																	if (this.alpha < 0)
																	{
																		this.alpha = 0;
																	}
																	int num835 = (int)Math.Abs(this.ai[0]) - 1;
																	int num836 = (int)this.ai[1];
																	if (!Main.npc[num835].active || Main.npc[num835].type != 396)
																	{
																		this.Kill();
																		return;
																	}
																	float[] var_2_23CCD_cp_0 = this.localAI;
																	int var_2_23CCD_cp_1 = 0;
																	float num73 = var_2_23CCD_cp_0[var_2_23CCD_cp_1];
																	var_2_23CCD_cp_0[var_2_23CCD_cp_1] = num73 + 1f;
																	if (this.localAI[0] >= 330f && this.ai[0] > 0f && Main.netMode != 1)
																	{
																		this.ai[0] *= -1f;
																		this.netUpdate = true;
																	}
																	if (Main.netMode != 1 && this.ai[0] > 0f && (!Main.player[(int)this.ai[1]].active || Main.player[(int)this.ai[1]].dead))
																	{
																		this.ai[0] *= -1f;
																		this.netUpdate = true;
																	}
																	this.rotation = (Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - Main.player[(int)this.ai[1]].Center + value35).ToRotation() + 1.57079637f;
																	if (this.ai[0] > 0f)
																	{
																		Vector2 vector90 = Main.player[(int)this.ai[1]].Center - base.Center;
																		if (vector90.X != 0f || vector90.Y != 0f)
																		{
																			this.velocity = Vector2.Normalize(vector90) * Math.Min(16f, vector90.Length());
																		}
																		else
																		{
																			this.velocity = Vector2.Zero;
																		}
																		if (vector90.Length() < 20f && this.localAI[1] == 0f)
																		{
																			this.localAI[1] = 1f;
																			int time = 840;
																			if (Main.expertMode)
																			{
																				time = 960;
																			}
																			Main.player[num836].AddBuff(145, time, true);
																			return;
																		}
																	}
																	else
																	{
																		Vector2 vector91 = Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - base.Center + value35;
																		if (vector91.X != 0f || vector91.Y != 0f)
																		{
																			this.velocity = Vector2.Normalize(vector91) * Math.Min(16f, vector91.Length());
																		}
																		else
																		{
																			this.velocity = Vector2.Zero;
																		}
																		if (vector91.Length() < 20f)
																		{
																			this.Kill();
																			return;
																		}
																	}
																}
																else if (this.aiStyle == 86)
																{
																	if (this.localAI[1] == 0f)
																	{
																		this.localAI[1] = 1f;
																		Main.PlaySound(SoundID.Item120, this.position);
																	}
																	float[] var_2_23FC8_cp_0 = this.ai;
																	int var_2_23FC8_cp_1 = 0;
																	float num73 = var_2_23FC8_cp_0[var_2_23FC8_cp_1];
																	var_2_23FC8_cp_0[var_2_23FC8_cp_1] = num73 + 1f;
																	if (this.ai[1] == 1f)
																	{
																		if (this.ai[0] >= 130f)
																		{
																			this.alpha += 10;
																		}
																		else
																		{
																			this.alpha -= 10;
																		}
																		if (this.alpha < 0)
																		{
																			this.alpha = 0;
																		}
																		if (this.alpha > 255)
																		{
																			this.alpha = 255;
																		}
																		if (this.ai[0] >= 150f)
																		{
																			this.Kill();
																			return;
																		}
																		if (this.ai[0] % 30f == 0f && Main.netMode != 1)
																		{
																			Vector2 vector92 = this.rotation.ToRotationVector2();
																			Projectile.NewProjectile(base.Center.X, base.Center.Y, vector92.X, vector92.Y, 464, this.damage, this.knockBack, this.owner, 0f, 0f);
																		}
																		this.rotation += 0.104719758f;
																		Lighting.AddLight(base.Center, 0.3f, 0.75f, 0.9f);
																		return;
																	}
																	else
																	{
																		this.position -= this.velocity;
																		if (this.ai[0] >= 40f)
																		{
																			this.alpha += 3;
																		}
																		else
																		{
																			this.alpha -= 40;
																		}
																		if (this.alpha < 0)
																		{
																			this.alpha = 0;
																		}
																		if (this.alpha > 255)
																		{
																			this.alpha = 255;
																		}
																		if (this.ai[0] >= 45f)
																		{
																			this.Kill();
																			return;
																		}
																		Vector2 value36 = new Vector2(0f, -720f).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
																		float scaleFactor7 = this.ai[0] % 45f / 45f;
																		Vector2 spinningpoint = value36 * scaleFactor7;
																		int num3;
																		for (int num837 = 0; num837 < 6; num837 = num3 + 1)
																		{
																			Vector2 vector93 = base.Center + spinningpoint.RotatedBy((double)((float)num837 * 6.28318548f / 6f), default(Vector2));
																			Lighting.AddLight(vector93, 0.3f, 0.75f, 0.9f);
																			for (int num838 = 0; num838 < 2; num838 = num3 + 1)
																			{
																				int num839 = Dust.NewDust(vector93 + Utils.RandomVector2(Main.rand, -8f, 8f) / 2f, 8, 8, 197, 0f, 0f, 100, Color.Transparent, 1f);
																				Main.dust[num839].noGravity = true;
																				num3 = num838;
																			}
																			num3 = num837;
																		}
																		return;
																	}
																}
																else
																{
																	if (this.aiStyle == 87)
																	{
																		this.position.Y = this.ai[0];
																		this.height = (int)this.ai[1];
																		if (base.Center.X > Main.player[this.owner].Center.X)
																		{
																			this.direction = 1;
																		}
																		else
																		{
																			this.direction = -1;
																		}
																		this.velocity.X = (float)this.direction * 1E-06f;
																		if (this.owner == Main.myPlayer)
																		{
																			int num3;
																			for (int num840 = 0; num840 < 1000; num840 = num3 + 1)
																			{
																				if (Main.projectile[num840].active && num840 != this.whoAmI && Main.projectile[num840].type == this.type && Main.projectile[num840].owner == this.owner && Main.projectile[num840].timeLeft > this.timeLeft)
																				{
																					this.Kill();
																					return;
																				}
																				num3 = num840;
																			}
																		}
																		float num841 = (float)(this.width * this.height) * 0.0045f;
																		int num842 = 0;
																		while ((float)num842 < num841)
																		{
																			int num843 = Dust.NewDust(this.position, this.width, this.height, 75, 0f, 0f, 100, default(Color), 1f);
																			Main.dust[num843].noGravity = true;
																			Dust dust = Main.dust[num843];
																			dust.velocity *= 0.5f;
																			Dust var_2_244C6_cp_0_cp_0 = Main.dust[num843];
																			var_2_244C6_cp_0_cp_0.velocity.Y = var_2_244C6_cp_0_cp_0.velocity.Y - 0.5f;
																			Main.dust[num843].scale = 1.4f;
																			Dust var_2_244FD_cp_0_cp_0 = Main.dust[num843];
																			var_2_244FD_cp_0_cp_0.position.X = var_2_244FD_cp_0_cp_0.position.X + 6f;
																			Dust var_2_2451E_cp_0_cp_0 = Main.dust[num843];
																			var_2_2451E_cp_0_cp_0.position.Y = var_2_2451E_cp_0_cp_0.position.Y - 2f;
																			int num3 = num842;
																			num842 = num3 + 1;
																		}
																		return;
																	}
																	if (this.aiStyle == 88)
																	{
																		if (this.type == 465)
																		{
																			if (this.localAI[1] == 0f)
																			{
																				Main.PlaySound(SoundID.Item121, this.position);
																				this.localAI[1] = 1f;
																			}
																			if (this.ai[0] < 180f)
																			{
																				this.alpha -= 5;
																				if (this.alpha < 0)
																				{
																					this.alpha = 0;
																				}
																			}
																			else
																			{
																				this.alpha += 5;
																				if (this.alpha > 255)
																				{
																					this.alpha = 255;
																					this.Kill();
																					return;
																				}
																			}
																			float[] var_2_24600_cp_0 = this.ai;
																			int var_2_24600_cp_1 = 0;
																			float num73 = var_2_24600_cp_0[var_2_24600_cp_1];
																			var_2_24600_cp_0[var_2_24600_cp_1] = num73 + 1f;
																			int num3;
																			if (this.ai[0] % 30f == 0f && this.ai[0] < 180f && Main.netMode != 1)
																			{
																				int[] array4 = new int[5];
																				Vector2[] array5 = new Vector2[5];
																				int num844 = 0;
																				float num845 = 2000f;
																				for (int num846 = 0; num846 < 255; num846 = num3 + 1)
																				{
																					if (Main.player[num846].active && !Main.player[num846].dead)
																					{
																						Vector2 center9 = Main.player[num846].Center;
																						float num847 = Vector2.Distance(center9, base.Center);
																						if (num847 < num845 && Collision.CanHit(base.Center, 1, 1, center9, 1, 1))
																						{
																							array4[num844] = num846;
																							array5[num844] = center9;
																							num3 = num844 + 1;
																							num844 = num3;
																							if (num3 >= array5.Length)
																							{
																								break;
																							}
																						}
																					}
																					num3 = num846;
																				}
																				for (int num848 = 0; num848 < num844; num848 = num3 + 1)
																				{
																					Vector2 vector94 = array5[num848] - base.Center;
																					float ai = (float)Main.rand.Next(100);
																					Vector2 vector95 = Vector2.Normalize(vector94.RotatedByRandom(0.78539818525314331)) * 7f;
																					Projectile.NewProjectile(base.Center.X, base.Center.Y, vector95.X, vector95.Y, 466, this.damage, 0f, Main.myPlayer, vector94.ToRotation(), ai);
																					num3 = num848;
																				}
																			}
																			Lighting.AddLight(base.Center, 0.4f, 0.85f, 0.9f);
																			num3 = this.frameCounter + 1;
																			this.frameCounter = num3;
																			if (num3 >= 4)
																			{
																				this.frameCounter = 0;
																				num3 = this.frame + 1;
																				this.frame = num3;
																				if (num3 >= Main.projFrames[this.type])
																				{
																					this.frame = 0;
																				}
																			}
																			if (this.alpha < 150 && this.ai[0] < 180f)
																			{
																				for (int num849 = 0; num849 < 1; num849 = num3 + 1)
																				{
																					float num850 = (float)Main.rand.NextDouble() * 1f - 0.5f;
																					if (num850 < -0.5f)
																					{
																						num850 = -0.5f;
																					}
																					if (num850 > 0.5f)
																					{
																						num850 = 0.5f;
																					}
																					Vector2 value37 = new Vector2((float)(-(float)this.width) * 0.2f * this.scale, 0f).RotatedBy((double)(num850 * 6.28318548f), default(Vector2)).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
																					int num851 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, -this.velocity.X / 3f, -this.velocity.Y / 3f, 150, Color.Transparent, 0.7f);
																					Main.dust[num851].position = base.Center + value37;
																					Main.dust[num851].velocity = Vector2.Normalize(Main.dust[num851].position - base.Center) * 2f;
																					Main.dust[num851].noGravity = true;
																					num3 = num849;
																				}
																				for (int num852 = 0; num852 < 1; num852 = num3 + 1)
																				{
																					float num853 = (float)Main.rand.NextDouble() * 1f - 0.5f;
																					if (num853 < -0.5f)
																					{
																						num853 = -0.5f;
																					}
																					if (num853 > 0.5f)
																					{
																						num853 = 0.5f;
																					}
																					Vector2 value38 = new Vector2((float)(-(float)this.width) * 0.6f * this.scale, 0f).RotatedBy((double)(num853 * 6.28318548f), default(Vector2)).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
																					int num854 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, -this.velocity.X / 3f, -this.velocity.Y / 3f, 150, Color.Transparent, 0.7f);
																					Main.dust[num854].velocity = Vector2.Zero;
																					Main.dust[num854].position = base.Center + value38;
																					Main.dust[num854].noGravity = true;
																					num3 = num852;
																				}
																				return;
																			}
																		}
																		else if (this.type == 466)
																		{
																			int num3 = this.frameCounter;
																			this.frameCounter = num3 + 1;
																			Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
																			if (this.velocity == Vector2.Zero)
																			{
																				if (this.frameCounter >= this.extraUpdates * 2)
																				{
																					this.frameCounter = 0;
																					bool flag36 = true;
																					for (int num855 = 1; num855 < this.oldPos.Length; num855 = num3 + 1)
																					{
																						if (this.oldPos[num855] != this.oldPos[0])
																						{
																							flag36 = false;
																						}
																						num3 = num855;
																					}
																					if (flag36)
																					{
																						this.Kill();
																						return;
																					}
																				}
																				if (Main.rand.Next(this.extraUpdates) == 0)
																				{
																					for (int num856 = 0; num856 < 2; num856 = num3 + 1)
																					{
																						float num857 = this.rotation + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
																						float num858 = (float)Main.rand.NextDouble() * 0.8f + 1f;
																						Vector2 vector96 = new Vector2((float)Math.Cos((double)num857) * num858, (float)Math.Sin((double)num857) * num858);
																						int num859 = Dust.NewDust(base.Center, 0, 0, 226, vector96.X, vector96.Y, 0, default(Color), 1f);
																						Main.dust[num859].noGravity = true;
																						Main.dust[num859].scale = 1.2f;
																						num3 = num856;
																					}
																					if (Main.rand.Next(5) == 0)
																					{
																						Vector2 value39 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																						int num860 = Dust.NewDust(base.Center + value39 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																						Dust dust = Main.dust[num860];
																						dust.velocity *= 0.5f;
																						Main.dust[num860].velocity.Y = -Math.Abs(Main.dust[num860].velocity.Y);
																						return;
																					}
																				}
																			}
																			else if (this.frameCounter >= this.extraUpdates * 2)
																			{
																				this.frameCounter = 0;
																				float num861 = this.velocity.Length();
																				UnifiedRandom unifiedRandom = new UnifiedRandom((int)this.ai[1]);
																				int num862 = 0;
																				Vector2 vector97 = -Vector2.UnitY;
																				Vector2 vector98;
																				do
																				{
																					int num863 = unifiedRandom.Next();
																					this.ai[1] = (float)num863;
																					num863 %= 100;
																					float f = (float)num863 / 100f * 6.28318548f;
																					vector98 = f.ToRotationVector2();
																					if (vector98.Y > 0f)
																					{
																						vector98.Y *= -1f;
																					}
																					bool flag37 = false;
																					if (vector98.Y > -0.02f)
																					{
																						flag37 = true;
																					}
																					if (vector98.X * (float)(this.extraUpdates + 1) * 2f * num861 + this.localAI[0] > 40f)
																					{
																						flag37 = true;
																					}
																					if (vector98.X * (float)(this.extraUpdates + 1) * 2f * num861 + this.localAI[0] < -40f)
																					{
																						flag37 = true;
																					}
																					if (!flag37)
																					{
																						goto IL_25086;
																					}
																					num3 = num862;
																					num862 = num3 + 1;
																				}
																				while (num3 < 100);
																				this.velocity = Vector2.Zero;
																				this.localAI[1] = 1f;
																				goto IL_25092;
																				IL_25086:
																				vector97 = vector98;
																				IL_25092:
																				if (this.velocity != Vector2.Zero)
																				{
																					this.localAI[0] += vector97.X * (float)(this.extraUpdates + 1) * 2f * num861;
																					this.velocity = vector97.RotatedBy((double)(this.ai[0] + 1.57079637f), default(Vector2)) * num861;
																					this.rotation = this.velocity.ToRotation() + 1.57079637f;
																					return;
																				}
																			}
																		}
																		else if (this.type == 580)
																		{
																			if (this.localAI[1] == 0f && this.ai[0] >= 900f)
																			{
																				this.ai[0] -= 1000f;
																				this.localAI[1] = -1f;
																			}
																			int num3 = this.frameCounter;
																			this.frameCounter = num3 + 1;
																			Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
																			if (this.velocity == Vector2.Zero)
																			{
																				if (this.frameCounter >= this.extraUpdates * 2)
																				{
																					this.frameCounter = 0;
																					bool flag38 = true;
																					for (int num864 = 1; num864 < this.oldPos.Length; num864 = num3 + 1)
																					{
																						if (this.oldPos[num864] != this.oldPos[0])
																						{
																							flag38 = false;
																						}
																						num3 = num864;
																					}
																					if (flag38)
																					{
																						this.Kill();
																						return;
																					}
																				}
																				if (Main.rand.Next(this.extraUpdates) == 0 && (this.velocity != Vector2.Zero || Main.rand.Next((this.localAI[1] == 2f) ? 2 : 6) == 0))
																				{
																					for (int num865 = 0; num865 < 2; num865 = num3 + 1)
																					{
																						float num866 = this.rotation + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
																						float num867 = (float)Main.rand.NextDouble() * 0.8f + 1f;
																						Vector2 vector99 = new Vector2((float)Math.Cos((double)num866) * num867, (float)Math.Sin((double)num866) * num867);
																						int num868 = Dust.NewDust(base.Center, 0, 0, 226, vector99.X, vector99.Y, 0, default(Color), 1f);
																						Main.dust[num868].noGravity = true;
																						Main.dust[num868].scale = 1.2f;
																						num3 = num865;
																					}
																					if (Main.rand.Next(5) == 0)
																					{
																						Vector2 value40 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																						int num869 = Dust.NewDust(base.Center + value40 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																						Dust dust = Main.dust[num869];
																						dust.velocity *= 0.5f;
																						Main.dust[num869].velocity.Y = -Math.Abs(Main.dust[num869].velocity.Y);
																						return;
																					}
																				}
																			}
																			else if (this.frameCounter >= this.extraUpdates * 2)
																			{
																				this.frameCounter = 0;
																				float num870 = this.velocity.Length();
																				UnifiedRandom unifiedRandom2 = new UnifiedRandom((int)this.ai[1]);
																				int num871 = 0;
																				Vector2 vector100 = -Vector2.UnitY;
																				Vector2 vector101;
																				do
																				{
																					int num872 = unifiedRandom2.Next();
																					this.ai[1] = (float)num872;
																					num872 %= 100;
																					float f2 = (float)num872 / 100f * 6.28318548f;
																					vector101 = f2.ToRotationVector2();
																					if (vector101.Y > 0f)
																					{
																						vector101.Y *= -1f;
																					}
																					bool flag39 = false;
																					if (vector101.Y > -0.02f)
																					{
																						flag39 = true;
																					}
																					if (vector101.X * (float)(this.extraUpdates + 1) * 2f * num870 + this.localAI[0] > 40f)
																					{
																						flag39 = true;
																					}
																					if (vector101.X * (float)(this.extraUpdates + 1) * 2f * num870 + this.localAI[0] < -40f)
																					{
																						flag39 = true;
																					}
																					if (!flag39)
																					{
																						goto IL_2564F;
																					}
																					num3 = num871;
																					num871 = num3 + 1;
																				}
																				while (num3 < 100);
																				this.velocity = Vector2.Zero;
																				if (this.localAI[1] < 1f)
																				{
																					this.localAI[1] += 2f;
																					goto IL_2565B;
																				}
																				goto IL_2565B;
																				IL_2564F:
																				vector100 = vector101;
																				IL_2565B:
																				if (this.velocity != Vector2.Zero)
																				{
																					this.localAI[0] += vector100.X * (float)(this.extraUpdates + 1) * 2f * num870;
																					this.velocity = vector100.RotatedBy((double)(this.ai[0] + 1.57079637f), default(Vector2)) * num870;
																					this.rotation = this.velocity.ToRotation() + 1.57079637f;
																					if (Main.rand.Next(4) == 0 && Main.netMode != 1 && this.localAI[1] == 0f)
																					{
																						float num873 = (float)Main.rand.Next(-3, 4) * 1.04719758f / 3f;
																						Vector2 vector102 = this.ai[0].ToRotationVector2().RotatedBy((double)num873, default(Vector2)) * this.velocity.Length();
																						if (!Collision.CanHitLine(base.Center, 0, 0, base.Center + vector102 * 50f, 0, 0))
																						{
																							Projectile.NewProjectile(base.Center.X - vector102.X, base.Center.Y - vector102.Y, vector102.X, vector102.Y, this.type, this.damage, this.knockBack, this.owner, vector102.ToRotation() + 1000f, this.ai[1]);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																	else if (this.aiStyle == 89)
																	{
																		if (this.ai[1] == -1f)
																		{
																			this.alpha += 12;
																		}
																		else if (this.ai[0] < 300f)
																		{
																			this.alpha -= 5;
																		}
																		else
																		{
																			this.alpha += 12;
																		}
																		if (this.alpha < 0)
																		{
																			this.alpha = 0;
																		}
																		if (this.alpha > 255)
																		{
																			this.alpha = 255;
																		}
																		this.scale = 1f - (float)this.alpha / 255f;
																		this.scale *= 0.6f;
																		this.rotation += 0.0149599658f;
																		if (this.localAI[1] == 0f)
																		{
																			this.localAI[1] = 1f;
																			Main.PlaySound(SoundID.Item123, this.position);
																		}
																		if (this.alpha == 0)
																		{
																			int num3;
																			for (int num874 = 0; num874 < 2; num874 = num3 + 1)
																			{
																				float num875 = (float)Main.rand.Next(2, 4);
																				float num876 = this.scale;
																				if (num874 == 1)
																				{
																					num876 *= 0.42f;
																					num875 *= -0.75f;
																				}
																				Vector2 value41 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
																				value41.Normalize();
																				int num877 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 100, default(Color), 2f);
																				Main.dust[num877].noGravity = true;
																				Main.dust[num877].noLight = true;
																				Main.dust[num877].position = base.Center + value41 * 204f * num876;
																				if (Main.rand.Next(8) == 0)
																				{
																					Main.dust[num877].velocity = value41 * -num875 * 2f;
																					Dust dust = Main.dust[num877];
																					dust.scale += 0.5f;
																				}
																				else
																				{
																					Main.dust[num877].velocity = value41 * -num875;
																				}
																				num3 = num874;
																			}
																		}
																		float[] var_2_25AFC_cp_0 = this.ai;
																		int var_2_25AFC_cp_1 = 0;
																		float num73 = var_2_25AFC_cp_0[var_2_25AFC_cp_1];
																		var_2_25AFC_cp_0[var_2_25AFC_cp_1] = num73 + 1f;
																		if (this.ai[0] >= 60f)
																		{
																			int num878 = (int)(this.ai[0] - 0f) / 60;
																			float num879 = this.scale * 0.4f;
																			int num3;
																			for (int num880 = 0; num880 < 1; num880 = num3 + 1)
																			{
																				float scaleFactor8 = (float)Main.rand.Next(1, 3);
																				Vector2 value42 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
																				value42.Normalize();
																				int num881 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 100, default(Color), 2f);
																				Main.dust[num881].noGravity = true;
																				Main.dust[num881].noLight = true;
																				Main.dust[num881].position = base.Center;
																				if (Main.rand.Next(2) == 0)
																				{
																					Main.dust[num881].velocity = value42 * scaleFactor8 * 2f;
																					Dust dust = Main.dust[num881];
																					dust.scale += 0.5f;
																				}
																				else
																				{
																					Main.dust[num881].velocity = value42 * scaleFactor8;
																				}
																				Main.dust[num881].fadeIn = 2f;
																				num3 = num880;
																			}
																		}
																		if (this.ai[0] == 300f && this.ai[1] != -1f && Main.netMode != 1)
																		{
																			if (!NPC.AnyNPCs(454))
																			{
																				this.ai[1] = (float)NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 454, 0, 0f, 0f, 0f, 0f, 255);
																			}
																			else
																			{
																				this.ai[1] = (float)NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 521, 0, 0f, 0f, 0f, 0f, 255);
																			}
																		}
																		else if (this.ai[0] == 320f)
																		{
																			this.Kill();
																			return;
																		}
																		bool flag40 = false;
																		if (this.ai[1] == -1f)
																		{
																			if (this.alpha == 255)
																			{
																				flag40 = true;
																			}
																		}
																		else
																		{
																			flag40 = (this.ai[1] < 0f || !Main.npc[(int)this.ai[1]].active);
																			if ((flag40 || Main.npc[(int)this.ai[1]].type != 439) && (flag40 || Main.npc[(int)this.ai[1]].type != 454) && (flag40 || Main.npc[(int)this.ai[1]].type != 521))
																			{
																				flag40 = true;
																			}
																		}
																		if (flag40)
																		{
																			this.Kill();
																			return;
																		}
																		Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
																		return;
																	}
																	else if (this.aiStyle == 90)
																	{
																		if (Main.player[this.owner].dead)
																		{
																			this.Kill();
																		}
																		if (Main.myPlayer == this.owner && Main.player[this.owner].magicLantern)
																		{
																			this.timeLeft = 2;
																		}
																		if (this.tileCollide)
																		{
																			if (!Collision.CanHit(this.position, this.width, this.height, Main.player[this.owner].Center, 1, 1))
																			{
																				this.tileCollide = false;
																			}
																			else if (!Collision.SolidCollision(this.position, this.width, this.height) && Collision.CanHitLine(this.position, this.width, this.height, Main.player[this.owner].Center, 1, 1))
																			{
																				this.tileCollide = true;
																			}
																		}
																		this.direction = Main.player[this.owner].direction;
																		this.spriteDirection = this.direction;
																		Lighting.AddLight(this.position, 0.35f, 0.35f, 0.1f);
																		this.localAI[0] += 1f;
																		if (this.localAI[0] >= 10f)
																		{
																			this.localAI[0] = 0f;
																			int num882 = 17;
																			if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num882 * 16))
																			{
																				int num883 = (int)base.Center.X / 16;
																				int num884 = (int)base.Center.Y / 16;
																				int num3;
																				for (int num885 = num883 - num882; num885 <= num883 + num882; num885 = num3 + 1)
																				{
																					for (int num886 = num884 - num882; num886 <= num884 + num882; num886 = num3 + 1)
																					{
																						if (Main.rand.Next(4) == 0)
																						{
																							Vector2 vector103 = new Vector2((float)(num883 - num885), (float)(num884 - num886));
																							if (vector103.Length() < (float)num882 && num885 > 0 && num885 < Main.maxTilesX - 1 && num886 > 0 && num886 < Main.maxTilesY - 1 && Main.tile[num885, num886] != null && Main.tile[num885, num886].active())
																							{
																								bool flag41 = false;
																								if (Main.tile[num885, num886].type == 185 && Main.tile[num885, num886].frameY == 18)
																								{
																									if (Main.tile[num885, num886].frameX >= 576 && Main.tile[num885, num886].frameX <= 882)
																									{
																										flag41 = true;
																									}
																								}
																								else if (Main.tile[num885, num886].type == 186 && Main.tile[num885, num886].frameX >= 864 && Main.tile[num885, num886].frameX <= 1170)
																								{
																									flag41 = true;
																								}
																								if (flag41 || Main.tileSpelunker[(int)Main.tile[num885, num886].type] || (Main.tileAlch[(int)Main.tile[num885, num886].type] && Main.tile[num885, num886].type != 82))
																								{
																									int num887 = Dust.NewDust(new Vector2((float)(num885 * 16), (float)(num886 * 16)), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
																									Main.dust[num887].fadeIn = 0.75f;
																									Dust dust = Main.dust[num887];
																									dust.velocity *= 0.1f;
																									Main.dust[num887].noLight = true;
																								}
																							}
																						}
																						num3 = num886;
																					}
																					num3 = num885;
																				}
																			}
																		}
																		Vector2 vector104 = Main.player[this.owner].Center - base.Center;
																		vector104.X += (float)(40 * this.direction);
																		vector104.Y -= 40f;
																		float num888 = vector104.Length();
																		if (num888 > 1000f)
																		{
																			base.Center = Main.player[this.owner].Center;
																		}
																		float num889 = 3f;
																		float num890 = 4f;
																		if (num888 > 200f)
																		{
																			num890 += (num888 - 200f) * 0.1f;
																			this.tileCollide = false;
																		}
																		if (num888 < num890)
																		{
																			this.velocity *= 0.25f;
																			num890 = num888;
																		}
																		if (vector104.X != 0f || vector104.Y != 0f)
																		{
																			vector104.Normalize();
																			vector104 *= num890;
																		}
																		this.velocity = (this.velocity * (num889 - 1f) + vector104) / num889;
																		if (this.velocity.Length() > 6f)
																		{
																			float num891 = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
																			if ((double)Math.Abs(this.rotation - num891) >= 3.14)
																			{
																				if (num891 < this.rotation)
																				{
																					this.rotation -= 6.28f;
																				}
																				else
																				{
																					this.rotation += 6.28f;
																				}
																			}
																			this.rotation = (this.rotation * 4f + num891) / 5f;
																			this.frameCounter++;
																			if (this.frameCounter > 4)
																			{
																				this.frameCounter = 0;
																				this.frame++;
																				if (this.frame > 7)
																				{
																					this.frame = 4;
																				}
																			}
																			if (this.frame < 4)
																			{
																				this.frame = 7;
																				return;
																			}
																		}
																		else
																		{
																			if ((double)this.rotation > 3.14)
																			{
																				this.rotation -= 6.28f;
																			}
																			if ((double)this.rotation > -0.01 && (double)this.rotation < 0.01)
																			{
																				this.rotation = 0f;
																			}
																			else
																			{
																				this.rotation *= 0.9f;
																			}
																			this.frameCounter++;
																			if (this.frameCounter > 6)
																			{
																				this.frameCounter = 0;
																				this.frame++;
																				if (this.frame > 3)
																				{
																					this.frame = 0;
																					return;
																				}
																			}
																		}
																	}
																	else if (this.aiStyle == 91)
																	{
																		Vector2 center10 = base.Center;
																		this.scale = 1f - this.localAI[0];
																		this.width = (int)(20f * this.scale);
																		this.height = this.width;
																		this.position.X = center10.X - (float)(this.width / 2);
																		this.position.Y = center10.Y - (float)(this.height / 2);
																		if ((double)this.localAI[0] < 0.1)
																		{
																			this.localAI[0] += 0.01f;
																		}
																		else
																		{
																			this.localAI[0] += 0.025f;
																		}
																		if (this.localAI[0] >= 0.95f)
																		{
																			this.Kill();
																		}
																		this.velocity.X = this.velocity.X + this.ai[0] * 1.5f;
																		this.velocity.Y = this.velocity.Y + this.ai[1] * 1.5f;
																		if (this.velocity.Length() > 16f)
																		{
																			this.velocity.Normalize();
																			this.velocity *= 16f;
																		}
																		this.ai[0] *= 1.05f;
																		this.ai[1] *= 1.05f;
																		if (this.scale < 1f)
																		{
																			int num892 = 0;
																			while ((float)num892 < this.scale * 10f)
																			{
																				int num893 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, default(Color), 1.1f);
																				Main.dust[num893].position = (Main.dust[num893].position + base.Center) / 2f;
																				Main.dust[num893].noGravity = true;
																				Dust dust = Main.dust[num893];
																				dust.velocity *= 0.1f;
																				dust = Main.dust[num893];
																				dust.velocity -= this.velocity * (1.3f - this.scale);
																				Main.dust[num893].fadeIn = (float)(100 + this.owner);
																				dust = Main.dust[num893];
																				dust.scale += this.scale * 0.75f;
																				int num3 = num892;
																				num892 = num3 + 1;
																			}
																			return;
																		}
																	}
																	else
																	{
																		if (this.aiStyle == 92)
																		{
																			this.tileCollide = false;
																			this.ai[1] += 1f;
																			if (this.ai[1] > 60f)
																			{
																				this.ai[0] += 10f;
																			}
																			if (this.ai[0] > 255f)
																			{
																				this.Kill();
																				this.ai[0] = 255f;
																			}
																			this.alpha = (int)(100.0 + (double)this.ai[0] * 0.7);
																			this.rotation += this.velocity.X * 0.1f;
																			this.rotation += (float)this.direction * 0.003f;
																			this.velocity *= 0.96f;
																			Rectangle rectangle5 = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
																			int num3;
																			for (int num894 = 0; num894 < 1000; num894 = num3 + 1)
																			{
																				if (num894 != this.whoAmI && Main.projectile[num894].active && Main.projectile[num894].type >= 511 && Main.projectile[num894].type <= 513)
																				{
																					Rectangle value43 = new Rectangle((int)Main.projectile[num894].position.X, (int)Main.projectile[num894].position.Y, Main.projectile[num894].width, Main.projectile[num894].height);
																					if (rectangle5.Intersects(value43))
																					{
																						Vector2 vector105 = Main.projectile[num894].Center - base.Center;
																						if (vector105.X == 0f && vector105.Y == 0f)
																						{
																							if (num894 < this.whoAmI)
																							{
																								vector105.X = -1f;
																								vector105.Y = 1f;
																							}
																							else
																							{
																								vector105.X = 1f;
																								vector105.Y = -1f;
																							}
																						}
																						vector105.Normalize();
																						vector105 *= 0.005f;
																						this.velocity -= vector105;
																						Projectile projectile2 = Main.projectile[num894];
																						projectile2.velocity += vector105;
																					}
																				}
																				num3 = num894;
																			}
																			return;
																		}
																		if (this.aiStyle == 93)
																		{
																			if (this.alpha > 0)
																			{
																				this.alpha -= 25;
																				if (this.alpha <= 0)
																				{
																					this.alpha = 0;
																				}
																			}
																			if (this.velocity.Y > 18f)
																			{
																				this.velocity.Y = 18f;
																			}
																			if (this.ai[0] == 0f)
																			{
																				this.ai[1] += 1f;
																				if (this.ai[1] > 20f)
																				{
																					this.velocity.Y = this.velocity.Y + 0.1f;
																					this.velocity.X = this.velocity.X * 0.992f;
																				}
																				this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
																				return;
																			}
																			this.tileCollide = false;
																			if (this.ai[0] == 1f)
																			{
																				this.tileCollide = false;
																				this.velocity *= 0.6f;
																			}
																			else
																			{
																				this.tileCollide = false;
																				int num895 = (int)(-(int)this.ai[0]);
																				num895--;
																				this.position = Main.npc[num895].Center - this.velocity;
																				this.position.X = this.position.X - (float)(this.width / 2);
																				this.position.Y = this.position.Y - (float)(this.height / 2);
																				if (!Main.npc[num895].active || Main.npc[num895].life < 0)
																				{
																					this.tileCollide = true;
																					this.ai[0] = 0f;
																					this.ai[1] = 20f;
																					this.velocity = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
																					this.velocity.Normalize();
																					this.velocity *= 6f;
																					this.netUpdate = true;
																				}
																				else if (this.velocity.Length() > (float)((Main.npc[num895].width + Main.npc[num895].height) / 3))
																				{
																					this.velocity *= 0.99f;
																				}
																			}
																			if (this.ai[0] != 0f)
																			{
																				this.ai[1] += 1f;
																				if (this.ai[1] > 90f)
																				{
																					this.Kill();
																					return;
																				}
																			}
																		}
																		else
																		{
																			if (this.aiStyle == 94)
																			{
																				int num3 = this.frameCounter + 1;
																				this.frameCounter = num3;
																				if (num3 >= 4)
																				{
																					this.frameCounter = 0;
																					num3 = this.frame + 1;
																					this.frame = num3;
																					if (num3 >= Main.projFrames[this.type])
																					{
																						this.frame = 0;
																					}
																				}
																				float[] var_2_2702D_cp_0 = this.ai;
																				int var_2_2702D_cp_1 = 0;
																				float num73 = var_2_2702D_cp_0[var_2_2702D_cp_1];
																				var_2_2702D_cp_0[var_2_2702D_cp_1] = num73 + 1f;
																				if (this.ai[0] <= 40f)
																				{
																					this.alpha -= 5;
																					if (this.alpha < 0)
																					{
																						this.alpha = 0;
																					}
																					this.velocity *= 0.85f;
																					if (this.ai[0] == 40f)
																					{
																						this.netUpdate = true;
																						switch (Main.rand.Next(3))
																						{
																							case 0:
																								this.ai[1] = 10f;
																								break;
																							case 1:
																								this.ai[1] = 15f;
																								break;
																							case 2:
																								this.ai[1] = 30f;
																								break;
																						}
																					}
																				}
																				else if (this.ai[0] <= 60f)
																				{
																					this.velocity = Vector2.Zero;
																					if (this.ai[0] == 60f)
																					{
																						this.netUpdate = true;
																					}
																				}
																				else if (this.ai[0] <= 210f)
																				{
																					if (Main.netMode != 1)
																					{
																						float[] var_2_27157_cp_0 = this.localAI;
																						int var_2_27157_cp_1 = 0;
																						num73 = var_2_27157_cp_0[var_2_27157_cp_1] + 1f;
																						var_2_27157_cp_0[var_2_27157_cp_1] = num73;
																						if (num73 >= this.ai[1])
																						{
																							this.localAI[0] = 0f;
																							int num896 = Item.NewItem((int)base.Center.X, (int)base.Center.Y, 0, 0, 73, 1, false, 0, false, false);
																							Main.item[num896].velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * new Vector2(3f, 2f) * (Main.rand.NextFloat() * 0.5f + 0.5f) - Vector2.UnitY * 1f;
																						}
																					}
																					if (this.ai[0] == 210f)
																					{
																						this.netUpdate = true;
																					}
																				}
																				else
																				{
																					this.scale -= 0.0333333351f;
																					this.alpha += 15;
																					if (this.ai[0] == 239f)
																					{
																						this.netUpdate = true;
																					}
																					if (this.ai[0] == 240f)
																					{
																						this.Kill();
																					}
																				}
																				if (this.alpha < 90 && Main.rand.Next(3) == 0)
																				{
																					Vector2 vector106 = new Vector2((float)this.width, (float)this.height) * this.scale * 0.85f;
																					vector106 /= 2f;
																					Vector2 value44 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * vector106;
																					int num897 = Dust.NewDust(base.Center + value44, 0, 0, 246, 0f, 0f, 0, default(Color), 1f);
																					Main.dust[num897].position = base.Center + value44;
																					Main.dust[num897].velocity = Vector2.Zero;
																				}
																				float num898 = 0.8f;
																				float num899 = 0.709803939f;
																				float num900 = 0.282352954f;
																				Lighting.AddLight(base.Center, num898 * 0.3f, num899 * 0.3f, num900 * 0.3f);
																				return;
																			}
																			if (this.aiStyle == 95)
																			{
																				if (this.localAI[0] > 2f)
																				{
																					this.alpha -= 20;
																					if (this.alpha < 100)
																					{
																						this.alpha = 100;
																					}
																				}
																				else
																				{
																					this.localAI[0] += 1f;
																				}
																				if (this.ai[0] > 30f)
																				{
																					if (this.velocity.Y > -8f)
																					{
																						this.velocity.Y = this.velocity.Y - 0.05f;
																					}
																					this.velocity.X = this.velocity.X * 0.98f;
																				}
																				else
																				{
																					this.ai[0] += 1f;
																				}
																				this.rotation = this.velocity.X * 0.1f;
																				if (this.wet)
																				{
																					if (this.velocity.Y > 0f)
																					{
																						this.velocity.Y = this.velocity.Y * 0.98f;
																					}
																					if (this.velocity.Y > -8f)
																					{
																						this.velocity.Y = this.velocity.Y - 0.2f;
																					}
																					this.velocity.X = this.velocity.X * 0.94f;
																					return;
																				}
																			}
																			else
																			{
																				if (this.aiStyle == 96)
																				{
																					this.ai[0] += 0.6f;
																					if (this.ai[0] > 500f)
																					{
																						this.Kill();
																					}
																					int num3;
																					for (int num901 = 0; num901 < 2; num901 = num3 + 1)
																					{
																						if (Main.rand.Next(3) != 0)
																						{
																							int num902 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 170, 0f, 0f, 100, default(Color), 1f);
																							Main.dust[num902].position = (Main.dust[num902].position + base.Center) / 2f;
																							Main.dust[num902].noGravity = true;
																							Dust dust = Main.dust[num902];
																							dust.velocity *= 0.1f;
																							if (num901 == 1)
																							{
																								dust = Main.dust[num902];
																								dust.position += this.velocity / 2f;
																							}
																							float num903 = (800f - this.ai[0]) / 800f;
																							dust = Main.dust[num902];
																							dust.scale *= num903 + 0.1f;
																						}
																						num3 = num901;
																					}
																					this.velocity.Y = this.velocity.Y + 0.008f;
																					return;
																				}
																				if (this.aiStyle == 97)
																				{
																					this.frameCounter++;
																					float num904 = 4f;
																					if ((float)this.frameCounter < num904 * 1f)
																					{
																						this.frame = 0;
																					}
																					else if ((float)this.frameCounter < num904 * 2f)
																					{
																						this.frame = 1;
																					}
																					else if ((float)this.frameCounter < num904 * 3f)
																					{
																						this.frame = 2;
																					}
																					else if ((float)this.frameCounter < num904 * 4f)
																					{
																						this.frame = 3;
																					}
																					else if ((float)this.frameCounter < num904 * 5f)
																					{
																						this.frame = 4;
																					}
																					else if ((float)this.frameCounter < num904 * 6f)
																					{
																						this.frame = 3;
																					}
																					else if ((float)this.frameCounter < num904 * 7f)
																					{
																						this.frame = 2;
																					}
																					else if ((float)this.frameCounter < num904 * 8f)
																					{
																						this.frame = 1;
																					}
																					else
																					{
																						this.frameCounter = 0;
																						this.frame = 0;
																					}
																					if (this.owner == Main.myPlayer)
																					{
																						int num3;
																						for (int num905 = 0; num905 < 1000; num905 = num3 + 1)
																						{
																							if (num905 != this.whoAmI && Main.projectile[num905].active && Main.projectile[num905].owner == this.owner && Main.projectile[num905].type == this.type)
																							{
																								if (this.timeLeft >= Main.projectile[num905].timeLeft)
																								{
																									Main.projectile[num905].Kill();
																								}
																								else
																								{
																									this.Kill();
																								}
																							}
																							num3 = num905;
																						}
																					}
																					if (this.ai[0] == 0f)
																					{
																						if ((double)this.velocity.Length() < 0.1)
																						{
																							this.velocity.X = 0f;
																							this.velocity.Y = 0f;
																							this.ai[0] = 1f;
																							this.ai[1] = 45f;
																							return;
																						}
																						this.velocity *= 0.94f;
																						if (this.velocity.X < 0f)
																						{
																							this.direction = -1;
																						}
																						else
																						{
																							this.direction = 1;
																						}
																						this.spriteDirection = this.direction;
																						return;
																					}
																					else
																					{
																						if (Main.player[this.owner].Center.X < base.Center.X)
																						{
																							this.direction = -1;
																						}
																						else
																						{
																							this.direction = 1;
																						}
																						this.spriteDirection = this.direction;
																						this.ai[1] += 1f;
																						float num906 = 0.005f;
																						if (this.ai[1] > 0f)
																						{
																							this.velocity.Y = this.velocity.Y - num906;
																						}
																						else
																						{
																							this.velocity.Y = this.velocity.Y + num906;
																						}
																						if (this.ai[1] >= 90f)
																						{
																							this.ai[1] *= -1f;
																							return;
																						}
																					}
																				}
																				else if (this.aiStyle == 98)
																				{
																					Vector2 value45 = new Vector2(this.ai[0], this.ai[1]);
																					Vector2 vector107 = value45 - base.Center;
																					if (vector107.Length() < this.velocity.Length())
																					{
																						this.Kill();
																						return;
																					}
																					vector107.Normalize();
																					vector107 *= 15f;
																					this.velocity = Vector2.Lerp(this.velocity, vector107, 0.1f);
																					int num3;
																					for (int num907 = 0; num907 < 2; num907 = num3 + 1)
																					{
																						int num908 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 100, default(Color), 1f);
																						Main.dust[num908].noGravity = true;
																						Dust dust = Main.dust[num908];
																						dust.position += new Vector2(4f);
																						dust = Main.dust[num908];
																						dust.scale += Main.rand.NextFloat() * 1f;
																						num3 = num907;
																					}
																					return;
																				}
																				else
																				{
																					if (this.aiStyle == 99 && this.type >= 556 && this.type <= 561)
																					{
																						this.AI_099_1();
																						return;
																					}
																					if (this.aiStyle == 99)
																					{
																						this.AI_099_2();
																						return;
																					}
																					if (this.aiStyle == 100)
																					{
																						Player player6 = Main.player[this.owner];
																						Vector2 zero2 = Vector2.Zero;
																						if (this.type == 535)
																						{
																							zero2.X = (float)player6.direction * 6f;
																							zero2.Y = player6.gravDir * -14f;
																							float[] var_2_27C52_cp_0 = this.ai;
																							int var_2_27C52_cp_1 = 0;
																							float num73 = var_2_27C52_cp_0[var_2_27C52_cp_1];
																							var_2_27C52_cp_0[var_2_27C52_cp_1] = num73 + 1f;
																							int num909 = 0;
																							if (this.ai[0] >= 60f)
																							{
																								int num3 = num909;
																								num909 = num3 + 1;
																							}
																							if (this.ai[0] >= 180f)
																							{
																								int num3 = num909;
																								num909 = num3 + 1;
																							}
																							if (this.ai[0] >= 240f)
																							{
																								this.Kill();
																								return;
																							}
																							bool flag42 = false;
																							if (this.ai[0] == 60f || this.ai[0] == 180f)
																							{
																								flag42 = true;
																							}
																							bool flag43 = this.ai[0] >= 180f;
																							if (flag43)
																							{
																								if (this.frame < 8)
																								{
																									this.frame = 8;
																								}
																								if (this.frame >= 12)
																								{
																									this.frame = 8;
																								}
																								int num3 = this.frameCounter + 1;
																								this.frameCounter = num3;
																								num3 = this.frameCounter + 1;
																								this.frameCounter = num3;
																								if (num3 >= 5)
																								{
																									this.frameCounter = 0;
																									num3 = this.frame + 1;
																									this.frame = num3;
																									if (num3 >= 12)
																									{
																										this.frame = 8;
																									}
																								}
																							}
																							else
																							{
																								int num3 = this.frameCounter + 1;
																								this.frameCounter = num3;
																								if (num3 >= 5)
																								{
																									this.frameCounter = 0;
																									num3 = this.frame + 1;
																									this.frame = num3;
																									if (num3 >= 8)
																									{
																										this.frame = 0;
																									}
																								}
																							}
																							Vector2 center11 = player6.Center;
																							Vector2 vector108 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - center11;
																							if (player6.gravDir == -1f)
																							{
																								vector108.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - center11.Y;
																							}
																							Vector2 vector109 = new Vector2((float)Math.Sign((vector108.X == 0f) ? ((float)player6.direction) : vector108.X), 0f);
																							if (vector109.X != this.velocity.X || vector109.Y != this.velocity.Y)
																							{
																								this.netUpdate = true;
																							}
																							this.velocity = vector109;
																							if (this.soundDelay <= 0 && !flag43)
																							{
																								this.soundDelay = 10;
																								this.soundDelay *= 2;
																								if (this.ai[0] != 1f)
																								{
																									Main.PlaySound(SoundID.Item15, this.position);
																								}
																							}
																							if (this.ai[0] == 181f)
																							{
																								Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 17, 1f, 0f);
																							}
																							if (this.ai[0] > 10f && !flag43)
																							{
																								Vector2 vector110 = base.Center + new Vector2((float)(player6.direction * 2), player6.gravDir * 5f);
																								float scaleFactor9 = MathHelper.Lerp(30f, 10f, (this.ai[0] - 10f) / 180f);
																								float num910 = Main.rand.NextFloat() * 6.28318548f;
																								for (float num911 = 0f; num911 < 1f; num911 = num73 + 1f)
																								{
																									Vector2 value46 = Vector2.UnitY.RotatedBy((double)(num911 / 1f * 6.28318548f + num910), default(Vector2));
																									Dust dust11 = Main.dust[Dust.NewDust(vector110, 0, 0, 228, 0f, 0f, 0, default(Color), 1f)];
																									dust11.position = vector110 + value46 * scaleFactor9;
																									dust11.noGravity = true;
																									dust11.customData = player6;
																									dust11.velocity = value46 * -2f;
																									num73 = num911;
																								}
																							}
																							if (this.ai[0] > 180f && this.ai[0] <= 182f)
																							{
																								Vector2 vector111 = base.Center + new Vector2((float)(player6.direction * 2), player6.gravDir * 5f);
																								float scaleFactor10 = MathHelper.Lerp(20f, 30f, (this.ai[0] - 180f) / 182f);
																								float num912 = Main.rand.NextFloat() * 6.28318548f;
																								for (float num913 = 0f; num913 < 10f; num913 = num73 + 1f)
																								{
																									Vector2 value47 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
																									Dust dust12 = Main.dust[Dust.NewDust(vector111, 0, 0, 228, 0f, 0f, 0, default(Color), 1f)];
																									dust12.position = vector111 + value47 * scaleFactor10;
																									dust12.noGravity = true;
																									dust12.customData = player6;
																									dust12.velocity = value47 * 4f;
																									dust12.scale = 0.5f + Main.rand.NextFloat();
																									num73 = num913;
																								}
																							}
																							if (Main.myPlayer == this.owner)
																							{
																								bool flag44 = !flag42 || player6.CheckMana(player6.inventory[player6.selectedItem].mana, true, false);
																								bool flag45 = player6.channel & flag44;
																								if ((!flag43 && !flag45) || this.ai[0] == 180f)
																								{
																									Vector2 vector112 = player6.Center + new Vector2((float)(player6.direction * 4), player6.gravDir * 2f);
																									int num914 = this.damage * (1 + num909);
																									vector112 = base.Center;
																									int num915 = 0;
																									float num916 = 0f;
																									int num3;
																									for (int num917 = 0; num917 < 200; num917 = num3 + 1)
																									{
																										NPC nPC9 = Main.npc[num917];
																										if (nPC9.active && base.Distance(nPC9.Center) < 500f && nPC9.CanBeChasedBy(this, false) && Collision.CanHitLine(nPC9.position, nPC9.width, nPC9.height, vector112, 0, 0))
																										{
																											Vector2 vector113 = nPC9.Center - vector112;
																											num916 += vector113.ToRotation();
																											num3 = num915;
																											num915 = num3 + 1;
																											int num918 = Projectile.NewProjectile(vector112.X, vector112.Y, vector113.X, vector113.Y, 536, 0, 0f, this.owner, (float)this.whoAmI, 0f);
																											Main.projectile[num918].Center = nPC9.Center;
																											Main.projectile[num918].damage = num914;
																											Main.projectile[num918].Damage();
																											Main.projectile[num918].damage = 0;
																											Main.projectile[num918].Center = vector112;
																											this.ai[0] = 180f;
																										}
																										num3 = num917;
																									}
																									if (num915 != 0)
																									{
																										num916 /= (float)num915;
																									}
																									else
																									{
																										num916 = ((player6.direction == 1) ? 0f : 3.14159274f);
																									}
																									for (int num919 = 0; num919 < 6; num919 = num3 + 1)
																									{
																										Vector2 vector114 = Vector2.Zero;
																										if (Main.rand.Next(4) != 0)
																										{
																											vector114 = Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)num916, default(Vector2)) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f);
																										}
																										else
																										{
																											vector114 = Vector2.UnitX.RotatedByRandom(6.2831854820251465) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f);
																										}
																										Projectile.NewProjectile(vector112.X, vector112.Y, vector114.X, vector114.Y, 536, 0, 0f, this.owner, (float)this.whoAmI, 0f);
																										num3 = num919;
																									}
																									this.ai[0] = 180f;
																									this.netUpdate = true;
																								}
																							}
																							Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
																						}
																						this.rotation = ((player6.gravDir == 1f) ? 0f : 3.14159274f);
																						this.spriteDirection = this.direction;
																						this.timeLeft = 2;
																						Vector2 vector115 = Main.OffsetsPlayerOnhand[player6.bodyFrame.Y / 56] * 2f;
																						if (player6.direction != 1)
																						{
																							vector115.X = (float)player6.bodyFrame.Width - vector115.X;
																						}
																						vector115 -= (player6.bodyFrame.Size() - new Vector2((float)player6.width, 42f)) / 2f;
																						base.Center = (player6.position + vector115 + zero2 - this.velocity).Floor();
																						player6.ChangeDir(this.direction);
																						player6.heldProj = this.whoAmI;
																						player6.itemTime = 2;
																						player6.itemAnimation = 2;
																						return;
																					}
																					if (this.aiStyle == 101)
																					{
																						float num920 = 20f;
																						float[] var_2_2885D_cp_0 = this.localAI;
																						int var_2_2885D_cp_1 = 0;
																						float num73 = var_2_2885D_cp_0[var_2_2885D_cp_1];
																						var_2_2885D_cp_0[var_2_2885D_cp_1] = num73 + 1f;
																						this.alpha = (int)MathHelper.Lerp(0f, 255f, this.localAI[0] / num920);
																						int num921 = (int)this.ai[0];
																						int num922 = -1;
																						int num923 = -1;
																						int num3 = this.type;
																						if (num3 != 536)
																						{
																							if (num3 == 591)
																							{
																								num923 = 1;
																							}
																						}
																						else
																						{
																							num922 = 535;
																							num923 = 0;
																						}
																						if (num923 == 1)
																						{
																							if (this.localAI[0] >= num920 || num921 < 0 || num921 > 255 || !Main.player[num921].active || Main.player[num921].dead)
																							{
																								this.Kill();
																								return;
																							}
																							if (this.type == 591)
																							{
																								base.Center = Mount.GetMinecartMechPoint(Main.player[num921], 20, -19) - this.velocity;
																								this.rotation = this.velocity.ToRotation() + 1.57079637f;
																								if (Math.Sign(this.velocity.X) != Math.Sign(Main.player[num921].velocity.X) && Main.player[num921].velocity.X != 0f)
																								{
																									this.Kill();
																									return;
																								}
																							}
																							else
																							{
																								base.Center = Main.player[num921].Center - this.velocity;
																							}
																						}
																						else if (num923 == 0)
																						{
																							if (this.localAI[0] >= num920 || num921 < 0 || num921 > 1000 || !Main.projectile[num921].active || Main.projectile[num921].type != num922)
																							{
																								this.Kill();
																								return;
																							}
																							base.Center = Main.projectile[num921].Center - this.velocity;
																						}
																						this.rotation = this.velocity.ToRotation() + 1.57079637f;
																						return;
																					}
																					if (this.aiStyle == 102)
																					{
																						int num924 = 0;
																						float num925 = 0f;
																						float x2 = 0f;
																						float y2 = 0f;
																						int num926 = -1;
																						int num927 = 0;
																						float num928 = 0f;
																						bool flag46 = true;
																						bool flag47 = false;
																						bool flag48 = false;
																						int num3 = this.type;
																						if (num3 != 539)
																						{
																							if (num3 != 573)
																							{
																								if (num3 == 574)
																								{
																									num924 = 420;
																									num925 = 180f;
																									x2 = 0.15f;
																									y2 = 0.075f;
																									num928 = 8f;
																									flag46 = false;
																									num926 = 576;
																									num927 = 65;
																									if (Main.expertMode)
																									{
																										num927 = 50;
																									}
																									flag48 = true;
																								}
																							}
																							else
																							{
																								num924 = 424;
																								num925 = 90f;
																								num928 = 20f;
																								flag46 = false;
																								flag47 = true;
																							}
																						}
																						else
																						{
																							num924 = 407;
																							num925 = 210f;
																							x2 = 0.15f;
																							y2 = 0.075f;
																							num928 = 16f;
																						}
																						if (flag48)
																						{
																							int num929 = (int)this.ai[1];
																							if (!Main.npc[num929].active || Main.npc[num929].type != num924)
																							{
																								this.Kill();
																								return;
																							}
																							this.timeLeft = 2;
																						}
																						float[] var_2_28C66_cp_0 = this.ai;
																						int var_2_28C66_cp_1 = 0;
																						float num73 = var_2_28C66_cp_0[var_2_28C66_cp_1];
																						var_2_28C66_cp_0[var_2_28C66_cp_1] = num73 + 1f;
																						if (this.ai[0] < num925)
																						{
																							bool flag49 = true;
																							int num930 = (int)this.ai[1];
																							if (Main.npc[num930].active && Main.npc[num930].type == num924)
																							{
																								if (!flag47 && Main.npc[num930].oldPos[1] != Vector2.Zero)
																								{
																									this.position += Main.npc[num930].position - Main.npc[num930].oldPos[1];
																								}
																							}
																							else
																							{
																								this.ai[0] = num925;
																								flag49 = false;
																							}
																							if (flag49 && !flag47)
																							{
																								this.velocity += new Vector2((float)Math.Sign(Main.npc[num930].Center.X - base.Center.X), (float)Math.Sign(Main.npc[num930].Center.Y - base.Center.Y)) * new Vector2(x2, y2);
																								if (this.velocity.Length() > 6f)
																								{
																									this.velocity *= 6f / this.velocity.Length();
																								}
																							}
																							if (this.type == 539)
																							{
																								if (Main.rand.Next(12) == 0)
																								{
																									int num931 = Dust.NewDust(base.Center, 8, 8, 180, 0f, 0f, 0, default(Color), 1f);
																									Main.dust[num931].position = base.Center;
																									Dust dust = Main.dust[num931];
																									dust.velocity *= 0.2f;
																									Main.dust[num931].noGravity = true;
																								}
																								num3 = this.frameCounter + 1;
																								this.frameCounter = num3;
																								if (num3 >= 4)
																								{
																									this.frameCounter = 0;
																									num3 = this.frame + 1;
																									this.frame = num3;
																									if (num3 >= Main.projFrames[this.type])
																									{
																										this.frame = 0;
																									}
																								}
																								this.rotation = this.velocity.X * 0.1f;
																							}
																							if (this.type == 573)
																							{
																								if (Main.rand.Next(2) == 0)
																								{
																									int num932 = Dust.NewDust(base.Center, 8, 8, 242, 0f, 0f, 0, default(Color), 1f);
																									Main.dust[num932].position = base.Center;
																									Main.dust[num932].velocity = this.velocity;
																									Main.dust[num932].noGravity = true;
																									Main.dust[num932].scale = 1.5f;
																								}
																								this.alpha = 255;
																							}
																							if (this.type == 574)
																							{
																								if (Main.rand.Next(10) == 0)
																								{
																									int num933 = Dust.NewDust(base.Center, 8, 8, 242, 0f, 0f, 0, default(Color), 1f);
																									Main.dust[num933].position = base.Center;
																									Main.dust[num933].velocity = this.velocity;
																									Main.dust[num933].noGravity = true;
																									Main.dust[num933].scale = 1.5f;
																								}
																								if (flag49)
																								{
																									int target = Main.npc[num930].target;
																									float num934 = this.velocity.ToRotation();
																									if (Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
																									{
																										num934 = base.DirectionTo(Main.player[target].Center).ToRotation();
																									}
																									this.rotation = this.rotation.AngleLerp(num934 + 1.57079637f, 0.2f);
																								}
																								this.frame = 1;
																							}
																						}
																						if (this.ai[0] == num925)
																						{
																							bool flag50 = true;
																							int num935 = -1;
																							if (!flag46)
																							{
																								int num936 = (int)this.ai[1];
																								if (Main.npc[num936].active && Main.npc[num936].type == num924)
																								{
																									num935 = Main.npc[num936].target;
																								}
																								else
																								{
																									flag50 = false;
																								}
																							}
																							else
																							{
																								flag50 = false;
																							}
																							if (!flag50)
																							{
																								num935 = (int)Player.FindClosest(this.position, this.width, this.height);
																							}
																							Vector2 value48 = Main.player[num935].Center - base.Center;
																							value48.X += (float)Main.rand.Next(-50, 51);
																							value48.Y += (float)Main.rand.Next(-50, 51);
																							value48.X *= (float)Main.rand.Next(80, 121) * 0.01f;
																							value48.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
																							Vector2 vector116 = Vector2.Normalize(value48);
																							if (vector116.HasNaNs())
																							{
																								vector116 = Vector2.UnitY;
																							}
																							if (num926 == -1)
																							{
																								this.velocity = vector116 * num928;
																								this.netUpdate = true;
																							}
																							else
																							{
																								if (Main.netMode != 1 && Collision.CanHitLine(base.Center, 0, 0, Main.player[num935].Center, 0, 0))
																								{
																									Projectile.NewProjectile(base.Center.X, base.Center.Y, vector116.X * num928, vector116.Y * num928, num926, num927, 1f, Main.myPlayer, 0f, 0f);
																								}
																								this.ai[0] = 0f;
																							}
																						}
																						if (this.ai[0] >= num925)
																						{
																							this.rotation = this.rotation.AngleLerp(this.velocity.ToRotation() + 1.57079637f, 0.4f);
																							if (this.type == 539)
																							{
																								num3 = this.frameCounter + 1;
																								this.frameCounter = num3;
																								if (num3 >= 2)
																								{
																									this.frameCounter = 0;
																									num3 = this.frame + 1;
																									this.frame = num3;
																									if (num3 >= Main.projFrames[this.type])
																									{
																										this.frame = 0;
																									}
																								}
																								if (Main.rand.Next(2) == 0)
																								{
																									int num937 = Dust.NewDust(this.position, this.width, this.height, 180, 0f, 0f, 100, default(Color), 1f);
																									Dust dust = Main.dust[num937];
																									dust.scale += (float)Main.rand.Next(50) * 0.01f;
																									Main.dust[num937].noGravity = true;
																									dust = Main.dust[num937];
																									dust.velocity *= 0.1f;
																									Main.dust[num937].fadeIn = Main.rand.NextFloat() * 1.5f;
																								}
																								if (Main.rand.Next(3) == 0)
																								{
																									int num938 = Dust.NewDust(this.position, this.width, this.height, 176, 0f, 0f, 100, default(Color), 1f);
																									Dust dust = Main.dust[num938];
																									dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
																									Main.dust[num938].noGravity = true;
																									dust = Main.dust[num938];
																									dust.velocity *= 0.1f;
																									Main.dust[num938].fadeIn = Main.rand.NextFloat() * 1.5f;
																								}
																							}
																							if (this.type == 573)
																							{
																								if (Main.rand.Next(4) == 0)
																								{
																									int num939 = Dust.NewDust(base.Center, 8, 8, 242, 0f, 0f, 0, default(Color), 1f);
																									Main.dust[num939].position = base.Center;
																									Dust dust = Main.dust[num939];
																									dust.velocity *= 0.2f;
																									Main.dust[num939].noGravity = true;
																									Main.dust[num939].scale = 1.5f;
																								}
																								this.alpha = 0;
																								return;
																							}
																						}
																					}
																					else if (this.aiStyle == 103)
																					{
																						this.scale = this.ai[1];
																						float[] var_2_29681_cp_0 = this.ai;
																						int var_2_29681_cp_1 = 0;
																						float num73 = var_2_29681_cp_0[var_2_29681_cp_1];
																						var_2_29681_cp_0[var_2_29681_cp_1] = num73 + 1f;
																						if (this.ai[0] >= 30f)
																						{
																							this.alpha += 25;
																							if (this.alpha >= 250)
																							{
																								this.Kill();
																								return;
																							}
																						}
																						else if (this.ai[0] >= 0f)
																						{
																							this.alpha -= 25;
																							if (this.alpha < 0)
																							{
																								this.alpha = 0;
																								if (this.localAI[1] == 0f && Main.netMode != 1 && this.localAI[0] != 0f)
																								{
																									this.localAI[1] = 1f;
																									NPC.NewNPC((int)base.Center.X, (int)base.Bottom.Y, (int)this.localAI[0], 0, 0f, 0f, 0f, 0f, 255);
																									return;
																								}
																							}
																						}
																					}
																					else
																					{
																						if (this.aiStyle == 104)
																						{
																							if (this.ai[0] == 1f)
																							{
																								this.scale *= 0.995f;
																								this.alpha += 3;
																								if (this.alpha >= 250)
																								{
																									this.Kill();
																								}
																							}
																							else
																							{
																								this.scale *= 1.01f;
																								this.alpha -= 7;
																								if (this.alpha < 0)
																								{
																									this.alpha = 0;
																									this.ai[0] = 1f;
																								}
																							}
																							this.frameCounter++;
																							if (this.frameCounter > 6)
																							{
																								this.frameCounter = 0;
																								this.frame++;
																								if (this.frame > 3)
																								{
																									this.frame = 0;
																								}
																							}
																							this.velocity.Y = this.velocity.Y - 0.03f;
																							this.velocity.X = this.velocity.X * 0.97f;
																							return;
																						}
																						if (this.aiStyle == 105)
																						{
																							float num940 = 1f - (float)this.alpha / 255f;
																							num940 *= this.scale;
																							Lighting.AddLight(base.Center, 0.2f * num940, 0.275f * num940, 0.075f * num940);
																							this.localAI[0] += 1f;
																							if (this.localAI[0] >= 90f)
																							{
																								this.localAI[0] *= -1f;
																							}
																							if (this.localAI[0] >= 0f)
																							{
																								this.scale += 0.003f;
																							}
																							else
																							{
																								this.scale -= 0.003f;
																							}
																							this.rotation += 0.0025f * this.scale;
																							float num941 = 1f;
																							float num942 = 1f;
																							if (this.identity % 6 == 0)
																							{
																								num942 *= -1f;
																							}
																							if (this.identity % 6 == 1)
																							{
																								num941 *= -1f;
																							}
																							if (this.identity % 6 == 2)
																							{
																								num942 *= -1f;
																								num941 *= -1f;
																							}
																							if (this.identity % 6 == 3)
																							{
																								num942 = 0f;
																							}
																							if (this.identity % 6 == 4)
																							{
																								num941 = 0f;
																							}
																							this.localAI[1] += 1f;
																							if (this.localAI[1] > 60f)
																							{
																								this.localAI[1] = -180f;
																							}
																							if (this.localAI[1] >= -60f)
																							{
																								this.velocity.X = this.velocity.X + 0.002f * num942;
																								this.velocity.Y = this.velocity.Y + 0.002f * num941;
																							}
																							else
																							{
																								this.velocity.X = this.velocity.X - 0.002f * num942;
																								this.velocity.Y = this.velocity.Y - 0.002f * num941;
																							}
																							this.ai[0] += 1f;
																							if (this.ai[0] > 5400f)
																							{
																								this.damage = 0;
																								this.ai[1] = 1f;
																								if (this.alpha < 255)
																								{
																									this.alpha += 5;
																									if (this.alpha > 255)
																									{
																										this.alpha = 255;
																									}
																								}
																								else if (this.owner == Main.myPlayer)
																								{
																									this.Kill();
																								}
																							}
																							else
																							{
																								float num943 = (base.Center - Main.player[this.owner].Center).Length() / 100f;
																								if (num943 > 4f)
																								{
																									num943 *= 1.1f;
																								}
																								if (num943 > 5f)
																								{
																									num943 *= 1.2f;
																								}
																								if (num943 > 6f)
																								{
																									num943 *= 1.3f;
																								}
																								if (num943 > 7f)
																								{
																									num943 *= 1.4f;
																								}
																								if (num943 > 8f)
																								{
																									num943 *= 1.5f;
																								}
																								if (num943 > 9f)
																								{
																									num943 *= 1.6f;
																								}
																								if (num943 > 10f)
																								{
																									num943 *= 1.7f;
																								}
																								if (!Main.player[this.owner].sporeSac)
																								{
																									num943 += 100f;
																								}
																								this.ai[0] += num943;
																								if (this.alpha > 50)
																								{
																									this.alpha -= 10;
																									if (this.alpha < 50)
																									{
																										this.alpha = 50;
																									}
																								}
																							}
																							bool flag51 = false;
																							Vector2 center12 = new Vector2(0f, 0f);
																							float num944 = 280f;
																							int num3;
																							for (int num945 = 0; num945 < 200; num945 = num3 + 1)
																							{
																								if (Main.npc[num945].CanBeChasedBy(this, false))
																								{
																									float num946 = Main.npc[num945].position.X + (float)(Main.npc[num945].width / 2);
																									float num947 = Main.npc[num945].position.Y + (float)(Main.npc[num945].height / 2);
																									float num948 = Math.Abs(this.position.X + (float)(this.width / 2) - num946) + Math.Abs(this.position.Y + (float)(this.height / 2) - num947);
																									if (num948 < num944)
																									{
																										num944 = num948;
																										center12 = Main.npc[num945].Center;
																										flag51 = true;
																									}
																								}
																								num3 = num945;
																							}
																							if (flag51)
																							{
																								Vector2 vector117 = center12 - base.Center;
																								vector117.Normalize();
																								vector117 *= 0.75f;
																								this.velocity = (this.velocity * 10f + vector117) / 11f;
																								return;
																							}
																							if ((double)this.velocity.Length() > 0.2)
																							{
																								this.velocity *= 0.98f;
																								return;
																							}
																						}
																						else if (this.aiStyle == 106)
																						{
																							this.rotation += this.velocity.X * 0.02f;
																							if (this.velocity.X < 0f)
																							{
																								this.rotation -= Math.Abs(this.velocity.Y) * 0.02f;
																							}
																							else
																							{
																								this.rotation += Math.Abs(this.velocity.Y) * 0.02f;
																							}
																							this.velocity *= 0.98f;
																							this.ai[0] += 1f;
																							if (this.ai[0] >= 60f)
																							{
																								if (this.alpha < 255)
																								{
																									this.alpha += 5;
																									if (this.alpha > 255)
																									{
																										this.alpha = 255;
																										return;
																									}
																								}
																								else if (this.owner == Main.myPlayer)
																								{
																									this.Kill();
																									return;
																								}
																							}
																							else if (this.alpha > 80)
																							{
																								this.alpha -= 30;
																								if (this.alpha < 80)
																								{
																									this.alpha = 80;
																									return;
																								}
																							}
																						}
																						else if (this.aiStyle == 107)
																						{
																							float num949 = 10f;
																							float scaleFactor11 = 5f;
																							float num950 = 40f;
																							if (this.type == 575)
																							{
																								if (this.timeLeft > 30 && this.alpha > 0)
																								{
																									this.alpha -= 25;
																								}
																								if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
																								{
																									this.alpha = 128;
																								}
																								if (this.alpha < 0)
																								{
																									this.alpha = 0;
																								}
																								int num3 = this.frameCounter + 1;
																								this.frameCounter = num3;
																								if (num3 > 4)
																								{
																									this.frameCounter = 0;
																									num3 = this.frame + 1;
																									this.frame = num3;
																									if (num3 >= 4)
																									{
																										this.frame = 0;
																									}
																								}
																								Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
																							}
																							else if (this.type == 596)
																							{
																								num949 = 10f;
																								scaleFactor11 = 7.5f;
																								if (this.timeLeft > 30 && this.alpha > 0)
																								{
																									this.alpha -= 25;
																								}
																								if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
																								{
																									this.alpha = 128;
																								}
																								if (this.alpha < 0)
																								{
																									this.alpha = 0;
																								}
																								int num3 = this.frameCounter + 1;
																								this.frameCounter = num3;
																								if (num3 > 4)
																								{
																									this.frameCounter = 0;
																									num3 = this.frame + 1;
																									this.frame = num3;
																									if (num3 >= 4)
																									{
																										this.frame = 0;
																									}
																								}
																								float num951 = 0.5f;
																								if (this.timeLeft < 120)
																								{
																									num951 = 1.1f;
																								}
																								if (this.timeLeft < 60)
																								{
																									num951 = 1.6f;
																								}
																								float[] var_2_2A211_cp_0 = this.ai;
																								int var_2_2A211_cp_1 = 1;
																								float num73 = var_2_2A211_cp_0[var_2_2A211_cp_1];
																								var_2_2A211_cp_0[var_2_2A211_cp_1] = num73 + 1f;
																								float num952 = this.ai[1] / 180f * 6.28318548f;
																								for (float num953 = 0f; num953 < 3f; num953 = num73 + 1f)
																								{
																									if (Main.rand.Next(3) != 0)
																									{
																										return;
																									}
																									Dust dust13 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f, 0, default(Color), 1f)];
																									dust13.position = base.Center + Vector2.UnitY.RotatedBy((double)(num953 * 6.28318548f / 3f + this.ai[1]), default(Vector2)) * 10f;
																									dust13.noGravity = true;
																									dust13.velocity = base.DirectionFrom(dust13.position);
																									dust13.scale = num951;
																									dust13.fadeIn = 0.5f;
																									dust13.alpha = 200;
																									num73 = num953;
																								}
																								if (this.timeLeft < 4)
																								{
																									int num954 = 40;
																									if (Main.expertMode)
																									{
																										num954 = 30;
																									}
																									this.position = base.Center;
																									this.width = (this.height = 60);
																									base.Center = this.position;
																									this.damage = num954;
																									for (int num955 = 0; num955 < 10; num955 = num3 + 1)
																									{
																										Dust dust13 = Main.dust[Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, new int[]
																										{
																											27,
																											6
																										}), 0f, -2f, 0, default(Color), 1f)];
																										dust13.noGravity = true;
																										if (dust13.position != base.Center)
																										{
																											dust13.velocity = base.DirectionTo(dust13.position) * 3f;
																										}
																										num3 = num955;
																									}
																								}
																							}
																							int num956 = (int)this.ai[0];
																							if (num956 >= 0 && Main.player[num956].active && !Main.player[num956].dead)
																							{
																								if (base.Distance(Main.player[num956].Center) > num950)
																								{
																									Vector2 vector118 = base.DirectionTo(Main.player[num956].Center);
																									if (vector118.HasNaNs())
																									{
																										vector118 = Vector2.UnitY;
																									}
																									this.velocity = (this.velocity * (num949 - 1f) + vector118 * scaleFactor11) / num949;
																									return;
																								}
																							}
																							else
																							{
																								if (this.timeLeft > 30)
																								{
																									this.timeLeft = 30;
																								}
																								if (this.ai[0] != -1f)
																								{
																									this.ai[0] = -1f;
																									this.netUpdate = true;
																									return;
																								}
																							}
																						}
																						else if (this.aiStyle == 108)
																						{
																							if (this.type == 578 && this.localAI[0] == 0f)
																							{
																								this.localAI[0] = 1f;
																								int num957 = (int)Player.FindClosest(base.Center, 0, 0);
																								Vector2 vector119 = Main.player[num957].Center - base.Center;
																								if (vector119 == Vector2.Zero)
																								{
																									vector119 = Vector2.UnitY;
																								}
																								this.ai[1] = vector119.ToRotation();
																								this.netUpdate = true;
																							}
																							float[] var_2_2A646_cp_0 = this.ai;
																							int var_2_2A646_cp_1 = 0;
																							float num73 = var_2_2A646_cp_0[var_2_2A646_cp_1];
																							var_2_2A646_cp_0[var_2_2A646_cp_1] = num73 + 1f;
																							if (this.ai[0] <= 50f)
																							{
																								if (this.type == 579)
																								{
																									if (Main.rand.Next(4) == 0)
																									{
																										Vector2 vector120 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																										Dust dust14 = Main.dust[Dust.NewDust(base.Center - vector120 * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																										dust14.noGravity = true;
																										dust14.position = base.Center - vector120 * (float)Main.rand.Next(10, 21);
																										dust14.velocity = vector120.RotatedBy(1.5707963705062866, default(Vector2)) * 4f;
																										dust14.scale = 0.5f + Main.rand.NextFloat();
																										dust14.fadeIn = 0.5f;
																									}
																									if (Main.rand.Next(4) == 0)
																									{
																										Vector2 vector121 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																										Dust dust15 = Main.dust[Dust.NewDust(base.Center - vector121 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																										dust15.noGravity = true;
																										dust15.position = base.Center - vector121 * 30f;
																										dust15.velocity = vector121.RotatedBy(-1.5707963705062866, default(Vector2)) * 2f;
																										dust15.scale = 0.5f + Main.rand.NextFloat();
																										dust15.fadeIn = 0.5f;
																									}
																								}
																								if (this.type == 578 && Main.rand.Next(2) == 0)
																								{
																									Vector2 vector122 = this.ai[1].ToRotationVector2();
																									Vector2 vector123 = vector122.RotatedBy(1.5707963705062866, default(Vector2)) * (float)(Main.rand.Next(2) == 0).ToDirectionInt() * (float)Main.rand.Next(10, 21);
																									Vector2 value49 = vector122 * (float)Main.rand.Next(-80, 81);
																									Vector2 vector124 = value49 - vector123;
																									vector124 /= 10f;
																									int num958 = 229;
																									Dust dust16 = Main.dust[Dust.NewDust(base.Center, 0, 0, num958, 0f, 0f, 0, default(Color), 1f)];
																									dust16.noGravity = true;
																									dust16.position = base.Center + vector123;
																									dust16.velocity = vector124;
																									dust16.scale = 0.5f + Main.rand.NextFloat();
																									dust16.fadeIn = 0.5f;
																									value49 = vector122 * (float)Main.rand.Next(40, 121);
																									vector124 = value49 - vector123 / 2f;
																									vector124 /= 10f;
																									dust16 = Main.dust[Dust.NewDust(base.Center, 0, 0, num958, 0f, 0f, 0, default(Color), 1f)];
																									dust16.noGravity = true;
																									dust16.position = base.Center + vector123 / 2f;
																									dust16.velocity = vector124;
																									dust16.scale = 1f + Main.rand.NextFloat();
																									return;
																								}
																							}
																							else if (this.ai[0] <= 90f)
																							{
																								this.scale = (this.ai[0] - 50f) / 40f;
																								this.alpha = 255 - (int)(255f * this.scale);
																								this.rotation -= 0.157079637f;
																								if (this.type == 579)
																								{
																									if (Main.rand.Next(2) == 0)
																									{
																										Vector2 vector125 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																										Dust dust17 = Main.dust[Dust.NewDust(base.Center - vector125 * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																										dust17.noGravity = true;
																										dust17.position = base.Center - vector125 * (float)Main.rand.Next(10, 21);
																										dust17.velocity = vector125.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																										dust17.scale = 0.5f + Main.rand.NextFloat();
																										dust17.fadeIn = 0.5f;
																										dust17.customData = base.Center;
																									}
																									if (Main.rand.Next(2) == 0)
																									{
																										Vector2 vector126 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																										Dust dust18 = Main.dust[Dust.NewDust(base.Center - vector126 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																										dust18.noGravity = true;
																										dust18.position = base.Center - vector126 * 30f;
																										dust18.velocity = vector126.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																										dust18.scale = 0.5f + Main.rand.NextFloat();
																										dust18.fadeIn = 0.5f;
																										dust18.customData = base.Center;
																									}
																								}
																								if (this.type == 578)
																								{
																									Vector2 vector127 = this.ai[1].ToRotationVector2();
																									Vector2 value50 = vector127.RotatedBy(1.5707963705062866, default(Vector2)) * (float)(Main.rand.Next(2) == 0).ToDirectionInt() * (float)Main.rand.Next(10, 21);
																									vector127 *= (float)Main.rand.Next(-80, 81);
																									Vector2 vector128 = vector127 - value50;
																									vector128 /= 10f;
																									int num959 = Utils.SelectRandom<int>(Main.rand, new int[]
																									{
																										229,
																										229
																									});
																									Dust dust19 = Main.dust[Dust.NewDust(base.Center, 0, 0, num959, 0f, 0f, 0, default(Color), 1f)];
																									dust19.noGravity = true;
																									dust19.position = base.Center + value50;
																									dust19.velocity = vector128;
																									dust19.scale = 0.5f + Main.rand.NextFloat();
																									dust19.fadeIn = 0.5f;
																									if (this.ai[0] == 90f && Main.netMode != 1)
																									{
																										Vector2 vector129 = this.ai[1].ToRotationVector2() * 8f;
																										float ai2 = (float)Main.rand.Next(80);
																										Projectile.NewProjectile(base.Center.X - vector129.X, base.Center.Y - vector129.Y, vector129.X, vector129.Y, 580, 15, 1f, Main.myPlayer, this.ai[1], ai2);
																										return;
																									}
																								}
																								else if (this.type == 579 && this.ai[0] == 90f && Main.netMode != 1)
																								{
																									int num3;
																									for (int num960 = 0; num960 < 2; num960 = num3 + 1)
																									{
																										int num961 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 427, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																										Main.npc[num961].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float)Main.rand.Next(4, 9) - Vector2.UnitY * 2f;
																										Main.npc[num961].netUpdate = true;
																										num3 = num960;
																									}
																									return;
																								}
																							}
																							else
																							{
																								if (this.ai[0] > 120f)
																								{
																									this.scale = 1f - (this.ai[0] - 120f) / 60f;
																									this.alpha = 255 - (int)(255f * this.scale);
																									this.rotation -= 0.104719758f;
																									if (this.alpha >= 255)
																									{
																										this.Kill();
																									}
																									int num3;
																									for (int num962 = 0; num962 < 2; num962 = num3 + 1)
																									{
																										int num963 = Main.rand.Next(3);
																										if (num963 == 0)
																										{
																											Vector2 vector130 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * this.scale;
																											Dust dust20 = Main.dust[Dust.NewDust(base.Center - vector130 * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																											dust20.noGravity = true;
																											dust20.position = base.Center - vector130 * (float)Main.rand.Next(10, 21);
																											dust20.velocity = vector130.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																											dust20.scale = 0.5f + Main.rand.NextFloat();
																											dust20.fadeIn = 0.5f;
																											dust20.customData = base.Center;
																										}
																										else if (num963 == 1)
																										{
																											Vector2 vector131 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * this.scale;
																											Dust dust21 = Main.dust[Dust.NewDust(base.Center - vector131 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																											dust21.noGravity = true;
																											dust21.position = base.Center - vector131 * 30f;
																											dust21.velocity = vector131.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																											dust21.scale = 0.5f + Main.rand.NextFloat();
																											dust21.fadeIn = 0.5f;
																											dust21.customData = base.Center;
																										}
																										num3 = num962;
																									}
																									return;
																								}
																								this.scale = 1f;
																								this.alpha = 0;
																								this.rotation -= 0.05235988f;
																								if (Main.rand.Next(2) == 0)
																								{
																									Vector2 vector132 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																									Dust dust22 = Main.dust[Dust.NewDust(base.Center - vector132 * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																									dust22.noGravity = true;
																									dust22.position = base.Center - vector132 * (float)Main.rand.Next(10, 21);
																									dust22.velocity = vector132.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																									dust22.scale = 0.5f + Main.rand.NextFloat();
																									dust22.fadeIn = 0.5f;
																									dust22.customData = base.Center;
																									return;
																								}
																								Vector2 vector133 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																								Dust dust23 = Main.dust[Dust.NewDust(base.Center - vector133 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																								dust23.noGravity = true;
																								dust23.position = base.Center - vector133 * 30f;
																								dust23.velocity = vector133.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																								dust23.scale = 0.5f + Main.rand.NextFloat();
																								dust23.fadeIn = 0.5f;
																								dust23.customData = base.Center;
																								return;
																							}
																						}
																						else
																						{
																							if (this.aiStyle == 109)
																							{
																								if (this.localAI[1] == 0f)
																								{
																									this.localAI[1] = this.velocity.Length();
																								}
																								if (this.ai[0] == 0f)
																								{
																									float[] var_2_2B671_cp_0 = this.localAI;
																									int var_2_2B671_cp_1 = 0;
																									float num73 = var_2_2B671_cp_0[var_2_2B671_cp_1];
																									var_2_2B671_cp_0[var_2_2B671_cp_1] = num73 + 1f;
																									if (this.localAI[0] > 30f)
																									{
																										this.ai[0] = 1f;
																										this.localAI[0] = 0f;
																										return;
																									}
																								}
																								else if (this.ai[0] == 1f)
																								{
																									Vector2 value51 = Vector2.Zero;
																									if (this.type != 582 || !Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 124)
																									{
																										this.Kill();
																										return;
																									}
																									value51 = Main.npc[(int)this.ai[1]].Center;
																									this.tileCollide = false;
																									float num964 = this.localAI[1];
																									Vector2 vector134 = value51 - base.Center;
																									if (vector134.Length() < num964)
																									{
																										this.Kill();
																										return;
																									}
																									vector134.Normalize();
																									vector134 *= num964;
																									this.velocity = Vector2.Lerp(this.velocity, vector134, 0.04f);
																								}
																								this.rotation += 0.314159274f;
																								return;
																							}
																							if (this.aiStyle == 110)
																							{
																								if (this.localAI[1] == 0f)
																								{
																									this.localAI[1] = this.velocity.Length();
																								}
																								Vector2 value52 = Vector2.Zero;
																								if (!Main.npc[(int)this.ai[0]].active || !Main.npc[(int)this.ai[0]].townNPC)
																								{
																									this.Kill();
																									return;
																								}
																								value52 = Main.npc[(int)this.ai[0]].Center;
																								float num965 = this.localAI[1];
																								Vector2 vector135 = value52 - base.Center;
																								if (vector135.Length() < num965 || base.Hitbox.Intersects(Main.npc[(int)this.ai[0]].Hitbox))
																								{
																									this.Kill();
																									int num966 = Main.npc[(int)this.ai[0]].lifeMax - Main.npc[(int)this.ai[0]].life;
																									if (num966 > 20)
																									{
																										num966 = 20;
																									}
																									if (num966 > 0)
																									{
																										NPC nPC10 = Main.npc[(int)this.ai[0]];
																										nPC10.life += num966;
																										Main.npc[(int)this.ai[0]].HealEffect(num966, true);
																									}
																									return;
																								}
																								vector135.Normalize();
																								vector135 *= num965;
																								if (vector135.Y < this.velocity.Y)
																								{
																									vector135.Y = this.velocity.Y;
																								}
																								vector135.Y += 1f;
																								this.velocity = Vector2.Lerp(this.velocity, vector135, 0.04f);
																								this.rotation += this.velocity.X * 0.05f;
																								return;
																							}
																							else if (this.aiStyle == 111)
																							{
																								if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 20 || Main.npc[(int)this.ai[1]].ai[0] != 14f)
																								{
																									this.Kill();
																									return;
																								}
																								float[] var_2_2BA5A_cp_0 = this.ai;
																								int var_2_2BA5A_cp_1 = 0;
																								float num73 = var_2_2BA5A_cp_0[var_2_2BA5A_cp_1];
																								var_2_2BA5A_cp_0[var_2_2BA5A_cp_1] = num73 + 1f;
																								this.rotation += 0.0104719754f;
																								this.scale = this.ai[0] / 100f;
																								if (this.scale > 1f)
																								{
																									this.scale = 1f;
																								}
																								this.alpha = (int)(255f * (1f - this.scale));
																								float num967 = 300f;
																								if (this.ai[0] >= 100f)
																								{
																									num967 = MathHelper.Lerp(300f, 600f, (this.ai[0] - 100f) / 200f);
																								}
																								if (num967 > 600f)
																								{
																									num967 = 600f;
																								}
																								if (this.ai[0] >= 500f)
																								{
																									this.alpha = (int)MathHelper.Lerp(0f, 255f, (this.ai[0] - 500f) / 100f);
																									num967 = MathHelper.Lerp(600f, 1200f, (this.ai[0] - 500f) / 100f);
																									this.rotation += 0.0104719754f;
																								}
																								if (Main.rand.Next(4) == 0)
																								{
																									float scaleFactor12 = num967;
																									Vector2 value53 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
																									float num968 = (float)Main.rand.Next(3, 9);
																									value53.Normalize();
																									int num969 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, 0f, 0f, 100, default(Color), 1f);
																									Main.dust[num969].noGravity = true;
																									Main.dust[num969].position = base.Center + value53 * scaleFactor12;
																									if (Main.rand.Next(8) == 0)
																									{
																										Main.dust[num969].velocity = value53 * -num968 * 3f;
																										Dust dust = Main.dust[num969];
																										dust.scale += 0.5f;
																									}
																									else
																									{
																										Main.dust[num969].velocity = value53 * -num968;
																									}
																								}
																								if (Main.rand.Next(2) == 0)
																								{
																									Vector2 value54 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
																									float num970 = (float)Main.rand.Next(3, 9);
																									value54.Normalize();
																									int num971 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, 0f, 0f, 100, default(Color), 1.5f);
																									Main.dust[num971].noGravity = true;
																									Main.dust[num971].position = base.Center + value54 * 30f;
																									if (Main.rand.Next(8) == 0)
																									{
																										Main.dust[num971].velocity = value54 * -num970 * 3f;
																										Dust dust = Main.dust[num971];
																										dust.scale += 0.5f;
																									}
																									else
																									{
																										Main.dust[num971].velocity = value54 * -num970;
																									}
																								}
																								if (this.ai[0] >= 30f && Main.netMode != 2)
																								{
																									Player player7 = Main.player[Main.myPlayer];
																									if (player7.active && !player7.dead && base.Distance(player7.Center) <= num967 && player7.FindBuffIndex(165) == -1)
																									{
																										player7.AddBuff(165, 120, true);
																									}
																								}
																								if (this.ai[0] >= 30f && this.ai[0] % 10f == 0f && Main.netMode != 1)
																								{
																									int num3;
																									for (int num972 = 0; num972 < 200; num972 = num3 + 1)
																									{
																										NPC nPC11 = Main.npc[num972];
																										if (nPC11.type != 488 && nPC11.active && base.Distance(nPC11.Center) <= num967)
																										{
																											if (nPC11.townNPC && (nPC11.FindBuffIndex(165) == -1 || nPC11.buffTime[nPC11.FindBuffIndex(165)] <= 20))
																											{
																												nPC11.AddBuff(165, 120, false);
																											}
																											else if (!nPC11.friendly && nPC11.lifeMax > 5 && !nPC11.dontTakeDamage && (nPC11.FindBuffIndex(186) == -1 || nPC11.buffTime[nPC11.FindBuffIndex(186)] <= 20) && (nPC11.dryadBane || Collision.CanHit(base.Center, 1, 1, nPC11.position, nPC11.width, nPC11.height)))
																											{
																												nPC11.AddBuff(186, 120, false);
																											}
																										}
																										num3 = num972;
																									}
																								}
																								if (this.ai[0] >= 570f)
																								{
																									this.Kill();
																									return;
																								}
																							}
																							else if (this.aiStyle == 112)
																							{
																								if (this.type == 590)
																								{
																									int num3 = this.frameCounter + 1;
																									this.frameCounter = num3;
																									if (num3 >= 4)
																									{
																										this.frameCounter = 0;
																										num3 = this.frame + 1;
																										this.frame = num3;
																										if (num3 >= 3)
																										{
																											this.frame = 0;
																										}
																									}
																									if (this.alpha > 0)
																									{
																										this.alpha -= 15;
																									}
																									if (this.alpha < 0)
																									{
																										this.alpha = 0;
																									}
																									if (this.alpha == 0)
																									{
																										float num973 = (float)Main.rand.Next(28, 42) * 0.005f;
																										num973 += (float)(270 - (int)Main.mouseTextColor) / 500f;
																										float num974 = 0.1f;
																										float num975 = 0.3f + num973 / 2f;
																										float num976 = 0.6f + num973;
																										float num977 = 0.35f;
																										num974 *= num977;
																										num975 *= num977;
																										num976 *= num977;
																										Lighting.AddLight(base.Center, num974, num975, num976);
																									}
																									this.velocity = new Vector2(0f, (float)Math.Sin((double)(6.28318548f * this.ai[0] / 180f)) * 0.15f);
																									float[] var_2_2C261_cp_0 = this.ai;
																									int var_2_2C261_cp_1 = 0;
																									float num73 = var_2_2C261_cp_0[var_2_2C261_cp_1];
																									var_2_2C261_cp_0[var_2_2C261_cp_1] = num73 + 1f;
																									if (this.ai[0] >= 180f)
																									{
																										this.ai[0] = 0f;
																									}
																								}
																								if (this.type == 644)
																								{
																									Color newColor2 = Main.hslToRgb(this.ai[0], 1f, 0.5f);
																									int num978 = (int)this.ai[1];
																									if (num978 < 0 || num978 >= 1000 || (!Main.projectile[num978].active && Main.projectile[num978].type != 643))
																									{
																										this.ai[1] = -1f;
																									}
																									else
																									{
																										DelegateMethods.v3_1 = newColor2.ToVector3() * 0.5f;
																										Utils.PlotTileLine(base.Center, Main.projectile[num978].Center, 8f, new Utils.PerLinePoint(DelegateMethods.CastLight));
																									}
																									if (this.localAI[0] == 0f)
																									{
																										this.localAI[0] = Main.rand.NextFloat() * 0.8f + 0.8f;
																										this.direction = ((Main.rand.Next(2) > 0) ? 1 : -1);
																									}
																									this.rotation = this.localAI[1] / 40f * 6.28318548f * (float)this.direction;
																									if (this.alpha > 0)
																									{
																										this.alpha -= 8;
																									}
																									if (this.alpha < 0)
																									{
																										this.alpha = 0;
																									}
																									if (this.alpha == 0)
																									{
																										Lighting.AddLight(base.Center, newColor2.ToVector3() * 0.5f);
																									}
																									int num3;
																									for (int num979 = 0; num979 < 2; num979 = num3 + 1)
																									{
																										if (Main.rand.Next(10) == 0)
																										{
																											Vector2 value55 = Vector2.UnitY.RotatedBy((double)((float)num979 * 3.14159274f), default(Vector2)).RotatedBy((double)this.rotation, default(Vector2));
																											Dust dust24 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor2, 1.5f)];
																											dust24.noGravity = true;
																											dust24.noLight = true;
																											dust24.scale = this.Opacity * this.localAI[0];
																											dust24.position = base.Center;
																											dust24.velocity = value55 * 2.5f;
																										}
																										num3 = num979;
																									}
																									for (int num980 = 0; num980 < 2; num980 = num3 + 1)
																									{
																										if (Main.rand.Next(10) == 0)
																										{
																											Vector2 value56 = Vector2.UnitY.RotatedBy((double)((float)num980 * 3.14159274f), default(Vector2));
																											Dust dust25 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor2, 1.5f)];
																											dust25.noGravity = true;
																											dust25.noLight = true;
																											dust25.scale = this.Opacity * this.localAI[0];
																											dust25.position = base.Center;
																											dust25.velocity = value56 * 2.5f;
																										}
																										num3 = num980;
																									}
																									if (Main.rand.Next(10) == 0)
																									{
																										float scaleFactor13 = 1f + Main.rand.NextFloat() * 2f;
																										float fadeIn = 1f + Main.rand.NextFloat();
																										float num981 = 1f + Main.rand.NextFloat();
																										Vector2 vector136 = Utils.RandomVector2(Main.rand, -1f, 1f);
																										if (vector136 != Vector2.Zero)
																										{
																											vector136.Normalize();
																										}
																										vector136 *= 20f + Main.rand.NextFloat() * 100f;
																										Vector2 vector137 = base.Center + vector136;
																										Point point3 = vector137.ToTileCoordinates();
																										bool flag52 = true;
																										if (!WorldGen.InWorld(point3.X, point3.Y, 0))
																										{
																											flag52 = false;
																										}
																										if (flag52 && WorldGen.SolidTile(point3.X, point3.Y))
																										{
																											flag52 = false;
																										}
																										if (flag52)
																										{
																											Dust dust26 = Main.dust[Dust.NewDust(vector137, 0, 0, 267, 0f, 0f, 127, newColor2, 1f)];
																											dust26.noGravity = true;
																											dust26.position = vector137;
																											dust26.velocity = -Vector2.UnitY * scaleFactor13 * (Main.rand.NextFloat() * 0.9f + 1.6f);
																											dust26.fadeIn = fadeIn;
																											dust26.scale = num981;
																											dust26.noLight = true;
																											Dust dust27 = Dust.CloneDust(dust26);
																											Dust dust = dust27;
																											dust.scale *= 0.65f;
																											dust = dust27;
																											dust.fadeIn *= 0.65f;
																											dust27.color = new Color(255, 255, 255, 255);
																										}
																									}
																									this.scale = this.Opacity / 2f * this.localAI[0];
																									this.velocity = Vector2.Zero;
																									float[] var_2_2C8BA_cp_0 = this.localAI;
																									int var_2_2C8BA_cp_1 = 1;
																									float num73 = var_2_2C8BA_cp_0[var_2_2C8BA_cp_1];
																									var_2_2C8BA_cp_0[var_2_2C8BA_cp_1] = num73 + 1f;
																									if (this.localAI[1] >= 60f)
																									{
																										this.Kill();
																										return;
																									}
																								}
																							}
																							else if (this.aiStyle == 113)
																							{
																								int num982 = 25;
																								if (this.type == 614)
																								{
																									num982 = 63;
																								}
																								if (this.alpha > 0)
																								{
																									this.alpha -= num982;
																								}
																								if (this.alpha < 0)
																								{
																									this.alpha = 0;
																								}
																								if (this.ai[0] == 0f)
																								{
																									bool flag53 = this.type == 614;
																									if (flag53)
																									{
																										int num983 = (int)this.ai[1];
																										if (!Main.npc[num983].CanBeChasedBy(this, true))
																										{
																											this.Kill();
																											return;
																										}
																										float num984 = this.velocity.ToRotation();
																										Vector2 vector138 = Main.npc[num983].Center - base.Center;
																										if (vector138 != Vector2.Zero)
																										{
																											vector138.Normalize();
																											vector138 *= 14f;
																										}
																										float num985 = 5f;
																										this.velocity = (this.velocity * (num985 - 1f) + vector138) / num985;
																									}
																									else
																									{
																										float[] var_2_2CA48_cp_0 = this.ai;
																										int var_2_2CA48_cp_1 = 1;
																										float num73 = var_2_2CA48_cp_0[var_2_2CA48_cp_1];
																										var_2_2CA48_cp_0[var_2_2CA48_cp_1] = num73 + 1f;
																										if (this.ai[1] >= 45f)
																										{
																											float num986 = 0.98f;
																											float num987 = 0.35f;
																											if (this.type == 636)
																											{
																												num986 = 0.995f;
																												num987 = 0.15f;
																											}
																											this.ai[1] = 45f;
																											this.velocity.X = this.velocity.X * num986;
																											this.velocity.Y = this.velocity.Y + num987;
																										}
																										this.rotation = this.velocity.ToRotation() + 1.57079637f;
																									}
																								}
																								if (this.ai[0] == 1f)
																								{
																									this.ignoreWater = true;
																									this.tileCollide = false;
																									int num988 = 15;
																									if (this.type == 636)
																									{
																										num988 = 5 * this.MaxUpdates;
																									}
																									bool flag54 = false;
																									bool flag55 = false;
																									float[] var_2_2CB4E_cp_0 = this.localAI;
																									int var_2_2CB4E_cp_1 = 0;
																									float num73 = var_2_2CB4E_cp_0[var_2_2CB4E_cp_1];
																									var_2_2CB4E_cp_0[var_2_2CB4E_cp_1] = num73 + 1f;
																									if (this.localAI[0] % 30f == 0f)
																									{
																										flag55 = true;
																									}
																									int num989 = (int)this.ai[1];
																									if (this.localAI[0] >= (float)(60 * num988))
																									{
																										flag54 = true;
																									}
																									else if (num989 < 0 || num989 >= 200)
																									{
																										flag54 = true;
																									}
																									else if (Main.npc[num989].active && !Main.npc[num989].dontTakeDamage)
																									{
																										base.Center = Main.npc[num989].Center - this.velocity * 2f;
																										this.gfxOffY = Main.npc[num989].gfxOffY;
																										if (flag55)
																										{
																											Main.npc[num989].HitEffect(0, 1.0);
																										}
																									}
																									else
																									{
																										flag54 = true;
																									}
																									if (flag54)
																									{
																										this.Kill();
																									}
																								}
																								if (this.type == 614)
																								{
																									Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
																								}
																								if (this.type == 636)
																								{
																									Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.4f);
																									return;
																								}
																							}
																							else if (this.aiStyle == 114)
																							{
																								if (Main.netMode == 2 && this.localAI[0] == 0f)
																								{
																									PortalHelper.SyncPortalSections(base.Center, 1);
																									this.localAI[0] = 1f;
																								}
																								this.timeLeft = 3;
																								bool flag56 = false;
																								if (this.owner != 255 && (!Main.player[this.owner].active || Main.player[this.owner].dead || base.Distance(Main.player[this.owner].Center) > 12800f))
																								{
																									flag56 = true;
																								}
																								if (!flag56 && !WorldGen.InWorld((int)base.Center.X / 16, (int)base.Center.Y / 16, Lighting.offScreenTiles))
																								{
																									flag56 = true;
																								}
																								if (!flag56 && !PortalHelper.SupportedTilesAreFine(base.Center, this.ai[0]))
																								{
																									flag56 = true;
																								}
																								if (flag56)
																								{
																									this.Kill();
																									return;
																								}
																								Color portalColor = PortalHelper.GetPortalColor(this.owner, (int)this.ai[1]);
																								this.alpha -= 25;
																								if (this.alpha < 0)
																								{
																									this.alpha = 0;
																								}
																								if (this.alpha == 0)
																								{
																									Lighting.AddLight(base.Center + this.velocity * 3f, portalColor.ToVector3() * 0.5f);
																								}
																								int num3 = this.frameCounter + 1;
																								this.frameCounter = num3;
																								if (num3 >= 6)
																								{
																									this.frameCounter = 0;
																									num3 = this.frame + 1;
																									this.frame = num3;
																									if (num3 >= Main.projFrames[this.type])
																									{
																										this.frame = 0;
																									}
																								}
																								this.rotation = this.ai[0] - 1.57079637f;
																								return;
																							}
																							else if (this.aiStyle == 115)
																							{
																								Lighting.AddLight(base.Center, new Vector3(0.075f, 0.3f, 0.15f));
																								this.velocity *= 0.985f;
																								this.rotation += this.velocity.X * 0.2f;
																								if (this.velocity.X > 0f)
																								{
																									this.rotation += 0.08f;
																								}
																								else
																								{
																									this.rotation -= 0.08f;
																								}
																								this.ai[1] += 1f;
																								if (this.ai[1] > 30f)
																								{
																									this.alpha += 10;
																									if (this.alpha >= 255)
																									{
																										this.alpha = 255;
																										this.Kill();
																										return;
																									}
																								}
																							}
																							else
																							{
																								if (this.aiStyle == 116)
																								{
																									if (this.localAI[0] == 0f)
																									{
																										this.rotation = this.ai[1];
																										this.localAI[0] = 1f;
																									}
																									Player player8 = Main.player[this.owner];
																									if (player8.setSolar)
																									{
																										this.timeLeft = 2;
																									}
																									float num990 = (float)player8.miscCounter / 300f * 12.566371f + this.ai[1];
																									num990 = MathHelper.WrapAngle(num990);
																									this.rotation = this.rotation.AngleLerp(num990, 0.05f);
																									this.alpha -= 15;
																									if (this.alpha < 0)
																									{
																										this.alpha = 0;
																									}
																									this.velocity = this.rotation.ToRotationVector2() * 100f - player8.velocity;
																									base.Center = player8.Center - this.velocity;
																									return;
																								}
																								if (this.aiStyle == 117)
																								{
																									this.ai[1] += 0.01f;
																									this.scale = this.ai[1];
																									float[] var_2_2D0E8_cp_0 = this.ai;
																									int var_2_2D0E8_cp_1 = 0;
																									float num73 = var_2_2D0E8_cp_0[var_2_2D0E8_cp_1];
																									var_2_2D0E8_cp_0[var_2_2D0E8_cp_1] = num73 + 1f;
																									if (this.ai[0] >= (float)(3 * Main.projFrames[this.type]))
																									{
																										this.Kill();
																										return;
																									}
																									int num3 = this.frameCounter + 1;
																									this.frameCounter = num3;
																									if (num3 >= 3)
																									{
																										this.frameCounter = 0;
																										num3 = this.frame + 1;
																										this.frame = num3;
																										if (num3 >= Main.projFrames[this.type])
																										{
																											this.hide = true;
																										}
																									}
																									this.alpha -= 63;
																									if (this.alpha < 0)
																									{
																										this.alpha = 0;
																									}
																									bool flag57 = this.type == 612;
																									bool flag58 = this.type == 624;
																									if (flag57)
																									{
																										Lighting.AddLight(base.Center, 0.9f, 0.8f, 0.6f);
																									}
																									if (this.ai[0] == 1f)
																									{
																										this.position = base.Center;
																										this.width = (this.height = (int)(52f * this.scale));
																										base.Center = this.position;
																										this.Damage();
																										if (flag57)
																										{
																											Main.PlaySound(SoundID.Item14, this.position);
																											for (int num991 = 0; num991 < 4; num991 = num3 + 1)
																											{
																												int num992 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
																												Main.dust[num992].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
																												num3 = num991;
																											}
																											for (int num993 = 0; num993 < 10; num993 = num3 + 1)
																											{
																												int num994 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 2.7f);
																												Main.dust[num994].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
																												Main.dust[num994].noGravity = true;
																												Dust dust = Main.dust[num994];
																												dust.velocity *= 3f;
																												num994 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
																												Main.dust[num994].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
																												dust = Main.dust[num994];
																												dust.velocity *= 2f;
																												Main.dust[num994].noGravity = true;
																												Main.dust[num994].fadeIn = 2.5f;
																												num3 = num993;
																											}
																											for (int num995 = 0; num995 < 5; num995 = num3 + 1)
																											{
																												int num996 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
																												Main.dust[num996].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
																												Main.dust[num996].noGravity = true;
																												Dust dust = Main.dust[num996];
																												dust.velocity *= 3f;
																												num3 = num995;
																											}
																											for (int num997 = 0; num997 < 10; num997 = num3 + 1)
																											{
																												int num998 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
																												Main.dust[num998].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
																												Main.dust[num998].noGravity = true;
																												Dust dust = Main.dust[num998];
																												dust.velocity *= 3f;
																												num3 = num997;
																											}
																										}
																										if (flag58)
																										{
																											Main.PlaySound(SoundID.Item14, this.position);
																											for (int num999 = 0; num999 < 20; num999 = num3 + 1)
																											{
																												int num1000 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 1.5f);
																												Main.dust[num1000].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
																												Dust dust = Main.dust[num1000];
																												dust.velocity *= 2f;
																												Main.dust[num1000].noGravity = true;
																												Main.dust[num1000].fadeIn = 2.5f;
																												Main.dust[num1000].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																												num3 = num999;
																											}
																											for (int num1001 = 0; num1001 < 15; num1001 = num3 + 1)
																											{
																												int num1002 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 0, default(Color), 2.7f);
																												Main.dust[num1002].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
																												Main.dust[num1002].noGravity = true;
																												Dust dust = Main.dust[num1002];
																												dust.velocity *= 3f;
																												Main.dust[num1002].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																												num3 = num1001;
																											}
																											float num1003 = (float)Main.rand.NextDouble() * 6.28318548f;
																											float num1004 = (float)Main.rand.NextDouble() * 6.28318548f;
																											float num1005 = (float)Main.rand.NextDouble() * 6.28318548f;
																											float num1006 = 7f + (float)Main.rand.NextDouble() * 7f;
																											float num1007 = 7f + (float)Main.rand.NextDouble() * 7f;
																											float num1008 = 7f + (float)Main.rand.NextDouble() * 7f;
																											float num1009 = num1006;
																											if (num1007 > num1009)
																											{
																												num1009 = num1007;
																											}
																											if (num1008 > num1009)
																											{
																												num1009 = num1008;
																											}
																											for (int num1010 = 0; num1010 < 200; num1010 = num3 + 1)
																											{
																												int num1011 = 135;
																												float scaleFactor14 = num1009;
																												if (num1010 > 50)
																												{
																													scaleFactor14 = num1007;
																												}
																												if (num1010 > 100)
																												{
																													scaleFactor14 = num1006;
																												}
																												if (num1010 > 150)
																												{
																													scaleFactor14 = num1008;
																												}
																												int num1012 = Dust.NewDust(this.position, 6, 6, num1011, 0f, 0f, 100, default(Color), 1f);
																												Vector2 vector139 = Main.dust[num1012].velocity;
																												Main.dust[num1012].position = base.Center;
																												vector139.Normalize();
																												vector139 *= scaleFactor14;
																												if (num1010 > 150)
																												{
																													vector139.Y *= 0.5f;
																													vector139 = vector139.RotatedBy((double)num1005, default(Vector2));
																												}
																												else if (num1010 > 100)
																												{
																													vector139.X *= 0.5f;
																													vector139 = vector139.RotatedBy((double)num1003, default(Vector2));
																												}
																												else if (num1010 > 50)
																												{
																													vector139.Y *= 0.5f;
																													vector139 = vector139.RotatedBy((double)num1004, default(Vector2));
																												}
																												Dust dust = Main.dust[num1012];
																												dust.velocity *= 0.2f;
																												dust = Main.dust[num1012];
																												dust.velocity += vector139;
																												Main.dust[num1012].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																												if (num1010 <= 200)
																												{
																													Main.dust[num1012].scale = 2f;
																													Main.dust[num1012].noGravity = true;
																													Main.dust[num1012].fadeIn = Main.rand.NextFloat() * 2f;
																													if (Main.rand.Next(4) == 0)
																													{
																														Main.dust[num1012].fadeIn = 2.5f;
																													}
																													Main.dust[num1012].noLight = true;
																													if (num1010 < 100)
																													{
																														dust = Main.dust[num1012];
																														dust.position += Main.dust[num1012].velocity * 20f;
																														dust = Main.dust[num1012];
																														dust.velocity *= -1f;
																													}
																												}
																												num3 = num1010;
																											}
																											return;
																										}
																									}
																								}
																								else if (this.aiStyle == 118)
																								{
																									float[] var_2_2DDF8_cp_0 = this.ai;
																									int var_2_2DDF8_cp_1 = 0;
																									float num73 = var_2_2DDF8_cp_0[var_2_2DDF8_cp_1];
																									var_2_2DDF8_cp_0[var_2_2DDF8_cp_1] = num73 + 1f;
																									int num1013 = 0;
																									if (this.velocity.Length() <= 4f)
																									{
																										num1013 = 1;
																									}
																									this.alpha -= 15;
																									if (this.alpha < 0)
																									{
																										this.alpha = 0;
																									}
																									if (num1013 == 0)
																									{
																										this.rotation -= 0.104719758f;
																										if (Main.rand.Next(3) == 0)
																										{
																											if (Main.rand.Next(2) == 0)
																											{
																												Vector2 vector140 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																												Dust dust28 = Main.dust[Dust.NewDust(base.Center - vector140 * 30f, 0, 0, Utils.SelectRandom<int>(Main.rand, new int[]
																												{
																													86,
																													90
																												}), 0f, 0f, 0, default(Color), 1f)];
																												dust28.noGravity = true;
																												dust28.position = base.Center - vector140 * (float)Main.rand.Next(10, 21);
																												dust28.velocity = vector140.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																												dust28.scale = 0.5f + Main.rand.NextFloat();
																												dust28.fadeIn = 0.5f;
																												dust28.customData = this;
																											}
																											else
																											{
																												Vector2 vector141 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																												Dust dust29 = Main.dust[Dust.NewDust(base.Center - vector141 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																												dust29.noGravity = true;
																												dust29.position = base.Center - vector141 * 30f;
																												dust29.velocity = vector141.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																												dust29.scale = 0.5f + Main.rand.NextFloat();
																												dust29.fadeIn = 0.5f;
																												dust29.customData = this;
																											}
																										}
																										if (this.ai[0] >= 30f)
																										{
																											this.velocity *= 0.98f;
																											this.scale += 0.00744680827f;
																											if (this.scale > 1.3f)
																											{
																												this.scale = 1.3f;
																											}
																											this.rotation -= 0.0174532924f;
																										}
																										if (this.velocity.Length() < 4.1f)
																										{
																											this.velocity.Normalize();
																											this.velocity *= 4f;
																											this.ai[0] = 0f;
																										}
																									}
																									else if (num1013 == 1)
																									{
																										this.rotation -= 0.104719758f;
																										int num3;
																										for (int num1014 = 0; num1014 < 1; num1014 = num3 + 1)
																										{
																											if (Main.rand.Next(2) == 0)
																											{
																												Vector2 vector142 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																												Dust dust30 = Main.dust[Dust.NewDust(base.Center - vector142 * 30f, 0, 0, 86, 0f, 0f, 0, default(Color), 1f)];
																												dust30.noGravity = true;
																												dust30.position = base.Center - vector142 * (float)Main.rand.Next(10, 21);
																												dust30.velocity = vector142.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																												dust30.scale = 0.9f + Main.rand.NextFloat();
																												dust30.fadeIn = 0.5f;
																												dust30.customData = this;
																												vector142 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																												dust30 = Main.dust[Dust.NewDust(base.Center - vector142 * 30f, 0, 0, 90, 0f, 0f, 0, default(Color), 1f)];
																												dust30.noGravity = true;
																												dust30.position = base.Center - vector142 * (float)Main.rand.Next(10, 21);
																												dust30.velocity = vector142.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																												dust30.scale = 0.9f + Main.rand.NextFloat();
																												dust30.fadeIn = 0.5f;
																												dust30.customData = this;
																												dust30.color = Color.Crimson;
																											}
																											else
																											{
																												Vector2 vector143 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																												Dust dust31 = Main.dust[Dust.NewDust(base.Center - vector143 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																												dust31.noGravity = true;
																												dust31.position = base.Center - vector143 * (float)Main.rand.Next(20, 31);
																												dust31.velocity = vector143.RotatedBy(-1.5707963705062866, default(Vector2)) * 5f;
																												dust31.scale = 0.9f + Main.rand.NextFloat();
																												dust31.fadeIn = 0.5f;
																												dust31.customData = this;
																											}
																											num3 = num1014;
																										}
																										if (this.ai[0] % 30f == 0f && this.ai[0] < 241f && Main.myPlayer == this.owner)
																										{
																											Vector2 vector144 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 12f;
																											Projectile.NewProjectile(base.Center.X, base.Center.Y, vector144.X, vector144.Y, 618, this.damage / 2, 0f, this.owner, 0f, (float)this.whoAmI);
																										}
																										Vector2 vector145 = base.Center;
																										float num1015 = 800f;
																										bool flag59 = false;
																										int num1016 = 0;
																										if (this.ai[1] == 0f)
																										{
																											for (int num1017 = 0; num1017 < 200; num1017 = num3 + 1)
																											{
																												if (Main.npc[num1017].CanBeChasedBy(this, false))
																												{
																													Vector2 center13 = Main.npc[num1017].Center;
																													if (base.Distance(center13) < num1015 && Collision.CanHit(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), 1, 1, Main.npc[num1017].position, Main.npc[num1017].width, Main.npc[num1017].height))
																													{
																														num1015 = base.Distance(center13);
																														vector145 = center13;
																														flag59 = true;
																														num1016 = num1017;
																													}
																												}
																												num3 = num1017;
																											}
																											if (flag59)
																											{
																												if (this.ai[1] != (float)(num1016 + 1))
																												{
																													this.netUpdate = true;
																												}
																												this.ai[1] = (float)(num1016 + 1);
																											}
																											flag59 = false;
																										}
																										if (this.ai[1] != 0f)
																										{
																											int num1018 = (int)(this.ai[1] - 1f);
																											if (Main.npc[num1018].active && Main.npc[num1018].CanBeChasedBy(this, true) && base.Distance(Main.npc[num1018].Center) < 1000f)
																											{
																												flag59 = true;
																												vector145 = Main.npc[num1018].Center;
																											}
																										}
																										if (!this.friendly)
																										{
																											flag59 = false;
																										}
																										if (flag59)
																										{
																											float num1019 = 4f;
																											int num1020 = 8;
																											Vector2 vector146 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
																											float num1021 = vector145.X - vector146.X;
																											float num1022 = vector145.Y - vector146.Y;
																											float num1023 = (float)Math.Sqrt((double)(num1021 * num1021 + num1022 * num1022));
																											num1023 = num1019 / num1023;
																											num1021 *= num1023;
																											num1022 *= num1023;
																											this.velocity.X = (this.velocity.X * (float)(num1020 - 1) + num1021) / (float)num1020;
																											this.velocity.Y = (this.velocity.Y * (float)(num1020 - 1) + num1022) / (float)num1020;
																										}
																									}
																									if (this.alpha < 150)
																									{
																										Lighting.AddLight(base.Center, 0.7f, 0.2f, 0.6f);
																									}
																									if (this.ai[0] >= 600f)
																									{
																										this.Kill();
																										return;
																									}
																								}
																								else if (this.aiStyle == 119)
																								{
																									int num1024 = 0;
																									float num1025 = 0f;
																									float x3 = 0f;
																									float y3 = 0f;
																									bool flag60 = false;
																									bool flag61 = false;
																									int num3 = this.type;
																									if (num3 == 618)
																									{
																										num1024 = 617;
																										num1025 = 420f;
																										x3 = 0.15f;
																										y3 = 0.15f;
																									}
																									if (flag61)
																									{
																										int num1026 = (int)this.ai[1];
																										if (!Main.projectile[num1026].active || Main.projectile[num1026].type != num1024)
																										{
																											this.Kill();
																											return;
																										}
																										this.timeLeft = 2;
																									}
																									float[] var_2_2EA1E_cp_0 = this.ai;
																									int var_2_2EA1E_cp_1 = 0;
																									float num73 = var_2_2EA1E_cp_0[var_2_2EA1E_cp_1];
																									var_2_2EA1E_cp_0[var_2_2EA1E_cp_1] = num73 + 1f;
																									if (this.ai[0] < num1025)
																									{
																										bool flag62 = true;
																										int num1027 = (int)this.ai[1];
																										if (Main.projectile[num1027].active && Main.projectile[num1027].type == num1024)
																										{
																											if (!flag60 && Main.projectile[num1027].oldPos[1] != Vector2.Zero)
																											{
																												this.position += Main.projectile[num1027].position - Main.projectile[num1027].oldPos[1];
																											}
																											if (base.Center.HasNaNs())
																											{
																												this.Kill();
																												return;
																											}
																										}
																										else
																										{
																											this.ai[0] = num1025;
																											flag62 = false;
																											this.Kill();
																										}
																										if (flag62 && !flag60)
																										{
																											this.velocity += new Vector2((float)Math.Sign(Main.projectile[num1027].Center.X - base.Center.X), (float)Math.Sign(Main.projectile[num1027].Center.Y - base.Center.Y)) * new Vector2(x3, y3);
																											if (this.velocity.Length() > 6f)
																											{
																												this.velocity *= 6f / this.velocity.Length();
																											}
																										}
																										if (this.type == 618)
																										{
																											if (Main.rand.Next(2) == 0)
																											{
																												int num1028 = Dust.NewDust(base.Center, 8, 8, 86, 0f, 0f, 0, default(Color), 1f);
																												Main.dust[num1028].position = base.Center;
																												Main.dust[num1028].velocity = this.velocity;
																												Main.dust[num1028].noGravity = true;
																												Main.dust[num1028].scale = 1.5f;
																												if (flag62)
																												{
																													Main.dust[num1028].customData = Main.projectile[(int)this.ai[1]];
																												}
																											}
																											this.alpha = 255;
																											return;
																										}
																										this.Kill();
																										return;
																									}
																								}
																								else if (this.aiStyle == 120)
																								{
																									Player player9 = Main.player[this.owner];
																									if (!player9.active)
																									{
																										this.active = false;
																										return;
																									}
																									bool flag63 = this.type == 623;
																									Vector2 vector147 = player9.Center;
																									float num1029 = 100f;
																									float num1030 = 300f;
																									float num1031 = 100f;
																									float num1032 = 100f;
																									if (flag63)
																									{
																										if (player9.dead)
																										{
																											player9.stardustGuardian = false;
																										}
																										if (player9.stardustGuardian)
																										{
																											this.timeLeft = 2;
																										}
																										num1029 = 150f;
																										num1030 = 250f;
																										num1031 = 200f;
																										vector147.X -= (float)((5 + player9.width / 2) * player9.direction);
																										vector147.Y -= 25f;
																										Lighting.AddLight(base.Center, 0.9f, 0.9f, 0.7f);
																										if (this.ai[0] != 3f && this.alpha == 255)
																										{
																											this.alpha = 0;
																											int num3;
																											for (int num1033 = 0; num1033 < 30; num1033 = num3 + 1)
																											{
																												int num1034 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 200, default(Color), 1.7f);
																												Main.dust[num1034].noGravity = true;
																												Dust dust = Main.dust[num1034];
																												dust.velocity *= 3f;
																												Main.dust[num1034].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																												num1034 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
																												dust = Main.dust[num1034];
																												dust.velocity *= 2f;
																												Main.dust[num1034].noGravity = true;
																												Main.dust[num1034].fadeIn = 2.5f;
																												Main.dust[num1034].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																												num3 = num1033;
																											}
																										}
																										if (this.localAI[0] > 0f)
																										{
																											float[] var_2_2EFDC_cp_0 = this.localAI;
																											int var_2_2EFDC_cp_1 = 0;
																											float num73 = var_2_2EFDC_cp_0[var_2_2EFDC_cp_1];
																											var_2_2EFDC_cp_0[var_2_2EFDC_cp_1] = num73 - 1f;
																										}
																									}
																									if (this.ai[0] != 0f)
																									{
																										Main.player[this.owner].tankPet = this.whoAmI;
																										Main.player[this.owner].tankPetReset = false;
																									}
																									if (this.ai[0] == 0f)
																									{
																										if (player9.HasMinionRestTarget)
																										{
																											this.ai[0] = 3f;
																											this.netUpdate = true;
																										}
																										base.Center = Vector2.Lerp(base.Center, vector147, 0.2f);
																										this.velocity *= 0.8f;
																										this.direction = (this.spriteDirection = player9.direction);
																										if (flag63)
																										{
																											int num3 = this.frameCounter + 1;
																											this.frameCounter = num3;
																											if (num3 >= 9)
																											{
																												this.frameCounter = 0;
																												num3 = this.frame + 1;
																												this.frame = num3;
																												if (num3 >= Main.projFrames[this.type] - 4)
																												{
																													this.frame = 0;
																												}
																											}
																										}
																									}
																									else if (this.ai[0] == 1f)
																									{
																										if (player9.HasMinionRestTarget)
																										{
																											vector147 = player9.MinionRestTargetPoint;
																										}
																										else
																										{
																											this.ai[0] = 0f;
																											this.netUpdate = true;
																										}
																										int num1035 = -1;
																										bool flag64 = true;
																										if (flag63 && Math.Abs(base.Center.X - vector147.X) > num1029 + 20f)
																										{
																											flag64 = false;
																										}
																										if (flag64)
																										{
																											int num3;
																											for (int num1036 = 0; num1036 < 200; num1036 = num3 + 1)
																											{
																												NPC nPC12 = Main.npc[num1036];
																												if (nPC12.CanBeChasedBy(this, false))
																												{
																													float num1037 = base.Distance(nPC12.Center);
																													if (num1037 < num1030)
																													{
																														num1035 = num1036;
																													}
																												}
																												num3 = num1036;
																											}
																										}
																										if (num1035 != -1)
																										{
																											NPC nPC13 = Main.npc[num1035];
																											this.direction = (this.spriteDirection = (nPC13.Center.X > base.Center.X).ToDirectionInt());
																											float num1038 = Math.Abs(vector147.X - base.Center.X);
																											float num1039 = Math.Abs(nPC13.Center.X - base.Center.X);
																											float num1040 = Math.Abs(vector147.Y - base.Center.Y);
																											float num1041 = Math.Abs(nPC13.Center.Y - base.Bottom.Y);
																											float num1042 = (float)(nPC13.Center.Y > base.Bottom.Y).ToDirectionInt();
																											if ((num1038 < num1029 || (vector147.X - base.Center.X) * (float)this.direction < 0f) && num1039 > 20f && num1039 < num1029 - num1038 + 100f)
																											{
																												this.velocity.X = this.velocity.X + 0.1f * (float)this.direction;
																											}
																											else
																											{
																												this.velocity.X = this.velocity.X * 0.7f;
																											}
																											if ((num1040 < num1032 || (vector147.Y - base.Bottom.Y) * num1042 < 0f) && num1041 > 10f && num1041 < num1032 - num1040 + 10f)
																											{
																												this.velocity.Y = this.velocity.Y + 0.1f * num1042;
																											}
																											else
																											{
																												this.velocity.Y = this.velocity.Y * 0.7f;
																											}
																											if (this.localAI[0] == 0f && this.owner == Main.myPlayer && num1039 < num1031)
																											{
																												this.ai[1] = 0f;
																												this.ai[0] = 2f;
																												this.netUpdate = true;
																												this.localAI[0] = 90f;
																											}
																										}
																										else
																										{
																											if (Math.Abs(vector147.X - base.Center.X) > num1029 + 40f)
																											{
																												this.ai[0] = 3f;
																												this.netUpdate = true;
																											}
																											else if (Math.Abs(vector147.X - base.Center.X) > 20f)
																											{
																												this.direction = (this.spriteDirection = (vector147.X > base.Center.X).ToDirectionInt());
																												this.velocity.X = this.velocity.X + 0.06f * (float)this.direction;
																											}
																											else
																											{
																												this.velocity.X = this.velocity.X * 0.8f;
																												this.direction = (this.spriteDirection = (player9.Center.X < base.Center.X).ToDirectionInt());
																											}
																											if (Math.Abs(vector147.Y - base.Center.Y) > num1032)
																											{
																												this.ai[0] = 3f;
																												this.netUpdate = true;
																											}
																											else if (Math.Abs(vector147.Y - base.Center.Y) > 10f)
																											{
																												this.velocity.Y = this.velocity.Y + 0.06f * (float)Math.Sign(vector147.Y - base.Center.Y);
																											}
																											else
																											{
																												this.velocity.Y = this.velocity.Y * 0.8f;
																											}
																										}
																										if (flag63)
																										{
																											int num3 = this.frameCounter + 1;
																											this.frameCounter = num3;
																											if (num3 >= 9)
																											{
																												this.frameCounter = 0;
																												num3 = this.frame + 1;
																												this.frame = num3;
																												if (num3 >= Main.projFrames[this.type] - 4)
																												{
																													this.frame = 0;
																												}
																											}
																										}
																									}
																									else if (this.ai[0] == 2f)
																									{
																										this.velocity.X = this.velocity.X * 0.9f;
																										float[] var_2_2F6FC_cp_0 = this.ai;
																										int var_2_2F6FC_cp_1 = 1;
																										float num73 = var_2_2F6FC_cp_0[var_2_2F6FC_cp_1];
																										var_2_2F6FC_cp_0[var_2_2F6FC_cp_1] = num73 + 1f;
																										float num1043 = 0f;
																										if (flag63)
																										{
																											num1043 = 20f;
																											if (this.ai[1] == 10f && this.owner == Main.myPlayer)
																											{
																												int num1044 = (int)(20f * Main.player[this.owner].minionDamage);
																												Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 624, num1044, 6f, this.owner, 0f, 5f);
																											}
																										}
																										if (this.ai[1] >= num1043)
																										{
																											this.ai[1] = 0f;
																											this.ai[0] = 1f;
																											this.netUpdate = true;
																										}
																										if (flag63)
																										{
																											if (this.frame < Main.projFrames[this.type] - 4)
																											{
																												this.frame = Main.projFrames[this.type] - 1;
																												this.frameCounter = 0;
																											}
																											int num3 = this.frameCounter + 1;
																											this.frameCounter = num3;
																											if (num3 >= 5)
																											{
																												this.frameCounter = 0;
																												num3 = this.frame - 1;
																												this.frame = num3;
																												if (num3 < Main.projFrames[this.type] - 5)
																												{
																													this.frame = Main.projFrames[this.type] - 1;
																												}
																											}
																										}
																									}
																									if (this.ai[0] == 3f)
																									{
																										if (player9.HasMinionRestTarget)
																										{
																											vector147 = player9.MinionRestTargetPoint;
																										}
																										else
																										{
																											this.ai[0] = 0f;
																											this.netUpdate = true;
																										}
																										if (this.alpha == 0)
																										{
																											this.alpha = 255;
																											int num3;
																											for (int num1045 = 0; num1045 < 30; num1045 = num3 + 1)
																											{
																												int num1046 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 200, default(Color), 1.7f);
																												Main.dust[num1046].noGravity = true;
																												Dust dust = Main.dust[num1046];
																												dust.velocity *= 3f;
																												Main.dust[num1046].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																												num1046 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
																												dust = Main.dust[num1046];
																												dust.velocity *= 2f;
																												Main.dust[num1046].noGravity = true;
																												Main.dust[num1046].fadeIn = 2.5f;
																												Main.dust[num1046].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																												num3 = num1045;
																											}
																										}
																										else
																										{
																											int num3;
																											for (int num1047 = 0; num1047 < 2; num1047 = num3 + 1)
																											{
																												int num1048 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 200, default(Color), 1.7f);
																												Main.dust[num1048].noGravity = true;
																												Dust dust = Main.dust[num1048];
																												dust.velocity *= 3f;
																												Main.dust[num1048].noLight = true;
																												Main.dust[num1048].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																												num1048 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
																												dust = Main.dust[num1048];
																												dust.velocity *= 2f;
																												Main.dust[num1048].noGravity = true;
																												Main.dust[num1048].fadeIn = 2.5f;
																												Main.dust[num1048].noLight = true;
																												Main.dust[num1048].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																												num3 = num1047;
																											}
																										}
																										this.velocity *= 0.7f;
																										base.Center = Vector2.Lerp(base.Center, vector147, 0.2f);
																										if (base.Distance(vector147) < 10f)
																										{
																											this.ai[0] = 1f;
																											this.netUpdate = true;
																											return;
																										}
																									}
																								}
																								else if (this.aiStyle == 121)
																								{
																									Player player10 = Main.player[this.owner];
																									if ((int)Main.time % 120 == 0)
																									{
																										this.netUpdate = true;
																									}
																									if (!player10.active)
																									{
																										this.active = false;
																										return;
																									}
																									bool flag65 = this.type == 625;
																									bool flag66 = this.type == 625 || this.type == 626 || this.type == 627 || this.type == 628;
																									int num1049 = 10;
																									if (flag66)
																									{
																										if (player10.dead)
																										{
																											player10.stardustDragon = false;
																										}
																										if (player10.stardustDragon)
																										{
																											this.timeLeft = 2;
																										}
																										num1049 = 30;
																										if (Main.rand.Next(30) == 0)
																										{
																											int num1050 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 0, default(Color), 2f);
																											Main.dust[num1050].noGravity = true;
																											Main.dust[num1050].fadeIn = 2f;
																											Point point4 = Main.dust[num1050].position.ToTileCoordinates();
																											if (WorldGen.InWorld(point4.X, point4.Y, 5) && WorldGen.SolidTile(point4.X, point4.Y))
																											{
																												Main.dust[num1050].noLight = true;
																											}
																										}
																									}
																									if (flag65)
																									{
																										Vector2 center14 = player10.Center;
																										float num1051 = 700f;
																										float num1052 = 1000f;
																										int num1053 = -1;
																										if (base.Distance(center14) > 2000f)
																										{
																											base.Center = center14;
																											this.netUpdate = true;
																										}
																										bool flag67 = true;
																										if (flag67)
																										{
																											NPC ownerMinionAttackTargetNPC5 = this.OwnerMinionAttackTargetNPC;
																											if (ownerMinionAttackTargetNPC5 != null && ownerMinionAttackTargetNPC5.CanBeChasedBy(this, false))
																											{
																												float num1054 = base.Distance(ownerMinionAttackTargetNPC5.Center);
																												if (num1054 < num1051 * 2f)
																												{
																													num1053 = ownerMinionAttackTargetNPC5.whoAmI;
																													if (ownerMinionAttackTargetNPC5.boss)
																													{
																														int whoAmI = ownerMinionAttackTargetNPC5.whoAmI;
																													}
																													else
																													{
																														int whoAmI2 = ownerMinionAttackTargetNPC5.whoAmI;
																													}
																												}
																											}
																											if (num1053 < 0)
																											{
																												int num3;
																												for (int num1055 = 0; num1055 < 200; num1055 = num3 + 1)
																												{
																													NPC nPC14 = Main.npc[num1055];
																													if (nPC14.CanBeChasedBy(this, false) && player10.Distance(nPC14.Center) < num1052)
																													{
																														float num1056 = base.Distance(nPC14.Center);
																														if (num1056 < num1051)
																														{
																															num1053 = num1055;
																															if (nPC14.boss)
																															{
																															}
																														}
																													}
																													num3 = num1055;
																												}
																											}
																										}
																										if (num1053 != -1)
																										{
																											NPC nPC15 = Main.npc[num1053];
																											Vector2 vector148 = nPC15.Center - base.Center;
																											float num1057 = (float)(vector148.X > 0f).ToDirectionInt();
																											float num1058 = (float)(vector148.Y > 0f).ToDirectionInt();
																											float scaleFactor15 = 0.4f;
																											if (vector148.Length() < 600f)
																											{
																												scaleFactor15 = 0.6f;
																											}
																											if (vector148.Length() < 300f)
																											{
																												scaleFactor15 = 0.8f;
																											}
																											if (vector148.Length() > nPC15.Size.Length() * 0.75f)
																											{
																												this.velocity += Vector2.Normalize(vector148) * scaleFactor15 * 1.5f;
																												if (Vector2.Dot(this.velocity, vector148) < 0.25f)
																												{
																													this.velocity *= 0.8f;
																												}
																											}
																											float num1059 = 30f;
																											if (this.velocity.Length() > num1059)
																											{
																												this.velocity = Vector2.Normalize(this.velocity) * num1059;
																											}
																										}
																										else
																										{
																											float num1060 = 0.2f;
																											Vector2 vector149 = center14 - base.Center;
																											if (vector149.Length() < 200f)
																											{
																												num1060 = 0.12f;
																											}
																											if (vector149.Length() < 140f)
																											{
																												num1060 = 0.06f;
																											}
																											if (vector149.Length() > 100f)
																											{
																												if (Math.Abs(center14.X - base.Center.X) > 20f)
																												{
																													this.velocity.X = this.velocity.X + num1060 * (float)Math.Sign(center14.X - base.Center.X);
																												}
																												if (Math.Abs(center14.Y - base.Center.Y) > 10f)
																												{
																													this.velocity.Y = this.velocity.Y + num1060 * (float)Math.Sign(center14.Y - base.Center.Y);
																												}
																											}
																											else if (this.velocity.Length() > 2f)
																											{
																												this.velocity *= 0.96f;
																											}
																											if (Math.Abs(this.velocity.Y) < 1f)
																											{
																												this.velocity.Y = this.velocity.Y - 0.1f;
																											}
																											float num1061 = 15f;
																											if (this.velocity.Length() > num1061)
																											{
																												this.velocity = Vector2.Normalize(this.velocity) * num1061;
																											}
																										}
																										this.rotation = this.velocity.ToRotation() + 1.57079637f;
																										int direction = this.direction;
																										this.direction = (this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1));
																										if (direction != this.direction)
																										{
																											this.netUpdate = true;
																										}
																										float num1062 = MathHelper.Clamp(this.localAI[0], 0f, 50f);
																										this.position = base.Center;
																										this.scale = 1f + num1062 * 0.01f;
																										this.width = (this.height = (int)((float)num1049 * this.scale));
																										base.Center = this.position;
																										if (this.alpha > 0)
																										{
																											int num3;
																											for (int num1063 = 0; num1063 < 2; num1063 = num3 + 1)
																											{
																												int num1064 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0f, 0f, 100, default(Color), 2f);
																												Main.dust[num1064].noGravity = true;
																												Main.dust[num1064].noLight = true;
																												num3 = num1063;
																											}
																											this.alpha -= 42;
																											if (this.alpha < 0)
																											{
																												this.alpha = 0;
																												return;
																											}
																										}
																									}
																									else
																									{
																										bool flag68 = false;
																										Vector2 value57 = Vector2.Zero;
																										Vector2 vector150 = Vector2.Zero;
																										float num1065 = 0f;
																										float scaleFactor16 = 0f;
																										float scaleFactor17 = 1f;
																										if (this.ai[1] == 1f)
																										{
																											this.ai[1] = 0f;
																											this.netUpdate = true;
																										}
																										int byUUID = Projectile.GetByUUID(this.owner, (int)this.ai[0]);
																										if (flag66 && byUUID >= 0 && Main.projectile[byUUID].active && (Main.projectile[byUUID].type == 625 || Main.projectile[byUUID].type == 626 || Main.projectile[byUUID].type == 627))
																										{
																											flag68 = true;
																											value57 = Main.projectile[byUUID].Center;
																											vector150 = Main.projectile[byUUID].velocity;
																											num1065 = Main.projectile[byUUID].rotation;
																											float num1066 = MathHelper.Clamp(Main.projectile[byUUID].scale, 0f, 50f);
																											scaleFactor17 = num1066;
																											scaleFactor16 = 16f;
																											int num1067 = Main.projectile[byUUID].alpha;
																											Main.projectile[byUUID].localAI[0] = this.localAI[0] + 1f;
																											if (Main.projectile[byUUID].type != 625)
																											{
																												Main.projectile[byUUID].localAI[1] = (float)this.whoAmI;
																											}
																											if (this.owner == Main.myPlayer && Main.projectile[byUUID].type == 625 && this.type == 628)
																											{
																												Main.projectile[byUUID].Kill();
																												this.Kill();
																												return;
																											}
																										}
																										if (!flag68)
																										{
																											return;
																										}
																										if (this.alpha > 0)
																										{
																											int num3;
																											for (int num1068 = 0; num1068 < 2; num1068 = num3 + 1)
																											{
																												int num1069 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 2f);
																												Main.dust[num1069].noGravity = true;
																												Main.dust[num1069].noLight = true;
																												num3 = num1068;
																											}
																										}
																										this.alpha -= 42;
																										if (this.alpha < 0)
																										{
																											this.alpha = 0;
																										}
																										this.velocity = Vector2.Zero;
																										Vector2 vector151 = value57 - base.Center;
																										if (num1065 != this.rotation)
																										{
																											float num1070 = MathHelper.WrapAngle(num1065 - this.rotation);
																											vector151 = vector151.RotatedBy((double)(num1070 * 0.1f), default(Vector2));
																										}
																										this.rotation = vector151.ToRotation() + 1.57079637f;
																										this.position = base.Center;
																										this.scale = scaleFactor17;
																										this.width = (this.height = (int)((float)num1049 * this.scale));
																										base.Center = this.position;
																										if (vector151 != Vector2.Zero)
																										{
																											base.Center = value57 - Vector2.Normalize(vector151) * scaleFactor16 * scaleFactor17;
																										}
																										this.spriteDirection = ((vector151.X > 0f) ? 1 : -1);
																										return;
																									}
																								}
																								else if (this.aiStyle == 122)
																								{
																									int num1071 = (int)this.ai[0];
																									bool flag69 = false;
																									if (num1071 == -1 || !Main.npc[num1071].active)
																									{
																										flag69 = true;
																									}
																									if (flag69)
																									{
																										if (this.type == 629)
																										{
																											this.Kill();
																											return;
																										}
																										if (this.type == 631 && this.ai[0] != -1f)
																										{
																											this.ai[0] = -1f;
																											this.netUpdate = true;
																										}
																									}
																									if (!flag69 && base.Hitbox.Intersects(Main.npc[num1071].Hitbox))
																									{
																										this.Kill();
																										if (this.type == 631)
																										{
																											this.localAI[1] = 1f;
																											this.Damage();
																										}
																										return;
																									}
																									if (this.type == 629)
																									{
																										Vector2 value58 = Main.npc[num1071].Center - base.Center;
																										this.velocity = Vector2.Normalize(value58) * 5f;
																										Dust.QuickDust(base.Center, Color.Red);
																									}
																									if (this.type == 631)
																									{
																										if (this.ai[1] > 0f)
																										{
																											float[] var_2_30AB6_cp_0 = this.ai;
																											int var_2_30AB6_cp_1 = 1;
																											float num73 = var_2_30AB6_cp_0[var_2_30AB6_cp_1];
																											var_2_30AB6_cp_0[var_2_30AB6_cp_1] = num73 - 1f;
																											this.velocity = Vector2.Zero;
																											return;
																										}
																										if (flag69)
																										{
																											if (this.velocity == Vector2.Zero)
																											{
																												this.Kill();
																											}
																											this.tileCollide = true;
																											this.alpha += 10;
																											if (this.alpha > 255)
																											{
																												this.Kill();
																											}
																										}
																										else
																										{
																											Vector2 value59 = Main.npc[num1071].Center - base.Center;
																											this.velocity = Vector2.Normalize(value59) * 12f;
																											this.alpha -= 15;
																											if (this.alpha < 0)
																											{
																												this.alpha = 0;
																											}
																										}
																										this.rotation = this.velocity.ToRotation() - 1.57079637f;
																										return;
																									}
																								}
																								else if (this.aiStyle == 123)
																								{
																									bool flag70 = this.type == 641;
																									bool flag71 = this.type == 643;
																									float num1072 = 1000f;
																									this.velocity = Vector2.Zero;
																									if (flag70)
																									{
																										this.alpha -= 5;
																										if (this.alpha < 0)
																										{
																											this.alpha = 0;
																										}
																										if (this.direction == 0)
																										{
																											this.direction = Main.player[this.owner].direction;
																										}
																										this.rotation -= (float)this.direction * 6.28318548f / 120f;
																										this.scale = this.Opacity;
																										Lighting.AddLight(base.Center, new Vector3(0.3f, 0.9f, 0.7f) * this.Opacity);
																										if (Main.rand.Next(2) == 0)
																										{
																											Vector2 vector152 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																											Dust dust32 = Main.dust[Dust.NewDust(base.Center - vector152 * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																											dust32.noGravity = true;
																											dust32.position = base.Center - vector152 * (float)Main.rand.Next(10, 21);
																											dust32.velocity = vector152.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																											dust32.scale = 0.5f + Main.rand.NextFloat();
																											dust32.fadeIn = 0.5f;
																											dust32.customData = base.Center;
																										}
																										if (Main.rand.Next(2) == 0)
																										{
																											Vector2 vector153 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																											Dust dust33 = Main.dust[Dust.NewDust(base.Center - vector153 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																											dust33.noGravity = true;
																											dust33.position = base.Center - vector153 * 30f;
																											dust33.velocity = vector153.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																											dust33.scale = 0.5f + Main.rand.NextFloat();
																											dust33.fadeIn = 0.5f;
																											dust33.customData = base.Center;
																										}
																										if (this.ai[0] < 0f)
																										{
																											Vector2 center15 = base.Center;
																											int num1073 = Dust.NewDust(center15 - Vector2.One * 8f, 16, 16, 229, this.velocity.X / 2f, this.velocity.Y / 2f, 0, default(Color), 1f);
																											Dust dust = Main.dust[num1073];
																											dust.velocity *= 2f;
																											Main.dust[num1073].noGravity = true;
																											Main.dust[num1073].scale = Utils.SelectRandom<float>(Main.rand, new float[]
																											{
																												0.8f,
																												1.65f
																											});
																											Main.dust[num1073].customData = this;
																										}
																									}
																									if (flag71)
																									{
																										this.alpha -= 5;
																										if (this.alpha < 0)
																										{
																											this.alpha = 0;
																										}
																										if (this.direction == 0)
																										{
																											this.direction = Main.player[this.owner].direction;
																										}
																										int num3 = this.frameCounter + 1;
																										this.frameCounter = num3;
																										if (num3 >= 3)
																										{
																											this.frameCounter = 0;
																											num3 = this.frame + 1;
																											this.frame = num3;
																											if (num3 >= Main.projFrames[this.type])
																											{
																												this.frame = 0;
																											}
																										}
																										if (this.alpha == 0 && Main.rand.Next(15) == 0)
																										{
																											Dust dust34 = Main.dust[Dust.NewDust(base.Top, 0, 0, 261, 0f, 0f, 100, default(Color), 1f)];
																											dust34.velocity.X = 0f;
																											dust34.noGravity = true;
																											dust34.fadeIn = 1f;
																											dust34.position = base.Center + Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (4f * Main.rand.NextFloat() + 26f);
																											dust34.scale = 0.5f;
																										}
																										float[] var_2_31123_cp_0 = this.localAI;
																										int var_2_31123_cp_1 = 0;
																										float num73 = var_2_31123_cp_0[var_2_31123_cp_1];
																										var_2_31123_cp_0[var_2_31123_cp_1] = num73 + 1f;
																										if (this.localAI[0] >= 60f)
																										{
																											this.localAI[0] = 0f;
																										}
																									}
																									if (this.ai[0] < 0f)
																									{
																										float[] var_2_31169_cp_0 = this.ai;
																										int var_2_31169_cp_1 = 0;
																										float num73 = var_2_31169_cp_0[var_2_31169_cp_1];
																										var_2_31169_cp_0[var_2_31169_cp_1] = num73 + 1f;
																										if (flag70)
																										{
																											this.ai[1] -= (float)this.direction * 0.3926991f / 50f;
																										}
																									}
																									if (this.ai[0] == 0f)
																									{
																										int num1074 = -1;
																										float num1075 = num1072;
																										NPC ownerMinionAttackTargetNPC6 = this.OwnerMinionAttackTargetNPC;
																										if (ownerMinionAttackTargetNPC6 != null && ownerMinionAttackTargetNPC6.CanBeChasedBy(this, false))
																										{
																											float num1076 = base.Distance(ownerMinionAttackTargetNPC6.Center);
																											if (num1076 < num1075 && Collision.CanHitLine(base.Center, 0, 0, ownerMinionAttackTargetNPC6.Center, 0, 0))
																											{
																												num1075 = num1076;
																												num1074 = ownerMinionAttackTargetNPC6.whoAmI;
																											}
																										}
																										if (num1074 < 0)
																										{
																											int num3;
																											for (int num1077 = 0; num1077 < 200; num1077 = num3 + 1)
																											{
																												NPC nPC16 = Main.npc[num1077];
																												if (nPC16.CanBeChasedBy(this, false))
																												{
																													float num1078 = base.Distance(nPC16.Center);
																													if (num1078 < num1075 && Collision.CanHitLine(base.Center, 0, 0, nPC16.Center, 0, 0))
																													{
																														num1075 = num1078;
																														num1074 = num1077;
																													}
																												}
																												num3 = num1077;
																											}
																										}
																										if (num1074 != -1)
																										{
																											this.ai[0] = 1f;
																											this.ai[1] = (float)num1074;
																											this.netUpdate = true;
																											return;
																										}
																									}
																									if (this.ai[0] > 0f)
																									{
																										int num1079 = (int)this.ai[1];
																										if (!Main.npc[num1079].CanBeChasedBy(this, false))
																										{
																											this.ai[0] = 0f;
																											this.ai[1] = 0f;
																											this.netUpdate = true;
																											return;
																										}
																										float[] var_2_31390_cp_0 = this.ai;
																										int var_2_31390_cp_1 = 0;
																										float num73 = var_2_31390_cp_0[var_2_31390_cp_1];
																										var_2_31390_cp_0[var_2_31390_cp_1] = num73 + 1f;
																										float num1080 = 30f;
																										if (flag71)
																										{
																											num1080 = 5f;
																										}
																										if (this.ai[0] >= num1080)
																										{
																											Vector2 vector154 = base.DirectionTo(Main.npc[num1079].Center);
																											if (vector154.HasNaNs())
																											{
																												vector154 = Vector2.UnitY;
																											}
																											float num1081 = vector154.ToRotation();
																											int num1082 = (vector154.X > 0f) ? 1 : -1;
																											if (flag70)
																											{
																												this.direction = num1082;
																												this.ai[0] = -60f;
																												this.ai[1] = num1081 + (float)num1082 * 3.14159274f / 16f;
																												this.netUpdate = true;
																												if (this.owner == Main.myPlayer)
																												{
																													Projectile.NewProjectile(base.Center.X, base.Center.Y, vector154.X, vector154.Y, 642, this.damage, this.knockBack, this.owner, 0f, (float)this.whoAmI);
																												}
																											}
																											if (flag71)
																											{
																												this.direction = num1082;
																												this.ai[0] = -20f;
																												this.netUpdate = true;
																												if (this.owner == Main.myPlayer)
																												{
																													Vector2 vector155 = Main.npc[num1079].position + Main.npc[num1079].Size * Utils.RandomVector2(Main.rand, 0f, 1f) - base.Center;
																													int num3;
																													for (int num1083 = 0; num1083 < 3; num1083 = num3 + 1)
																													{
																														Vector2 vector156 = base.Center + vector155;
																														if (num1083 > 0)
																														{
																															vector156 = base.Center + vector155.RotatedByRandom(0.78539818525314331) * (Main.rand.NextFloat() * 0.5f + 0.75f);
																														}
																														float x4 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
																														Projectile.NewProjectile(vector156.X, vector156.Y, 0f, 0f, 644, this.damage, this.knockBack, this.owner, x4, (float)this.whoAmI);
																														num3 = num1083;
																													}
																													return;
																												}
																											}
																										}
																									}
																								}
																								else if (this.aiStyle == 124)
																								{
																									Player player11 = Main.player[this.owner];
																									if (player11.dead)
																									{
																										this.Kill();
																										return;
																									}
																									if (Main.myPlayer == this.owner && player11.suspiciouslookingTentacle)
																									{
																										this.timeLeft = 2;
																									}
																									this.direction = (this.spriteDirection = player11.direction);
																									Vector3 v3_ = new Vector3(0.5f, 0.9f, 1f) * 1.5f;
																									DelegateMethods.v3_1 = v3_;
																									Utils.PlotTileLine(base.Center, base.Center + this.velocity * 6f, 20f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
																									Utils.PlotTileLine(base.Left, base.Right, 20f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
																									Utils.PlotTileLine(player11.Center, player11.Center + player11.velocity * 6f, 40f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
																									Utils.PlotTileLine(player11.Left, player11.Right, 40f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
																									Vector2 value60 = new Vector2((float)(player11.direction * 30), -20f);
																									Vector2 vector157 = player11.MountedCenter + value60;
																									float num1084 = Vector2.Distance(base.Center, vector157);
																									if (num1084 > 1000f)
																									{
																										base.Center = player11.Center + value60;
																									}
																									Vector2 vector158 = vector157 - base.Center;
																									float num1085 = 4f;
																									if (num1084 < num1085)
																									{
																										this.velocity *= 0.25f;
																									}
																									if (vector158 != Vector2.Zero)
																									{
																										if (vector158.Length() < num1085)
																										{
																											this.velocity = vector158;
																										}
																										else
																										{
																											this.velocity = vector158 * 0.1f;
																										}
																									}
																									int num3;
																									if (this.velocity.Length() > 6f)
																									{
																										float num1086 = this.velocity.ToRotation() + 1.57079637f;
																										if (Math.Abs(this.rotation - num1086) >= 3.14159274f)
																										{
																											if (num1086 < this.rotation)
																											{
																												this.rotation -= 6.28318548f;
																											}
																											else
																											{
																												this.rotation += 6.28318548f;
																											}
																										}
																										float num1087 = 12f;
																										this.rotation = (this.rotation * (num1087 - 1f) + num1086) / num1087;
																										num3 = this.frameCounter + 1;
																										this.frameCounter = num3;
																										if (num3 >= 4)
																										{
																											this.frameCounter = 0;
																											num3 = this.frame + 1;
																											this.frame = num3;
																											if (num3 >= Main.projFrames[this.type])
																											{
																												this.frame = 0;
																											}
																										}
																									}
																									else
																									{
																										if (this.rotation > 3.14159274f)
																										{
																											this.rotation -= 6.28318548f;
																										}
																										if (this.rotation > -0.005f && this.rotation < 0.005f)
																										{
																											this.rotation = 0f;
																										}
																										else
																										{
																											this.rotation *= 0.96f;
																										}
																										num3 = this.frameCounter + 1;
																										this.frameCounter = num3;
																										if (num3 >= 6)
																										{
																											this.frameCounter = 0;
																											num3 = this.frame + 1;
																											this.frame = num3;
																											if (num3 >= Main.projFrames[this.type])
																											{
																												this.frame = 0;
																											}
																										}
																									}
																									if (this.ai[0] > 0f)
																									{
																										float[] var_2_31A95_cp_0 = this.ai;
																										int var_2_31A95_cp_1 = 0;
																										float num73 = var_2_31A95_cp_0[var_2_31A95_cp_1] + 1f;
																										var_2_31A95_cp_0[var_2_31A95_cp_1] = num73;
																										if (num73 >= 60f)
																										{
																											this.ai[0] = 0f;
																											this.ai[1] = 0f;
																										}
																									}
																									if (Main.rand.Next(15) == 0)
																									{
																										float num1088 = -1f;
																										int num1089 = 17;
																										if ((base.Center - player11.Center).Length() < (float)Main.screenWidth)
																										{
																											int num1090 = (int)base.Center.X / 16;
																											int num1091 = (int)base.Center.Y / 16;
																											num1090 = (int)MathHelper.Clamp((float)num1090, (float)(num1089 + 1), (float)(Main.maxTilesX - num1089 - 1));
																											num1091 = (int)MathHelper.Clamp((float)num1091, (float)(num1089 + 1), (float)(Main.maxTilesY - num1089 - 1));
																											for (int num1092 = num1090 - num1089; num1092 <= num1090 + num1089; num1092 = num3 + 1)
																											{
																												for (int num1093 = num1091 - num1089; num1093 <= num1091 + num1089; num1093 = num3 + 1)
																												{
																													int num1094 = Main.rand.Next(8);
																													if (num1094 < 4)
																													{
																														Vector2 vector159 = new Vector2((float)(num1090 - num1092), (float)(num1091 - num1093));
																														if (vector159.Length() < (float)num1089 && Main.tile[num1092, num1093] != null && Main.tile[num1092, num1093].active())
																														{
																															bool flag72 = false;
																															if (Main.tile[num1092, num1093].type == 185 && Main.tile[num1092, num1093].frameY == 18)
																															{
																																if (Main.tile[num1092, num1093].frameX >= 576 && Main.tile[num1092, num1093].frameX <= 882)
																																{
																																	flag72 = true;
																																}
																															}
																															else if (Main.tile[num1092, num1093].type == 186 && Main.tile[num1092, num1093].frameX >= 864 && Main.tile[num1092, num1093].frameX <= 1170)
																															{
																																flag72 = true;
																															}
																															if (flag72 || Main.tileSpelunker[(int)Main.tile[num1092, num1093].type] || (Main.tileAlch[(int)Main.tile[num1092, num1093].type] && Main.tile[num1092, num1093].type != 82))
																															{
																																float num1095 = base.Distance(new Vector2((float)(num1092 * 16 + 8), (float)(num1093 * 16 + 8)));
																																if (num1095 < num1088 || num1088 == -1f)
																																{
																																	num1088 = num1095;
																																	this.ai[0] = 1f;
																																	this.ai[1] = base.AngleTo(new Vector2((float)(num1092 * 16 + 8), (float)(num1093 * 16 + 8)));
																																}
																																if (num1094 < 2)
																																{
																																	int num1096 = Dust.NewDust(new Vector2((float)(num1092 * 16), (float)(num1093 * 16)), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
																																	Main.dust[num1096].fadeIn = 0.75f;
																																	Dust dust = Main.dust[num1096];
																																	dust.velocity *= 0.1f;
																																}
																															}
																														}
																													}
																													num3 = num1093;
																												}
																												num3 = num1092;
																											}
																										}
																									}
																									float f3 = this.localAI[0] % 6.28318548f - 3.14159274f;
																									float num1097 = (float)Math.IEEERemainder((double)this.localAI[1], 1.0);
																									if (num1097 < 0f)
																									{
																										num1097 += 1f;
																									}
																									float num1098 = (float)Math.Floor((double)this.localAI[1]);
																									float max = 0.999f;
																									int num1099 = 0;
																									float amount2 = 0.1f;
																									bool flag73 = player11.velocity.Length() > 3f;
																									int num1100 = -1;
																									int num1101 = -1;
																									float num1102 = 300f;
																									float num1103 = 500f;
																									for (int num1104 = 0; num1104 < 200; num1104 = num3 + 1)
																									{
																										NPC nPC17 = Main.npc[num1104];
																										if (nPC17.active && nPC17.chaseable && !nPC17.dontTakeDamage && !nPC17.immortal)
																										{
																											float num1105 = base.Distance(nPC17.Center);
																											if (nPC17.friendly || nPC17.lifeMax <= 5)
																											{
																												if (num1105 < num1102 && !flag73)
																												{
																													num1102 = num1105;
																													num1101 = num1104;
																												}
																											}
																											else if (num1105 < num1103)
																											{
																												num1103 = num1105;
																												num1100 = num1104;
																											}
																										}
																										num3 = num1104;
																									}
																									float num1106;
																									if (flag73)
																									{
																										num1106 = base.AngleTo(base.Center + player11.velocity);
																										num1099 = 1;
																										num1097 = MathHelper.Clamp(num1097 + 0.05f, 0f, max);
																										num1098 += (float)Math.Sign(-10f - num1098);
																									}
																									else if (num1100 != -1)
																									{
																										num1106 = base.AngleTo(Main.npc[num1100].Center);
																										num1099 = 2;
																										num1097 = MathHelper.Clamp(num1097 + 0.05f, 0f, max);
																										num1098 += (float)Math.Sign(-12f - num1098);
																									}
																									else if (num1101 != -1)
																									{
																										num1106 = base.AngleTo(Main.npc[num1101].Center);
																										num1099 = 3;
																										num1097 = MathHelper.Clamp(num1097 + 0.05f, 0f, max);
																										num1098 += (float)Math.Sign(6f - num1098);
																									}
																									else if (this.ai[0] > 0f)
																									{
																										num1106 = this.ai[1];
																										num1097 = MathHelper.Clamp(num1097 + (float)Math.Sign(0.75f - num1097) * 0.05f, 0f, max);
																										num1099 = 4;
																										num1098 += (float)Math.Sign(10f - num1098);
																										if (Main.rand.Next(10) == 0)
																										{
																											int num1107 = Dust.NewDust(base.Center + f3.ToRotationVector2() * 6f * num1097 - Vector2.One * 4f, 8, 8, 204, 0f, 0f, 150, default(Color), 0.3f);
																											Main.dust[num1107].fadeIn = 0.75f;
																											Dust dust = Main.dust[num1107];
																											dust.velocity *= 0.1f;
																										}
																									}
																									else
																									{
																										num1106 = ((player11.direction == 1) ? 0f : 3.14160275f);
																										num1097 = MathHelper.Clamp(num1097 + (float)Math.Sign(0.75f - num1097) * 0.05f, 0f, max);
																										num1098 += (float)Math.Sign(0f - num1098);
																										amount2 = 0.12f;
																									}
																									Vector2 value61 = num1106.ToRotationVector2();
																									num1106 = Vector2.Lerp(f3.ToRotationVector2(), value61, amount2).ToRotation();
																									this.localAI[0] = num1106 + (float)num1099 * 6.28318548f + 3.14159274f;
																									this.localAI[1] = num1098 + num1097;
																									return;
																								}
																								else
																								{
																									if (this.aiStyle == 125)
																									{
																										Player player12 = Main.player[this.owner];
																										if (Main.myPlayer == this.owner)
																										{
																											if (this.localAI[1] > 0f)
																											{
																												float[] var_2_3251A_cp_0 = this.localAI;
																												int var_2_3251A_cp_1 = 1;
																												float num73 = var_2_3251A_cp_0[var_2_3251A_cp_1];
																												var_2_3251A_cp_0[var_2_3251A_cp_1] = num73 - 1f;
																											}
																											if (player12.noItems || player12.CCed || player12.dead)
																											{
																												this.Kill();
																											}
																											else if (Main.mouseRight && Main.mouseRightRelease)
																											{
																												this.Kill();
																												player12.mouseInterface = true;
																												Main.blockMouse = true;
																											}
																											else if (!player12.channel)
																											{
																												if (this.localAI[0] == 0f)
																												{
																													this.localAI[0] = 1f;
																												}
																												this.Kill();
																											}
																											else if (this.localAI[1] == 0f)
																											{
																												Vector2 vector160 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
																												if (player12.gravDir == -1f)
																												{
																													vector160.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
																												}
																												if (vector160 != base.Center)
																												{
																													this.netUpdate = true;
																													base.Center = vector160;
																													this.localAI[1] = 1f;
																												}
																												if (this.ai[0] == 0f && this.ai[1] == 0f)
																												{
																													this.ai[0] = (float)((int)base.Center.X / 16);
																													this.ai[1] = (float)((int)base.Center.Y / 16);
																													this.netUpdate = true;
																													this.velocity = Vector2.Zero;
																												}
																											}
																											this.velocity = Vector2.Zero;
																											Point point5 = new Vector2(this.ai[0], this.ai[1]).ToPoint();
																											Point point6 = base.Center.ToTileCoordinates();
																											int num1108 = Math.Abs(point5.X - point6.X);
																											int num1109 = Math.Abs(point5.Y - point6.Y);
																											int num1110 = Math.Sign(point6.X - point5.X);
																											int num1111 = Math.Sign(point6.Y - point5.Y);
																											Point point7 = default(Point);
																											bool flag74 = false;
																											bool flag75 = player12.direction == 1;
																											int num1112;
																											int num1113;
																											int num1114;
																											if (flag75)
																											{
																												point7.X = point5.X;
																												num1112 = point5.Y;
																												num1113 = point6.Y;
																												num1114 = num1111;
																											}
																											else
																											{
																												point7.Y = point5.Y;
																												num1112 = point5.X;
																												num1113 = point6.X;
																												num1114 = num1110;
																											}
																											int num1115 = num1112;
																											while (num1115 != num1113 && !flag74)
																											{
																												if (flag75)
																												{
																													point7.Y = num1115;
																												}
																												else
																												{
																													point7.X = num1115;
																												}
																												if (WorldGen.InWorld(point7.X, point7.Y, 1))
																												{
																													Tile tile2 = Main.tile[point7.X, point7.Y];
																												}
																												num1115 += num1114;
																											}
																											if (flag75)
																											{
																												point7.Y = point6.Y;
																												num1112 = point5.X;
																												num1113 = point6.X;
																												num1114 = num1110;
																											}
																											else
																											{
																												point7.X = point6.X;
																												num1112 = point5.Y;
																												num1113 = point6.Y;
																												num1114 = num1111;
																											}
																											int num1116 = num1112;
																											while (num1116 != num1113 && !flag74)
																											{
																												if (!flag75)
																												{
																													point7.Y = num1116;
																												}
																												else
																												{
																													point7.X = num1116;
																												}
																												if (WorldGen.InWorld(point7.X, point7.Y, 1))
																												{
																													Tile tile2 = Main.tile[point7.X, point7.Y];
																												}
																												num1116 += num1114;
																											}
																										}
																										int num1117 = Math.Sign(player12.velocity.X);
																										if (num1117 != 0)
																										{
																											player12.ChangeDir(num1117);
																										}
																										player12.heldProj = this.whoAmI;
																										player12.itemTime = 2;
																										player12.itemAnimation = 2;
																										player12.itemRotation = 0f;
																										return;
																									}
																									if (this.aiStyle == 126)
																									{
																										int num1118 = Math.Sign(this.velocity.Y);
																										int num1119 = (num1118 == -1) ? 0 : 1;
																										if (this.ai[0] == 0f)
																										{
																											if (!Collision.SolidCollision(this.position + new Vector2(0f, (float)((num1118 == -1) ? (this.height - 48) : 0)), this.width, 48) && !Collision.WetCollision(this.position + new Vector2(0f, (float)((num1118 == -1) ? (this.height - 20) : 0)), this.width, 20))
																											{
																												this.velocity = new Vector2(0f, (float)Math.Sign(this.velocity.Y) * 0.001f);
																												this.ai[0] = 1f;
																												this.ai[1] = 0f;
																												this.timeLeft = 60;
																											}
																											float[] var_2_32BAD_cp_0 = this.ai;
																											int var_2_32BAD_cp_1 = 1;
																											float num73 = var_2_32BAD_cp_0[var_2_32BAD_cp_1];
																											var_2_32BAD_cp_0[var_2_32BAD_cp_1] = num73 + 1f;
																											if (this.ai[1] >= 60f)
																											{
																												this.Kill();
																											}
																											int num3;
																											for (int num1120 = 0; num1120 < 3; num1120 = num3 + 1)
																											{
																												int num1121 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
																												Main.dust[num1121].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
																												Main.dust[num1121].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
																												Main.dust[num1121].noGravity = true;
																												Main.dust[num1121].position = base.Center + new Vector2(0f, (float)(-(float)this.height / 2)).RotatedBy((double)this.rotation, default(Vector2)) * 1.1f;
																												num3 = num1120;
																											}
																										}
																										if (this.ai[0] == 1f)
																										{
																											this.velocity = new Vector2(0f, (float)Math.Sign(this.velocity.Y) * 0.001f);
																											if (num1118 != 0)
																											{
																												int num1122 = 16;
																												int num1123 = 320;
																												if (this.type == 670)
																												{
																													num1123 -= (int)Math.Abs(this.localAI[1]) * 64;
																												}
																												while (num1122 < num1123 && !Collision.SolidCollision(this.position + new Vector2(0f, (float)((num1118 == -1) ? (this.height - num1122 - 16) : 0)), this.width, num1122 + 16))
																												{
																													num1122 += 16;
																												}
																												if (num1118 == -1)
																												{
																													this.position.Y = this.position.Y + (float)this.height;
																													this.height = num1122;
																													this.position.Y = this.position.Y - (float)num1122;
																												}
																												else
																												{
																													this.height = num1122;
																												}
																											}
																											float[] var_2_32E30_cp_0 = this.ai;
																											int var_2_32E30_cp_1 = 1;
																											float num73 = var_2_32E30_cp_0[var_2_32E30_cp_1];
																											var_2_32E30_cp_0[var_2_32E30_cp_1] = num73 + 1f;
																											if (this.type == 670 && this.owner == Main.myPlayer && this.ai[1] == 12f && this.localAI[1] < 3f && this.localAI[1] > -3f)
																											{
																												if (this.localAI[1] == 0f)
																												{
																													int num1124 = Projectile.NewProjectile(base.Bottom + new Vector2(-50f, -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner, 0f, 0f);
																													Main.projectile[num1124].localAI[1] = this.localAI[1] - 1f;
																													num1124 = Projectile.NewProjectile(base.Bottom + new Vector2(50f, -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner, 0f, 0f);
																													Main.projectile[num1124].localAI[1] = this.localAI[1] + 1f;
																												}
																												else
																												{
																													int num1125 = Math.Sign(this.localAI[1]);
																													int num1126 = Projectile.NewProjectile(base.Bottom + new Vector2((float)(50 * num1125), -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner, 0f, 0f);
																													Main.projectile[num1126].localAI[1] = this.localAI[1] + (float)num1125;
																												}
																											}
																											if (this.ai[1] >= 60f)
																											{
																												this.Kill();
																											}
																											if (this.localAI[0] == 0f)
																											{
																												this.localAI[0] = 1f;
																												int num1127 = 0;
																												while ((float)num1127 < 60f)
																												{
																													int num1128 = Utils.SelectRandom<int>(Main.rand, new int[]
																													{
																														6,
																														259,
																														158
																													});
																													int num1129 = Dust.NewDust(this.position, this.width, this.height, num1128, 0f, -2.5f * (float)(-(float)num1118), 0, default(Color), 1f);
																													Main.dust[num1129].alpha = 200;
																													Dust dust = Main.dust[num1129];
																													dust.velocity *= new Vector2(0.3f, 2f);
																													Dust var_2_3311E_cp_0_cp_0 = Main.dust[num1129];
																													var_2_3311E_cp_0_cp_0.velocity.Y = var_2_3311E_cp_0_cp_0.velocity.Y + (float)(2 * num1118);
																													dust = Main.dust[num1129];
																													dust.scale += Main.rand.NextFloat();
																													Main.dust[num1129].position = new Vector2(base.Center.X, base.Center.Y + (float)this.height * 0.5f * (float)(-(float)num1118));
																													Main.dust[num1129].customData = num1119;
																													if (num1118 == -1 && Main.rand.Next(4) != 0)
																													{
																														Dust var_2_331DF_cp_0_cp_0 = Main.dust[num1129];
																														var_2_331DF_cp_0_cp_0.velocity.Y = var_2_331DF_cp_0_cp_0.velocity.Y - 0.2f;
																													}
																													int num3 = num1127;
																													num1127 = num3 + 1;
																												}
																												Main.PlaySound(SoundID.Item34, this.position);
																											}
																											if (num1118 == 1)
																											{
																												int num1130 = 0;
																												while ((float)num1130 < 9f)
																												{
																													int num1131 = Utils.SelectRandom<int>(Main.rand, new int[]
																													{
																														6,
																														259,
																														158
																													});
																													int num1132 = Dust.NewDust(this.position, this.width, this.height, num1131, 0f, -2.5f * (float)(-(float)num1118), 0, default(Color), 1f);
																													Main.dust[num1132].alpha = 200;
																													Dust dust = Main.dust[num1132];
																													dust.velocity *= new Vector2(0.3f, 2f);
																													Dust var_2_332F8_cp_0_cp_0 = Main.dust[num1132];
																													var_2_332F8_cp_0_cp_0.velocity.Y = var_2_332F8_cp_0_cp_0.velocity.Y + (float)(2 * num1118);
																													dust = Main.dust[num1132];
																													dust.scale += Main.rand.NextFloat();
																													Main.dust[num1132].position = new Vector2(base.Center.X, base.Center.Y + (float)this.height * 0.5f * (float)(-(float)num1118));
																													Main.dust[num1132].customData = num1119;
																													if (num1118 == -1 && Main.rand.Next(4) != 0)
																													{
																														Dust var_2_333B9_cp_0_cp_0 = Main.dust[num1132];
																														var_2_333B9_cp_0_cp_0.velocity.Y = var_2_333B9_cp_0_cp_0.velocity.Y - 0.2f;
																													}
																													int num3 = num1130;
																													num1130 = num3 + 1;
																												}
																											}
																											int num1133 = (int)(this.ai[1] / 60f * (float)this.height) * 3;
																											if (num1133 > this.height)
																											{
																												num1133 = this.height;
																											}
																											Vector2 position = this.position + ((num1118 == -1) ? new Vector2(0f, (float)(this.height - num1133)) : Vector2.Zero);
																											Vector2 vector161 = this.position + ((num1118 == -1) ? new Vector2(0f, (float)this.height) : Vector2.Zero);
																											int num1134 = 0;
																											while ((float)num1134 < 6f)
																											{
																												if (Main.rand.Next(3) < 2)
																												{
																													int num1135 = Dust.NewDust(position, this.width, num1133, 6, 0f, 0f, 90, default(Color), 2.5f);
																													Main.dust[num1135].noGravity = true;
																													Main.dust[num1135].fadeIn = 1f;
																													if (Main.dust[num1135].velocity.Y > 0f)
																													{
																														Dust var_2_3353B_cp_0_cp_0 = Main.dust[num1135];
																														var_2_3353B_cp_0_cp_0.velocity.Y = var_2_3353B_cp_0_cp_0.velocity.Y * -1f;
																													}
																													if (Main.rand.Next(6) < 3)
																													{
																														Main.dust[num1135].position.Y = MathHelper.Lerp(Main.dust[num1135].position.Y, vector161.Y, 0.5f);
																														Dust dust = Main.dust[num1135];
																														dust.velocity *= 5f;
																														Dust var_2_335D4_cp_0_cp_0 = Main.dust[num1135];
																														var_2_335D4_cp_0_cp_0.velocity.Y = var_2_335D4_cp_0_cp_0.velocity.Y - 3f;
																														Main.dust[num1135].position.X = base.Center.X;
																														Main.dust[num1135].noGravity = false;
																														Main.dust[num1135].noLight = true;
																														Main.dust[num1135].fadeIn = 0.4f;
																														dust = Main.dust[num1135];
																														dust.scale *= 0.3f;
																													}
																													else
																													{
																														Main.dust[num1135].velocity = base.DirectionFrom(Main.dust[num1135].position) * Main.dust[num1135].velocity.Length() * 0.25f;
																													}
																													Dust var_2_336C1_cp_0_cp_0 = Main.dust[num1135];
																													var_2_336C1_cp_0_cp_0.velocity.Y = var_2_336C1_cp_0_cp_0.velocity.Y * (float)(-(float)num1118);
																													Main.dust[num1135].customData = num1119;
																												}
																												int num3 = num1134;
																												num1134 = num3 + 1;
																											}
																											int num1136 = 0;
																											while ((float)num1136 < 6f)
																											{
																												if (Main.rand.NextFloat() >= 0.5f)
																												{
																													int num1137 = Utils.SelectRandom<int>(Main.rand, new int[]
																													{
																														6,
																														259,
																														158
																													});
																													int num1138 = Dust.NewDust(position, this.width, num1133, num1137, 0f, -2.5f * (float)(-(float)num1118), 0, default(Color), 1f);
																													Main.dust[num1138].alpha = 200;
																													Dust dust = Main.dust[num1138];
																													dust.velocity *= new Vector2(0.6f, 1.5f);
																													dust = Main.dust[num1138];
																													dust.scale += Main.rand.NextFloat();
																													if (num1118 == -1 && Main.rand.Next(4) != 0)
																													{
																														Dust var_2_3382D_cp_0_cp_0 = Main.dust[num1138];
																														var_2_3382D_cp_0_cp_0.velocity.Y = var_2_3382D_cp_0_cp_0.velocity.Y - 0.2f;
																													}
																													Main.dust[num1138].customData = num1119;
																												}
																												int num3 = num1136;
																												num1136 = num3 + 1;
																											}
																											return;
																										}
																									}
																									else if (this.aiStyle == 127)
																									{
																										float num1139 = 900f;
																										if (this.type == 657)
																										{
																											num1139 = 300f;
																										}
																										if (this.soundDelay == 0)
																										{
																											this.soundDelay = -1;
																											Main.PlaySound(SoundID.Item82, base.Center);
																										}
																										float[] var_2_338D4_cp_0 = this.ai;
																										int var_2_338D4_cp_1 = 0;
																										float num73 = var_2_338D4_cp_0[var_2_338D4_cp_1];
																										var_2_338D4_cp_0[var_2_338D4_cp_1] = num73 + 1f;
																										if (this.ai[0] >= num1139)
																										{
																											this.Kill();
																										}
																										if (this.type == 656 && this.localAI[0] >= 30f)
																										{
																											this.damage = 0;
																											if (this.ai[0] < num1139 - 120f)
																											{
																												float num1140 = this.ai[0] % 60f;
																												this.ai[0] = num1139 - 120f + num1140;
																												this.netUpdate = true;
																											}
																										}
																										float num1141 = 15f;
																										float num1142 = 15f;
																										Point point8 = base.Center.ToTileCoordinates();
																										int num1143;
																										int num1144;
																										Collision.ExpandVertically(point8.X, point8.Y, out num1143, out num1144, (int)num1141, (int)num1142);
																										int num3 = num1143;
																										num1143 = num3 + 1;
																										num3 = num1144;
																										num1144 = num3 - 1;
																										Vector2 vector162 = new Vector2((float)point8.X, (float)num1143) * 16f + new Vector2(8f);
																										Vector2 vector163 = new Vector2((float)point8.X, (float)num1144) * 16f + new Vector2(8f);
																										Vector2 vector164 = Vector2.Lerp(vector162, vector163, 0.5f);
																										Vector2 vector165 = new Vector2(0f, vector163.Y - vector162.Y);
																										vector165.X = vector165.Y * 0.2f;
																										this.width = (int)(vector165.X * 0.65f);
																										this.height = (int)vector165.Y;
																										base.Center = vector164;
																										if (this.type == 656 && this.owner == Main.myPlayer)
																										{
																											bool flag76 = false;
																											Vector2 center16 = Main.player[this.owner].Center;
																											Vector2 top = Main.player[this.owner].Top;
																											for (float num1145 = 0f; num1145 < 1f; num1145 += 0.05f)
																											{
																												Vector2 position2 = Vector2.Lerp(vector162, vector163, num1145);
																												if (Collision.CanHitLine(position2, 0, 0, center16, 0, 0) || Collision.CanHitLine(position2, 0, 0, top, 0, 0))
																												{
																													flag76 = true;
																													break;
																												}
																											}
																											if (!flag76 && this.ai[0] < num1139 - 120f)
																											{
																												float num1146 = this.ai[0] % 60f;
																												this.ai[0] = num1139 - 120f + num1146;
																												this.netUpdate = true;
																											}
																										}
																										if (this.ai[0] < num1139 - 120f)
																										{
																											for (int num1147 = 0; num1147 < 1; num1147 = num3 + 1)
																											{
																												float value62 = -0.5f;
																												float value63 = 0.9f;
																												float amount3 = Main.rand.NextFloat();
																												Vector2 vector166 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value62, value63, amount3));
																												vector166.X *= MathHelper.Lerp(2.2f, 0.6f, amount3);
																												vector166.X *= -1f;
																												Vector2 value64 = new Vector2(6f, 10f);
																												Vector2 position3 = vector164 + vector165 * vector166 * 0.5f + value64;
																												Dust dust35 = Main.dust[Dust.NewDust(position3, 0, 0, 269, 0f, 0f, 0, default(Color), 1f)];
																												dust35.position = position3;
																												dust35.customData = vector164 + value64;
																												dust35.fadeIn = 1f;
																												dust35.scale = 0.3f;
																												if (vector166.X > -1.2f)
																												{
																													dust35.velocity.X = 1f + Main.rand.NextFloat();
																												}
																												dust35.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
																												num3 = num1147;
																											}
																											return;
																										}
																									}
																									else if (this.aiStyle == 128)
																									{
																										Color newColor3 = new Color(255, 255, 255);
																										if (this.soundDelay == 0)
																										{
																											this.soundDelay = -1;
																											Main.PlaySound(SoundID.Item60, base.Center);
																										}
																										int num3;
																										if (this.localAI[1] < 30f)
																										{
																											for (int num1148 = 0; num1148 < 1; num1148 = num3 + 1)
																											{
																												float value65 = -0.5f;
																												float value66 = 0.9f;
																												float amount4 = Main.rand.NextFloat();
																												Vector2 vector167 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value65, value66, amount4));
																												vector167.X *= MathHelper.Lerp(2.2f, 0.6f, amount4);
																												vector167.X *= -1f;
																												Vector2 value67 = new Vector2(2f, 10f);
																												Vector2 position4 = base.Center + new Vector2(60f, 200f) * vector167 * 0.5f + value67;
																												Dust dust36 = Main.dust[Dust.NewDust(position4, 0, 0, 269, 0f, 0f, 0, default(Color), 1f)];
																												dust36.position = position4;
																												dust36.customData = base.Center + value67;
																												dust36.fadeIn = 1f;
																												dust36.scale = 0.3f;
																												if (vector167.X > -1.2f)
																												{
																													dust36.velocity.X = 1f + Main.rand.NextFloat();
																												}
																												dust36.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
																												num3 = num1148;
																											}
																										}
																										if (this.localAI[0] == 0f)
																										{
																											this.localAI[0] = 0.8f;
																											this.direction = 1;
																											Point point9 = base.Center.ToTileCoordinates();
																											base.Center = new Vector2((float)(point9.X * 16 + 8), (float)(point9.Y * 16 + 8));
																										}
																										this.rotation = this.localAI[1] / 40f * 6.28318548f * (float)this.direction;
																										if (this.localAI[1] < 33f)
																										{
																											if (this.alpha > 0)
																											{
																												this.alpha -= 8;
																											}
																											if (this.alpha < 0)
																											{
																												this.alpha = 0;
																											}
																										}
																										if (this.localAI[1] > 103f)
																										{
																											if (this.alpha < 255)
																											{
																												this.alpha += 16;
																											}
																											if (this.alpha > 255)
																											{
																												this.alpha = 255;
																											}
																										}
																										if (this.alpha == 0)
																										{
																											Lighting.AddLight(base.Center, newColor3.ToVector3() * 0.5f);
																										}
																										for (int num1149 = 0; num1149 < 2; num1149 = num3 + 1)
																										{
																											if (Main.rand.Next(10) == 0)
																											{
																												Vector2 value68 = Vector2.UnitY.RotatedBy((double)((float)num1149 * 3.14159274f), default(Vector2)).RotatedBy((double)this.rotation, default(Vector2));
																												Dust dust37 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
																												dust37.noGravity = true;
																												dust37.noLight = true;
																												dust37.scale = this.Opacity * this.localAI[0];
																												dust37.position = base.Center;
																												dust37.velocity = value68 * 2.5f;
																											}
																											num3 = num1149;
																										}
																										for (int num1150 = 0; num1150 < 2; num1150 = num3 + 1)
																										{
																											if (Main.rand.Next(10) == 0)
																											{
																												Vector2 value69 = Vector2.UnitY.RotatedBy((double)((float)num1150 * 3.14159274f), default(Vector2));
																												Dust dust38 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
																												dust38.noGravity = true;
																												dust38.noLight = true;
																												dust38.scale = this.Opacity * this.localAI[0];
																												dust38.position = base.Center;
																												dust38.velocity = value69 * 2.5f;
																											}
																											num3 = num1150;
																										}
																										if (this.localAI[1] < 33f || this.localAI[1] > 87f)
																										{
																											this.scale = this.Opacity / 2f * this.localAI[0];
																										}
																										this.velocity = Vector2.Zero;
																										float[] var_2_343F7_cp_0 = this.localAI;
																										int var_2_343F7_cp_1 = 1;
																										float num73 = var_2_343F7_cp_0[var_2_343F7_cp_1];
																										var_2_343F7_cp_0[var_2_343F7_cp_1] = num73 + 1f;
																										if (this.localAI[1] == 60f && this.owner == Main.myPlayer)
																										{
																											int num1151 = 30;
																											if (Main.expertMode)
																											{
																												num1151 = 22;
																											}
																											Projectile.NewProjectile(base.Center, Vector2.Zero, 657, num1151, 3f, this.owner, 0f, 0f);
																										}
																										if (this.localAI[1] >= 120f)
																										{
																											this.Kill();
																											return;
																										}
																									}
																									else if (this.aiStyle == 129)
																									{
																										float num1152 = 10f;
																										float scaleFactor18 = 5f;
																										float num1153 = 40f;
																										if (this.type == 659)
																										{
																											num1152 = 3f;
																											scaleFactor18 = 7.5f;
																											num1153 = 1f;
																											float num73;
																											if (this.localAI[0] > 0f)
																											{
																												float[] var_2_34500_cp_0 = this.localAI;
																												int var_2_34500_cp_1 = 0;
																												num73 = var_2_34500_cp_0[var_2_34500_cp_1];
																												var_2_34500_cp_0[var_2_34500_cp_1] = num73 - 1f;
																											}
																											int num3;
																											if (this.localAI[0] == 0f && this.ai[0] < 0f && this.owner == Main.myPlayer)
																											{
																												this.localAI[0] = 5f;
																												for (int num1154 = 0; num1154 < 200; num1154 = num3 + 1)
																												{
																													NPC nPC18 = Main.npc[num1154];
																													if (nPC18.CanBeChasedBy(this, false))
																													{
																														bool flag77 = this.ai[0] < 0f || Main.npc[(int)this.ai[0]].Distance(base.Center) > nPC18.Distance(base.Center);
																														flag77 &= (nPC18.Distance(base.Center) < 400f);
																														if (flag77 && (Collision.CanHitLine(base.Center, 0, 0, nPC18.Center, 0, 0) || Collision.CanHitLine(base.Center, 0, 0, nPC18.Top, 0, 0)))
																														{
																															this.ai[0] = (float)num1154;
																														}
																													}
																													num3 = num1154;
																												}
																												if (this.ai[0] >= 0f)
																												{
																													this.timeLeft = 300;
																													this.netUpdate = true;
																												}
																											}
																											if (this.timeLeft > 30 && this.alpha > 0)
																											{
																												this.alpha -= 12;
																											}
																											if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
																											{
																												this.alpha = 128;
																											}
																											if (this.alpha < 0)
																											{
																												this.alpha = 0;
																											}
																											num3 = this.frameCounter + 1;
																											this.frameCounter = num3;
																											if (num3 > 4)
																											{
																												this.frameCounter = 0;
																												num3 = this.frame + 1;
																												this.frame = num3;
																												if (num3 >= 4)
																												{
																													this.frame = 0;
																												}
																											}
																											float num1155 = 0.5f;
																											if (this.timeLeft < 120)
																											{
																												num1155 = 1.1f;
																											}
																											if (this.timeLeft < 60)
																											{
																												num1155 = 1.6f;
																											}
																											float[] var_2_34766_cp_0 = this.ai;
																											int var_2_34766_cp_1 = 1;
																											num73 = var_2_34766_cp_0[var_2_34766_cp_1];
																											var_2_34766_cp_0[var_2_34766_cp_1] = num73 + 1f;
																											float num1156 = this.ai[1] / 180f * 6.28318548f;
																											for (float num1157 = 0f; num1157 < 3f; num1157 = num73 + 1f)
																											{
																												if (Main.rand.Next(3) == 0)
																												{
																													Dust dust39 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f, 0, default(Color), 1f)];
																													dust39.position = base.Center + Vector2.UnitY.RotatedBy((double)(num1157 * 6.28318548f / 3f + this.ai[1]), default(Vector2)) * 10f;
																													dust39.noGravity = true;
																													dust39.velocity = base.DirectionFrom(dust39.position);
																													dust39.scale = num1155;
																													dust39.fadeIn = 0.5f;
																													dust39.alpha = 200;
																												}
																												num73 = num1157;
																											}
																										}
																										if (this.timeLeft > 2 && Collision.SolidCollision(this.position, this.width, this.height))
																										{
																											this.timeLeft = 2;
																										}
																										int num1158 = (int)this.ai[0];
																										if (num1158 >= 0 && Main.npc[num1158].active)
																										{
																											if (base.Distance(Main.npc[num1158].Center) > num1153)
																											{
																												Vector2 vector168 = base.DirectionTo(Main.npc[num1158].Center);
																												if (vector168.HasNaNs())
																												{
																													vector168 = Vector2.UnitY;
																												}
																												this.velocity = (this.velocity * (num1152 - 1f) + vector168 * scaleFactor18) / num1152;
																												return;
																											}
																										}
																										else
																										{
																											if (this.ai[0] == -1f && this.timeLeft > 5)
																											{
																												this.timeLeft = 5;
																											}
																											if (this.ai[0] == -2f && this.timeLeft > 180)
																											{
																												this.timeLeft = 180;
																											}
																											if (this.ai[0] >= 0f)
																											{
																												this.ai[0] = -1f;
																												this.netUpdate = true;
																												return;
																											}
																										}
																									}
																									else
																									{
																										if (this.aiStyle == 130)
																										{
																											this.AI_130_FlameBurstTower();
																											return;
																										}
																										if (this.aiStyle == 131)
																										{
																											this.AI_131_FlameBurstShot();
																											return;
																										}
																										if (this.aiStyle == 132)
																										{
																											float num73;
																											if (this.localAI[1] == 0f)
																											{
																												if (this.localAI[0] == 0f)
																												{
																													Main.PlayTrackedSound(SoundID.DD2_DefeatScene, base.Center);
																												}
																												if (this.localAI[0] == 105f)
																												{
																													int num3;
																													for (int num1159 = 0; num1159 < 20; num1159 = num3 + 1)
																													{
																														float num1160 = (float)num1159 / 20f;
																														Vector2 vector169 = new Vector2(Main.rand.NextFloat() * 10f, 0f).RotatedBy((double)(num1160 * -3.14159274f + Main.rand.NextFloat() * 0.1f - 0.05f), default(Vector2));
																														Gore gore2 = Gore.NewGoreDirect(base.Center + vector169 * 3f, vector169, Utils.SelectRandom<int>(Main.rand, new int[]
																														{
																															1027,
																															1028,
																															1029,
																															1030
																														}), 1f);
																														if (gore2.velocity.Y > 0f)
																														{
																															Gore gore = gore2;
																															gore.velocity *= -0.5f;
																														}
																														if (gore2.velocity.Y < -5f)
																														{
																															Gore var_2_34BA7_cp_0_cp_0 = gore2;
																															var_2_34BA7_cp_0_cp_0.velocity.Y = var_2_34BA7_cp_0_cp_0.velocity.Y * 0.8f;
																														}
																														Gore var_2_34BC2_cp_0_cp_0 = gore2;
																														var_2_34BC2_cp_0_cp_0.velocity.Y = var_2_34BC2_cp_0_cp_0.velocity.Y * 1.1f;
																														Gore var_2_34BDD_cp_0_cp_0 = gore2;
																														var_2_34BDD_cp_0_cp_0.velocity.X = var_2_34BDD_cp_0_cp_0.velocity.X * 0.88f;
																														num3 = num1159;
																													}
																												}
																												if (!Main.dedServ)
																												{
																													if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
																													{
																														Filters.Scene.Activate("CrystalDestructionVortex", default(Vector2), new object[0]);
																													}
																													if (!Filters.Scene["CrystalDestructionColor"].IsActive())
																													{
																														Filters.Scene.Activate("CrystalDestructionColor", default(Vector2), new object[0]);
																													}
																													float num1161 = Math.Min(1f, this.localAI[0] / 120f);
																													Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num1161);
																													Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num1161 * 2f).UseProgress(0f).UseTargetPosition(base.Center);
																												}
																												if (this.localAI[0] == 120f)
																												{
																													this.localAI[0] = 0f;
																													float[] var_2_34D21_cp_0 = this.localAI;
																													int var_2_34D21_cp_1 = 1;
																													num73 = var_2_34D21_cp_0[var_2_34D21_cp_1];
																													var_2_34D21_cp_0[var_2_34D21_cp_1] = num73 + 1f;
																												}
																											}
																											else if (this.localAI[1] == 1f)
																											{
																												if (!Main.dedServ)
																												{
																													float num1162 = this.localAI[0] / 300f;
																													float num1163 = Math.Min(1f, this.localAI[0] / 150f);
																													this.velocity.Y = num1163 * -0.25f;
																													if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
																													{
																														Filters.Scene.Activate("CrystalDestructionVortex", default(Vector2), new object[0]);
																													}
																													if (!Filters.Scene["CrystalDestructionColor"].IsActive())
																													{
																														Filters.Scene.Activate("CrystalDestructionColor", default(Vector2), new object[0]);
																													}
																													num1163 = 1f;
																													Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num1163);
																													Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num1163 * 2f).UseProgress(0f).UseTargetPosition(base.Center);
																												}
																												if (this.localAI[0] == 300f)
																												{
																													this.localAI[0] = 0f;
																													float[] var_2_34E97_cp_0 = this.localAI;
																													int var_2_34E97_cp_1 = 1;
																													num73 = var_2_34E97_cp_0[var_2_34E97_cp_1];
																													var_2_34E97_cp_0[var_2_34E97_cp_1] = num73 + 1f;
																												}
																											}
																											else if (this.localAI[1] == 2f)
																											{
																												float num1164 = this.localAI[0] / 300f;
																												if (Main.netMode != 2)
																												{
																													Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(2f).UseProgress(num1164 * 30f);
																												}
																												this.velocity.Y = this.velocity.Y - 1f;
																												if (this.localAI[0] == 60f)
																												{
																													this.localAI[0] = 0f;
																													float[] var_2_34F47_cp_0 = this.localAI;
																													int var_2_34F47_cp_1 = 1;
																													num73 = var_2_34F47_cp_0[var_2_34F47_cp_1];
																													var_2_34F47_cp_0[var_2_34F47_cp_1] = num73 + 1f;
																												}
																											}
																											else if (this.localAI[1] == 3f)
																											{
																												if (Main.dedServ)
																												{
																													Filters.Scene.Deactivate("CrystalDestructionVortex", new object[0]);
																													Filters.Scene.Deactivate("CrystalDestructionColor", new object[0]);
																												}
																												this.Kill();
																											}
																											if (this.localAI[1] >= 1f)
																											{
																												int num3;
																												for (int num1165 = 0; num1165 < 1 + (int)(-(int)this.velocity.Y); num1165 = num3 + 1)
																												{
																													if (Main.rand.Next(2) == 0)
																													{
																														float num1166 = Main.rand.NextFloat() * -this.velocity.Y;
																														Vector2 vector170 = new Vector2(Main.rand.NextFloat() * 0.1f - 0.05f, 0f);
																														vector170.X += (float)Math.Sin((double)((this.position.Y + num1166) * 0.01f) + 6.2831854820251465 * ((double)Main.rand.Next(3) / 3.0)) * 0.5f;
																														vector170.X = MathHelper.Lerp(Main.rand.NextFloat() - 0.5f, vector170.X, MathHelper.Clamp(-this.velocity.Y, 0f, 1f));
																														vector170.Y = 0.5f - Math.Abs(vector170.X);
																														vector170 *= new Vector2(100f, 50f);
																														vector170.Y += num1166;
																														Vector2 position5 = base.Center + vector170;
																														Dust dust40 = Dust.NewDustPerfect(position5, 27, new Vector2?(Vector2.Zero), 0, Color.White * 0.1f, 1.1f);
																														dust40.velocity.Y = Main.rand.NextFloat() * 2f;
																														dust40.fadeIn = 0.1f;
																													}
																													num3 = num1165;
																												}
																											}
																											float[] var_2_351BB_cp_0 = this.localAI;
																											int var_2_351BB_cp_1 = 0;
																											num73 = var_2_351BB_cp_0[var_2_351BB_cp_1];
																											var_2_351BB_cp_0[var_2_351BB_cp_1] = num73 + 1f;
																											return;
																										}
																										if (this.aiStyle == 133)
																										{
																											if (this.type == 673)
																											{
																												if (this.ai[0] == 70f)
																												{
																													Main.PlayTrackedSound(SoundID.DD2_SkeletonSummoned, base.Center);
																												}
																												float[] var_2_35217_cp_0 = this.ai;
																												int var_2_35217_cp_1 = 0;
																												float num73 = var_2_35217_cp_0[var_2_35217_cp_1];
																												var_2_35217_cp_0[var_2_35217_cp_1] = num73 + 1f;
																												float opacity = 0f;
																												if (this.ai[0] < 20f)
																												{
																													opacity = Utils.InverseLerp(0f, 20f, this.ai[0], true);
																												}
																												else if (this.ai[0] < 60f)
																												{
																													opacity = 1f;
																												}
																												else if (this.ai[0] < 80f)
																												{
																													opacity = Utils.InverseLerp(80f, 60f, this.ai[0], true);
																												}
																												else
																												{
																													this.Kill();
																												}
																												this.Opacity = opacity;
																												int arg_352C9_0 = this.owner;
																												int arg_352C8_0 = Main.myPlayer;
																											}
																											if (this.type == 674)
																											{
																												if (this.ai[0] == 0f)
																												{
																													Main.PlayTrackedSound(SoundID.DD2_DarkMageHealImpact, base.Center);
																												}
																												float[] var_2_35306_cp_0 = this.ai;
																												int var_2_35306_cp_1 = 0;
																												float num73 = var_2_35306_cp_0[var_2_35306_cp_1];
																												var_2_35306_cp_0[var_2_35306_cp_1] = num73 + 1f;
																												if (this.ai[0] >= 40f)
																												{
																													int num3;
																													for (int num1167 = 0; num1167 < 200; num1167 = num3 + 1)
																													{
																														NPC nPC19 = Main.npc[num1167];
																														if (nPC19.active && nPC19.damage >= 1 && nPC19.lifeMax >= 30 && base.Distance(nPC19.Center) <= 1000f && nPC19.type != 564 && nPC19.type != 565)
																														{
																															int num1168 = 500;
																															int num1169 = nPC19.lifeMax - nPC19.life;
																															if (num1168 > num1169)
																															{
																																num1168 = num1169;
																															}
																															if (num1168 > 0)
																															{
																																NPC nPC10 = nPC19;
																																nPC10.life += num1168;
																																nPC19.HealEffect(num1168, true);
																																nPC19.netUpdate = true;
																															}
																														}
																														num3 = num1167;
																													}
																													this.Kill();
																													return;
																												}
																											}
																										}
																										else
																										{
																											if (this.aiStyle == 134)
																											{
																												this.AI_134_Ballista();
																												return;
																											}
																											if (this.aiStyle == 135)
																											{
																												this.AI_135_OgreStomp();
																												return;
																											}
																											if (this.aiStyle == 136)
																											{
																												this.AI_136_BetsyBreath();
																												return;
																											}
																											if (this.aiStyle == 137)
																											{
																												this.AI_137_LightningAura();
																												return;
																											}
																											if (this.aiStyle == 138)
																											{
																												this.AI_138_ExplosiveTrap();
																												return;
																											}
																											if (this.aiStyle == 139)
																											{
																												this.AI_139_ExplosiveTrapExplosion();
																												return;
																											}
																											if (this.aiStyle == 140)
																											{
																												this.AI_140_MonkStaffT1();
																												return;
																											}
																											if (this.aiStyle == 141)
																											{
																												this.AI_141_MonkStaffT1Explosion();
																												return;
																											}
																											if (this.aiStyle == 142)
																											{
																												this.AI_142_MonkStaffT2And3();
																												return;
																											}
																											if (this.aiStyle == 143)
																											{
																												this.AI_143_MonkStaffT2Ghast();
																												return;
																											}
																											if (this.aiStyle == 144)
																											{
																												this.AI_144_DD2Pet();
																												return;
																											}
																											if (this.aiStyle == 145)
																											{
																												this.AI_145_BookStaffStorm();
																												return;
																											}
																											if (this.aiStyle == 145)
																											{
																												this.AI_146_DD2Victory();
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x060001D3 RID: 467 RVA: 0x00081304 File Offset: 0x0007F504
		private void AI_001()
		{
			if (this.type == 469 && this.wet && !this.honeyWet)
			{
				this.Kill();
			}
			int num;
			if (this.type == 601)
			{
				Color portalColor = PortalHelper.GetPortalColor(this.owner, (int)this.ai[0]);
				Vector3 vector = portalColor.ToVector3();
				vector *= 0.5f;
				Lighting.AddLight(base.Center + this.velocity * 3f, vector);
				if (this.alpha > 0 && this.alpha <= 15)
				{
					Color color = portalColor;
					color.A = 255;
					for (int i = 0; i < 4; i++)
					{
						Dust expr_DE = Main.dust[Dust.NewDust(base.Center, 0, 0, 264, 0f, 0f, 0, default(Color), 1f)];
						expr_DE.position = base.Center;
						expr_DE.velocity = this.velocity * 2f + Utils.RandomVector2(Main.rand, -1f, 1f);
						expr_DE.color = color;
						expr_DE.scale = 1.2f;
						expr_DE.noLight = true;
						expr_DE.noGravity = true;
						expr_DE.customData = Main.player[this.owner];
					}
				}
				this.alpha -= 15;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				num = this.frameCounter + 1;
				this.frameCounter = num;
				if (num >= 4)
				{
					this.frameCounter = 0;
					num = this.frame + 1;
					this.frame = num;
					if (num >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
				}
				if (this.alpha == 0)
				{
					Color color2 = portalColor;
					color2.A = 255;
					Dust expr_207 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263, 0f, 0f, 0, default(Color), 1f)];
					expr_207.position = base.Center;
					expr_207.velocity = this.velocity / 4f;
					expr_207.color = color2;
					expr_207.noGravity = true;
					expr_207.scale = 0.6f;
				}
			}
			if (this.type == 472)
			{
				int num2 = Dust.NewDust(this.position, this.width, this.height, 30, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num2].noGravity = true;
				Main.dust[num2].velocity *= 0.25f;
				Main.dust[num2].velocity += this.velocity * 0.75f;
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlaySound(SoundID.Item17, this.position);
					for (int j = 0; j < 20; j++)
					{
						num2 = Dust.NewDust(this.position, this.width, this.height, 30, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num2].noGravity = true;
						Main.dust[num2].velocity *= 0.25f;
						Main.dust[num2].velocity += this.velocity;
						Dust expr_3A2_cp_0_cp_0 = Main.dust[num2];
						expr_3A2_cp_0_cp_0.velocity.X = expr_3A2_cp_0_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
						Dust expr_3D3_cp_0_cp_0 = Main.dust[num2];
						expr_3D3_cp_0_cp_0.velocity.Y = expr_3D3_cp_0_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					}
				}
			}
			if (this.type == 323)
			{
				this.alpha -= 50;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 436)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item12, this.position);
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 1.1f, 0.5f);
			}
			if (this.type == 467)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item34, this.position);
				}
				else if (this.ai[1] == 1f && Main.netMode != 1)
				{
					int num3 = -1;
					float num4 = 2000f;
					for (int k = 0; k < 255; k++)
					{
						if (Main.player[k].active && !Main.player[k].dead)
						{
							Vector2 center = Main.player[k].Center;
							float num5 = Vector2.Distance(center, base.Center);
							if ((num5 < num4 || num3 == -1) && Collision.CanHit(base.Center, 1, 1, center, 1, 1))
							{
								num4 = num5;
								num3 = k;
							}
						}
					}
					if (num4 < 20f)
					{
						this.Kill();
						return;
					}
					if (num3 != -1)
					{
						this.ai[1] = 21f;
						this.ai[0] = (float)num3;
						this.netUpdate = true;
					}
				}
				else if (this.ai[1] > 20f && this.ai[1] < 200f)
				{
					this.ai[1] += 1f;
					int num6 = (int)this.ai[0];
					if (!Main.player[num6].active || Main.player[num6].dead)
					{
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						this.netUpdate = true;
					}
					else
					{
						float num7 = this.velocity.ToRotation();
						Vector2 vector2 = Main.player[num6].Center - base.Center;
						if (vector2.Length() < 20f)
						{
							this.Kill();
							return;
						}
						float targetAngle = vector2.ToRotation();
						if (vector2 == Vector2.Zero)
						{
							targetAngle = num7;
						}
						float num8 = num7.AngleLerp(targetAngle, 0.008f);
						this.velocity = new Vector2(this.velocity.Length(), 0f).RotatedBy((double)num8, default(Vector2));
					}
				}
				if (this.ai[1] >= 1f && this.ai[1] < 20f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] == 20f)
					{
						this.ai[1] = 1f;
					}
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
				this.localAI[0] += 1f;
				if (this.localAI[0] == 12f)
				{
					this.localAI[0] = 0f;
					for (int l = 0; l < 12; l++)
					{
						Vector2 vector3 = Vector2.UnitX * (float)(-(float)this.width) / 2f;
						vector3 += -Vector2.UnitY.RotatedBy((double)((float)l * 3.14159274f / 6f), default(Vector2)) * new Vector2(8f, 16f);
						vector3 = vector3.RotatedBy((double)(this.rotation - 1.57079637f), default(Vector2));
						int num9 = Dust.NewDust(base.Center, 0, 0, 6, 0f, 0f, 160, default(Color), 1f);
						Main.dust[num9].scale = 1.1f;
						Main.dust[num9].noGravity = true;
						Main.dust[num9].position = base.Center + vector3;
						Main.dust[num9].velocity = this.velocity * 0.1f;
						Main.dust[num9].velocity = Vector2.Normalize(base.Center - this.velocity * 3f - Main.dust[num9].position) * 1.25f;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int m = 0; m < 1; m++)
					{
						Vector2 value = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num10 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num10].velocity *= 0.1f;
						Main.dust[num10].position = base.Center + value * (float)this.width / 2f;
						Main.dust[num10].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(32) == 0)
				{
					for (int n = 0; n < 1; n++)
					{
						Vector2 value2 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num11 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num11].velocity *= 0.3f;
						Main.dust[num11].position = base.Center + value2 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num11].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					for (int num12 = 0; num12 < 2; num12++)
					{
						Vector2 value3 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num13 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num13].velocity *= 0.3f;
						Main.dust[num13].noGravity = true;
						Main.dust[num13].position = base.Center + value3 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num13].fadeIn = 1.4f;
						}
					}
				}
			}
			if (this.type == 468)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item34, this.position);
				}
				else if (this.ai[1] == 1f && Main.netMode != 1)
				{
					int num14 = -1;
					float num15 = 2000f;
					for (int num16 = 0; num16 < 255; num16++)
					{
						if (Main.player[num16].active && !Main.player[num16].dead)
						{
							Vector2 center2 = Main.player[num16].Center;
							float num17 = Vector2.Distance(center2, base.Center);
							if ((num17 < num15 || num14 == -1) && Collision.CanHit(base.Center, 1, 1, center2, 1, 1))
							{
								num15 = num17;
								num14 = num16;
							}
						}
					}
					if (num15 < 20f)
					{
						this.Kill();
						return;
					}
					if (num14 != -1)
					{
						this.ai[1] = 21f;
						this.ai[0] = (float)num14;
						this.netUpdate = true;
					}
				}
				else if (this.ai[1] > 20f && this.ai[1] < 200f)
				{
					this.ai[1] += 1f;
					int num18 = (int)this.ai[0];
					if (!Main.player[num18].active || Main.player[num18].dead)
					{
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						this.netUpdate = true;
					}
					else
					{
						float num19 = this.velocity.ToRotation();
						Vector2 vector4 = Main.player[num18].Center - base.Center;
						if (vector4.Length() < 20f)
						{
							this.Kill();
							return;
						}
						float targetAngle2 = vector4.ToRotation();
						if (vector4 == Vector2.Zero)
						{
							targetAngle2 = num19;
						}
						float num20 = num19.AngleLerp(targetAngle2, 0.01f);
						this.velocity = new Vector2(this.velocity.Length(), 0f).RotatedBy((double)num20, default(Vector2));
					}
				}
				if (this.ai[1] >= 1f && this.ai[1] < 20f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] == 20f)
					{
						this.ai[1] = 1f;
					}
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 0.2f, 0.1f, 0.6f);
				this.localAI[0] += 1f;
				if (this.localAI[0] == 12f)
				{
					this.localAI[0] = 0f;
					for (int num21 = 0; num21 < 12; num21++)
					{
						Vector2 vector5 = Vector2.UnitX * (float)(-(float)this.width) / 2f;
						vector5 += -Vector2.UnitY.RotatedBy((double)((float)num21 * 3.14159274f / 6f), default(Vector2)) * new Vector2(8f, 16f);
						vector5 = vector5.RotatedBy((double)(this.rotation - 1.57079637f), default(Vector2));
						int num22 = Dust.NewDust(base.Center, 0, 0, 27, 0f, 0f, 160, default(Color), 1f);
						Main.dust[num22].scale = 1.1f;
						Main.dust[num22].noGravity = true;
						Main.dust[num22].position = base.Center + vector5;
						Main.dust[num22].velocity = this.velocity * 0.1f;
						Main.dust[num22].velocity = Vector2.Normalize(base.Center - this.velocity * 3f - Main.dust[num22].position) * 1.25f;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int num23 = 0; num23 < 1; num23++)
					{
						Vector2 value4 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num24 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num24].velocity *= 0.1f;
						Main.dust[num24].position = base.Center + value4 * (float)this.width / 2f;
						Main.dust[num24].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(32) == 0)
				{
					for (int num25 = 0; num25 < 1; num25++)
					{
						Vector2 value5 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num26 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num26].velocity *= 0.3f;
						Main.dust[num26].position = base.Center + value5 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num26].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					for (int num27 = 0; num27 < 2; num27++)
					{
						Vector2 value6 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num28 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num28].velocity *= 0.3f;
						Main.dust[num28].noGravity = true;
						Main.dust[num28].position = base.Center + value6 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num28].fadeIn = 1.4f;
						}
					}
				}
			}
			if (this.type == 634 || this.type == 635)
			{
				float num29 = 5f;
				float num30 = 250f;
				float scaleFactor = 6f;
				Vector2 value7 = new Vector2(8f, 10f);
				float num31 = 1.2f;
				Vector3 rgb = new Vector3(0.7f, 0.1f, 0.5f);
				int num32 = 4 * this.MaxUpdates;
				int num33 = Utils.SelectRandom<int>(Main.rand, new int[]
				{
					242,
					73,
					72,
					71,
					255
				});
				int num34 = 255;
				if (this.type == 635)
				{
					value7 = new Vector2(10f, 20f);
					num31 = 1f;
					num30 = 500f;
					num34 = 88;
					num32 = 3 * this.MaxUpdates;
					rgb = new Vector3(0.4f, 0.6f, 0.9f);
					num33 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						242,
						59,
						88
					});
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					this.localAI[0] = (float)(-(float)Main.rand.Next(48));
					Main.PlaySound(SoundID.Item34, this.position);
				}
				else if (this.ai[1] == 1f && this.owner == Main.myPlayer)
				{
					int num35 = -1;
					float num36 = num30;
					for (int num37 = 0; num37 < 200; num37++)
					{
						if (Main.npc[num37].active && Main.npc[num37].CanBeChasedBy(this, false))
						{
							Vector2 center3 = Main.npc[num37].Center;
							float num38 = Vector2.Distance(center3, base.Center);
							if (num38 < num36 && num35 == -1 && Collision.CanHitLine(base.Center, 1, 1, center3, 1, 1))
							{
								num36 = num38;
								num35 = num37;
							}
						}
					}
					if (num36 < 20f)
					{
						this.Kill();
						return;
					}
					if (num35 != -1)
					{
						this.ai[1] = num29 + 1f;
						this.ai[0] = (float)num35;
						this.netUpdate = true;
					}
				}
				else if (this.ai[1] > num29)
				{
					this.ai[1] += 1f;
					int num39 = (int)this.ai[0];
					if (!Main.npc[num39].active || !Main.npc[num39].CanBeChasedBy(this, false))
					{
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						this.netUpdate = true;
					}
					else
					{
						this.velocity.ToRotation();
						Vector2 vector6 = Main.npc[num39].Center - base.Center;
						if (vector6.Length() < 20f)
						{
							this.Kill();
							return;
						}
						if (vector6 != Vector2.Zero)
						{
							vector6.Normalize();
							vector6 *= scaleFactor;
						}
						float num40 = 30f;
						this.velocity = (this.velocity * (num40 - 1f) + vector6) / num40;
					}
				}
				if (this.ai[1] >= 1f && this.ai[1] < num29)
				{
					this.ai[1] += 1f;
					if (this.ai[1] == num29)
					{
						this.ai[1] = 1f;
					}
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= num32)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight(base.Center, rgb);
				this.rotation = this.velocity.ToRotation();
				this.localAI[0] += 1f;
				if (this.localAI[0] == 48f)
				{
					this.localAI[0] = 0f;
				}
				else if (this.alpha == 0)
				{
					for (int num41 = 0; num41 < 2; num41++)
					{
						Vector2 value8 = Vector2.UnitX * -30f;
						value8 = -Vector2.UnitY.RotatedBy((double)(this.localAI[0] * 0.1308997f + (float)num41 * 3.14159274f), default(Vector2)) * value7 - this.rotation.ToRotationVector2() * 10f;
						int num42 = Dust.NewDust(base.Center, 0, 0, num34, 0f, 0f, 160, default(Color), 1f);
						Main.dust[num42].scale = num31;
						Main.dust[num42].noGravity = true;
						Main.dust[num42].position = base.Center + value8 + this.velocity * 2f;
						Main.dust[num42].velocity = Vector2.Normalize(base.Center + this.velocity * 2f * 8f - Main.dust[num42].position) * 2f + this.velocity * 2f;
					}
				}
				if (Main.rand.Next(12) == 0)
				{
					for (int num43 = 0; num43 < 1; num43++)
					{
						Vector2 value9 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num44 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num44].velocity *= 0.1f;
						Main.dust[num44].position = base.Center + value9 * (float)this.width / 2f + this.velocity * 2f;
						Main.dust[num44].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(64) == 0)
				{
					for (int num45 = 0; num45 < 1; num45++)
					{
						Vector2 value10 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num46 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num46].velocity *= 0.3f;
						Main.dust[num46].position = base.Center + value10 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num46].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int num47 = 0; num47 < 2; num47++)
					{
						Vector2 value11 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num48 = Dust.NewDust(this.position, this.width, this.height, num33, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num48].velocity *= 0.3f;
						Main.dust[num48].noGravity = true;
						Main.dust[num48].position = base.Center + value11 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num48].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(12) == 0 && this.type == 634)
				{
					Vector2 value12 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
					int num49 = Dust.NewDust(this.position, this.width, this.height, num34, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num49].velocity *= 0.3f;
					Main.dust[num49].position = base.Center + value12 * (float)this.width / 2f;
					Main.dust[num49].fadeIn = 0.9f;
					Main.dust[num49].noGravity = true;
				}
				if (Main.rand.Next(3) == 0 && this.type == 635)
				{
					Vector2 value13 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
					int num50 = Dust.NewDust(this.position, this.width, this.height, num34, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num50].velocity *= 0.3f;
					Main.dust[num50].position = base.Center + value13 * (float)this.width / 2f;
					Main.dust[num50].fadeIn = 1.2f;
					Main.dust[num50].scale = 1.5f;
					Main.dust[num50].noGravity = true;
				}
			}
			if (this.type == 459)
			{
				this.alpha -= 30;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 3)
					{
						this.frame = 0;
					}
				}
				this.position = base.Center;
				this.scale = this.ai[1];
				this.width = (this.height = (int)(22f * this.scale));
				base.Center = this.position;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
				int num51;
				if ((double)this.scale < 0.85)
				{
					num51 = ((Main.rand.Next(3) == 0) ? 1 : 0);
				}
				else
				{
					num51 = 1;
					this.penetrate = -1;
					this.maxPenetrate = -1;
				}
				for (int num52 = 0; num52 < num51; num52++)
				{
					int num53 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0f, 0, default(Color), 1f);
					Main.dust[num53].position -= Vector2.One * 3f;
					Main.dust[num53].scale = 0.5f;
					Main.dust[num53].noGravity = true;
					Main.dust[num53].velocity = this.velocity / 3f;
					Main.dust[num53].alpha = 255 - (int)(255f * this.scale);
				}
			}
			if (this.type == 709)
			{
				this.alpha -= 30;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 3)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
				if (this.ai[1] == 0f)
				{
					Main.PlayTrackedSound(SoundID.DD2_SkyDragonsFuryShot, base.Center);
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 30f)
				{
					this.Kill();
					return;
				}
			}
			if (this.type == 442)
			{
				this.frame = 0;
				if (this.alpha != 0)
				{
					this.localAI[0] += 1f;
					if (this.localAI[0] >= 4f)
					{
						this.alpha -= 90;
						if (this.alpha < 0)
						{
							this.alpha = 0;
							this.localAI[0] = 2f;
						}
					}
				}
				if (Vector2.Distance(base.Center, new Vector2(this.ai[0], this.ai[1]) * 16f + Vector2.One * 8f) <= 16f)
				{
					this.Kill();
					return;
				}
				if (this.alpha == 0)
				{
					this.localAI[1] += 1f;
					if (this.localAI[1] >= 120f)
					{
						this.Kill();
						return;
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.45f, 0.8f);
					this.localAI[0] += 1f;
					if (this.localAI[0] == 3f)
					{
						this.localAI[0] = 0f;
						for (int num54 = 0; num54 < 8; num54++)
						{
							Vector2 vector7 = Vector2.UnitX * -8f;
							vector7 += -Vector2.UnitY.RotatedBy((double)((float)num54 * 3.14159274f / 4f), default(Vector2)) * new Vector2(2f, 4f);
							vector7 = vector7.RotatedBy((double)(this.rotation - 1.57079637f), default(Vector2));
							int num55 = Dust.NewDust(base.Center, 0, 0, 135, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num55].scale = 1.5f;
							Main.dust[num55].noGravity = true;
							Main.dust[num55].position = base.Center + vector7;
							Main.dust[num55].velocity = this.velocity * 0.66f;
						}
					}
				}
			}
			if (this.type == 440 || this.type == 449 || this.type == 606)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 25;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.type == 440)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.25f, 0.4f, 0.7f);
				}
				if (this.type == 449)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.7f, 0.65f, 0.3f);
				}
				if (this.type == 606)
				{
					Lighting.AddLight(base.Center, 0.7f, 0.3f, 0.3f);
				}
				float num56 = 100f;
				float num57 = 3f;
				if (this.type == 606)
				{
					num56 = 150f;
					num57 = 5f;
				}
				if (this.ai[1] == 0f)
				{
					this.localAI[0] += num57;
					if (this.localAI[0] == num57 * 1f && this.type == 606)
					{
						for (int num58 = 0; num58 < 4; num58++)
						{
							int num59 = Dust.NewDust(base.Center - this.velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.4f);
							Main.dust[num59].velocity *= 0.2f;
							Main.dust[num59].velocity += this.velocity / 10f;
							Main.dust[num59].noGravity = true;
						}
					}
					if (this.localAI[0] > num56)
					{
						this.localAI[0] = num56;
					}
				}
				else
				{
					this.localAI[0] -= num57;
					if (this.localAI[0] <= 0f)
					{
						this.Kill();
						return;
					}
				}
			}
			if (this.type == 438)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.2f);
			}
			if (this.type == 593)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.3f);
				num = this.frameCounter + 1;
				this.frameCounter = num;
				if (num >= 12)
				{
					num = this.frame + 1;
					this.frame = num;
					if (num >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
					this.frameCounter = 0;
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector8 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust expr_27CA = Main.dust[Dust.NewDust(base.Center - vector8 * 8f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
					expr_27CA.noGravity = true;
					expr_27CA.position = base.Center - vector8 * 8f * this.scale;
					expr_27CA.velocity = vector8.RotatedBy(-1.5707963705062866, default(Vector2)) * 2f;
					expr_27CA.velocity = Vector2.Zero;
					expr_27CA.scale = 0.5f + Main.rand.NextFloat();
					expr_27CA.fadeIn = 0.5f;
				}
			}
			if (this.type == 592)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.15f, 0.15f, 0.4f);
			}
			if (this.type == 462)
			{
				int num60 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 1f);
				Main.dust[num60].noLight = true;
				Main.dust[num60].noGravity = true;
				Main.dust[num60].velocity = this.velocity;
				Main.dust[num60].position -= Vector2.One * 4f;
				Main.dust[num60].scale = 0.8f;
				num = this.frameCounter + 1;
				this.frameCounter = num;
				if (num >= 9)
				{
					this.frameCounter = 0;
					num = this.frame + 1;
					this.frame = num;
					if (num >= 5)
					{
						this.frame = 0;
					}
				}
			}
			if (this.type == 437)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item12, this.position);
				}
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					for (int num61 = 0; num61 < 4; num61++)
					{
						int num62 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0f, 0, default(Color), 1f);
						Main.dust[num62].position = Vector2.Lerp(Main.dust[num62].position, base.Center, 0.25f);
						Main.dust[num62].scale = 0.5f;
						Main.dust[num62].noGravity = true;
						Main.dust[num62].velocity /= 2f;
						Main.dust[num62].velocity += this.velocity * 0.66f;
					}
				}
				if (this.ai[0] < 16f)
				{
					for (int num63 = 0; num63 < 2; num63++)
					{
						int num64 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0f, 0, default(Color), 1f);
						Main.dust[num64].position = this.position + new Vector2((float)(((this.direction == 1) ? 1 : 0) * this.width), (float)(2 + (this.height - 4) * num63));
						Main.dust[num64].scale = 0.3f;
						Main.dust[num64].noGravity = true;
						Main.dust[num64].velocity = Vector2.Zero;
					}
				}
			}
			if (this.type == 435)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item12, this.position);
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
			}
			if (this.type == 682)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.DD2_LightningBugZap, this.position);
					for (int num65 = 0; num65 < 8; num65++)
					{
						Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 272, 0f, 0f, 0, default(Color), 1f);
						dust.velocity *= 1f;
						dust.velocity += this.velocity * 0.65f;
						dust.scale = 0.6f;
						dust.fadeIn = 0.8f;
						dust.noGravity = true;
						dust.noLight = true;
						dust.position += dust.velocity * 3f;
					}
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.5f, 0.2f, 1.1f);
			}
			if (this.type == 684)
			{
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.localAI[0] += 1f;
				for (int num66 = 0; num66 < 1; num66++)
				{
					Vector2 vector9 = Utils.RandomVector2(Main.rand, -0.5f, 0.5f) * new Vector2(20f, 80f);
					vector9 = vector9.RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
					Dust expr_2ED3 = Dust.NewDustDirect(base.Center, 0, 0, 60, 0f, 0f, 0, default(Color), 1f);
					expr_2ED3.alpha = 127;
					expr_2ED3.fadeIn = 1.5f;
					expr_2ED3.scale = 1.3f;
					expr_2ED3.velocity *= 0.3f;
					expr_2ED3.position = base.Center + vector9;
					expr_2ED3.noGravity = true;
					expr_2ED3.noLight = true;
					expr_2ED3.color = new Color(255, 255, 255, 0);
				}
				Lighting.AddLight(base.Center, 1.1f, 0.3f, 0.4f);
			}
			if (this.type == 408)
			{
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
			}
			if (this.type == 282)
			{
				int num67 = Dust.NewDust(this.position, this.width, this.height, 171, 0f, 0f, 100, default(Color), 1f);
				Main.dust[num67].scale = (float)Main.rand.Next(1, 10) * 0.1f;
				Main.dust[num67].noGravity = true;
				Main.dust[num67].fadeIn = 1.5f;
				Main.dust[num67].velocity *= 0.25f;
				Main.dust[num67].velocity += this.velocity * 0.25f;
			}
			if (this.type == 275 || this.type == 276)
			{
				this.frameCounter++;
				if (this.frameCounter > 1)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame > 1)
					{
						this.frame = 0;
					}
				}
			}
			if (this.type == 225)
			{
				int num68 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num68].noGravity = true;
				Main.dust[num68].scale = 1.3f;
				Main.dust[num68].velocity *= 0.5f;
			}
			if (this.type == 174)
			{
				if (this.alpha == 0)
				{
					int num69 = Dust.NewDust(this.oldPosition - this.velocity * 3f, this.width, this.height, 76, 0f, 0f, 50, default(Color), 1f);
					Main.dust[num69].noGravity = true;
					Main.dust[num69].noLight = true;
					Main.dust[num69].velocity *= 0.5f;
				}
				this.alpha -= 50;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item17, this.position);
				}
			}
			else if (this.type == 605)
			{
				if (this.alpha == 0 && Main.rand.Next(3) == 0)
				{
					int num70 = Dust.NewDust(this.position - this.velocity * 3f, this.width, this.height, 4, 0f, 0f, 50, new Color(78, 136, 255, 150), 1.2f);
					Main.dust[num70].velocity *= 0.3f;
					Main.dust[num70].velocity += this.velocity * 0.3f;
					Main.dust[num70].noGravity = true;
				}
				this.alpha -= 50;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item17, this.position);
				}
			}
			else if (this.type == 176)
			{
				if (this.alpha == 0)
				{
					int num71 = Dust.NewDust(this.oldPosition, this.width, this.height, 22, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num71].noGravity = true;
					Main.dust[num71].noLight = true;
					Main.dust[num71].velocity *= 0.15f;
					Main.dust[num71].fadeIn = 0.8f;
				}
				this.alpha -= 50;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item17, this.position);
				}
			}
			if (this.type == 350)
			{
				this.alpha -= 100;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				if (this.alpha == 0)
				{
					int num72 = 2;
					if (Main.rand.Next(2) == 0)
					{
						int num73 = Dust.NewDust(new Vector2(base.Center.X - (float)num72, base.Center.Y - (float)num72 - 2f) - this.velocity * 0.5f, num72 * 2, num72 * 2, 6, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num73].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num73].velocity *= 0.2f;
						Main.dust[num73].noGravity = true;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num74 = Dust.NewDust(new Vector2(base.Center.X - (float)num72, base.Center.Y - (float)num72 - 2f) - this.velocity * 0.5f, num72 * 2, num72 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num74].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num74].velocity *= 0.05f;
					}
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item42, this.position);
				}
			}
			if (this.type == 325)
			{
				this.alpha -= 100;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				if (this.alpha == 0)
				{
					int num75 = 2;
					if (Main.rand.Next(2) == 0)
					{
						int num76 = Dust.NewDust(new Vector2(base.Center.X - (float)num75, base.Center.Y - (float)num75 - 2f) - this.velocity * 0.5f, num75 * 2, num75 * 2, 6, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num76].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num76].velocity *= 0.2f;
						Main.dust[num76].noGravity = true;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num77 = Dust.NewDust(new Vector2(base.Center.X - (float)num75, base.Center.Y - (float)num75 - 2f) - this.velocity * 0.5f, num75 * 2, num75 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num77].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num77].velocity *= 0.05f;
					}
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					Main.PlaySound(SoundID.Item42, this.position);
				}
			}
			if (this.type == 469)
			{
				this.localAI[1] += 1f;
				if (this.localAI[1] > 2f)
				{
					this.alpha -= 50;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
			}
			else if (this.type == 83 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item33, this.position);
			}
			else if (this.type == 408 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 19, 1f, 0f);
			}
			else if (this.type == 259 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item33, this.position);
			}
			else if (this.type == 110 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item11, this.position);
			}
			else if (this.type == 302 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item11, this.position);
			}
			else if (this.type == 438 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item12, this.position);
			}
			else if (this.type == 593 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item11, this.position);
			}
			else if (this.type == 592 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item12, this.position);
			}
			else if (this.type == 462 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				if (Main.rand.Next(2) == 0)
				{
					Main.PlaySound(SoundID.Item124, this.position);
				}
				else
				{
					Main.PlaySound(SoundID.Item125, this.position);
				}
				Vector2 value14 = Vector2.Normalize(this.velocity);
				int num78 = Main.rand.Next(5, 10);
				for (int num79 = 0; num79 < num78; num79++)
				{
					int num80 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 1f);
					Dust expr_3BE5_cp_0_cp_0 = Main.dust[num80];
					expr_3BE5_cp_0_cp_0.velocity.Y = expr_3BE5_cp_0_cp_0.velocity.Y - 1f;
					Main.dust[num80].velocity += value14 * 2f;
					Main.dust[num80].position -= Vector2.One * 4f;
					Main.dust[num80].noGravity = true;
				}
			}
			else if (this.type == 84 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item12, this.position);
			}
			else if (this.type == 389 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item12, this.position);
			}
			else if (this.type == 257 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item12, this.position);
			}
			else if (this.type == 100 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item33, this.position);
			}
			else if (this.type == 98 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item17, this.position);
			}
			else if (this.type == 184 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item17, this.position);
			}
			else if (this.type == 195 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item17, this.position);
			}
			else if (this.type == 275 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item17, this.position);
			}
			else if (this.type == 276 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item17, this.position);
			}
			else if ((this.type == 81 || this.type == 82) && this.ai[1] == 0f)
			{
				Main.PlaySound(SoundID.Item5, this.position);
				this.ai[1] = 1f;
			}
			else if (this.type == 180 && this.ai[1] == 0f)
			{
				Main.PlaySound(SoundID.Item11, this.position);
				this.ai[1] = 1f;
			}
			else if (this.type == 248 && this.ai[1] == 0f)
			{
				Main.PlaySound(SoundID.Item17, this.position);
				this.ai[1] = 1f;
			}
			else if (this.type == 576 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item12, this.position);
			}
			else if (this.type == 577 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				Main.PlaySound(SoundID.Item36, this.position);
			}
			else if (this.type == 710)
			{
				this.alpha -= 25;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num81;
					if (Main.rand.Next(2) == 0)
					{
						num81 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.6f);
						Main.dust[num81].noGravity = true;
					}
					num81 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num81].noGravity = true;
					Main.dust[num81].velocity *= 2f;
					Main.dust[num81].velocity += this.velocity;
					if (this.ai[1] == -1f)
					{
						Main.dust[num81].fadeIn = 1.5f;
					}
					else
					{
						Main.dust[num81].fadeIn = 1.22f;
					}
					if (this.wet)
					{
						this.Kill();
					}
				}
			}
			else if (this.type == 639)
			{
				if (this.localAI[0] == 0f && this.localAI[1] == 0f)
				{
					this.localAI[0] = base.Center.X;
					this.localAI[1] = base.Center.Y;
					this.ai[0] = this.velocity.X;
					this.ai[1] = this.velocity.Y;
				}
				this.alpha -= 25;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			else if (this.type == 640)
			{
				this.alpha -= 25;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.velocity == Vector2.Zero)
				{
					this.ai[0] = 0f;
					bool flag = true;
					for (int num82 = 1; num82 < this.oldPos.Length; num82++)
					{
						if (this.oldPos[num82] != this.oldPos[0])
						{
							flag = false;
						}
					}
					if (flag)
					{
						this.Kill();
						return;
					}
					if (Main.rand.Next(this.extraUpdates) == 0 && (this.velocity != Vector2.Zero || Main.rand.Next((this.localAI[1] == 2f) ? 2 : 6) == 0))
					{
						for (int num83 = 0; num83 < 2; num83++)
						{
							float num84 = this.rotation + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
							float num85 = (float)Main.rand.NextDouble() * 0.8f + 1f;
							Vector2 vector10 = new Vector2((float)Math.Cos((double)num84) * num85, (float)Math.Sin((double)num84) * num85);
							int num86 = Dust.NewDust(base.Center, 0, 0, 229, vector10.X, vector10.Y, 0, default(Color), 1f);
							Main.dust[num86].noGravity = true;
							Main.dust[num86].scale = 1.2f;
						}
						if (Main.rand.Next(10) == 0)
						{
							Vector2 value15 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
							int num87 = Dust.NewDust(base.Center + value15 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num87].velocity *= 0.5f;
							Main.dust[num87].velocity.Y = -Math.Abs(Main.dust[num87].velocity.Y);
						}
					}
				}
				else if (this.numUpdates == 1)
				{
					float num88 = this.rotation + 1.57079637f + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
					float num89 = (float)Main.rand.NextDouble() * 0.25f + 0.25f;
					Vector2 vector11 = new Vector2((float)Math.Cos((double)num88) * num89, (float)Math.Sin((double)num88) * num89);
					int num90 = Dust.NewDust(this.position, 0, 0, 229, vector11.X, vector11.Y, 0, default(Color), 1f);
					Main.dust[num90].noGravity = true;
					Main.dust[num90].scale = 1.2f;
				}
			}
			if (this.type == 41)
			{
				int num91 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.6f);
				Main.dust[num91].noGravity = true;
				num91 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num91].noGravity = true;
			}
			else if (this.type == 55)
			{
				int num92 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, 0f, 0f, 0, default(Color), 0.9f);
				Main.dust[num92].noGravity = true;
			}
			else if (this.type == 374)
			{
				if (this.localAI[0] == 0f)
				{
					Main.PlaySound(SoundID.Item17, this.position);
					this.localAI[0] = 1f;
				}
				if (Main.rand.Next(2) == 0)
				{
					int num93 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, 0f, 0f, 0, default(Color), 0.9f);
					Main.dust[num93].noGravity = true;
					Main.dust[num93].velocity *= 0.5f;
				}
			}
			else if (this.type == 376)
			{
				if (this.localAI[0] == 0f)
				{
					Main.PlaySound(SoundID.Item20, this.position);
				}
				this.localAI[0] += 1f;
				if (this.localAI[0] > 3f)
				{
					int num94 = 1;
					if (this.localAI[0] > 5f)
					{
						num94 = 2;
					}
					for (int num95 = 0; num95 < num94; num95++)
					{
						int num96 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num96].noGravity = true;
						Dust expr_4808_cp_0_cp_0 = Main.dust[num96];
						expr_4808_cp_0_cp_0.velocity.X = expr_4808_cp_0_cp_0.velocity.X * 0.3f;
						Dust expr_4823_cp_0_cp_0 = Main.dust[num96];
						expr_4823_cp_0_cp_0.velocity.Y = expr_4823_cp_0_cp_0.velocity.Y * 0.3f;
						Main.dust[num96].noLight = true;
					}
					if (this.wet && !this.lavaWet)
					{
						this.Kill();
						return;
					}
				}
			}
			else if (this.type == 91 && Main.rand.Next(2) == 0)
			{
				int num97;
				if (Main.rand.Next(2) == 0)
				{
					num97 = 15;
				}
				else
				{
					num97 = 58;
				}
				int num98 = Dust.NewDust(this.position, this.width, this.height, num97, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, default(Color), 0.9f);
				Main.dust[num98].velocity *= 0.25f;
			}
			if (this.type == 163 || this.type == 310)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 25;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			num = this.type;
			if (num <= 104)
			{
				if (num <= 36)
				{
					if (num != 14 && num != 20 && num != 36)
					{
						goto IL_4A82;
					}
				}
				else if (num <= 89)
				{
					if (num - 83 > 1 && num != 89)
					{
						goto IL_4A82;
					}
				}
				else if (num != 100 && num != 104)
				{
					goto IL_4A82;
				}
			}
			else if (num <= 180)
			{
				if (num != 110 && num - 158 > 3 && num != 180)
				{
					goto IL_4A82;
				}
			}
			else if (num <= 287)
			{
				if (num != 279 && num - 283 > 4)
				{
					goto IL_4A82;
				}
			}
			else if (num != 389)
			{
				if (num - 576 > 1)
				{
					goto IL_4A82;
				}
				this.localAI[1] += 1f;
				if (this.localAI[1] <= 2f)
				{
					goto IL_4A82;
				}
				if (this.alpha > 0)
				{
					this.alpha -= 15;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
					goto IL_4A82;
				}
				goto IL_4A82;
			}
			if (this.alpha > 0)
			{
				this.alpha -= 15;
			}
			if (this.alpha < 0)
			{
				this.alpha = 0;
			}
			IL_4A82:
			if (this.type == 484)
			{
				int num99 = Dust.NewDust(this.position, this.width, this.height, 78, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num99].noGravity = true;
				Main.dust[num99].velocity *= 0.1f;
				Main.dust[num99].scale = 0.75f;
				Main.dust[num99].position = (Main.dust[num99].position + base.Center) / 2f;
				Main.dust[num99].position += this.velocity * (float)Main.rand.Next(0, 101) * 0.01f;
			}
			if (this.type == 242 || this.type == 302 || this.type == 438 || this.type == 462 || this.type == 592)
			{
				float num100 = (float)Math.Sqrt((double)(this.velocity.X * this.velocity.X + this.velocity.Y * this.velocity.Y));
				if (this.alpha > 0)
				{
					this.alpha -= (int)((byte)((double)num100 * 0.9));
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 660)
			{
				DelegateMethods.v3_1 = new Vector3(0.6f, 1f, 1f) * 0.2f;
				Utils.PlotTileLine(base.Center, base.Center + this.velocity * 10f, 8f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
				if (this.alpha > 0)
				{
					Main.PlaySound(SoundID.Item9, base.Center);
					this.alpha = 0;
					this.scale = 1.1f;
					this.frame = Main.rand.Next(14);
					float num101 = 16f;
					int num102 = 0;
					while ((float)num102 < num101)
					{
						Vector2 vector12 = Vector2.UnitX * 0f;
						vector12 += -Vector2.UnitY.RotatedBy((double)((float)num102 * (6.28318548f / num101)), default(Vector2)) * new Vector2(1f, 4f);
						vector12 = vector12.RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num103 = Dust.NewDust(base.Center, 0, 0, 180, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num103].scale = 1.5f;
						Main.dust[num103].noGravity = true;
						Main.dust[num103].position = base.Center + vector12;
						Main.dust[num103].velocity = this.velocity * 0f + vector12.SafeNormalize(Vector2.UnitY) * 1f;
						num102++;
					}
				}
			}
			if (this.type == 712)
			{
				DelegateMethods.v3_1 = new Vector3(0.4f, 0.4f, 0.4f) * 0.7f;
				Utils.PlotTileLine(base.Center, base.Center + this.velocity * 10f, 8f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
				if (this.alpha == 255)
				{
					this.frame = Main.rand.Next(2) * 4;
				}
				num = this.frameCounter + 1;
				this.frameCounter = num;
				if (num >= 4)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame == 4)
					{
						this.frame = 0;
					}
					if (this.frame >= 8)
					{
						this.frame = 4;
					}
				}
				if (this.alpha > 0)
				{
					this.alpha = 0;
					this.scale = 1.1f;
					this.frame = Main.rand.Next(14);
					float num104 = 4f;
					int num105 = 0;
					while ((float)num105 < num104)
					{
						Vector2 vector13 = Vector2.UnitX * 0f;
						vector13 += -Vector2.UnitY.RotatedBy((double)((float)num105 * (6.28318548f / num104)), default(Vector2)) * new Vector2(1f, 4f);
						vector13 = vector13.RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num106 = Dust.NewDust(base.Center, 0, 0, 15, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num106].scale = 1.7f;
						Main.dust[num106].noGravity = true;
						Main.dust[num106].position = base.Center + vector13 + this.velocity.SafeNormalize(Vector2.Zero) * 50f;
						Main.dust[num106].velocity = Main.dust[num106].velocity * 2f + vector13.SafeNormalize(Vector2.UnitY) * 0.3f + this.velocity.SafeNormalize(Vector2.Zero) * 3f;
						Main.dust[num106].velocity *= 0.7f;
						Main.dust[num106].position += Main.dust[num106].velocity * 5f;
						num105++;
					}
				}
			}
			if (this.type == 661)
			{
				if (this.alpha <= 0)
				{
					for (int num107 = 0; num107 < 3; num107++)
					{
						int num108 = Dust.NewDust(this.position, this.width, this.height, 240, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num108].noGravity = true;
						Main.dust[num108].velocity *= 0.3f;
						Main.dust[num108].noLight = true;
					}
				}
				if (this.alpha > 0)
				{
					this.alpha -= 55;
					this.scale = 1.3f;
					if (this.alpha < 0)
					{
						this.alpha = 0;
						float num109 = 16f;
						int num110 = 0;
						while ((float)num110 < num109)
						{
							Vector2 vector14 = Vector2.UnitX * 0f;
							vector14 += -Vector2.UnitY.RotatedBy((double)((float)num110 * (6.28318548f / num109)), default(Vector2)) * new Vector2(1f, 4f);
							vector14 = vector14.RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
							int num111 = Dust.NewDust(base.Center, 0, 0, 62, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num111].scale = 1.5f;
							Main.dust[num111].noLight = true;
							Main.dust[num111].noGravity = true;
							Main.dust[num111].position = base.Center + vector14;
							Main.dust[num111].velocity = Main.dust[num111].velocity * 4f + this.velocity * 0.3f;
							num110++;
						}
					}
				}
			}
			if (this.type == 706)
			{
				if (this.wet)
				{
					this.Kill();
					return;
				}
				if (this.localAI[1] == 0f)
				{
					this.localAI[0] = Main.PlayTrackedSound(SoundID.DD2_PhantomPhoenixShot, base.Center).ToFloat();
					this.localAI[1] += 1f;
					for (int num112 = 0; num112 < 15; num112++)
					{
						if (Main.rand.Next(4) != 0)
						{
							Dust expr_53B8 = Dust.NewDustDirect(base.Center - base.Size / 4f, this.width / 2, this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[]
							{
								6,
								31,
								31
							}), 0f, 0f, 0, default(Color), 1f);
							expr_53B8.noGravity = true;
							expr_53B8.velocity *= 2.3f;
							expr_53B8.fadeIn = 1.5f;
							expr_53B8.noLight = true;
						}
					}
				}
				ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
				if (activeSound != null)
				{
					activeSound.Position = base.Center;
				}
				else
				{
					this.localAI[0] = SlotId.Invalid.ToFloat();
				}
				if (this.alpha <= 0)
				{
					for (int num113 = 0; num113 < 2; num113++)
					{
						if (Main.rand.Next(4) != 0)
						{
							Dust expr_54BB = Dust.NewDustDirect(base.Center - base.Size / 4f, this.width / 2, this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[]
							{
								6,
								31,
								31
							}), 0f, 0f, 0, default(Color), 1f);
							expr_54BB.noGravity = true;
							expr_54BB.velocity *= 2.3f;
							expr_54BB.fadeIn = 1.5f;
							expr_54BB.noLight = true;
						}
					}
					Vector2 vector15 = new Vector2(0f, (float)Math.Cos((double)((float)this.frameCounter * 6.28318548f / 40f - 1.57079637f))) * 16f;
					vector15 = vector15.RotatedBy((double)this.rotation, default(Vector2));
					Vector2 value16 = this.velocity.SafeNormalize(Vector2.Zero);
					for (int num114 = 0; num114 < 1; num114++)
					{
						Dust expr_55AC = Dust.NewDustDirect(base.Center - base.Size / 4f, this.width / 2, this.height / 2, 6, 0f, 0f, 0, default(Color), 1f);
						expr_55AC.noGravity = true;
						expr_55AC.position = base.Center + vector15;
						expr_55AC.velocity *= 0f;
						expr_55AC.fadeIn = 1.4f;
						expr_55AC.scale = 1.15f;
						expr_55AC.noLight = true;
						expr_55AC.position += this.velocity * 1.2f;
						expr_55AC.velocity += value16 * 2f;
						Dust expr_5681 = Dust.NewDustDirect(base.Center - base.Size / 4f, this.width / 2, this.height / 2, 6, 0f, 0f, 0, default(Color), 1f);
						expr_5681.noGravity = true;
						expr_5681.position = base.Center + vector15;
						expr_5681.velocity *= 0f;
						expr_5681.fadeIn = 1.4f;
						expr_5681.scale = 1.15f;
						expr_5681.noLight = true;
						expr_5681.position += this.velocity * 0.5f;
						expr_5681.position += this.velocity * 1.2f;
						expr_5681.velocity += value16 * 2f;
					}
				}
				num = this.frameCounter + 1;
				this.frameCounter = num;
				if (num >= 40)
				{
					this.frameCounter = 0;
				}
				this.frame = this.frameCounter / 5;
				if (this.alpha > 0)
				{
					this.alpha -= 55;
					if (this.alpha < 0)
					{
						this.alpha = 0;
						float num115 = 16f;
						int num116 = 0;
						while ((float)num116 < num115)
						{
							Vector2 vector16 = Vector2.UnitX * 0f;
							vector16 += -Vector2.UnitY.RotatedBy((double)((float)num116 * (6.28318548f / num115)), default(Vector2)) * new Vector2(1f, 4f);
							vector16 = vector16.RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
							int num117 = Dust.NewDust(base.Center, 0, 0, 6, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num117].scale = 1.5f;
							Main.dust[num117].noLight = true;
							Main.dust[num117].noGravity = true;
							Main.dust[num117].position = base.Center + vector16;
							Main.dust[num117].velocity = Main.dust[num117].velocity * 4f + this.velocity * 0.3f;
							num116++;
						}
					}
				}
				DelegateMethods.v3_1 = new Vector3(1f, 0.6f, 0.2f);
				Utils.PlotTileLine(base.Center, base.Center + this.velocity * 4f, 40f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
			}
			if (this.type == 638)
			{
				float num118 = this.velocity.Length();
				if (this.alpha > 0)
				{
					this.alpha -= (int)((byte)((double)num118 * 0.3));
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				Rectangle hitbox = base.Hitbox;
				hitbox.Offset((int)this.velocity.X, (int)this.velocity.Y);
				bool flag2 = false;
				for (int num119 = 0; num119 < 200; num119++)
				{
					NPC nPC = Main.npc[num119];
					if (nPC.active && !nPC.dontTakeDamage && nPC.immune[this.owner] == 0 && this.localNPCImmunity[num119] == 0 && nPC.Hitbox.Intersects(hitbox) && !nPC.friendly)
					{
						flag2 = true;
						break;
					}
				}
				if (flag2)
				{
					int num120 = Main.rand.Next(15, 31);
					for (int num121 = 0; num121 < num120; num121++)
					{
						int num122 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.8f);
						Main.dust[num122].velocity *= 1.6f;
						Dust expr_5A88_cp_0_cp_0 = Main.dust[num122];
						expr_5A88_cp_0_cp_0.velocity.Y = expr_5A88_cp_0_cp_0.velocity.Y - 1f;
						Main.dust[num122].velocity += this.velocity;
						Main.dust[num122].noGravity = true;
					}
				}
			}
			if (this.type == 257 || this.type == 593)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 10;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 88)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 10;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 532)
			{
				this.ai[0] += 1f;
			}
			bool flag3 = true;
			num = this.type;
			if (num <= 323)
			{
				if (num <= 161)
				{
					if (num <= 55)
					{
						if (num <= 20)
						{
							if (num != 5 && num != 14 && num != 20)
							{
								goto IL_5EFA;
							}
						}
						else if (num != 36 && num != 38 && num != 55)
						{
							goto IL_5EFA;
						}
					}
					else if (num <= 98)
					{
						if (num - 83 > 1 && num - 88 > 1 && num != 98)
						{
							goto IL_5EFA;
						}
					}
					else if (num <= 104)
					{
						if (num != 100 && num != 104)
						{
							goto IL_5EFA;
						}
					}
					else if (num != 110 && num - 158 > 3)
					{
						goto IL_5EFA;
					}
				}
				else if (num <= 259)
				{
					if (num <= 242)
					{
						if (num != 180 && num != 184 && num != 242)
						{
							goto IL_5EFA;
						}
					}
					else if (num != 248 && num != 257 && num != 259)
					{
						goto IL_5EFA;
					}
				}
				else if (num <= 279)
				{
					if (num != 265 && num != 270 && num != 279)
					{
						goto IL_5EFA;
					}
				}
				else if (num <= 299)
				{
					if (num - 283 > 4 && num != 299)
					{
						goto IL_5EFA;
					}
				}
				else if (num != 302 && num != 323)
				{
					goto IL_5EFA;
				}
			}
			else if (num <= 485)
			{
				if (num <= 389)
				{
					if (num <= 355)
					{
						if (num != 325 && num - 348 > 2 && num != 355)
						{
							goto IL_5EFA;
						}
					}
					else if (num != 374 && num != 376 && num != 389)
					{
						goto IL_5EFA;
					}
				}
				else if (num <= 459)
				{
					switch (num)
					{
						case 435:
						case 436:
						case 438:
						case 440:
						case 442:
							break;
						case 437:
						case 439:
						case 441:
							goto IL_5EFA;
						default:
							if (num != 449 && num != 459)
							{
								goto IL_5EFA;
							}
							break;
					}
				}
				else if (num <= 469)
				{
					if (num != 462 && num - 467 > 2)
					{
						goto IL_5EFA;
					}
				}
				else if (num != 472 && num - 483 > 2)
				{
					goto IL_5EFA;
				}
			}
			else if (num <= 606)
			{
				if (num <= 585)
				{
					if (num != 498 && num - 576 > 1 && num != 585)
					{
						goto IL_5EFA;
					}
				}
				else if (num - 592 > 1 && num != 601 && num != 606)
				{
					goto IL_5EFA;
				}
			}
			else if (num <= 639)
			{
				if (num != 616 && num - 634 > 1 && num - 638 > 1)
				{
					goto IL_5EFA;
				}
			}
			else if (num <= 682)
			{
				if (num - 660 > 1 && num != 682)
				{
					goto IL_5EFA;
				}
			}
			else if (num != 684)
			{
				switch (num)
				{
					case 706:
					case 709:
					case 710:
					case 712:
						break;
					case 707:
					case 708:
					case 711:
						goto IL_5EFA;
					default:
						goto IL_5EFA;
				}
			}
			flag3 = false;
			IL_5EFA:
			if (flag3)
			{
				this.ai[0] += 1f;
			}
			if (this.type == 270)
			{
				int num123 = (int)Player.FindClosest(base.Center, 1, 1);
				this.ai[1] += 1f;
				if (this.ai[1] < 110f && this.ai[1] > 30f)
				{
					float scaleFactor2 = this.velocity.Length();
					Vector2 vector17 = Main.player[num123].Center - base.Center;
					vector17.Normalize();
					vector17 *= scaleFactor2;
					this.velocity = (this.velocity * 24f + vector17) / 25f;
					this.velocity.Normalize();
					this.velocity *= scaleFactor2;
				}
				if (this.ai[0] < 0f)
				{
					if (this.velocity.Length() < 18f)
					{
						this.velocity *= 1.02f;
					}
					if (this.localAI[0] == 0f)
					{
						this.localAI[0] = 1f;
						Main.PlaySound(SoundID.Item8, this.position);
						for (int num124 = 0; num124 < 10; num124++)
						{
							int num125 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 5, this.velocity.X, this.velocity.Y, 0, default(Color), 2f);
							Main.dust[num125].noGravity = true;
							Main.dust[num125].velocity = base.Center - Main.dust[num125].position;
							Main.dust[num125].velocity.Normalize();
							Main.dust[num125].velocity *= -5f;
							Main.dust[num125].velocity += this.velocity / 2f;
						}
					}
					this.friendly = false;
					this.hostile = true;
				}
			}
			if (this.type == 585)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlaySound(SoundID.Item8, this.position);
					for (int num126 = 0; num126 < 3; num126++)
					{
						int num127 = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X, this.velocity.Y, 0, default(Color), 2f);
						Main.dust[num127].noGravity = true;
						Main.dust[num127].velocity = base.Center - Main.dust[num127].position;
						Main.dust[num127].velocity.Normalize();
						Main.dust[num127].velocity *= -5f;
						Main.dust[num127].velocity += this.velocity / 2f;
						Main.dust[num127].noLight = true;
					}
				}
				if (this.alpha > 0)
				{
					this.alpha -= 50;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.frameCounter++;
				if (this.frameCounter >= 12)
				{
					this.frameCounter = 0;
				}
				this.frame = this.frameCounter / 2;
				if (this.frame > 3)
				{
					this.frame = 6 - this.frame;
				}
				Vector3 vector18 = NPCID.Sets.MagicAuraColor[54].ToVector3();
				Lighting.AddLight(base.Center, vector18.X, vector18.Y, vector18.Z);
				if (Main.rand.Next(3) == 0)
				{
					int num128 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 27, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num128].position -= this.velocity * 2f;
					Main.dust[num128].noLight = true;
					Main.dust[num128].noGravity = true;
					Dust expr_63FD_cp_0_cp_0 = Main.dust[num128];
					expr_63FD_cp_0_cp_0.velocity.X = expr_63FD_cp_0_cp_0.velocity.X * 0.3f;
					Dust expr_6418_cp_0_cp_0 = Main.dust[num128];
					expr_6418_cp_0_cp_0.velocity.Y = expr_6418_cp_0_cp_0.velocity.Y * 0.3f;
				}
			}
			if (this.type == 594)
			{
				int num129 = (int)(43f - this.ai[1]) / 13;
				if (num129 < 1)
				{
					num129 = 1;
				}
				int num130 = (this.ai[1] < 20f) ? 6 : 31;
				for (int num131 = 0; num131 < num129; num131++)
				{
					int num132 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, num130, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, default(Color), 2f);
					Main.dust[num132].position -= this.velocity * 2f;
					Main.dust[num132].noLight = true;
					Main.dust[num132].noGravity = true;
					Dust expr_6533_cp_0_cp_0 = Main.dust[num132];
					expr_6533_cp_0_cp_0.velocity.X = expr_6533_cp_0_cp_0.velocity.X * 0.3f;
					Dust expr_654E_cp_0_cp_0 = Main.dust[num132];
					expr_654E_cp_0_cp_0.velocity.Y = expr_654E_cp_0_cp_0.velocity.Y * 0.3f;
					if (num130 == 6)
					{
						Main.dust[num132].fadeIn = Main.rand.NextFloat() * 2f;
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] > (float)(43 * this.MaxUpdates))
				{
					this.Kill();
					return;
				}
			}
			if (this.type == 622)
			{
				int num133 = 229;
				if (Main.rand.Next(3) != 0)
				{
					int num134 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, num133, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, default(Color), 1.2f);
					Main.dust[num134].position -= this.velocity * 2f;
					Main.dust[num134].noLight = true;
					Main.dust[num134].noGravity = true;
					Dust expr_66A7_cp_0_cp_0 = Main.dust[num134];
					expr_66A7_cp_0_cp_0.velocity.X = expr_66A7_cp_0_cp_0.velocity.X * 0.3f;
					Dust expr_66C2_cp_0_cp_0 = Main.dust[num134];
					expr_66C2_cp_0_cp_0.velocity.Y = expr_66C2_cp_0_cp_0.velocity.Y * 0.3f;
				}
				this.ai[1] += 1f;
				if (this.ai[1] > (float)(23 * this.MaxUpdates))
				{
					this.Kill();
					return;
				}
			}
			if (this.type == 587)
			{
				Color newColor = Main.hslToRgb(this.ai[1], 1f, 0.5f);
				newColor.A = 200;
				this.localAI[0] += 1f;
				if (this.localAI[0] >= 2f)
				{
					if (this.localAI[0] == 2f)
					{
						Main.PlaySound(SoundID.Item5, this.position);
						for (int num135 = 0; num135 < 4; num135++)
						{
							int num136 = Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X, this.velocity.Y, 0, newColor, 1.1f);
							Main.dust[num136].noGravity = true;
							Main.dust[num136].velocity = base.Center - Main.dust[num136].position;
							Main.dust[num136].velocity.Normalize();
							Main.dust[num136].velocity *= -3f;
							Main.dust[num136].velocity += this.velocity / 2f;
						}
					}
					else
					{
						this.frame++;
						if (this.frame > 2)
						{
							this.frame = 0;
						}
						for (int num137 = 0; num137 < 1; num137++)
						{
							int num138 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 76, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, newColor, 0.9f);
							Main.dust[num138].position = base.Center;
							Main.dust[num138].noGravity = true;
							Main.dust[num138].velocity = this.velocity * 0.5f;
						}
					}
				}
			}
			if (this.type == 349)
			{
				this.frame = (int)this.ai[0];
				this.velocity.Y = this.velocity.Y + 0.2f;
				if (this.localAI[0] == 0f || this.localAI[0] == 2f)
				{
					this.scale += 0.01f;
					this.alpha -= 50;
					if (this.alpha <= 0)
					{
						this.localAI[0] = 1f;
						this.alpha = 0;
					}
				}
				else if (this.localAI[0] == 1f)
				{
					this.scale -= 0.01f;
					this.alpha += 50;
					if (this.alpha >= 255)
					{
						this.localAI[0] = 2f;
						this.alpha = 255;
					}
				}
			}
			if (this.type == 348)
			{
				if (this.localAI[1] == 0f)
				{
					this.localAI[1] = 1f;
					Main.PlaySound(SoundID.Item8, this.position);
				}
				if (this.ai[0] == 0f || this.ai[0] == 2f)
				{
					this.scale += 0.01f;
					this.alpha -= 50;
					if (this.alpha <= 0)
					{
						this.ai[0] = 1f;
						this.alpha = 0;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.scale -= 0.01f;
					this.alpha += 50;
					if (this.alpha >= 255)
					{
						this.ai[0] = 2f;
						this.alpha = 255;
					}
				}
			}
			if (this.type == 572)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlaySound(SoundID.Item17, this.position);
				}
				for (int num139 = 0; num139 < 2; num139++)
				{
					int num140 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X, this.velocity.Y, 100, default(Color), 1f);
					Main.dust[num140].velocity *= 0.5f;
					Main.dust[num140].velocity += this.velocity;
					Main.dust[num140].velocity *= 0.5f;
					Main.dust[num140].noGravity = true;
					Main.dust[num140].scale = 1.2f;
					Main.dust[num140].position = (base.Center + this.position) / 2f;
				}
			}
			if (this.type == 577)
			{
				Lighting.AddLight(base.Center, 0.1f, 0.3f, 0.4f);
			}
			else if (this.type == 576)
			{
				Lighting.AddLight(base.Center, 0.4f, 0.2f, 0.4f);
				for (int num141 = 0; num141 < 5; num141++)
				{
					Dust expr_6CFB = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
					expr_6CFB.velocity = Vector2.Zero;
					expr_6CFB.position -= this.velocity / 5f * (float)num141;
					expr_6CFB.noGravity = true;
					expr_6CFB.scale = 0.8f;
					expr_6CFB.noLight = true;
				}
			}
			else if (this.type == 581)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlaySound(SoundID.Item17, base.Center);
				}
				for (int num142 = 0; num142 < 2; num142++)
				{
					int num143 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						229,
						161,
						161
					});
					Dust expr_6E02 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num143, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
					expr_6E02.velocity = expr_6E02.velocity / 4f + this.velocity / 2f;
					expr_6E02.noGravity = true;
					expr_6E02.scale = 1.2f;
					expr_6E02.position = base.Center;
					expr_6E02.noLight = true;
				}
			}
			else if (this.type == 671)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					for (int num144 = 0; num144 < 8; num144++)
					{
						int num145 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							27,
							62
						});
						Dust expr_6EFD = Main.dust[Dust.NewDust(this.position, this.width, this.height, num145, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
						expr_6EFD.velocity = (Main.rand.NextFloatDirection() * 3.14159274f).ToRotationVector2() * 2f + this.velocity.SafeNormalize(Vector2.Zero) * 3f;
						expr_6EFD.noGravity = true;
						expr_6EFD.scale = 1.5f;
						expr_6EFD.fadeIn = 1.2f;
						expr_6EFD.position = base.Center;
						expr_6EFD.noLight = true;
					}
				}
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				for (int num146 = 0; num146 < 2; num146++)
				{
					int num147 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						27,
						27,
						62
					});
					Dust expr_7008 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num147, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
					expr_7008.velocity = expr_7008.velocity / 4f + this.velocity / 2f;
					expr_7008.noGravity = true;
					expr_7008.scale = 1.2f;
					expr_7008.position = base.Center;
					expr_7008.noLight = true;
				}
			}
			else if (this.type == 675)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlayTrackedSound(SoundID.DD2_DarkMageAttack, base.Center);
				}
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			else if (this.type == 676)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlaySound(SoundID.Item17, base.Center);
				}
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				for (int num148 = 0; num148 < 2; num148++)
				{
					if (Main.rand.Next(5) != 0)
					{
						int num149 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							4,
							256
						});
						Dust dust2 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num149, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
						dust2.velocity = dust2.velocity / 4f + this.velocity / 2f;
						dust2.scale = 0.8f + Main.rand.NextFloat() * 0.4f;
						dust2.position = base.Center;
						dust2.position += new Vector2((float)(this.width * 2), 0f).RotatedBy((double)(6.28318548f * Main.rand.NextFloat()), default(Vector2)) * Main.rand.NextFloat();
						dust2.noLight = true;
						if (dust2.type == 4)
						{
							dust2.color = new Color(80, 170, 40, 120);
						}
					}
				}
			}
			else if (this.type == 686)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlayTrackedSound(SoundID.DD2_BetsyFireballShot, base.Center);
				}
				if (this.ai[0] >= 2f)
				{
					this.alpha -= 25;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					Dust expr_733B = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0f, 0f, 200, default(Color), 1f);
					expr_733B.scale *= 0.7f;
					expr_733B.velocity += this.velocity * 1f;
				}
				if (Main.rand.Next(3) == 0 && this.oldPos[9] != Vector2.Zero)
				{
					Dust expr_73D4 = Dust.NewDustDirect(this.oldPos[9], this.width, this.height, 55, 0f, 0f, 50, default(Color), 1f);
					expr_73D4.scale *= 0.85f;
					expr_73D4.velocity += this.velocity * 0.85f;
					expr_73D4.color = Color.Purple;
				}
			}
			else if (this.type == 711)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					for (int num150 = 0; num150 < 10; num150++)
					{
						Dust expr_7484 = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0f, 0f, 200, default(Color), 1f);
						expr_7484.scale *= 0.65f;
						expr_7484.velocity *= 1.5f;
						expr_7484.velocity += this.velocity * 0.3f;
						expr_7484.fadeIn = 0.7f;
					}
				}
				if (this.ai[0] >= 2f)
				{
					this.alpha -= 25;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					Dust expr_7558 = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0f, 0f, 200, default(Color), 1f);
					expr_7558.scale *= 0.7f;
					expr_7558.velocity += this.velocity * 1f;
				}
				if (Main.rand.Next(3) == 0 && this.oldPos[9] != Vector2.Zero)
				{
					Dust expr_75EE = Dust.NewDustDirect(this.oldPos[9], this.width, this.height, 55, 0f, 0f, 50, default(Color), 1f);
					expr_75EE.scale *= 0.85f;
					expr_75EE.velocity += this.velocity * 0.85f;
					expr_75EE.color = Color.Purple;
				}
			}
			if (this.type == 299)
			{
				if (this.localAI[0] == 6f)
				{
					Main.PlaySound(SoundID.Item8, this.position);
					for (int num151 = 0; num151 < 40; num151++)
					{
						int num152 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 181, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num152].velocity *= 3f;
						Main.dust[num152].velocity += this.velocity * 0.75f;
						Main.dust[num152].scale *= 1.2f;
						Main.dust[num152].noGravity = true;
					}
				}
				this.localAI[0] += 1f;
				if (this.localAI[0] > 6f)
				{
					for (int num153 = 0; num153 < 3; num153++)
					{
						int num154 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 181, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1f);
						Main.dust[num154].velocity *= 0.6f;
						Main.dust[num154].scale *= 1.4f;
						Main.dust[num154].noGravity = true;
					}
				}
			}
			else if (this.type == 270)
			{
				if (this.ai[0] < 0f)
				{
					this.alpha = 0;
				}
				if (this.alpha > 0)
				{
					this.alpha -= 50;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.frame++;
				if (this.frame > 2)
				{
					this.frame = 0;
				}
				if (this.ai[0] < 0f)
				{
					for (int num155 = 0; num155 < 2; num155++)
					{
						int num156 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 5, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1.5f);
						Main.dust[num156].position -= this.velocity;
						Main.dust[num156].noGravity = true;
						Dust expr_7951_cp_0_cp_0 = Main.dust[num156];
						expr_7951_cp_0_cp_0.velocity.X = expr_7951_cp_0_cp_0.velocity.X * 0.3f;
						Dust expr_796C_cp_0_cp_0 = Main.dust[num156];
						expr_796C_cp_0_cp_0.velocity.Y = expr_796C_cp_0_cp_0.velocity.Y * 0.3f;
					}
				}
				else
				{
					for (int num157 = 0; num157 < 2; num157++)
					{
						int num158 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num158].position -= this.velocity * 2f;
						Main.dust[num158].noGravity = true;
						Dust expr_7A4A_cp_0_cp_0 = Main.dust[num158];
						expr_7A4A_cp_0_cp_0.velocity.X = expr_7A4A_cp_0_cp_0.velocity.X * 0.3f;
						Dust expr_7A65_cp_0_cp_0 = Main.dust[num158];
						expr_7A65_cp_0_cp_0.velocity.Y = expr_7A65_cp_0_cp_0.velocity.Y * 0.3f;
					}
				}
			}
			if (this.type == 259)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 10;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 265)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 50;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.alpha == 0)
				{
					int num159 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num159].noGravity = true;
					Main.dust[num159].velocity *= 0.3f;
					Main.dust[num159].velocity -= this.velocity * 0.4f;
				}
			}
			if (this.type == 355)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 50;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.alpha == 0)
				{
					int num160 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 205, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num160].noGravity = true;
					Main.dust[num160].velocity *= 0.3f;
					Main.dust[num160].velocity -= this.velocity * 0.4f;
				}
			}
			if (this.type == 357)
			{
				if (this.alpha < 170)
				{
					for (int num161 = 0; num161 < 10; num161++)
					{
						float x = this.position.X - this.velocity.X / 10f * (float)num161;
						float y = this.position.Y - this.velocity.Y / 10f * (float)num161;
						int num162 = Dust.NewDust(new Vector2(x, y), 1, 1, 206, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num162].alpha = this.alpha;
						Main.dust[num162].position.X = x;
						Main.dust[num162].position.Y = y;
						Main.dust[num162].velocity *= 0f;
						Main.dust[num162].noGravity = true;
					}
				}
				if (this.alpha > 0)
				{
					this.alpha -= 25;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			else if (this.type == 207)
			{
				if (this.alpha < 170)
				{
					for (int num163 = 0; num163 < 10; num163++)
					{
						float x2 = this.position.X - this.velocity.X / 10f * (float)num163;
						float y2 = this.position.Y - this.velocity.Y / 10f * (float)num163;
						int num164 = Dust.NewDust(new Vector2(x2, y2), 1, 1, 75, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num164].alpha = this.alpha;
						Main.dust[num164].position.X = x2;
						Main.dust[num164].position.Y = y2;
						Main.dust[num164].velocity *= 0f;
						Main.dust[num164].noGravity = true;
					}
				}
				float num165 = (float)Math.Sqrt((double)(this.velocity.X * this.velocity.X + this.velocity.Y * this.velocity.Y));
				float num166 = this.localAI[0];
				if (num166 == 0f)
				{
					this.localAI[0] = num165;
					num166 = num165;
				}
				if (this.alpha > 0)
				{
					this.alpha -= 25;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				float num167 = this.position.X;
				float num168 = this.position.Y;
				float num169 = 300f;
				bool flag4 = false;
				int num170 = 0;
				if (this.ai[1] == 0f)
				{
					for (int num171 = 0; num171 < 200; num171++)
					{
						if (Main.npc[num171].CanBeChasedBy(this, false) && (this.ai[1] == 0f || this.ai[1] == (float)(num171 + 1)))
						{
							float num172 = Main.npc[num171].position.X + (float)(Main.npc[num171].width / 2);
							float num173 = Main.npc[num171].position.Y + (float)(Main.npc[num171].height / 2);
							float num174 = Math.Abs(this.position.X + (float)(this.width / 2) - num172) + Math.Abs(this.position.Y + (float)(this.height / 2) - num173);
							if (num174 < num169 && Collision.CanHit(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), 1, 1, Main.npc[num171].position, Main.npc[num171].width, Main.npc[num171].height))
							{
								num169 = num174;
								num167 = num172;
								num168 = num173;
								flag4 = true;
								num170 = num171;
							}
						}
					}
					if (flag4)
					{
						this.ai[1] = (float)(num170 + 1);
					}
					flag4 = false;
				}
				if (this.ai[1] > 0f)
				{
					int num175 = (int)(this.ai[1] - 1f);
					if (Main.npc[num175].active && Main.npc[num175].CanBeChasedBy(this, true) && !Main.npc[num175].dontTakeDamage)
					{
						float num176 = Main.npc[num175].position.X + (float)(Main.npc[num175].width / 2);
						float num177 = Main.npc[num175].position.Y + (float)(Main.npc[num175].height / 2);
						if (Math.Abs(this.position.X + (float)(this.width / 2) - num176) + Math.Abs(this.position.Y + (float)(this.height / 2) - num177) < 1000f)
						{
							flag4 = true;
							num167 = Main.npc[num175].position.X + (float)(Main.npc[num175].width / 2);
							num168 = Main.npc[num175].position.Y + (float)(Main.npc[num175].height / 2);
						}
					}
					else
					{
						this.ai[1] = 0f;
					}
				}
				if (!this.friendly)
				{
					flag4 = false;
				}
				if (flag4)
				{
					float arg_82C0_0 = num166;
					Vector2 vector19 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num178 = num167 - vector19.X;
					float num179 = num168 - vector19.Y;
					float num180 = (float)Math.Sqrt((double)(num178 * num178 + num179 * num179));
					num180 = arg_82C0_0 / num180;
					num178 *= num180;
					num179 *= num180;
					int num181 = 8;
					this.velocity.X = (this.velocity.X * (float)(num181 - 1) + num178) / (float)num181;
					this.velocity.Y = (this.velocity.Y * (float)(num181 - 1) + num179) / (float)num181;
				}
			}
			else if (this.type == 81 || this.type == 91)
			{
				if (this.ai[0] >= 20f)
				{
					this.ai[0] = 20f;
					this.velocity.Y = this.velocity.Y + 0.07f;
				}
			}
			else if (this.type == 174 || this.type == 605)
			{
				if (this.ai[0] >= 5f)
				{
					this.ai[0] = 5f;
					this.velocity.Y = this.velocity.Y + 0.15f;
				}
			}
			else if (this.type == 337)
			{
				if (this.position.Y > Main.player[this.owner].position.Y - 300f)
				{
					this.tileCollide = true;
				}
				if ((double)this.position.Y < Main.worldSurface * 16.0)
				{
					this.tileCollide = true;
				}
				this.frame = (int)this.ai[1];
				if (Main.rand.Next(2) == 0)
				{
					int num182 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 197, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num182].velocity *= 0.5f;
					Main.dust[num182].noGravity = true;
				}
			}
			else if (this.type == 645)
			{
				if (this.ai[1] != -1f && this.position.Y > this.ai[1])
				{
					this.tileCollide = true;
				}
				if (this.position.HasNaNs())
				{
					this.Kill();
					return;
				}
				bool arg_85A8_0 = WorldGen.SolidTile(Framing.GetTileSafely((int)this.position.X / 16, (int)this.position.Y / 16));
				Dust dust3 = Main.dust[Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
				dust3.position = base.Center;
				dust3.velocity = Vector2.Zero;
				dust3.noGravity = true;
				if (arg_85A8_0)
				{
					dust3.noLight = true;
				}
				if (this.ai[1] == -1f)
				{
					this.ai[0] += 1f;
					this.velocity = Vector2.Zero;
					this.tileCollide = false;
					this.penetrate = -1;
					this.position = base.Center;
					this.width = (this.height = 140);
					base.Center = this.position;
					this.alpha -= 10;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					num = this.frameCounter + 1;
					this.frameCounter = num;
					if (num >= this.MaxUpdates * 3)
					{
						this.frameCounter = 0;
						this.frame++;
					}
					if (this.ai[0] >= (float)(Main.projFrames[this.type] * this.MaxUpdates * 3))
					{
						this.Kill();
					}
					return;
				}
				this.alpha = 255;
				if (this.numUpdates == 0)
				{
					int num183 = -1;
					float num184 = 60f;
					for (int num185 = 0; num185 < 200; num185++)
					{
						NPC nPC2 = Main.npc[num185];
						if (nPC2.CanBeChasedBy(this, false))
						{
							float num186 = base.Distance(nPC2.Center);
							if (num186 < num184 && Collision.CanHitLine(base.Center, 0, 0, nPC2.Center, 0, 0))
							{
								num184 = num186;
								num183 = num185;
							}
						}
					}
					if (num183 != -1)
					{
						this.ai[0] = 0f;
						this.ai[1] = -1f;
						this.netUpdate = true;
						return;
					}
				}
			}
			else if (this.type >= 424 && this.type <= 426)
			{
				if (this.position.Y > Main.player[this.owner].position.Y - 300f)
				{
					this.tileCollide = true;
				}
				if ((double)this.position.Y < Main.worldSurface * 16.0)
				{
					this.tileCollide = true;
				}
				this.scale = this.ai[1];
				this.rotation += this.velocity.X * 2f;
				Vector2 position = base.Center + Vector2.Normalize(this.velocity) * 10f;
				Dust expr_8876 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
				expr_8876.position = position;
				expr_8876.velocity = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * 0.33f + this.velocity / 4f;
				expr_8876.position += this.velocity.RotatedBy(1.5707963705062866, default(Vector2));
				expr_8876.fadeIn = 0.5f;
				expr_8876.noGravity = true;
				Dust expr_893D = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
				expr_893D.position = position;
				expr_893D.velocity = this.velocity.RotatedBy(-1.5707963705062866, default(Vector2)) * 0.33f + this.velocity / 4f;
				expr_893D.position += this.velocity.RotatedBy(-1.5707963705062866, default(Vector2));
				expr_893D.fadeIn = 0.5f;
				expr_893D.noGravity = true;
				for (int num187 = 0; num187 < 1; num187++)
				{
					int num188 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num188].velocity *= 0.5f;
					Main.dust[num188].scale *= 1.3f;
					Main.dust[num188].fadeIn = 1f;
					Main.dust[num188].noGravity = true;
				}
			}
			else if (this.type == 344)
			{
				if (WorldGen.SolidTile((int)this.position.X / 16, (int)(this.position.Y + this.velocity.Y) / 16 + 1) || WorldGen.SolidTile((int)(this.position.X + (float)this.width) / 16, (int)(this.position.Y + this.velocity.Y) / 16 + 1))
				{
					this.Kill();
					return;
				}
				this.localAI[1] += 1f;
				if (this.localAI[1] > 5f)
				{
					this.alpha -= 50;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
				this.frame = (int)this.ai[1];
				if (this.localAI[1] > 20f)
				{
					this.localAI[1] = 20f;
					this.velocity.Y = this.velocity.Y + 0.15f;
				}
				this.rotation += Main.windSpeed * 0.2f;
				this.velocity.X = this.velocity.X + Main.windSpeed * 0.1f;
			}
			else if (this.type == 336 || this.type == 345)
			{
				if (this.type == 345 && this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlaySound(SoundID.Item1, this.position);
				}
				if (this.ai[0] >= 50f)
				{
					this.ai[0] = 50f;
					this.velocity.Y = this.velocity.Y + 0.5f;
				}
			}
			else if (this.type == 246)
			{
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.ai[0] >= 60f)
				{
					this.ai[0] = 60f;
					this.velocity.Y = this.velocity.Y + 0.15f;
				}
			}
			else if (this.type == 311)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 50;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.ai[0] >= 30f)
				{
					this.ai[0] = 30f;
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
					}
					this.velocity.Y = this.velocity.Y + 0.5f;
				}
			}
			else if (this.type == 312)
			{
				if (this.ai[0] >= 5f)
				{
					this.alpha = 0;
				}
				if (this.ai[0] >= 20f)
				{
					this.ai[0] = 30f;
					this.velocity.Y = this.velocity.Y + 0.5f;
				}
			}
			else if (this.type != 239 && this.type != 264)
			{
				if (this.type == 176)
				{
					if (this.ai[0] >= 15f)
					{
						this.ai[0] = 15f;
						this.velocity.Y = this.velocity.Y + 0.05f;
					}
				}
				else if (this.type == 275 || this.type == 276)
				{
					if (this.alpha > 0)
					{
						this.alpha -= 30;
					}
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					if (this.ai[0] >= 35f)
					{
						this.ai[0] = 35f;
						this.velocity.Y = this.velocity.Y + 0.025f;
					}
					if (Main.expertMode)
					{
						float scaleFactor3 = 18f;
						int num189 = (int)Player.FindClosest(base.Center, 1, 1);
						Vector2 vector20 = Main.player[num189].Center - base.Center;
						vector20.Normalize();
						vector20 *= scaleFactor3;
						int num190 = 70;
						this.velocity = (this.velocity * (float)(num190 - 1) + vector20) / (float)num190;
						if (this.velocity.Length() < 14f)
						{
							this.velocity.Normalize();
							this.velocity *= 14f;
						}
						this.tileCollide = false;
						if (this.timeLeft > 180)
						{
							this.timeLeft = 180;
						}
					}
				}
				else if (this.type == 172)
				{
					if (this.ai[0] >= 17f)
					{
						this.ai[0] = 17f;
						this.velocity.Y = this.velocity.Y + 0.085f;
					}
				}
				else if (this.type == 117)
				{
					if (this.ai[0] >= 35f)
					{
						this.ai[0] = 35f;
						this.velocity.Y = this.velocity.Y + 0.06f;
					}
				}
				else if (this.type == 120)
				{
					int num191 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 67, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num191].noGravity = true;
					Main.dust[num191].velocity *= 0.3f;
					if (this.ai[0] >= 30f)
					{
						this.ai[0] = 30f;
						this.velocity.Y = this.velocity.Y + 0.05f;
					}
				}
				else if (this.type == 195)
				{
					if (this.ai[0] >= 20f)
					{
						this.ai[0] = 20f;
						this.velocity.Y = this.velocity.Y + 0.075f;
						this.tileCollide = true;
					}
					else
					{
						this.tileCollide = false;
					}
				}
				else if (this.type == 267 || this.type == 477 || this.type == 478 || this.type == 479)
				{
					this.localAI[0] += 1f;
					if (this.localAI[0] > 3f)
					{
						this.alpha = 0;
					}
					if (this.ai[0] >= 20f)
					{
						this.ai[0] = 20f;
						if (this.type != 477)
						{
							this.velocity.Y = this.velocity.Y + 0.075f;
						}
					}
					if (this.type == 479 && Main.myPlayer == this.owner)
					{
						if (this.ai[1] >= 0f)
						{
							this.penetrate = -1;
						}
						else if (this.penetrate < 0)
						{
							this.penetrate = 1;
						}
						if (this.ai[1] >= 0f)
						{
							this.ai[1] += 1f;
						}
						if (this.ai[1] > (float)Main.rand.Next(5, 30))
						{
							this.ai[1] = -1000f;
							float scaleFactor4 = this.velocity.Length();
							Vector2 velocity = this.velocity;
							velocity.Normalize();
							int num192 = Main.rand.Next(2, 4);
							if (Main.rand.Next(4) == 0)
							{
								num192++;
							}
							for (int num193 = 0; num193 < num192; num193++)
							{
								Vector2 vector21 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
								vector21.Normalize();
								vector21 += velocity * 2f;
								vector21.Normalize();
								vector21 *= scaleFactor4;
								Projectile.NewProjectile(base.Center.X, base.Center.Y, vector21.X, vector21.Y, this.type, this.damage, this.knockBack, this.owner, 0f, -1000f);
							}
						}
					}
					if (this.type == 478 && Main.myPlayer == this.owner)
					{
						this.ai[1] += 1f;
						if (this.ai[1] > (float)Main.rand.Next(5, 20))
						{
							if (this.timeLeft > 40)
							{
								this.timeLeft -= 20;
							}
							this.ai[1] = 0f;
							Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)this.damage * 0.8), this.knockBack * 0.5f, this.owner, 0f, 0f);
						}
					}
				}
				else if (this.type == 408)
				{
					if (this.ai[0] >= 45f)
					{
						this.ai[0] = 45f;
						this.velocity.Y = this.velocity.Y + 0.05f;
					}
				}
				else if (this.type == 616)
				{
					if (this.alpha < 170)
					{
						float num194 = 3f;
						int num195 = 0;
						while ((float)num195 < num194)
						{
							int num196 = Dust.NewDust(this.position, 1, 1, 229, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num196].position = base.Center - this.velocity / num194 * (float)num195;
							Main.dust[num196].velocity *= 0f;
							Main.dust[num196].noGravity = true;
							Main.dust[num196].alpha = 200;
							Main.dust[num196].scale = 0.5f;
							num195++;
						}
					}
					float num197 = (float)Math.Sqrt((double)(this.velocity.X * this.velocity.X + this.velocity.Y * this.velocity.Y));
					float num198 = this.localAI[0];
					if (num198 == 0f)
					{
						this.localAI[0] = num197;
						num198 = num197;
					}
					if (this.alpha > 0)
					{
						this.alpha -= 25;
					}
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					float num199 = this.position.X;
					float num200 = this.position.Y;
					float num201 = 800f;
					bool flag5 = false;
					int num202 = 0;
					this.ai[0] += 1f;
					if (this.ai[0] > 20f)
					{
						this.ai[0] -= 1f;
						if (this.ai[1] == 0f)
						{
							for (int num203 = 0; num203 < 200; num203++)
							{
								if (Main.npc[num203].CanBeChasedBy(this, false) && (this.ai[1] == 0f || this.ai[1] == (float)(num203 + 1)))
								{
									float num204 = Main.npc[num203].position.X + (float)(Main.npc[num203].width / 2);
									float num205 = Main.npc[num203].position.Y + (float)(Main.npc[num203].height / 2);
									float num206 = Math.Abs(this.position.X + (float)(this.width / 2) - num204) + Math.Abs(this.position.Y + (float)(this.height / 2) - num205);
									if (num206 < num201 && Collision.CanHit(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), 1, 1, Main.npc[num203].position, Main.npc[num203].width, Main.npc[num203].height))
									{
										num201 = num206;
										num199 = num204;
										num200 = num205;
										flag5 = true;
										num202 = num203;
									}
								}
							}
							if (flag5)
							{
								this.ai[1] = (float)(num202 + 1);
							}
							flag5 = false;
						}
						if (this.ai[1] != 0f)
						{
							int num207 = (int)(this.ai[1] - 1f);
							if (Main.npc[num207].active && Main.npc[num207].CanBeChasedBy(this, true))
							{
								float num208 = Main.npc[num207].position.X + (float)(Main.npc[num207].width / 2);
								float num209 = Main.npc[num207].position.Y + (float)(Main.npc[num207].height / 2);
								if (Math.Abs(this.position.X + (float)(this.width / 2) - num208) + Math.Abs(this.position.Y + (float)(this.height / 2) - num209) < 1000f)
								{
									flag5 = true;
									num199 = Main.npc[num207].position.X + (float)(Main.npc[num207].width / 2);
									num200 = Main.npc[num207].position.Y + (float)(Main.npc[num207].height / 2);
								}
							}
						}
						if (!this.friendly)
						{
							flag5 = false;
						}
						if (flag5)
						{
							float arg_9B40_0 = num198;
							Vector2 vector22 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num210 = num199 - vector22.X;
							float num211 = num200 - vector22.Y;
							float num212 = (float)Math.Sqrt((double)(num210 * num210 + num211 * num211));
							num212 = arg_9B40_0 / num212;
							num210 *= num212;
							num211 *= num212;
							int num213 = 8;
							this.velocity.X = (this.velocity.X * (float)(num213 - 1) + num210) / (float)num213;
							this.velocity.Y = (this.velocity.Y * (float)(num213 - 1) + num211) / (float)num213;
						}
					}
				}
				else if (this.type == 507 || this.type == 508 || this.type == 662 || this.type == 680 || this.type == 685)
				{
					if (this.ai[0] > 45f)
					{
						this.velocity.X = this.velocity.X * 0.98f;
						this.velocity.Y = this.velocity.Y + 0.3f;
					}
				}
				else if (this.type == 495)
				{
					int num214 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num214].noGravity = true;
					Main.dust[num214].velocity *= 0.3f;
					if (this.ai[0] >= 30f)
					{
						this.ai[0] = 30f;
						this.velocity.Y = this.velocity.Y + 0.04f;
					}
				}
				else if (this.type == 498)
				{
					if (this.localAI[0] == 0f)
					{
						this.localAI[0] += 1f;
						Main.PlaySound(SoundID.Item17, this.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 50f)
					{
						this.velocity.X = this.velocity.X * 0.98f;
						this.velocity.Y = this.velocity.Y + 0.15f;
						this.rotation += (float)this.direction * 0.5f;
					}
					else
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				else if (this.type == 437)
				{
					if (this.ai[0] >= 12f)
					{
						if (this.ai[0] >= 20f)
						{
							this.Kill();
						}
						this.alpha += 30;
					}
				}
				else if (this.type != 442 && this.type != 634 && this.type != 635 && this.type != 675)
				{
					if (this.type == 686 || this.type == 711)
					{
						if (this.ai[0] >= 10f)
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
						if (this.ai[0] >= 20f)
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
						if (this.ai[0] > 20f)
						{
							this.ai[0] = 20f;
						}
						this.velocity.X = this.velocity.X * 0.99f;
						if (this.velocity.Y > 32f)
						{
							this.velocity.Y = 32f;
						}
					}
					else if (this.type == 639)
					{
						if (this.timeLeft <= this.MaxUpdates * 45 - 14)
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
					}
					else if (this.type == 710)
					{
						if (this.ai[0] >= 0f)
						{
							this.ai[0] += 1f;
							if (this.ai[0] >= 20f)
							{
								this.velocity.Y = this.velocity.Y + 0.2f;
								if (this.velocity.Y > 0f)
								{
									this.velocity.X = this.velocity.X * 0.98f;
								}
								if (this.velocity.Y > 12f)
								{
									this.velocity.Y = 12f;
								}
							}
						}
					}
					else if (this.ai[0] >= 15f)
					{
						this.ai[0] = 15f;
						this.velocity.Y = this.velocity.Y + 0.1f;
					}
				}
			}
			if (this.type == 248)
			{
				if (this.velocity.X < 0f)
				{
					this.rotation -= (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.05f;
				}
				else
				{
					this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.05f;
				}
			}
			else if (this.type == 270 || this.type == 585 || this.type == 601 || this.type == 706)
			{
				this.spriteDirection = this.direction;
				if (this.direction < 0)
				{
					this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
				}
				else
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
				}
			}
			else if (this.type == 311)
			{
				if (this.ai[1] != 0f)
				{
					this.rotation += this.velocity.X * 0.1f + (float)Main.rand.Next(-10, 11) * 0.025f;
				}
				else
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				}
			}
			else if (this.type == 312)
			{
				this.rotation += this.velocity.X * 0.02f;
			}
			else if (this.type == 675)
			{
				this.rotation += this.velocity.X * 0.03f;
			}
			else if (this.type != 676)
			{
				if (this.type == 408)
				{
					this.rotation = this.velocity.ToRotation();
					if (this.direction == -1)
					{
						this.rotation += 3.14159274f;
					}
				}
				else if (this.type == 435 || this.type == 459 || this.type == 682 || this.type == 709)
				{
					this.rotation = this.velocity.ToRotation();
					if (this.direction == -1)
					{
						this.rotation += 3.14159274f;
					}
				}
				else if (this.type == 660)
				{
					this.rotation = this.velocity.ToRotation() + 0.7853982f;
				}
				else if (this.type == 662 || this.type == 685)
				{
					this.rotation = this.velocity.ToRotation() - 3.14159274f - 0.7853982f;
				}
				else if (this.type == 680 || this.type == 684 || this.type == 686 || this.type == 711 || this.type == 712)
				{
					this.rotation = this.velocity.ToRotation() + 1.57079637f;
				}
				else if (this.type == 436)
				{
					this.rotation = this.velocity.ToRotation();
					this.rotation += 3.14159274f;
					if (this.direction == -1)
					{
						this.rotation += 3.14159274f;
					}
				}
				else if (this.type == 469)
				{
					if (this.velocity.X > 0f)
					{
						this.spriteDirection = -1;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
					else
					{
						this.spriteDirection = 1;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				else if (this.type == 477)
				{
					if (this.localAI[1] < 5f)
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
						this.localAI[1] += 1f;
					}
					else
					{
						this.rotation = (this.rotation * 2f + (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f) / 3f;
					}
				}
				else if (this.type == 532)
				{
					this.rotation += 0.2f + Math.Abs(this.velocity.X) * 0.1f;
				}
				else if (this.type == 483)
				{
					this.rotation += this.velocity.X * 0.05f;
				}
				else if (this.type == 485)
				{
					Vector2 value17 = new Vector2(this.ai[0], this.ai[1]);
					this.velocity = (this.velocity * 39f + value17) / 40f;
					int num215 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num215].noGravity = true;
					Main.dust[num215].velocity *= 0.2f;
					Main.dust[num215].position = (Main.dust[num215].position + base.Center) / 2f;
					this.frameCounter++;
					if (this.frameCounter >= 2)
					{
						this.frameCounter = 0;
						this.frame++;
						if (this.frame >= 5)
						{
							this.frame = 0;
						}
					}
					if (this.velocity.X < 0f)
					{
						this.spriteDirection = -1;
						this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
					}
					else
					{
						this.spriteDirection = 1;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
					}
				}
				else if (this.type == 640)
				{
					if (this.velocity != Vector2.Zero)
					{
						this.rotation = this.velocity.ToRotation() + 1.57079637f;
					}
				}
				else if (this.type != 344 && this.type != 498)
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				}
			}
			if (this.velocity.Y > 16f)
			{
				this.velocity.Y = 16f;
			}
		}

		// Token: 0x060001D4 RID: 468 RVA: 0x0008BB50 File Offset: 0x00089D50
		private void AI_026()
		{
			if (!Main.player[this.owner].active)
			{
				this.active = false;
				return;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			int num = 85;
			bool flag5 = this.type >= 191 && this.type <= 194;
			if (this.type == 324)
			{
				num = 120;
			}
			if (this.type == 112)
			{
				num = 100;
			}
			if (this.type == 127)
			{
				num = 50;
			}
			if (flag5)
			{
				if (this.lavaWet)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
				}
				num = 60 + 30 * this.minionPos;
			}
			else if (this.type == 266)
			{
				num = 60 + 30 * this.minionPos;
			}
			if (this.type == 111)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].bunny = false;
				}
				if (Main.player[this.owner].bunny)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 112)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].penguin = false;
				}
				if (Main.player[this.owner].penguin)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 334)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].puppy = false;
				}
				if (Main.player[this.owner].puppy)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 353)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].grinch = false;
				}
				if (Main.player[this.owner].grinch)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 127)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].turtle = false;
				}
				if (Main.player[this.owner].turtle)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 175)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].eater = false;
				}
				if (Main.player[this.owner].eater)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 197)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].skeletron = false;
				}
				if (Main.player[this.owner].skeletron)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 198)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].hornet = false;
				}
				if (Main.player[this.owner].hornet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 199)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].tiki = false;
				}
				if (Main.player[this.owner].tiki)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 200)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].lizard = false;
				}
				if (Main.player[this.owner].lizard)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 208)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].parrot = false;
				}
				if (Main.player[this.owner].parrot)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 209)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].truffle = false;
				}
				if (Main.player[this.owner].truffle)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 210)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].sapling = false;
				}
				if (Main.player[this.owner].sapling)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 324)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].cSapling = false;
				}
				if (Main.player[this.owner].cSapling)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 313)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].spider = false;
				}
				if (Main.player[this.owner].spider)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 314)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].squashling = false;
				}
				if (Main.player[this.owner].squashling)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 211)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].wisp = false;
				}
				if (Main.player[this.owner].wisp)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 236)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].dino = false;
				}
				if (Main.player[this.owner].dino)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 499)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].babyFaceMonster = false;
				}
				if (Main.player[this.owner].babyFaceMonster)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 266)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].slime = false;
				}
				if (Main.player[this.owner].slime)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 268)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].eyeSpring = false;
				}
				if (Main.player[this.owner].eyeSpring)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 269)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].snowman = false;
				}
				if (Main.player[this.owner].snowman)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 319)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].blackCat = false;
				}
				if (Main.player[this.owner].blackCat)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 380)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].zephyrfish = false;
				}
				if (Main.player[this.owner].zephyrfish)
				{
					this.timeLeft = 2;
				}
			}
			if (flag5)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].pygmy = false;
				}
				if (Main.player[this.owner].pygmy)
				{
					this.timeLeft = Main.rand.Next(2, 10);
				}
			}
			if (this.type >= 390 && this.type <= 392)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].spiderMinion = false;
				}
				if (Main.player[this.owner].spiderMinion)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 398)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].miniMinotaur = false;
				}
				if (Main.player[this.owner].miniMinotaur)
				{
					this.timeLeft = 2;
				}
			}
			if (flag5 || this.type == 266 || (this.type >= 390 && this.type <= 392))
			{
				num = 10;
				int num2 = 40 * (this.minionPos + 1) * Main.player[this.owner].direction;
				if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) < this.position.X + (float)(this.width / 2) - (float)num + (float)num2)
				{
					flag = true;
				}
				else if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) > this.position.X + (float)(this.width / 2) + (float)num + (float)num2)
				{
					flag2 = true;
				}
			}
			else if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) < this.position.X + (float)(this.width / 2) - (float)num)
			{
				flag = true;
			}
			else if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) > this.position.X + (float)(this.width / 2) + (float)num)
			{
				flag2 = true;
			}
			if (this.type == 175)
			{
				float num3 = 0.1f;
				this.tileCollide = false;
				int num4 = 300;
				Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num5 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector.X;
				float num6 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector.Y;
				if (this.type == 127)
				{
					num6 = Main.player[this.owner].position.Y - vector.Y;
				}
				float num7 = (float)Math.Sqrt((double)(num5 * num5 + num6 * num6));
				float num8 = 7f;
				if (num7 < (float)num4 && Main.player[this.owner].velocity.Y == 0f && this.position.Y + (float)this.height <= Main.player[this.owner].position.Y + (float)Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.ai[0] = 0f;
					if (this.velocity.Y < -6f)
					{
						this.velocity.Y = -6f;
					}
				}
				if (num7 < 150f)
				{
					if (Math.Abs(this.velocity.X) > 2f || Math.Abs(this.velocity.Y) > 2f)
					{
						this.velocity *= 0.99f;
					}
					num3 = 0.01f;
					if (num5 < -2f)
					{
						num5 = -2f;
					}
					if (num5 > 2f)
					{
						num5 = 2f;
					}
					if (num6 < -2f)
					{
						num6 = -2f;
					}
					if (num6 > 2f)
					{
						num6 = 2f;
					}
				}
				else
				{
					if (num7 > 300f)
					{
						num3 = 0.2f;
					}
					num7 = num8 / num7;
					num5 *= num7;
					num6 *= num7;
				}
				if (Math.Abs(num5) > Math.Abs(num6) || num3 == 0.05f)
				{
					if (this.velocity.X < num5)
					{
						this.velocity.X = this.velocity.X + num3;
						if (num3 > 0.05f && this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X + num3;
						}
					}
					if (this.velocity.X > num5)
					{
						this.velocity.X = this.velocity.X - num3;
						if (num3 > 0.05f && this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X - num3;
						}
					}
				}
				if (Math.Abs(num5) <= Math.Abs(num6) || num3 == 0.05f)
				{
					if (this.velocity.Y < num6)
					{
						this.velocity.Y = this.velocity.Y + num3;
						if (num3 > 0.05f && this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y + num3;
						}
					}
					if (this.velocity.Y > num6)
					{
						this.velocity.Y = this.velocity.Y - num3;
						if (num3 > 0.05f && this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y - num3;
						}
					}
				}
				this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
				this.frameCounter++;
				if (this.frameCounter > 6)
				{
					this.frame++;
					this.frameCounter = 0;
				}
				if (this.frame > 1)
				{
					this.frame = 0;
					return;
				}
			}
			else if (this.type == 197)
			{
				float num9 = 0.1f;
				this.tileCollide = false;
				int num10 = 300;
				Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num11 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector2.X;
				float num12 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector2.Y;
				if (this.type == 127)
				{
					num12 = Main.player[this.owner].position.Y - vector2.Y;
				}
				float num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
				float num14 = 3f;
				if (num13 > 500f)
				{
					this.localAI[0] = 10000f;
				}
				if (this.localAI[0] >= 10000f)
				{
					num14 = 14f;
				}
				if (num13 < (float)num10 && Main.player[this.owner].velocity.Y == 0f && this.position.Y + (float)this.height <= Main.player[this.owner].position.Y + (float)Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.ai[0] = 0f;
					if (this.velocity.Y < -6f)
					{
						this.velocity.Y = -6f;
					}
				}
				if (num13 < 150f)
				{
					if (Math.Abs(this.velocity.X) > 2f || Math.Abs(this.velocity.Y) > 2f)
					{
						this.velocity *= 0.99f;
					}
					num9 = 0.01f;
					if (num11 < -2f)
					{
						num11 = -2f;
					}
					if (num11 > 2f)
					{
						num11 = 2f;
					}
					if (num12 < -2f)
					{
						num12 = -2f;
					}
					if (num12 > 2f)
					{
						num12 = 2f;
					}
				}
				else
				{
					if (num13 > 300f)
					{
						num9 = 0.2f;
					}
					num13 = num14 / num13;
					num11 *= num13;
					num12 *= num13;
				}
				if (this.velocity.X < num11)
				{
					this.velocity.X = this.velocity.X + num9;
					if (num9 > 0.05f && this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X + num9;
					}
				}
				if (this.velocity.X > num11)
				{
					this.velocity.X = this.velocity.X - num9;
					if (num9 > 0.05f && this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X - num9;
					}
				}
				if (this.velocity.Y < num12)
				{
					this.velocity.Y = this.velocity.Y + num9;
					if (num9 > 0.05f && this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + num9;
					}
				}
				if (this.velocity.Y > num12)
				{
					this.velocity.Y = this.velocity.Y - num9;
					if (num9 > 0.05f && this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - num9;
					}
				}
				this.localAI[0] += (float)Main.rand.Next(10);
				if (this.localAI[0] > 10000f)
				{
					if (this.localAI[1] == 0f)
					{
						if (this.velocity.X < 0f)
						{
							this.localAI[1] = -1f;
						}
						else
						{
							this.localAI[1] = 1f;
						}
					}
					this.rotation += 0.25f * this.localAI[1];
					if (this.localAI[0] > 12000f)
					{
						this.localAI[0] = 0f;
					}
				}
				else
				{
					this.localAI[1] = 0f;
					float num15 = this.velocity.X * 0.1f;
					if (this.rotation > num15)
					{
						this.rotation -= (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f;
						if (this.rotation < num15)
						{
							this.rotation = num15;
						}
					}
					if (this.rotation < num15)
					{
						this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f;
						if (this.rotation > num15)
						{
							this.rotation = num15;
						}
					}
				}
				if ((double)this.rotation > 6.28)
				{
					this.rotation -= 6.28f;
				}
				if ((double)this.rotation < -6.28)
				{
					this.rotation += 6.28f;
					return;
				}
			}
			else if (this.type == 198 || this.type == 380)
			{
				float num16 = 0.4f;
				if (this.type == 380)
				{
					num16 = 0.3f;
				}
				this.tileCollide = false;
				int num17 = 100;
				Vector2 vector3 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num18 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector3.X;
				float num19 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector3.Y;
				num19 += (float)Main.rand.Next(-10, 21);
				num18 += (float)Main.rand.Next(-10, 21);
				num18 += (float)(60 * -(float)Main.player[this.owner].direction);
				num19 -= 60f;
				if (this.type == 127)
				{
					num19 = Main.player[this.owner].position.Y - vector3.Y;
				}
				float num20 = (float)Math.Sqrt((double)(num18 * num18 + num19 * num19));
				float num21 = 14f;
				if (this.type == 380)
				{
					num21 = 6f;
				}
				if (num20 < (float)num17 && Main.player[this.owner].velocity.Y == 0f && this.position.Y + (float)this.height <= Main.player[this.owner].position.Y + (float)Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.ai[0] = 0f;
					if (this.velocity.Y < -6f)
					{
						this.velocity.Y = -6f;
					}
				}
				if (num20 < 50f)
				{
					if (Math.Abs(this.velocity.X) > 2f || Math.Abs(this.velocity.Y) > 2f)
					{
						this.velocity *= 0.99f;
					}
					num16 = 0.01f;
				}
				else
				{
					if (this.type == 380)
					{
						if (num20 < 100f)
						{
							num16 = 0.1f;
						}
						if (num20 > 300f)
						{
							num16 = 0.4f;
						}
					}
					else if (this.type == 198)
					{
						if (num20 < 100f)
						{
							num16 = 0.1f;
						}
						if (num20 > 300f)
						{
							num16 = 0.6f;
						}
					}
					num20 = num21 / num20;
					num18 *= num20;
					num19 *= num20;
				}
				if (this.velocity.X < num18)
				{
					this.velocity.X = this.velocity.X + num16;
					if (num16 > 0.05f && this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X + num16;
					}
				}
				if (this.velocity.X > num18)
				{
					this.velocity.X = this.velocity.X - num16;
					if (num16 > 0.05f && this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X - num16;
					}
				}
				if (this.velocity.Y < num19)
				{
					this.velocity.Y = this.velocity.Y + num16;
					if (num16 > 0.05f && this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + num16 * 2f;
					}
				}
				if (this.velocity.Y > num19)
				{
					this.velocity.Y = this.velocity.Y - num16;
					if (num16 > 0.05f && this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - num16 * 2f;
					}
				}
				if ((double)this.velocity.X > 0.25)
				{
					this.direction = -1;
				}
				else if ((double)this.velocity.X < -0.25)
				{
					this.direction = 1;
				}
				this.spriteDirection = this.direction;
				this.rotation = this.velocity.X * 0.05f;
				this.frameCounter++;
				int num22 = 2;
				if (this.type == 380)
				{
					num22 = 5;
				}
				if (this.frameCounter > num22)
				{
					this.frame++;
					this.frameCounter = 0;
				}
				if (this.frame > 3)
				{
					this.frame = 0;
					return;
				}
			}
			else if (this.type == 211)
			{
				float num23 = 0.2f;
				float num24 = 5f;
				this.tileCollide = false;
				Vector2 vector4 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num25 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector4.X;
				float num26 = Main.player[this.owner].position.Y + Main.player[this.owner].gfxOffY + (float)(Main.player[this.owner].height / 2) - vector4.Y;
				if (Main.player[this.owner].controlLeft)
				{
					num25 -= 120f;
				}
				else if (Main.player[this.owner].controlRight)
				{
					num25 += 120f;
				}
				if (Main.player[this.owner].controlDown)
				{
					num26 += 120f;
				}
				else
				{
					if (Main.player[this.owner].controlUp)
					{
						num26 -= 120f;
					}
					num26 -= 60f;
				}
				float num27 = (float)Math.Sqrt((double)(num25 * num25 + num26 * num26));
				if (num27 > 1000f)
				{
					this.position.X = this.position.X + num25;
					this.position.Y = this.position.Y + num26;
				}
				if (this.localAI[0] == 1f)
				{
					if (num27 < 10f && Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y) < num24 && Main.player[this.owner].velocity.Y == 0f)
					{
						this.localAI[0] = 0f;
					}
					num24 = 12f;
					if (num27 < num24)
					{
						this.velocity.X = num25;
						this.velocity.Y = num26;
					}
					else
					{
						num27 = num24 / num27;
						this.velocity.X = num25 * num27;
						this.velocity.Y = num26 * num27;
					}
					if ((double)this.velocity.X > 0.5)
					{
						this.direction = -1;
					}
					else if ((double)this.velocity.X < -0.5)
					{
						this.direction = 1;
					}
					this.spriteDirection = this.direction;
					this.rotation -= (0.2f + Math.Abs(this.velocity.X) * 0.025f) * (float)this.direction;
					this.frameCounter++;
					if (this.frameCounter > 3)
					{
						this.frame++;
						this.frameCounter = 0;
					}
					if (this.frame < 5)
					{
						this.frame = 5;
					}
					if (this.frame > 9)
					{
						this.frame = 5;
					}
					for (int i = 0; i < 2; i++)
					{
						int num28 = Dust.NewDust(new Vector2(this.position.X + 3f, this.position.Y + 4f), 14, 14, 156, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num28].velocity *= 0.2f;
						Main.dust[num28].noGravity = true;
						Main.dust[num28].scale = 1.25f;
						Main.dust[num28].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
					}
					return;
				}
				if (num27 > 200f)
				{
					this.localAI[0] = 1f;
				}
				if ((double)this.velocity.X > 0.5)
				{
					this.direction = -1;
				}
				else if ((double)this.velocity.X < -0.5)
				{
					this.direction = 1;
				}
				this.spriteDirection = this.direction;
				if (num27 < 10f)
				{
					this.velocity.X = num25;
					this.velocity.Y = num26;
					this.rotation = this.velocity.X * 0.05f;
					if (num27 < num24)
					{
						this.position += this.velocity;
						this.velocity *= 0f;
						num23 = 0f;
					}
					this.direction = -Main.player[this.owner].direction;
				}
				num27 = num24 / num27;
				num25 *= num27;
				num26 *= num27;
				if (this.velocity.X < num25)
				{
					this.velocity.X = this.velocity.X + num23;
					if (this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X * 0.99f;
					}
				}
				if (this.velocity.X > num25)
				{
					this.velocity.X = this.velocity.X - num23;
					if (this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X * 0.99f;
					}
				}
				if (this.velocity.Y < num26)
				{
					this.velocity.Y = this.velocity.Y + num23;
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y * 0.99f;
					}
				}
				if (this.velocity.Y > num26)
				{
					this.velocity.Y = this.velocity.Y - num23;
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y * 0.99f;
					}
				}
				if (this.velocity.X != 0f || this.velocity.Y != 0f)
				{
					this.rotation = this.velocity.X * 0.05f;
				}
				this.frameCounter++;
				if (this.frameCounter > 3)
				{
					this.frame++;
					this.frameCounter = 0;
				}
				if (this.frame > 4)
				{
					this.frame = 0;
					return;
				}
			}
			else if (this.type == 199)
			{
				float num29 = 0.1f;
				this.tileCollide = false;
				int num30 = 200;
				Vector2 vector5 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num31 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector5.X;
				float num32 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector5.Y;
				num32 -= 60f;
				num31 -= 2f;
				if (this.type == 127)
				{
					num32 = Main.player[this.owner].position.Y - vector5.Y;
				}
				float num33 = (float)Math.Sqrt((double)(num31 * num31 + num32 * num32));
				float num34 = 4f;
				float arg_2347_0 = num33;
				if (num33 < (float)num30 && Main.player[this.owner].velocity.Y == 0f && this.position.Y + (float)this.height <= Main.player[this.owner].position.Y + (float)Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.ai[0] = 0f;
					if (this.velocity.Y < -6f)
					{
						this.velocity.Y = -6f;
					}
				}
				if (num33 < 4f)
				{
					this.velocity.X = num31;
					this.velocity.Y = num32;
					num29 = 0f;
				}
				else
				{
					if (num33 > 350f)
					{
						num29 = 0.2f;
						num34 = 10f;
					}
					num33 = num34 / num33;
					num31 *= num33;
					num32 *= num33;
				}
				if (this.velocity.X < num31)
				{
					this.velocity.X = this.velocity.X + num29;
					if (this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X + num29;
					}
				}
				if (this.velocity.X > num31)
				{
					this.velocity.X = this.velocity.X - num29;
					if (this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X - num29;
					}
				}
				if (this.velocity.Y < num32)
				{
					this.velocity.Y = this.velocity.Y + num29;
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + num29;
					}
				}
				if (this.velocity.Y > num32)
				{
					this.velocity.Y = this.velocity.Y - num29;
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - num29;
					}
				}
				this.direction = -Main.player[this.owner].direction;
				this.spriteDirection = 1;
				this.rotation = this.velocity.Y * 0.05f * (float)(-(float)this.direction);
				if (arg_2347_0 >= 50f)
				{
					this.frameCounter++;
					if (this.frameCounter > 6)
					{
						this.frameCounter = 0;
						if (this.velocity.X < 0f)
						{
							if (this.frame < 2)
							{
								this.frame++;
							}
							if (this.frame > 2)
							{
								this.frame--;
								return;
							}
						}
						else
						{
							if (this.frame < 6)
							{
								this.frame++;
							}
							if (this.frame > 6)
							{
								this.frame--;
								return;
							}
						}
					}
				}
				else
				{
					this.frameCounter++;
					if (this.frameCounter > 6)
					{
						this.frame += this.direction;
						this.frameCounter = 0;
					}
					if (this.frame > 7)
					{
						this.frame = 0;
					}
					if (this.frame < 0)
					{
						this.frame = 7;
						return;
					}
				}
			}
			else
			{
				if (this.ai[1] == 0f)
				{
					int num35 = 500;
					if (this.type == 127)
					{
						num35 = 200;
					}
					if (this.type == 208)
					{
						num35 = 300;
					}
					if (flag5 || this.type == 266 || (this.type >= 390 && this.type <= 392))
					{
						num35 += 40 * this.minionPos;
						if (this.localAI[0] > 0f)
						{
							num35 += 500;
						}
						if (this.type == 266 && this.localAI[0] > 0f)
						{
							num35 += 100;
						}
						if (this.type >= 390 && this.type <= 392 && this.localAI[0] > 0f)
						{
							num35 += 400;
						}
					}
					if (Main.player[this.owner].rocketDelay2 > 0)
					{
						this.ai[0] = 1f;
					}
					Vector2 vector6 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float arg_25E3_0 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector6.X;
					float num36 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector6.Y;
					float num37 = (float)Math.Sqrt((double)(arg_25E3_0 * arg_25E3_0 + num36 * num36));
					if (num37 > 2000f)
					{
						this.position.X = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - (float)(this.width / 2);
						this.position.Y = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - (float)(this.height / 2);
					}
					else if (num37 > (float)num35 || (Math.Abs(num36) > 300f && ((!flag5 && this.type != 266 && (this.type < 390 || this.type > 392)) || this.localAI[0] <= 0f)))
					{
						if (this.type != 324)
						{
							if (num36 > 0f && this.velocity.Y < 0f)
							{
								this.velocity.Y = 0f;
							}
							if (num36 < 0f && this.velocity.Y > 0f)
							{
								this.velocity.Y = 0f;
							}
						}
						this.ai[0] = 1f;
					}
				}
				if (this.type == 209 && this.ai[0] != 0f)
				{
					if (Main.player[this.owner].velocity.Y == 0f && this.alpha >= 100)
					{
						this.position.X = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - (float)(this.width / 2);
						this.position.Y = Main.player[this.owner].position.Y + (float)Main.player[this.owner].height - (float)this.height;
						this.ai[0] = 0f;
						return;
					}
					this.velocity.X = 0f;
					this.velocity.Y = 0f;
					this.alpha += 5;
					if (this.alpha > 255)
					{
						this.alpha = 255;
						return;
					}
				}
				else if (this.ai[0] != 0f)
				{
					float num38 = 0.2f;
					int num39 = 200;
					if (this.type == 127)
					{
						num39 = 100;
					}
					if (flag5)
					{
						num38 = 0.5f;
						num39 = 100;
					}
					this.tileCollide = false;
					Vector2 vector7 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num40 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector7.X;
					if (flag5 || this.type == 266 || (this.type >= 390 && this.type <= 392))
					{
						num40 -= (float)(40 * Main.player[this.owner].direction);
						float num41 = 700f;
						if (flag5)
						{
							num41 += 100f;
						}
						bool flag6 = false;
						int num42 = -1;
						for (int j = 0; j < 200; j++)
						{
							if (Main.npc[j].CanBeChasedBy(this, false))
							{
								float num43 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
								float num44 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
								if (Math.Abs(Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - num43) + Math.Abs(Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - num44) < num41)
								{
									if (Collision.CanHit(this.position, this.width, this.height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height))
									{
										num42 = j;
									}
									flag6 = true;
									break;
								}
							}
						}
						if (!flag6)
						{
							num40 -= (float)(40 * this.minionPos * Main.player[this.owner].direction);
						}
						if (flag6 && num42 >= 0)
						{
							this.ai[0] = 0f;
						}
					}
					float num45 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector7.Y;
					if (this.type == 127)
					{
						num45 = Main.player[this.owner].position.Y - vector7.Y;
					}
					float num46 = (float)Math.Sqrt((double)(num40 * num40 + num45 * num45));
					float num47 = 10f;
					float num48 = num46;
					if (this.type == 111)
					{
						num47 = 11f;
					}
					if (this.type == 127)
					{
						num47 = 9f;
					}
					if (this.type == 324)
					{
						num47 = 20f;
					}
					if (flag5)
					{
						num38 = 0.4f;
						num47 = 12f;
						if (num47 < Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y))
						{
							num47 = Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y);
						}
					}
					if (this.type == 208 && Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y) > 4f)
					{
						num39 = -1;
					}
					if (num46 < (float)num39 && Main.player[this.owner].velocity.Y == 0f && this.position.Y + (float)this.height <= Main.player[this.owner].position.Y + (float)Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height))
					{
						this.ai[0] = 0f;
						if (this.velocity.Y < -6f)
						{
							this.velocity.Y = -6f;
						}
					}
					if (num46 < 60f)
					{
						num40 = this.velocity.X;
						num45 = this.velocity.Y;
					}
					else
					{
						num46 = num47 / num46;
						num40 *= num46;
						num45 *= num46;
					}
					if (this.type == 324)
					{
						if (num48 > 1000f)
						{
							if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num47 - 1.25)
							{
								this.velocity *= 1.025f;
							}
							if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) > (double)num47 + 1.25)
							{
								this.velocity *= 0.975f;
							}
						}
						else if (num48 > 600f)
						{
							if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < num47 - 1f)
							{
								this.velocity *= 1.05f;
							}
							if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > num47 + 1f)
							{
								this.velocity *= 0.95f;
							}
						}
						else if (num48 > 400f)
						{
							if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num47 - 0.5)
							{
								this.velocity *= 1.075f;
							}
							if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) > (double)num47 + 0.5)
							{
								this.velocity *= 0.925f;
							}
						}
						else
						{
							if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num47 - 0.25)
							{
								this.velocity *= 1.1f;
							}
							if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) > (double)num47 + 0.25)
							{
								this.velocity *= 0.9f;
							}
						}
						this.velocity.X = (this.velocity.X * 34f + num40) / 35f;
						this.velocity.Y = (this.velocity.Y * 34f + num45) / 35f;
					}
					else
					{
						if (this.velocity.X < num40)
						{
							this.velocity.X = this.velocity.X + num38;
							if (this.velocity.X < 0f)
							{
								this.velocity.X = this.velocity.X + num38 * 1.5f;
							}
						}
						if (this.velocity.X > num40)
						{
							this.velocity.X = this.velocity.X - num38;
							if (this.velocity.X > 0f)
							{
								this.velocity.X = this.velocity.X - num38 * 1.5f;
							}
						}
						if (this.velocity.Y < num45)
						{
							this.velocity.Y = this.velocity.Y + num38;
							if (this.velocity.Y < 0f)
							{
								this.velocity.Y = this.velocity.Y + num38 * 1.5f;
							}
						}
						if (this.velocity.Y > num45)
						{
							this.velocity.Y = this.velocity.Y - num38;
							if (this.velocity.Y > 0f)
							{
								this.velocity.Y = this.velocity.Y - num38 * 1.5f;
							}
						}
					}
					if (this.type == 111)
					{
						this.frame = 7;
					}
					if (this.type == 112)
					{
						this.frame = 2;
					}
					if (flag5 && this.frame < 12)
					{
						this.frame = Main.rand.Next(12, 18);
						this.frameCounter = 0;
					}
					if (this.type != 313)
					{
						if ((double)this.velocity.X > 0.5)
						{
							this.spriteDirection = -1;
						}
						else if ((double)this.velocity.X < -0.5)
						{
							this.spriteDirection = 1;
						}
					}
					if (this.type == 398)
					{
						if ((double)this.velocity.X > 0.5)
						{
							this.spriteDirection = 1;
						}
						else if ((double)this.velocity.X < -0.5)
						{
							this.spriteDirection = -1;
						}
					}
					if (this.type == 112)
					{
						if (this.spriteDirection == -1)
						{
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
						}
						else
						{
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
						}
					}
					else if (this.type >= 390 && this.type <= 392)
					{
						int num49 = (int)(base.Center.X / 16f);
						int num50 = (int)(base.Center.Y / 16f);
						if (Main.tile[num49, num50] != null && Main.tile[num49, num50].wall > 0)
						{
							this.rotation = this.velocity.ToRotation() + 1.57079637f;
							this.frameCounter += (int)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y));
							if (this.frameCounter > 5)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 7)
							{
								this.frame = 4;
							}
							if (this.frame < 4)
							{
								this.frame = 7;
							}
						}
						else
						{
							this.frameCounter++;
							if (this.frameCounter > 2)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 8 || this.frame > 10)
							{
								this.frame = 8;
							}
							this.rotation = this.velocity.X * 0.1f;
						}
					}
					else if (this.type == 334)
					{
						this.frameCounter++;
						if (this.frameCounter > 1)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame < 7 || this.frame > 10)
						{
							this.frame = 7;
						}
						this.rotation = this.velocity.X * 0.1f;
					}
					else if (this.type == 353)
					{
						this.frameCounter++;
						if (this.frameCounter > 6)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame < 10 || this.frame > 13)
						{
							this.frame = 10;
						}
						this.rotation = this.velocity.X * 0.05f;
					}
					else if (this.type == 127)
					{
						this.frameCounter += 3;
						if (this.frameCounter > 6)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame <= 5 || this.frame > 15)
						{
							this.frame = 6;
						}
						this.rotation = this.velocity.X * 0.1f;
					}
					else if (this.type == 269)
					{
						if (this.frame == 6)
						{
							this.frameCounter = 0;
						}
						else if (this.frame < 4 || this.frame > 6)
						{
							this.frameCounter = 0;
							this.frame = 4;
						}
						else
						{
							this.frameCounter++;
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
						}
						this.rotation = this.velocity.X * 0.05f;
					}
					else if (this.type == 266)
					{
						this.frameCounter++;
						if (this.frameCounter > 6)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame < 2 || this.frame > 5)
						{
							this.frame = 2;
						}
						this.rotation = this.velocity.X * 0.1f;
					}
					else if (this.type == 324)
					{
						this.frameCounter++;
						if (this.frameCounter > 1)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame < 6 || this.frame > 9)
						{
							this.frame = 6;
						}
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.58f;
						Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
						for (int k = 0; k < 2; k++)
						{
							int num51 = 4;
							int num52 = Dust.NewDust(new Vector2(base.Center.X - (float)num51, base.Center.Y - (float)num51) - this.velocity * 0f, num51 * 2, num51 * 2, 6, 0f, 0f, 100, default(Color), 1f);
							Main.dust[num52].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num52].velocity *= 0.2f;
							if (k == 1)
							{
								Main.dust[num52].position -= this.velocity * 0.5f;
							}
							Main.dust[num52].noGravity = true;
							num52 = Dust.NewDust(new Vector2(base.Center.X - (float)num51, base.Center.Y - (float)num51) - this.velocity * 0f, num51 * 2, num51 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num52].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
							Main.dust[num52].velocity *= 0.05f;
							if (k == 1)
							{
								Main.dust[num52].position -= this.velocity * 0.5f;
							}
						}
					}
					else if (this.type == 268)
					{
						this.frameCounter++;
						if (this.frameCounter > 4)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame < 6 || this.frame > 7)
						{
							this.frame = 6;
						}
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.58f;
					}
					else if (this.type == 200)
					{
						this.frameCounter += 3;
						if (this.frameCounter > 6)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame <= 5 || this.frame > 9)
						{
							this.frame = 6;
						}
						this.rotation = this.velocity.X * 0.1f;
					}
					else if (this.type == 208)
					{
						this.rotation = this.velocity.X * 0.075f;
						this.frameCounter++;
						if (this.frameCounter > 6)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame > 4)
						{
							this.frame = 1;
						}
						if (this.frame < 1)
						{
							this.frame = 1;
						}
					}
					else if (this.type == 236)
					{
						this.rotation = this.velocity.Y * 0.05f * (float)this.direction;
						if (this.velocity.Y < 0f)
						{
							this.frameCounter += 2;
						}
						else
						{
							this.frameCounter++;
						}
						if (this.frameCounter >= 6)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame > 12)
						{
							this.frame = 9;
						}
						if (this.frame < 9)
						{
							this.frame = 9;
						}
					}
					else if (this.type == 499)
					{
						this.rotation = this.velocity.Y * 0.05f * (float)this.direction;
						if (this.velocity.Y < 0f)
						{
							this.frameCounter += 2;
						}
						else
						{
							this.frameCounter++;
						}
						if (this.frameCounter >= 6)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame >= 12)
						{
							this.frame = 8;
						}
						if (this.frame < 8)
						{
							this.frame = 8;
						}
					}
					else if (this.type == 314)
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.58f;
						this.frameCounter++;
						if (this.frameCounter >= 3)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame > 12)
						{
							this.frame = 7;
						}
						if (this.frame < 7)
						{
							this.frame = 7;
						}
					}
					else if (this.type == 319)
					{
						this.rotation = this.velocity.X * 0.05f;
						this.frameCounter++;
						if (this.frameCounter >= 6)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame > 10)
						{
							this.frame = 6;
						}
						if (this.frame < 6)
						{
							this.frame = 6;
						}
					}
					else if (this.type == 210)
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.58f;
						this.frameCounter += 3;
						if (this.frameCounter > 6)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame > 11)
						{
							this.frame = 7;
						}
						if (this.frame < 7)
						{
							this.frame = 7;
						}
					}
					else if (this.type == 313)
					{
						this.position.Y = this.position.Y + (float)this.height;
						this.height = 54;
						this.position.Y = this.position.Y - (float)this.height;
						this.position.X = this.position.X + (float)(this.width / 2);
						this.width = 54;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.rotation += this.velocity.X * 0.01f;
						this.frameCounter = 0;
						this.frame = 11;
					}
					else if (this.type == 398)
					{
						this.frameCounter++;
						if (this.frameCounter > 1)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame < 6 || this.frame > 9)
						{
							this.frame = 6;
						}
						this.rotation = this.velocity.X * 0.1f;
					}
					else if (this.spriteDirection == -1)
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
					}
					else
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 3.14f;
					}
					if (!flag5 && this.type != 499 && this.type != 398 && this.type != 390 && this.type != 391 && this.type != 392 && this.type != 127 && this.type != 200 && this.type != 208 && this.type != 210 && this.type != 236 && this.type != 266 && this.type != 268 && this.type != 269 && this.type != 313 && this.type != 314 && this.type != 319 && this.type != 324 && this.type != 334 && this.type != 353)
					{
						int num53 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) - 4f, this.position.Y + (float)(this.height / 2) - 4f) - this.velocity, 8, 8, 16, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.7f);
						Main.dust[num53].velocity.X = Main.dust[num53].velocity.X * 0.2f;
						Main.dust[num53].velocity.Y = Main.dust[num53].velocity.Y * 0.2f;
						Main.dust[num53].noGravity = true;
						return;
					}
				}
				else
				{
					if (flag5)
					{
						float num54 = (float)(40 * this.minionPos);
						int num55 = 30;
						int num56 = 60;
						this.localAI[0] -= 1f;
						if (this.localAI[0] < 0f)
						{
							this.localAI[0] = 0f;
						}
						if (this.ai[1] > 0f)
						{
							this.ai[1] -= 1f;
						}
						else
						{
							float num57 = this.position.X;
							float num58 = this.position.Y;
							float num59 = 100000f;
							float num60 = num59;
							int num61 = -1;
							NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
							if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
							{
								float num62 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
								float num63 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
								float num64 = Math.Abs(this.position.X + (float)(this.width / 2) - num62) + Math.Abs(this.position.Y + (float)(this.height / 2) - num63);
								if (num64 < num59)
								{
									if (num61 == -1 && num64 <= num60)
									{
										num60 = num64;
										num57 = num62;
										num58 = num63;
									}
									if (Collision.CanHit(this.position, this.width, this.height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
									{
										num59 = num64;
										num57 = num62;
										num58 = num63;
										num61 = ownerMinionAttackTargetNPC.whoAmI;
									}
								}
							}
							if (num61 == -1)
							{
								for (int l = 0; l < 200; l++)
								{
									if (Main.npc[l].CanBeChasedBy(this, false))
									{
										float num65 = Main.npc[l].position.X + (float)(Main.npc[l].width / 2);
										float num66 = Main.npc[l].position.Y + (float)(Main.npc[l].height / 2);
										float num67 = Math.Abs(this.position.X + (float)(this.width / 2) - num65) + Math.Abs(this.position.Y + (float)(this.height / 2) - num66);
										if (num67 < num59)
										{
											if (num61 == -1 && num67 <= num60)
											{
												num60 = num67;
												num57 = num65;
												num58 = num66;
											}
											if (Collision.CanHit(this.position, this.width, this.height, Main.npc[l].position, Main.npc[l].width, Main.npc[l].height))
											{
												num59 = num67;
												num57 = num65;
												num58 = num66;
												num61 = l;
											}
										}
									}
								}
							}
							if (num61 == -1 && num60 < num59)
							{
								num59 = num60;
							}
							float num68 = 400f;
							if ((double)this.position.Y > Main.worldSurface * 16.0)
							{
								num68 = 200f;
							}
							if (num59 < num68 + num54 && num61 == -1)
							{
								float num69 = num57 - (this.position.X + (float)(this.width / 2));
								if (num69 < -5f)
								{
									flag = true;
									flag2 = false;
								}
								else if (num69 > 5f)
								{
									flag2 = true;
									flag = false;
								}
							}
							else if (num61 >= 0 && num59 < 800f + num54)
							{
								this.localAI[0] = (float)num56;
								float num70 = num57 - (this.position.X + (float)(this.width / 2));
								if (num70 > 300f || num70 < -300f)
								{
									if (num70 < -50f)
									{
										flag = true;
										flag2 = false;
									}
									else if (num70 > 50f)
									{
										flag2 = true;
										flag = false;
									}
								}
								else if (this.owner == Main.myPlayer)
								{
									this.ai[1] = (float)num55;
									float arg_4528_0 = 12f;
									Vector2 vector8 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)(this.height / 2) - 8f);
									float num71 = num57 - vector8.X + (float)Main.rand.Next(-20, 21);
									float num72 = Math.Abs(num71) * 0.1f;
									num72 = num72 * (float)Main.rand.Next(0, 100) * 0.001f;
									float num73 = num58 - vector8.Y + (float)Main.rand.Next(-20, 21) - num72;
									float num74 = (float)Math.Sqrt((double)(num71 * num71 + num73 * num73));
									num74 = arg_4528_0 / num74;
									num71 *= num74;
									num73 *= num74;
									int num75 = this.damage;
									int num76 = 195;
									int num77 = Projectile.NewProjectile(vector8.X, vector8.Y, num71, num73, num76, num75, this.knockBack, Main.myPlayer, 0f, 0f);
									Main.projectile[num77].timeLeft = 300;
									if (num71 < 0f)
									{
										this.direction = -1;
									}
									if (num71 > 0f)
									{
										this.direction = 1;
									}
									this.netUpdate = true;
								}
							}
						}
					}
					bool flag7 = false;
					Vector2 vector9 = Vector2.Zero;
					bool flag8 = false;
					if (this.type == 266 || (this.type >= 390 && this.type <= 392))
					{
						float num78 = (float)(40 * this.minionPos);
						int num79 = 60;
						this.localAI[0] -= 1f;
						if (this.localAI[0] < 0f)
						{
							this.localAI[0] = 0f;
						}
						if (this.ai[1] > 0f)
						{
							this.ai[1] -= 1f;
						}
						else
						{
							float num80 = this.position.X;
							float num81 = this.position.Y;
							float num82 = 100000f;
							float num83 = num82;
							int num84 = -1;
							NPC ownerMinionAttackTargetNPC2 = this.OwnerMinionAttackTargetNPC;
							if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this, false))
							{
								float x = ownerMinionAttackTargetNPC2.Center.X;
								float y = ownerMinionAttackTargetNPC2.Center.Y;
								float num85 = Math.Abs(this.position.X + (float)(this.width / 2) - x) + Math.Abs(this.position.Y + (float)(this.height / 2) - y);
								if (num85 < num82)
								{
									if (num84 == -1 && num85 <= num83)
									{
										num83 = num85;
										num80 = x;
										num81 = y;
									}
									if (Collision.CanHit(this.position, this.width, this.height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
									{
										num82 = num85;
										num80 = x;
										num81 = y;
										num84 = ownerMinionAttackTargetNPC2.whoAmI;
									}
								}
							}
							if (num84 == -1)
							{
								for (int m = 0; m < 200; m++)
								{
									if (Main.npc[m].CanBeChasedBy(this, false))
									{
										float num86 = Main.npc[m].position.X + (float)(Main.npc[m].width / 2);
										float num87 = Main.npc[m].position.Y + (float)(Main.npc[m].height / 2);
										float num88 = Math.Abs(this.position.X + (float)(this.width / 2) - num86) + Math.Abs(this.position.Y + (float)(this.height / 2) - num87);
										if (num88 < num82)
										{
											if (num84 == -1 && num88 <= num83)
											{
												num83 = num88;
												num80 = num86;
												num81 = num87;
											}
											if (Collision.CanHit(this.position, this.width, this.height, Main.npc[m].position, Main.npc[m].width, Main.npc[m].height))
											{
												num82 = num88;
												num80 = num86;
												num81 = num87;
												num84 = m;
											}
										}
									}
								}
							}
							if (this.type >= 390 && this.type <= 392 && !Collision.SolidCollision(this.position, this.width, this.height))
							{
								this.tileCollide = true;
							}
							if (num84 == -1 && num83 < num82)
							{
								num82 = num83;
							}
							else if (num84 >= 0)
							{
								flag7 = true;
								vector9 = new Vector2(num80, num81) - base.Center;
								if (this.type >= 390 && this.type <= 392)
								{
									if (Main.npc[num84].position.Y > this.position.Y + (float)this.height)
									{
										int num89 = (int)(base.Center.X / 16f);
										int num90 = (int)((this.position.Y + (float)this.height + 1f) / 16f);
										if (Main.tile[num89, num90] != null && Main.tile[num89, num90].active() && TileID.Sets.Platforms[(int)Main.tile[num89, num90].type])
										{
											this.tileCollide = false;
										}
									}
									Rectangle rectangle = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
									Rectangle value = new Rectangle((int)Main.npc[num84].position.X, (int)Main.npc[num84].position.Y, Main.npc[num84].width, Main.npc[num84].height);
									int num91 = 10;
									value.X -= num91;
									value.Y -= num91;
									value.Width += num91 * 2;
									value.Height += num91 * 2;
									if (rectangle.Intersects(value))
									{
										flag8 = true;
										Vector2 vector10 = Main.npc[num84].Center - base.Center;
										if (this.velocity.Y > 0f && vector10.Y < 0f)
										{
											this.velocity.Y = this.velocity.Y * 0.5f;
										}
										if (this.velocity.Y < 0f && vector10.Y > 0f)
										{
											this.velocity.Y = this.velocity.Y * 0.5f;
										}
										if (this.velocity.X > 0f && vector10.X < 0f)
										{
											this.velocity.X = this.velocity.X * 0.5f;
										}
										if (this.velocity.X < 0f && vector10.X > 0f)
										{
											this.velocity.X = this.velocity.X * 0.5f;
										}
										if (vector10.Length() > 14f)
										{
											vector10.Normalize();
											vector10 *= 14f;
										}
										this.rotation = (this.rotation * 5f + vector10.ToRotation() + 1.57079637f) / 6f;
										this.velocity = (this.velocity * 9f + vector10) / 10f;
										for (int n = 0; n < 1000; n++)
										{
											if (this.whoAmI != n && this.owner == Main.projectile[n].owner && Main.projectile[n].type >= 390 && Main.projectile[n].type <= 392 && (Main.projectile[n].Center - base.Center).Length() < 15f)
											{
												float num92 = 0.5f;
												if (base.Center.Y > Main.projectile[n].Center.Y)
												{
													Projectile expr_4C8A_cp_0_cp_0 = Main.projectile[n];
													expr_4C8A_cp_0_cp_0.velocity.Y = expr_4C8A_cp_0_cp_0.velocity.Y - num92;
													this.velocity.Y = this.velocity.Y + num92;
												}
												else
												{
													Projectile expr_4CB5_cp_0_cp_0 = Main.projectile[n];
													expr_4CB5_cp_0_cp_0.velocity.Y = expr_4CB5_cp_0_cp_0.velocity.Y + num92;
													this.velocity.Y = this.velocity.Y - num92;
												}
												if (base.Center.X > Main.projectile[n].Center.X)
												{
													this.velocity.X = this.velocity.X + num92;
													Projectile expr_4D0E_cp_0_cp_0 = Main.projectile[n];
													expr_4D0E_cp_0_cp_0.velocity.X = expr_4D0E_cp_0_cp_0.velocity.X - num92;
												}
												else
												{
													this.velocity.X = this.velocity.X - num92;
													Projectile expr_4D39_cp_0_cp_0 = Main.projectile[n];
													expr_4D39_cp_0_cp_0.velocity.Y = expr_4D39_cp_0_cp_0.velocity.Y + num92;
												}
											}
										}
									}
								}
							}
							float num93 = 300f;
							if ((double)this.position.Y > Main.worldSurface * 16.0)
							{
								num93 = 150f;
							}
							if (this.type >= 390 && this.type <= 392)
							{
								num93 = 500f;
								if ((double)this.position.Y > Main.worldSurface * 16.0)
								{
									num93 = 250f;
								}
							}
							if (num82 < num93 + num78 && num84 == -1)
							{
								float num94 = num80 - (this.position.X + (float)(this.width / 2));
								if (num94 < -5f)
								{
									flag = true;
									flag2 = false;
								}
								else if (num94 > 5f)
								{
									flag2 = true;
									flag = false;
								}
							}
							bool flag9 = false;
							if (this.type >= 390 && this.type <= 392 && this.localAI[1] > 0f)
							{
								flag9 = true;
								this.localAI[1] -= 1f;
							}
							if (num84 >= 0 && num82 < 800f + num78)
							{
								this.friendly = true;
								this.localAI[0] = (float)num79;
								float num95 = num80 - (this.position.X + (float)(this.width / 2));
								if (num95 < -10f)
								{
									flag = true;
									flag2 = false;
								}
								else if (num95 > 10f)
								{
									flag2 = true;
									flag = false;
								}
								if (num81 < base.Center.Y - 100f && num95 > -50f && num95 < 50f && this.velocity.Y == 0f)
								{
									float num96 = Math.Abs(num81 - base.Center.Y);
									if (num96 < 120f)
									{
										this.velocity.Y = -10f;
									}
									else if (num96 < 210f)
									{
										this.velocity.Y = -13f;
									}
									else if (num96 < 270f)
									{
										this.velocity.Y = -15f;
									}
									else if (num96 < 310f)
									{
										this.velocity.Y = -17f;
									}
									else if (num96 < 380f)
									{
										this.velocity.Y = -18f;
									}
								}
								if (flag9)
								{
									this.friendly = false;
									if (this.velocity.X < 0f)
									{
										flag = true;
									}
									else if (this.velocity.X > 0f)
									{
										flag2 = true;
									}
								}
							}
							else
							{
								this.friendly = false;
							}
						}
					}
					if (this.ai[1] != 0f)
					{
						flag = false;
						flag2 = false;
					}
					else if (flag5 && this.localAI[0] == 0f)
					{
						this.direction = Main.player[this.owner].direction;
					}
					else if (this.type >= 390 && this.type <= 392)
					{
						int num97 = (int)(base.Center.X / 16f);
						int num98 = (int)(base.Center.Y / 16f);
						if (Main.tile[num97, num98] != null && Main.tile[num97, num98].wall > 0)
						{
							flag2 = (flag = false);
						}
					}
					if (this.type == 127)
					{
						if ((double)this.rotation > -0.1 && (double)this.rotation < 0.1)
						{
							this.rotation = 0f;
						}
						else if (this.rotation < 0f)
						{
							this.rotation += 0.1f;
						}
						else
						{
							this.rotation -= 0.1f;
						}
					}
					else if (this.type != 313 && !flag8)
					{
						this.rotation = 0f;
					}
					if (this.type < 390 || this.type > 392)
					{
						this.tileCollide = true;
					}
					float num99 = 0.08f;
					float num100 = 6.5f;
					if (this.type == 127)
					{
						num100 = 2f;
						num99 = 0.04f;
					}
					if (this.type == 112)
					{
						num100 = 6f;
						num99 = 0.06f;
					}
					if (this.type == 334)
					{
						num100 = 8f;
						num99 = 0.08f;
					}
					if (this.type == 268)
					{
						num100 = 8f;
						num99 = 0.4f;
					}
					if (this.type == 324)
					{
						num99 = 0.1f;
						num100 = 3f;
					}
					if (flag5 || this.type == 266 || (this.type >= 390 && this.type <= 392))
					{
						num100 = 6f;
						num99 = 0.2f;
						if (num100 < Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y))
						{
							num100 = Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y);
							num99 = 0.3f;
						}
					}
					if (this.type >= 390 && this.type <= 392)
					{
						num99 *= 2f;
					}
					if (flag)
					{
						if ((double)this.velocity.X > -3.5)
						{
							this.velocity.X = this.velocity.X - num99;
						}
						else
						{
							this.velocity.X = this.velocity.X - num99 * 0.25f;
						}
					}
					else if (flag2)
					{
						if ((double)this.velocity.X < 3.5)
						{
							this.velocity.X = this.velocity.X + num99;
						}
						else
						{
							this.velocity.X = this.velocity.X + num99 * 0.25f;
						}
					}
					else
					{
						this.velocity.X = this.velocity.X * 0.9f;
						if (this.velocity.X >= -num99 && this.velocity.X <= num99)
						{
							this.velocity.X = 0f;
						}
					}
					if (this.type == 208)
					{
						this.velocity.X = this.velocity.X * 0.95f;
						if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
						{
							this.velocity.X = 0f;
						}
						flag = false;
						flag2 = false;
					}
					if (flag | flag2)
					{
						int num101 = (int)(this.position.X + (float)(this.width / 2)) / 16;
						int j2 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
						if (this.type == 236)
						{
							num101 += this.direction;
						}
						if (flag)
						{
							num101--;
						}
						if (flag2)
						{
							num101++;
						}
						num101 += (int)this.velocity.X;
						if (WorldGen.SolidTile(num101, j2))
						{
							flag4 = true;
						}
					}
					if (Main.player[this.owner].position.Y + (float)Main.player[this.owner].height - 8f > this.position.Y + (float)this.height)
					{
						flag3 = true;
					}
					if (this.type == 268 && this.frameCounter < 10)
					{
						flag4 = false;
					}
					Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, 1, false, 0);
					if (this.velocity.Y == 0f || this.type == 200)
					{
						if (!flag3 && (this.velocity.X < 0f || this.velocity.X > 0f))
						{
							int num102 = (int)(this.position.X + (float)(this.width / 2)) / 16;
							int j3 = (int)(this.position.Y + (float)(this.height / 2)) / 16 + 1;
							if (flag)
							{
								num102--;
							}
							if (flag2)
							{
								num102++;
							}
							WorldGen.SolidTile(num102, j3);
						}
						if (flag4)
						{
							int num103 = (int)(this.position.X + (float)(this.width / 2)) / 16;
							int num104 = (int)(this.position.Y + (float)this.height) / 16 + 1;
							if (WorldGen.SolidTile(num103, num104) || Main.tile[num103, num104].halfBrick() || Main.tile[num103, num104].slope() > 0 || this.type == 200)
							{
								if (this.type == 200)
								{
									this.velocity.Y = -3.1f;
								}
								else
								{
									try
									{
										num103 = (int)(this.position.X + (float)(this.width / 2)) / 16;
										num104 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
										if (flag)
										{
											num103--;
										}
										if (flag2)
										{
											num103++;
										}
										num103 += (int)this.velocity.X;
										if (!WorldGen.SolidTile(num103, num104 - 1) && !WorldGen.SolidTile(num103, num104 - 2))
										{
											this.velocity.Y = -5.1f;
										}
										else if (!WorldGen.SolidTile(num103, num104 - 2))
										{
											this.velocity.Y = -7.1f;
										}
										else if (WorldGen.SolidTile(num103, num104 - 5))
										{
											this.velocity.Y = -11.1f;
										}
										else if (WorldGen.SolidTile(num103, num104 - 4))
										{
											this.velocity.Y = -10.1f;
										}
										else
										{
											this.velocity.Y = -9.1f;
										}
									}
									catch
									{
										this.velocity.Y = -9.1f;
									}
								}
								if (this.type == 127)
								{
									this.ai[0] = 1f;
								}
							}
						}
						else if (this.type == 266 && (flag | flag2))
						{
							this.velocity.Y = this.velocity.Y - 6f;
						}
					}
					if (this.velocity.X > num100)
					{
						this.velocity.X = num100;
					}
					if (this.velocity.X < -num100)
					{
						this.velocity.X = -num100;
					}
					if (this.velocity.X < 0f)
					{
						this.direction = -1;
					}
					if (this.velocity.X > 0f)
					{
						this.direction = 1;
					}
					if (this.velocity.X > num99 & flag2)
					{
						this.direction = 1;
					}
					if (this.velocity.X < -num99 & flag)
					{
						this.direction = -1;
					}
					if (this.type != 313)
					{
						if (this.direction == -1)
						{
							this.spriteDirection = 1;
						}
						if (this.direction == 1)
						{
							this.spriteDirection = -1;
						}
					}
					if (this.type == 398)
					{
						this.spriteDirection = this.direction;
					}
					if (flag5)
					{
						if (this.ai[1] > 0f)
						{
							if (this.localAI[1] == 0f)
							{
								this.localAI[1] = 1f;
								this.frame = 1;
							}
							if (this.frame != 0)
							{
								this.frameCounter++;
								if (this.frameCounter > 4)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame == 4)
								{
									this.frame = 0;
								}
							}
						}
						else if (this.velocity.Y == 0f)
						{
							this.localAI[1] = 0f;
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 5)
								{
									this.frame = 5;
								}
								if (this.frame >= 11)
								{
									this.frame = 5;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else if (this.velocity.Y < 0f)
						{
							this.frameCounter = 0;
							this.frame = 4;
						}
						else if (this.velocity.Y > 0f)
						{
							this.frameCounter = 0;
							this.frame = 4;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
						}
						Vector2 arg_5A3C_0 = this.velocity;
						return;
					}
					if (this.type == 268)
					{
						if (this.velocity.Y == 0f)
						{
							if (this.frame > 5)
							{
								this.frameCounter = 0;
							}
							if (this.velocity.X == 0f)
							{
								int num105 = 3;
								this.frameCounter++;
								if (this.frameCounter < num105)
								{
									this.frame = 0;
								}
								else if (this.frameCounter < num105 * 2)
								{
									this.frame = 1;
								}
								else if (this.frameCounter < num105 * 3)
								{
									this.frame = 2;
								}
								else if (this.frameCounter < num105 * 4)
								{
									this.frame = 3;
								}
								else
								{
									this.frameCounter = num105 * 4;
								}
							}
							else
							{
								this.velocity.X = this.velocity.X * 0.8f;
								this.frameCounter++;
								int num106 = 3;
								if (this.frameCounter < num106)
								{
									this.frame = 0;
								}
								else if (this.frameCounter < num106 * 2)
								{
									this.frame = 1;
								}
								else if (this.frameCounter < num106 * 3)
								{
									this.frame = 2;
								}
								else if (this.frameCounter < num106 * 4)
								{
									this.frame = 3;
								}
								else if (flag | flag2)
								{
									this.velocity.X = this.velocity.X * 2f;
									this.frame = 4;
									this.velocity.Y = -6.1f;
									this.frameCounter = 0;
									for (int num107 = 0; num107 < 4; num107++)
									{
										int num108 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), this.width, 4, 5, 0f, 0f, 0, default(Color), 1f);
										Main.dust[num108].velocity += this.velocity;
										Main.dust[num108].velocity *= 0.4f;
									}
								}
								else
								{
									this.frameCounter = num106 * 4;
								}
							}
						}
						else if (this.velocity.Y < 0f)
						{
							this.frameCounter = 0;
							this.frame = 5;
						}
						else
						{
							this.frame = 4;
							this.frameCounter = 3;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 269)
					{
						if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								int num109 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), this.width, 6, 76, 0f, 0f, 0, default(Color), 1f);
								Main.dust[num109].noGravity = true;
								Main.dust[num109].velocity *= 0.3f;
								Main.dust[num109].noLight = true;
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 3)
								{
									this.frame = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else
						{
							this.frameCounter = 0;
							this.frame = 2;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 313)
					{
						int num110 = (int)(base.Center.X / 16f);
						int num111 = (int)(base.Center.Y / 16f);
						if (Main.tile[num110, num111] != null && Main.tile[num110, num111].wall > 0)
						{
							this.position.Y = this.position.Y + (float)this.height;
							this.height = 34;
							this.position.Y = this.position.Y - (float)this.height;
							this.position.X = this.position.X + (float)(this.width / 2);
							this.width = 34;
							this.position.X = this.position.X - (float)(this.width / 2);
							float arg_6014_0 = 4f;
							Vector2 vector11 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num112 = Main.player[this.owner].Center.X - vector11.X;
							float num113 = Main.player[this.owner].Center.Y - vector11.Y;
							float num114 = (float)Math.Sqrt((double)(num112 * num112 + num113 * num113));
							float num115 = arg_6014_0 / num114;
							num112 *= num115;
							num113 *= num115;
							if (num114 < 120f)
							{
								this.velocity.X = this.velocity.X * 0.9f;
								this.velocity.Y = this.velocity.Y * 0.9f;
								if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < 0.1)
								{
									this.velocity *= 0f;
								}
							}
							else
							{
								this.velocity.X = (this.velocity.X * 9f + num112) / 10f;
								this.velocity.Y = (this.velocity.Y * 9f + num113) / 10f;
							}
							if (num114 >= 120f)
							{
								this.spriteDirection = this.direction;
								this.rotation = (float)Math.Atan2((double)(this.velocity.Y * (float)(-(float)this.direction)), (double)(this.velocity.X * (float)(-(float)this.direction)));
							}
							this.frameCounter += (int)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y));
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 10)
							{
								this.frame = 5;
							}
							if (this.frame < 5)
							{
								this.frame = 10;
								return;
							}
						}
						else
						{
							this.rotation = 0f;
							if (this.direction == -1)
							{
								this.spriteDirection = 1;
							}
							if (this.direction == 1)
							{
								this.spriteDirection = -1;
							}
							this.position.Y = this.position.Y + (float)this.height;
							this.height = 30;
							this.position.Y = this.position.Y - (float)this.height;
							this.position.X = this.position.X + (float)(this.width / 2);
							this.width = 30;
							this.position.X = this.position.X - (float)(this.width / 2);
							if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
							{
								if (this.velocity.X == 0f)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 3)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frameCounter = 0;
								this.frame = 4;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
								return;
							}
						}
					}
					else if (this.type >= 390 && this.type <= 392)
					{
						int num116 = (int)(base.Center.X / 16f);
						int num117 = (int)(base.Center.Y / 16f);
						if (Main.tile[num116, num117] != null && Main.tile[num116, num117].wall > 0)
						{
							this.position.Y = this.position.Y + (float)this.height;
							this.height = 34;
							this.position.Y = this.position.Y - (float)this.height;
							this.position.X = this.position.X + (float)(this.width / 2);
							this.width = 34;
							this.position.X = this.position.X - (float)(this.width / 2);
							float scaleFactor = 9f;
							float num118 = (float)(40 * (this.minionPos + 1));
							Vector2 vector12 = Main.player[this.owner].Center - base.Center;
							if (flag7)
							{
								vector12 = vector9;
								num118 = 10f;
							}
							else if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
							{
								this.ai[0] = 1f;
							}
							if (vector12.Length() < num118)
							{
								this.velocity *= 0.9f;
								if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < 0.1)
								{
									this.velocity *= 0f;
								}
							}
							else if (vector12.Length() < 800f || !flag7)
							{
								this.velocity = (this.velocity * 9f + Vector2.Normalize(vector12) * scaleFactor) / 10f;
							}
							if (vector12.Length() >= num118)
							{
								this.spriteDirection = this.direction;
								this.rotation = this.velocity.ToRotation() + 1.57079637f;
							}
							else
							{
								this.rotation = vector12.ToRotation() + 1.57079637f;
							}
							this.frameCounter += (int)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y));
							if (this.frameCounter > 5)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 7)
							{
								this.frame = 4;
							}
							if (this.frame < 4)
							{
								this.frame = 7;
								return;
							}
						}
						else
						{
							if (!flag8)
							{
								this.rotation = 0f;
							}
							if (this.direction == -1)
							{
								this.spriteDirection = 1;
							}
							if (this.direction == 1)
							{
								this.spriteDirection = -1;
							}
							this.position.Y = this.position.Y + (float)this.height;
							this.height = 30;
							this.position.Y = this.position.Y - (float)this.height;
							this.position.X = this.position.X + (float)(this.width / 2);
							this.width = 30;
							this.position.X = this.position.X - (float)(this.width / 2);
							if (!flag7 && !Collision.CanHitLine(base.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
							{
								this.ai[0] = 1f;
							}
							if (!flag8 && this.frame >= 4 && this.frame <= 7)
							{
								Vector2 vector13 = Main.player[this.owner].Center - base.Center;
								if (flag7)
								{
									vector13 = vector9;
								}
								float num119 = -vector13.Y;
								if (vector13.Y <= 0f)
								{
									if (num119 < 120f)
									{
										this.velocity.Y = -10f;
									}
									else if (num119 < 210f)
									{
										this.velocity.Y = -13f;
									}
									else if (num119 < 270f)
									{
										this.velocity.Y = -15f;
									}
									else if (num119 < 310f)
									{
										this.velocity.Y = -17f;
									}
									else if (num119 < 380f)
									{
										this.velocity.Y = -18f;
									}
								}
							}
							if (flag8)
							{
								this.frameCounter++;
								if (this.frameCounter > 3)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame >= 8)
								{
									this.frame = 4;
								}
								if (this.frame <= 3)
								{
									this.frame = 7;
								}
							}
							else if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
							{
								if (this.velocity.X == 0f)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 5)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 2)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frameCounter = 0;
								this.frame = 3;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
								return;
							}
						}
					}
					else if (this.type == 314)
					{
						if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 6)
								{
									this.frame = 1;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else
						{
							this.frameCounter = 0;
							this.frame = 7;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 319)
					{
						if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 8)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 5)
								{
									this.frame = 2;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else
						{
							this.frameCounter = 0;
							this.frame = 1;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 236)
					{
						if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								if (this.frame < 2)
								{
									this.frame = 2;
								}
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 8)
								{
									this.frame = 2;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else
						{
							this.frameCounter = 0;
							this.frame = 1;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 499)
					{
						if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								if (this.frame < 2)
								{
									this.frame = 2;
								}
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame >= 8)
								{
									this.frame = 2;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else
						{
							this.frameCounter = 0;
							this.frame = 1;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 266)
					{
						if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
						{
							if (this.velocity.X == 0f)
							{
								this.frameCounter++;
							}
							else
							{
								this.frameCounter += 3;
							}
						}
						else
						{
							this.frameCounter += 5;
						}
						if (this.frameCounter >= 20)
						{
							this.frameCounter -= 20;
							this.frame++;
						}
						if (this.frame > 1)
						{
							this.frame = 0;
						}
						if (this.wet && Main.player[this.owner].position.Y + (float)Main.player[this.owner].height < this.position.Y + (float)this.height && this.localAI[0] == 0f)
						{
							if (this.velocity.Y > -4f)
							{
								this.velocity.Y = this.velocity.Y - 0.2f;
							}
							if (this.velocity.Y > 0f)
							{
								this.velocity.Y = this.velocity.Y * 0.95f;
							}
						}
						else
						{
							this.velocity.Y = this.velocity.Y + 0.4f;
						}
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 334)
					{
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								if (this.frame > 0)
								{
									this.frameCounter += 2;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 7)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								this.frameCounter += (int)Math.Abs((double)this.velocity.X * 0.75);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame >= 7 || this.frame < 1)
								{
									this.frame = 1;
								}
							}
							else if (this.frame > 0)
							{
								this.frameCounter += 2;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame >= 7)
								{
									this.frame = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else if (this.velocity.Y < 0f)
						{
							this.frameCounter = 0;
							this.frame = 2;
						}
						else if (this.velocity.Y > 0f)
						{
							this.frameCounter = 0;
							this.frame = 4;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 353)
					{
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 9)
								{
									this.frame = 2;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else if (this.velocity.Y < 0f)
						{
							this.frameCounter = 0;
							this.frame = 1;
						}
						else if (this.velocity.Y > 0f)
						{
							this.frameCounter = 0;
							this.frame = 1;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 111)
					{
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame >= 7)
								{
									this.frame = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else if (this.velocity.Y < 0f)
						{
							this.frameCounter = 0;
							this.frame = 4;
						}
						else if (this.velocity.Y > 0f)
						{
							this.frameCounter = 0;
							this.frame = 6;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 112)
					{
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame >= 3)
								{
									this.frame = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else if (this.velocity.Y < 0f)
						{
							this.frameCounter = 0;
							this.frame = 2;
						}
						else if (this.velocity.Y > 0f)
						{
							this.frameCounter = 0;
							this.frame = 2;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 127)
					{
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 5)
								{
									this.frame = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else
						{
							this.frame = 0;
							this.frameCounter = 0;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 200)
					{
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 5)
								{
									this.frame = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else
						{
							this.rotation = this.velocity.X * 0.1f;
							this.frameCounter++;
							if (this.velocity.Y < 0f)
							{
								this.frameCounter += 2;
							}
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 9)
							{
								this.frame = 6;
							}
							if (this.frame < 6)
							{
								this.frame = 6;
							}
						}
						this.velocity.Y = this.velocity.Y + 0.1f;
						if (this.velocity.Y > 4f)
						{
							this.velocity.Y = 4f;
							return;
						}
					}
					else if (this.type == 208)
					{
						if (this.velocity.Y == 0f && this.velocity.X == 0f)
						{
							if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) < this.position.X + (float)(this.width / 2))
							{
								this.direction = -1;
							}
							else if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) > this.position.X + (float)(this.width / 2))
							{
								this.direction = 1;
							}
							this.rotation = 0f;
							this.frame = 0;
						}
						else
						{
							this.rotation = this.velocity.X * 0.075f;
							this.frameCounter++;
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 4)
							{
								this.frame = 1;
							}
							if (this.frame < 1)
							{
								this.frame = 1;
							}
						}
						this.velocity.Y = this.velocity.Y + 0.1f;
						if (this.velocity.Y > 4f)
						{
							this.velocity.Y = 4f;
							return;
						}
					}
					else if (this.type == 209)
					{
						if (this.alpha > 0)
						{
							this.alpha -= 5;
							if (this.alpha < 0)
							{
								this.alpha = 0;
							}
						}
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 11)
								{
									this.frame = 2;
								}
								if (this.frame < 2)
								{
									this.frame = 2;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else
						{
							this.frame = 1;
							this.frameCounter = 0;
							this.rotation = 0f;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 324)
					{
						if (this.velocity.Y == 0f)
						{
							if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 5)
								{
									this.frame = 2;
								}
								if (this.frame < 2)
								{
									this.frame = 2;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else
						{
							this.frameCounter = 0;
							this.frame = 1;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 14f)
						{
							this.velocity.Y = 14f;
							return;
						}
					}
					else if (this.type == 210)
					{
						if (this.velocity.Y == 0f)
						{
							if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 6)
								{
									this.frame = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else
						{
							this.rotation = this.velocity.X * 0.05f;
							this.frameCounter++;
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 11)
							{
								this.frame = 7;
							}
							if (this.frame < 7)
							{
								this.frame = 7;
							}
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
							return;
						}
					}
					else if (this.type == 398)
					{
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame >= 5)
								{
									this.frame = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else if (this.velocity.Y != 0f)
						{
							this.frameCounter = 0;
							this.frame = 5;
						}
						this.velocity.Y = this.velocity.Y + 0.4f;
						if (this.velocity.Y > 10f)
						{
							this.velocity.Y = 10f;
						}
					}
				}
			}
		}

		// Token: 0x060001D0 RID: 464 RVA: 0x000802F0 File Offset: 0x0007E4F0
		private void AI_061_FishingBobber()
		{
			this.timeLeft = 60;
			if (Main.player[this.owner].inventory[Main.player[this.owner].selectedItem].fishingPole == 0 || Main.player[this.owner].CCed || Main.player[this.owner].noItems)
			{
				this.Kill();
			}
			else if (Main.player[this.owner].inventory[Main.player[this.owner].selectedItem].shoot != this.type)
			{
				this.Kill();
			}
			else if (Main.player[this.owner].pulley)
			{
				this.Kill();
			}
			else if (Main.player[this.owner].dead)
			{
				this.Kill();
			}
			if (this.ai[1] > 0f && this.localAI[1] >= 0f)
			{
				this.localAI[1] = -1f;
				if (!this.lavaWet && !this.honeyWet)
				{
					for (int i = 0; i < 100; i++)
					{
						int num = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y - 10f), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
						Dust expr_181_cp_0_cp_0 = Main.dust[num];
						expr_181_cp_0_cp_0.velocity.Y = expr_181_cp_0_cp_0.velocity.Y - 4f;
						Dust expr_19B_cp_0_cp_0 = Main.dust[num];
						expr_19B_cp_0_cp_0.velocity.X = expr_19B_cp_0_cp_0.velocity.X * 2.5f;
						Main.dust[num].scale = 0.8f;
						Main.dust[num].alpha = 100;
						Main.dust[num].noGravity = true;
					}
					Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
				}
			}
			if (this.ai[0] >= 1f)
			{
				if (this.ai[0] == 2f)
				{
					this.ai[0] += 1f;
					Main.PlaySound(SoundID.Item17, this.position);
					if (!this.lavaWet && !this.honeyWet)
					{
						for (int j = 0; j < 100; j++)
						{
							int num2 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y - 10f), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
							Dust expr_2D8_cp_0_cp_0 = Main.dust[num2];
							expr_2D8_cp_0_cp_0.velocity.Y = expr_2D8_cp_0_cp_0.velocity.Y - 4f;
							Dust expr_2F3_cp_0_cp_0 = Main.dust[num2];
							expr_2F3_cp_0_cp_0.velocity.X = expr_2F3_cp_0_cp_0.velocity.X * 2.5f;
							Main.dust[num2].scale = 0.8f;
							Main.dust[num2].alpha = 100;
							Main.dust[num2].noGravity = true;
						}
						Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
					}
				}
				if (this.localAI[0] < 100f)
				{
					this.localAI[0] += 1f;
				}
				this.tileCollide = false;
				float arg_460_0 = 15.9f;
				int num3 = 10;
				Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num4 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector.X;
				float num5 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector.Y;
				float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
				if (num6 > 3000f)
				{
					this.Kill();
				}
				num6 = arg_460_0 / num6;
				num4 *= num6;
				num5 *= num6;
				this.velocity.X = (this.velocity.X * (float)(num3 - 1) + num4) / (float)num3;
				this.velocity.Y = (this.velocity.Y * (float)(num3 - 1) + num5) / (float)num3;
				if (Main.myPlayer == this.owner)
				{
					Rectangle rectangle = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
					Rectangle value = new Rectangle((int)Main.player[this.owner].position.X, (int)Main.player[this.owner].position.Y, Main.player[this.owner].width, Main.player[this.owner].height);
					if (rectangle.Intersects(value))
					{
						if (this.ai[1] > 0f && this.ai[1] < 3930f)
						{
							int num7 = (int)this.ai[1];
							Item item = new Item();
							item.SetDefaults(num7, false);
							if (num7 == 3196)
							{
								int num8 = Main.player[this.owner].FishingLevel();
								int minValue = (num8 / 20 + 3) / 2;
								int num9 = (num8 / 10 + 6) / 2;
								if (Main.rand.Next(50) < num8)
								{
									num9++;
								}
								if (Main.rand.Next(100) < num8)
								{
									num9++;
								}
								if (Main.rand.Next(150) < num8)
								{
									num9++;
								}
								if (Main.rand.Next(200) < num8)
								{
									num9++;
								}
								int stack = Main.rand.Next(minValue, num9 + 1);
								item.stack = stack;
							}
							if (num7 == 3197)
							{
								int num10 = Main.player[this.owner].FishingLevel();
								int minValue2 = (num10 / 4 + 15) / 2;
								int num11 = (num10 / 2 + 30) / 2;
								if (Main.rand.Next(50) < num10)
								{
									num11 += 4;
								}
								if (Main.rand.Next(100) < num10)
								{
									num11 += 4;
								}
								if (Main.rand.Next(150) < num10)
								{
									num11 += 4;
								}
								if (Main.rand.Next(200) < num10)
								{
									num11 += 4;
								}
								int stack2 = Main.rand.Next(minValue2, num11 + 1);
								item.stack = stack2;
							}
							item.newAndShiny = true;
							if (Main.player[this.owner].GetItem(this.owner, item, false, false).stack > 0)
							{
								int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num7, 1, false, 0, true, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
								}
							}
							else
							{
								item.position.X = base.Center.X - (float)(item.width / 2);
								item.position.Y = base.Center.Y - (float)(item.height / 2);
								item.active = true;
								ItemText.NewText(item, 0, false, false);
							}
						}
						this.Kill();
					}
				}
				this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				return;
			}
			bool flag = false;
			Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
			float num12 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector2.X;
			float num13 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector2.Y;
			this.rotation = (float)Math.Atan2((double)num13, (double)num12) + 1.57f;
			if ((float)Math.Sqrt((double)(num12 * num12 + num13 * num13)) > 900f)
			{
				this.ai[0] = 1f;
			}
			if (this.wet)
			{
				this.rotation = 0f;
				this.velocity.X = this.velocity.X * 0.9f;
				int num14 = (int)(base.Center.X + (float)((this.width / 2 + 8) * this.direction)) / 16;
				int num15 = (int)(base.Center.Y / 16f);
				float arg_952_0 = this.position.Y / 16f;
				int num16 = (int)((this.position.Y + (float)this.height) / 16f);
				if (Main.tile[num14, num15] == null)
				{
					Main.tile[num14, num15] = new Tile();
				}
				if (Main.tile[num14, num16] == null)
				{
					Main.tile[num14, num16] = new Tile();
				}
				if (this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.5f;
				}
				num14 = (int)(base.Center.X / 16f);
				num15 = (int)(base.Center.Y / 16f);
				float num17 = this.position.Y + (float)this.height;
				if (Main.tile[num14, num15 - 1] == null)
				{
					Main.tile[num14, num15 - 1] = new Tile();
				}
				if (Main.tile[num14, num15] == null)
				{
					Main.tile[num14, num15] = new Tile();
				}
				if (Main.tile[num14, num15 + 1] == null)
				{
					Main.tile[num14, num15 + 1] = new Tile();
				}
				if (Main.tile[num14, num15 - 1].liquid > 0)
				{
					num17 = (float)(num15 * 16);
					num17 -= (float)(Main.tile[num14, num15 - 1].liquid / 16);
				}
				else if (Main.tile[num14, num15].liquid > 0)
				{
					num17 = (float)((num15 + 1) * 16);
					num17 -= (float)(Main.tile[num14, num15].liquid / 16);
				}
				else if (Main.tile[num14, num15 + 1].liquid > 0)
				{
					num17 = (float)((num15 + 2) * 16);
					num17 -= (float)(Main.tile[num14, num15 + 1].liquid / 16);
				}
				if (base.Center.Y > num17)
				{
					this.velocity.Y = this.velocity.Y - 0.1f;
					if (this.velocity.Y < -8f)
					{
						this.velocity.Y = -8f;
					}
					if (base.Center.Y + this.velocity.Y < num17)
					{
						this.velocity.Y = num17 - base.Center.Y;
					}
				}
				else
				{
					this.velocity.Y = num17 - base.Center.Y;
				}
				if ((double)this.velocity.Y >= -0.01 && (double)this.velocity.Y <= 0.01)
				{
					flag = true;
				}
			}
			else
			{
				if (this.velocity.Y == 0f)
				{
					this.velocity.X = this.velocity.X * 0.95f;
				}
				this.velocity.X = this.velocity.X * 0.98f;
				this.velocity.Y = this.velocity.Y + 0.2f;
				if (this.velocity.Y > 15.9f)
				{
					this.velocity.Y = 15.9f;
				}
			}
			if (Main.myPlayer == this.owner)
			{
				int num18 = Main.player[this.owner].FishingLevel();
				if (num18 < 0 && num18 == -1)
				{
					Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
				}
			}
			if (this.ai[1] != 0f)
			{
				flag = true;
			}
			if (flag)
			{
				if (this.ai[1] == 0f && Main.myPlayer == this.owner)
				{
					int num19 = Main.player[this.owner].FishingLevel();
					if (num19 == -9000)
					{
						this.localAI[1] += 5f;
						this.localAI[1] += (float)Main.rand.Next(1, 3);
						if (this.localAI[1] > 660f)
						{
							this.localAI[1] = 0f;
							this.FishingCheck();
							return;
						}
					}
					else
					{
						if (Main.rand.Next(300) < num19)
						{
							this.localAI[1] += (float)Main.rand.Next(1, 3);
						}
						this.localAI[1] += (float)(num19 / 30);
						this.localAI[1] += (float)Main.rand.Next(1, 3);
						if (Main.rand.Next(60) == 0)
						{
							this.localAI[1] += 60f;
						}
						if (this.localAI[1] > 660f)
						{
							this.localAI[1] = 0f;
							this.FishingCheck();
							return;
						}
					}
				}
				else if (this.ai[1] < 0f)
				{
					if (this.velocity.Y == 0f || (this.honeyWet && (double)this.velocity.Y >= -0.01 && (double)this.velocity.Y <= 0.01))
					{
						this.velocity.Y = (float)Main.rand.Next(100, 500) * 0.015f;
						this.velocity.X = (float)Main.rand.Next(-100, 101) * 0.015f;
						this.wet = false;
						this.lavaWet = false;
						this.honeyWet = false;
					}
					this.ai[1] += (float)Main.rand.Next(1, 5);
					if (this.ai[1] >= 0f)
					{
						this.ai[1] = 0f;
						this.localAI[1] = 0f;
						this.netUpdate = true;
					}
				}
			}
		}

		// Token: 0x060001D5 RID: 469 RVA: 0x00093B34 File Offset: 0x00091D34
		private void AI_062()
		{
			if (this.type == 373)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].hornetMinion = false;
				}
				if (Main.player[this.owner].hornetMinion)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 375)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].impMinion = false;
				}
				if (Main.player[this.owner].impMinion)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 407)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].sharknadoMinion = false;
				}
				if (Main.player[this.owner].sharknadoMinion)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 423)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].UFOMinion = false;
				}
				if (Main.player[this.owner].UFOMinion)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 613)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].stardustMinion = false;
				}
				if (Main.player[this.owner].stardustMinion)
				{
					this.timeLeft = 2;
				}
				Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
				if (this.localAI[1] > 0f)
				{
					this.localAI[1] -= 1f;
				}
			}
			if (this.type == 423)
			{
				if (this.ai[0] == 2f)
				{
					this.ai[1] -= 1f;
					this.tileCollide = false;
					if (this.ai[1] > 3f)
					{
						int num = Dust.NewDust(base.Center, 0, 0, 220 + Main.rand.Next(2), this.velocity.X, this.velocity.Y, 100, default(Color), 1f);
						Main.dust[num].scale = 0.5f + (float)Main.rand.NextDouble() * 0.3f;
						Main.dust[num].velocity /= 2.5f;
						Main.dust[num].noGravity = true;
						Main.dust[num].noLight = true;
						Main.dust[num].frame.Y = 80;
					}
					if (this.ai[1] != 0f)
					{
						return;
					}
					this.ai[1] = 30f;
					this.ai[0] = 0f;
					this.velocity /= 5f;
					this.velocity.Y = 0f;
					this.extraUpdates = 0;
					this.numUpdates = 0;
					this.netUpdate = true;
					this.extraUpdates = 0;
					this.numUpdates = 0;
				}
				if (this.extraUpdates > 1)
				{
					this.extraUpdates = 0;
				}
				if (this.numUpdates > 1)
				{
					this.numUpdates = 0;
				}
			}
			if (this.type == 613)
			{
				if (this.ai[0] == 2f)
				{
					this.ai[1] -= 1f;
					this.tileCollide = false;
					if (this.ai[1] > 3f)
					{
						if (this.numUpdates < 20)
						{
							for (int i = 0; i < 3; i++)
							{
								Dust expr_3F8 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
								expr_3F8.noGravity = true;
								expr_3F8.position = base.Center;
								expr_3F8.velocity *= 3f;
								expr_3F8.velocity += this.velocity * 3f;
								expr_3F8.fadeIn = 1f;
							}
						}
						float num2 = 2f - (float)this.numUpdates / 30f;
						if (this.scale > 0f)
						{
							float num3 = 2f;
							int num4 = 0;
							while ((float)num4 < num3)
							{
								Dust expr_4CA = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
								expr_4CA.noGravity = true;
								expr_4CA.position = base.Center + Vector2.UnitY.RotatedBy((double)((float)this.numUpdates * 0.104719758f + (float)this.whoAmI * 0.7853982f + 1.57079637f), default(Vector2)) * (float)(this.height / 2) - this.velocity * ((float)num4 / num3);
								expr_4CA.velocity = this.velocity / 3f;
								expr_4CA.fadeIn = num2 / 2f;
								expr_4CA.scale = num2;
								num4++;
							}
						}
					}
					if (this.ai[1] != 0f)
					{
						return;
					}
					this.ai[1] = 30f;
					this.ai[0] = 0f;
					this.velocity /= 5f;
					this.velocity.Y = 0f;
					this.extraUpdates = 0;
					this.numUpdates = 0;
					this.netUpdate = true;
					float num5 = 15f;
					int num6 = 0;
					while ((float)num6 < num5)
					{
						Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
						dust.noGravity = true;
						dust.position = base.Center - this.velocity * 5f;
						dust.velocity *= 3f;
						dust.velocity += this.velocity * 3f;
						dust.fadeIn = 1f;
						if (Main.rand.Next(3) != 0)
						{
							dust.fadeIn = 2f;
							dust.scale = 2f;
							dust.velocity /= 8f;
						}
						num6++;
					}
					int num7 = 0;
					while ((float)num7 < num5)
					{
						Dust dust2 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
						dust2.noGravity = true;
						dust2.position = base.Center;
						dust2.velocity *= 3f;
						dust2.velocity += this.velocity * 3f;
						dust2.fadeIn = 1f;
						if (Main.rand.Next(3) != 0)
						{
							dust2.fadeIn = 2f;
							dust2.scale = 2f;
							dust2.velocity /= 8f;
						}
						num7++;
					}
					this.extraUpdates = 0;
					this.numUpdates = 0;
				}
				if (this.extraUpdates > 1)
				{
					this.extraUpdates = 0;
				}
				if (this.numUpdates > 1)
				{
					this.numUpdates = 0;
				}
			}
			if (this.type == 423 && this.localAI[0] > 0f)
			{
				this.localAI[0] -= 1f;
			}
			if (this.type == 613 && this.localAI[0] > 0f)
			{
				this.localAI[0] -= 1f;
			}
			float num8 = 0.05f;
			float num9 = (float)this.width;
			if (this.type == 407)
			{
				num8 = 0.1f;
				num9 *= 2f;
			}
			for (int j = 0; j < 1000; j++)
			{
				if (j != this.whoAmI && Main.projectile[j].active && Main.projectile[j].owner == this.owner && Main.projectile[j].type == this.type && Math.Abs(this.position.X - Main.projectile[j].position.X) + Math.Abs(this.position.Y - Main.projectile[j].position.Y) < num9)
				{
					if (this.position.X < Main.projectile[j].position.X)
					{
						this.velocity.X = this.velocity.X - num8;
					}
					else
					{
						this.velocity.X = this.velocity.X + num8;
					}
					if (this.position.Y < Main.projectile[j].position.Y)
					{
						this.velocity.Y = this.velocity.Y - num8;
					}
					else
					{
						this.velocity.Y = this.velocity.Y + num8;
					}
				}
			}
			Vector2 vector = this.position;
			float num10 = 400f;
			if (this.type == 423)
			{
				num10 = 300f;
			}
			if (this.type == 613)
			{
				num10 = 300f;
			}
			bool flag = false;
			int num11 = -1;
			this.tileCollide = true;
			if (this.type == 407)
			{
				this.tileCollide = false;
				if (Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.alpha += 20;
					if (this.alpha > 150)
					{
						this.alpha = 150;
					}
				}
				else
				{
					this.alpha -= 50;
					if (this.alpha < 60)
					{
						this.alpha = 60;
					}
				}
			}
			if (this.type == 407 || this.type == 613 || this.type == 423)
			{
				Vector2 center = Main.player[this.owner].Center;
				Vector2 value = new Vector2(0.5f);
				if (this.type == 423)
				{
					value.Y = 0f;
				}
				NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
				{
					Vector2 vector2 = ownerMinionAttackTargetNPC.position + ownerMinionAttackTargetNPC.Size * value;
					float num12 = Vector2.Distance(vector2, center);
					if (((Vector2.Distance(center, vector) > num12 && num12 < num10) || !flag) && Collision.CanHitLine(this.position, this.width, this.height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
					{
						num10 = num12;
						vector = vector2;
						flag = true;
						num11 = ownerMinionAttackTargetNPC.whoAmI;
					}
				}
				if (!flag)
				{
					for (int k = 0; k < 200; k++)
					{
						NPC nPC = Main.npc[k];
						if (nPC.CanBeChasedBy(this, false))
						{
							Vector2 vector3 = nPC.position + nPC.Size * value;
							float num13 = Vector2.Distance(vector3, center);
							if (((Vector2.Distance(center, vector) > num13 && num13 < num10) || !flag) && Collision.CanHitLine(this.position, this.width, this.height, nPC.position, nPC.width, nPC.height))
							{
								num10 = num13;
								vector = vector3;
								flag = true;
								num11 = k;
							}
						}
					}
				}
			}
			else
			{
				NPC ownerMinionAttackTargetNPC2 = this.OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this, false))
				{
					float num14 = Vector2.Distance(ownerMinionAttackTargetNPC2.Center, base.Center);
					if (((Vector2.Distance(base.Center, vector) > num14 && num14 < num10) || !flag) && Collision.CanHitLine(this.position, this.width, this.height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
					{
						num10 = num14;
						vector = ownerMinionAttackTargetNPC2.Center;
						flag = true;
						num11 = ownerMinionAttackTargetNPC2.whoAmI;
					}
				}
				if (!flag)
				{
					for (int l = 0; l < 200; l++)
					{
						NPC nPC2 = Main.npc[l];
						if (nPC2.CanBeChasedBy(this, false))
						{
							float num15 = Vector2.Distance(nPC2.Center, base.Center);
							if (((Vector2.Distance(base.Center, vector) > num15 && num15 < num10) || !flag) && Collision.CanHitLine(this.position, this.width, this.height, nPC2.position, nPC2.width, nPC2.height))
							{
								num10 = num15;
								vector = nPC2.Center;
								flag = true;
								num11 = l;
							}
						}
					}
				}
			}
			int num16 = 500;
			if (flag)
			{
				num16 = 1000;
			}
			if (flag && this.type == 423)
			{
				num16 = 1200;
			}
			if (flag && this.type == 613)
			{
				num16 = 1350;
			}
			Player player = Main.player[this.owner];
			if (Vector2.Distance(player.Center, base.Center) > (float)num16)
			{
				this.ai[0] = 1f;
				this.netUpdate = true;
			}
			if (this.ai[0] == 1f)
			{
				this.tileCollide = false;
			}
			if (flag && this.ai[0] == 0f)
			{
				Vector2 vector4 = vector - base.Center;
				float num17 = vector4.Length();
				vector4.Normalize();
				if (this.type == 423)
				{
					vector4 = vector - Vector2.UnitY * 80f;
					int num18 = (int)vector4.Y / 16;
					if (num18 < 0)
					{
						num18 = 0;
					}
					Tile tile = Main.tile[(int)vector4.X / 16, num18];
					if (tile != null && tile.active() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type])
					{
						vector4 += Vector2.UnitY * 16f;
						tile = Main.tile[(int)vector4.X / 16, (int)vector4.Y / 16];
						if (tile != null && tile.active() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type])
						{
							vector4 += Vector2.UnitY * 16f;
						}
					}
					vector4 -= base.Center;
					num17 = vector4.Length();
					vector4.Normalize();
					if (num17 > 300f && num17 <= 800f && this.localAI[0] == 0f)
					{
						this.ai[0] = 2f;
						this.ai[1] = (float)((int)(num17 / 10f));
						this.extraUpdates = (int)this.ai[1];
						this.velocity = vector4 * 10f;
						this.localAI[0] = 60f;
						return;
					}
				}
				if (this.type == 613)
				{
					vector4 = vector;
					Vector2 vector5 = base.Center - vector4;
					if (vector5 == Vector2.Zero)
					{
						vector5 = -Vector2.UnitY;
					}
					vector5.Normalize();
					vector4 += vector5 * 60f;
					int num19 = (int)vector4.Y / 16;
					if (num19 < 0)
					{
						num19 = 0;
					}
					Tile tile2 = Main.tile[(int)vector4.X / 16, num19];
					if (tile2 != null && tile2.active() && Main.tileSolid[(int)tile2.type] && !Main.tileSolidTop[(int)tile2.type])
					{
						vector4 += Vector2.UnitY * 16f;
						tile2 = Main.tile[(int)vector4.X / 16, (int)vector4.Y / 16];
						if (tile2 != null && tile2.active() && Main.tileSolid[(int)tile2.type] && !Main.tileSolidTop[(int)tile2.type])
						{
							vector4 += Vector2.UnitY * 16f;
						}
					}
					vector4 -= base.Center;
					num17 = vector4.Length();
					vector4.Normalize();
					if (num17 > 400f && num17 <= 800f && this.localAI[0] == 0f)
					{
						this.ai[0] = 2f;
						this.ai[1] = (float)((int)(num17 / 10f));
						this.extraUpdates = (int)this.ai[1];
						this.velocity = vector4 * 10f;
						this.localAI[0] = 60f;
						return;
					}
				}
				if (this.type == 407)
				{
					if (num17 > 400f)
					{
						float scaleFactor = 2f;
						vector4 *= scaleFactor;
						this.velocity = (this.velocity * 20f + vector4) / 21f;
					}
					else
					{
						this.velocity *= 0.96f;
					}
				}
				if (num17 > 200f)
				{
					float scaleFactor2 = 6f;
					vector4 *= scaleFactor2;
					this.velocity.X = (this.velocity.X * 40f + vector4.X) / 41f;
					this.velocity.Y = (this.velocity.Y * 40f + vector4.Y) / 41f;
				}
				else if (this.type == 423 || this.type == 613)
				{
					if (num17 > 70f && num17 < 130f)
					{
						float scaleFactor3 = 7f;
						if (num17 < 100f)
						{
							scaleFactor3 = -3f;
						}
						vector4 *= scaleFactor3;
						this.velocity = (this.velocity * 20f + vector4) / 21f;
						if (Math.Abs(vector4.X) > Math.Abs(vector4.Y))
						{
							this.velocity.X = (this.velocity.X * 10f + vector4.X) / 11f;
						}
					}
					else
					{
						this.velocity *= 0.97f;
					}
				}
				else if (this.type == 375)
				{
					if (num17 < 150f)
					{
						float num20 = 4f;
						vector4 *= -num20;
						this.velocity.X = (this.velocity.X * 40f + vector4.X) / 41f;
						this.velocity.Y = (this.velocity.Y * 40f + vector4.Y) / 41f;
					}
					else
					{
						this.velocity *= 0.97f;
					}
				}
				else if (this.velocity.Y > -1f)
				{
					this.velocity.Y = this.velocity.Y - 0.1f;
				}
			}
			else
			{
				if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
				{
					this.ai[0] = 1f;
				}
				float num21 = 6f;
				if (this.ai[0] == 1f)
				{
					num21 = 15f;
				}
				if (this.type == 407)
				{
					num21 = 9f;
				}
				Vector2 center2 = base.Center;
				Vector2 vector6 = player.Center - center2 + new Vector2(0f, -60f);
				if (this.type == 407)
				{
					vector6 += new Vector2(0f, 40f);
				}
				if (this.type == 375)
				{
					this.ai[1] = 3600f;
					this.netUpdate = true;
					vector6 = player.Center - center2;
					int num22 = 1;
					for (int m = 0; m < this.whoAmI; m++)
					{
						if (Main.projectile[m].active && Main.projectile[m].owner == this.owner && Main.projectile[m].type == this.type)
						{
							num22++;
						}
					}
					vector6.X -= (float)(10 * Main.player[this.owner].direction);
					vector6.X -= (float)(num22 * 40 * Main.player[this.owner].direction);
					vector6.Y -= 10f;
				}
				float num23 = vector6.Length();
				if (num23 > 200f && num21 < 9f)
				{
					num21 = 9f;
				}
				if (this.type == 375)
				{
					num21 = (float)((int)((double)num21 * 0.75));
				}
				if (num23 < 100f && this.ai[0] == 1f && !Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.ai[0] = 0f;
					this.netUpdate = true;
				}
				if (num23 > 2000f)
				{
					this.position.X = Main.player[this.owner].Center.X - (float)(this.width / 2);
					this.position.Y = Main.player[this.owner].Center.Y - (float)(this.width / 2);
				}
				if (this.type == 375)
				{
					if (num23 > 10f)
					{
						vector6.Normalize();
						if (num23 < 50f)
						{
							num21 /= 2f;
						}
						vector6 *= num21;
						this.velocity = (this.velocity * 20f + vector6) / 21f;
					}
					else
					{
						this.direction = Main.player[this.owner].direction;
						this.velocity *= 0.9f;
					}
				}
				else if (this.type == 407)
				{
					if (Math.Abs(vector6.X) > 40f || Math.Abs(vector6.Y) > 10f)
					{
						vector6.Normalize();
						vector6 *= num21;
						vector6 *= new Vector2(1.25f, 0.65f);
						this.velocity = (this.velocity * 20f + vector6) / 21f;
					}
					else
					{
						if (this.velocity.X == 0f && this.velocity.Y == 0f)
						{
							this.velocity.X = -0.15f;
							this.velocity.Y = -0.05f;
						}
						this.velocity *= 1.01f;
					}
				}
				else if (num23 > 70f)
				{
					vector6.Normalize();
					vector6 *= num21;
					this.velocity = (this.velocity * 20f + vector6) / 21f;
				}
				else
				{
					if (this.velocity.X == 0f && this.velocity.Y == 0f)
					{
						this.velocity.X = -0.15f;
						this.velocity.Y = -0.05f;
					}
					this.velocity *= 1.01f;
				}
			}
			this.rotation = this.velocity.X * 0.05f;
			this.frameCounter++;
			if (this.type == 373)
			{
				if (this.frameCounter > 1)
				{
					this.frame++;
					this.frameCounter = 0;
				}
				if (this.frame > 2)
				{
					this.frame = 0;
				}
			}
			if (this.type == 375)
			{
				if (this.frameCounter >= 16)
				{
					this.frameCounter = 0;
				}
				this.frame = this.frameCounter / 4;
				if (this.ai[1] > 0f && this.ai[1] < 16f)
				{
					this.frame += 4;
				}
				if (Main.rand.Next(6) == 0)
				{
					int num24 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num24].velocity *= 0.3f;
					Main.dust[num24].noGravity = true;
					Main.dust[num24].noLight = true;
				}
			}
			if (this.type == 407)
			{
				int num25 = 2;
				if (this.frameCounter >= 6 * num25)
				{
					this.frameCounter = 0;
				}
				this.frame = this.frameCounter / num25;
				if (Main.rand.Next(5) == 0)
				{
					int num26 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 217, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num26].velocity *= 0.3f;
					Main.dust[num26].noGravity = true;
					Main.dust[num26].noLight = true;
				}
			}
			if (this.type == 423 || this.type == 613)
			{
				int num27 = 3;
				if (this.frameCounter >= 4 * num27)
				{
					this.frameCounter = 0;
				}
				this.frame = this.frameCounter / num27;
			}
			if (this.velocity.X > 0f)
			{
				this.spriteDirection = (this.direction = -1);
			}
			else if (this.velocity.X < 0f)
			{
				this.spriteDirection = (this.direction = 1);
			}
			if (this.type == 373)
			{
				if (this.ai[1] > 0f)
				{
					this.ai[1] += (float)Main.rand.Next(1, 4);
				}
				if (this.ai[1] > 90f)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
			}
			else if (this.type == 375)
			{
				if (this.ai[1] > 0f)
				{
					this.ai[1] += 1f;
					if (Main.rand.Next(3) == 0)
					{
						this.ai[1] += 1f;
					}
				}
				if (this.ai[1] > (float)Main.rand.Next(180, 900))
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
			}
			else if (this.type == 407)
			{
				if (this.ai[1] > 0f)
				{
					this.ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						this.ai[1] += 1f;
					}
				}
				if (this.ai[1] > 60f)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
			}
			else if (this.type == 423)
			{
				if (this.ai[1] > 0f)
				{
					this.ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						this.ai[1] += 1f;
					}
				}
				if (this.ai[1] > 30f)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
			}
			else if (this.type == 613)
			{
				if (this.ai[1] > 0f)
				{
					this.ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						this.ai[1] += 1f;
					}
				}
				if (this.ai[1] > 60f)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
			}
			if (this.ai[0] == 0f)
			{
				float scaleFactor4 = 0f;
				int num28 = 0;
				if (this.type == 373)
				{
					scaleFactor4 = 10f;
					num28 = 374;
				}
				else if (this.type == 375)
				{
					scaleFactor4 = 11f;
					num28 = 376;
				}
				else if (this.type == 407)
				{
					scaleFactor4 = 14f;
					num28 = 408;
				}
				else if (this.type == 423)
				{
					scaleFactor4 = 4f;
					num28 = 433;
				}
				else if (this.type == 613)
				{
					scaleFactor4 = 14f;
					num28 = 614;
				}
				if (flag)
				{
					if (this.type == 375)
					{
						if ((vector - base.Center).X > 0f)
						{
							this.spriteDirection = (this.direction = -1);
						}
						else if ((vector - base.Center).X < 0f)
						{
							this.spriteDirection = (this.direction = 1);
						}
					}
					if (this.type != 407 || !Collision.SolidCollision(this.position, this.width, this.height))
					{
						if (this.type == 423)
						{
							if (Math.Abs((vector - base.Center).ToRotation() - 1.57079637f) > 0.7853982f)
							{
								this.velocity += Vector2.Normalize(vector - base.Center - Vector2.UnitY * 80f);
								return;
							}
							if ((vector - base.Center).Length() <= 400f && this.ai[1] == 0f)
							{
								this.ai[1] += 1f;
								if (Main.myPlayer == this.owner)
								{
									Vector2 vector7 = vector - base.Center;
									vector7.Normalize();
									vector7 *= scaleFactor4;
									Projectile.NewProjectile(base.Center.X, base.Center.Y, vector7.X, vector7.Y, num28, this.damage, 0f, Main.myPlayer, 0f, 0f);
									this.netUpdate = true;
									return;
								}
							}
						}
						else if (this.ai[1] == 0f && this.type == 613)
						{
							if ((vector - base.Center).Length() <= 500f && this.ai[1] == 0f)
							{
								this.ai[1] += 1f;
								if (Main.myPlayer == this.owner)
								{
									Vector2 vector8 = vector - base.Center;
									vector8.Normalize();
									vector8 *= scaleFactor4;
									int num29 = Projectile.NewProjectile(base.Center.X, base.Center.Y, vector8.X, vector8.Y, num28, this.damage, 0f, Main.myPlayer, 0f, (float)num11);
									Main.projectile[num29].timeLeft = 300;
									Main.projectile[num29].netUpdate = true;
									this.velocity -= vector8 / 3f;
									this.netUpdate = true;
								}
								for (int n = 0; n < 5; n++)
								{
									int num30 = this.width / 4;
									//TODO: 看看这是做什么的   //									((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (float)Main.rand.Next(24, 41) / 8f;
									int num31 = Dust.NewDust(base.Center - Vector2.One * (float)num30, num30 * 2, num30 * 2, 88, 0f, 0f, 0, default(Color), 1f);
									Dust dust3 = Main.dust[num31];
									Vector2 value2 = Vector2.Normalize(dust3.position - base.Center);
									dust3.position = base.Center + value2 * (float)num30 * this.scale - new Vector2(4f);
									if (n < 30)
									{
										dust3.velocity = value2 * dust3.velocity.Length() * 2f;
									}
									else
									{
										dust3.velocity = 2f * value2 * (float)Main.rand.Next(45, 91) / 10f;
									}
									dust3.noGravity = true;
									dust3.scale = 0.7f + Main.rand.NextFloat();
								}
								return;
							}
						}
						else if (this.ai[1] == 0f)
						{
							this.ai[1] += 1f;
							if (Main.myPlayer == this.owner)
							{
								Vector2 vector9 = vector - base.Center;
								vector9.Normalize();
								vector9 *= scaleFactor4;
								int num32 = Projectile.NewProjectile(base.Center.X, base.Center.Y, vector9.X, vector9.Y, num28, this.damage, 0f, Main.myPlayer, 0f, 0f);
								Main.projectile[num32].timeLeft = 300;
								Main.projectile[num32].netUpdate = true;
								this.netUpdate = true;
							}
						}
					}
				}
			}
		}

		// Token: 0x060001D6 RID: 470 RVA: 0x00095EA4 File Offset: 0x000940A4
		private void AI_075()
		{
			Player player = Main.player[this.owner];
			float num = 1.57079637f;
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter, true);
			if (this.type == 439)
			{
				this.ai[0] += 1f;
				int num2 = 0;
				if (this.ai[0] >= 40f)
				{
					num2++;
				}
				if (this.ai[0] >= 80f)
				{
					num2++;
				}
				if (this.ai[0] >= 120f)
				{
					num2++;
				}
				int num3 = 24;
				int num4 = 6;
				this.ai[1] += 1f;
				bool flag = false;
				if (this.ai[1] >= (float)(num3 - num4 * num2))
				{
					this.ai[1] = 0f;
					flag = true;
				}
				this.frameCounter += 1 + num2;
				if (this.frameCounter >= 4)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame >= 6)
					{
						this.frame = 0;
					}
				}
				if (this.soundDelay <= 0)
				{
					this.soundDelay = num3 - num4 * num2;
					if (this.ai[0] != 1f)
					{
						Main.PlaySound(SoundID.Item91, this.position);
					}
				}
				if (this.ai[1] == 1f && this.ai[0] != 1f)
				{
					Vector2 vector2 = Vector2.UnitX * 24f;
					vector2 = vector2.RotatedBy((double)(this.rotation - 1.57079637f), default(Vector2));
					Vector2 value = base.Center + vector2;
					for (int i = 0; i < 2; i++)
					{
						int num5 = Dust.NewDust(value - Vector2.One * 8f, 16, 16, 135, this.velocity.X / 2f, this.velocity.Y / 2f, 100, default(Color), 1f);
						Main.dust[num5].velocity *= 0.66f;
						Main.dust[num5].noGravity = true;
						Main.dust[num5].scale = 1.4f;
					}
				}
				if (flag && Main.myPlayer == this.owner)
				{
					if (player.channel && player.CheckMana(player.inventory[player.selectedItem].mana, true, false) && !player.noItems && !player.CCed)
					{
						float scaleFactor = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector3 = vector;
						Vector2 value2 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector3;
						if (player.gravDir == -1f)
						{
							value2.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector3.Y;
						}
						Vector2 vector4 = Vector2.Normalize(value2);
						if (float.IsNaN(vector4.X) || float.IsNaN(vector4.Y))
						{
							vector4 = -Vector2.UnitY;
						}
						vector4 *= scaleFactor;
						if (vector4.X != this.velocity.X || vector4.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector4;
						int num6 = 440;
						float scaleFactor2 = 14f;
						int num7 = 7;
						for (int j = 0; j < 2; j++)
						{
							vector3 = base.Center + new Vector2((float)Main.rand.Next(-num7, num7 + 1), (float)Main.rand.Next(-num7, num7 + 1));
							Vector2 vector5 = Vector2.Normalize(this.velocity) * scaleFactor2;
							vector5 = vector5.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914, default(Vector2));
							if (float.IsNaN(vector5.X) || float.IsNaN(vector5.Y))
							{
								vector5 = -Vector2.UnitY;
							}
							Projectile.NewProjectile(vector3.X, vector3.Y, vector5.X, vector5.Y, num6, this.damage, this.knockBack, this.owner, 0f, 0f);
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			if (this.type == 445)
			{
				this.localAI[0] += 1f;
				if (this.localAI[0] >= 60f)
				{
					this.localAI[0] = 0f;
				}
				if (Vector2.Distance(vector, base.Center) >= 5f)
				{
					float num8 = this.localAI[0] / 60f;
					if (num8 > 0.5f)
					{
						num8 = 1f - num8;
					}
					Vector3 arg_548_0 = new Vector3(0f, 1f, 0.7f);
					Vector3 value3 = new Vector3(0f, 0.7f, 1f);
					Vector3 vector6 = Vector3.Lerp(arg_548_0, value3, 1f - num8 * 2f) * 0.5f;
					if (Vector2.Distance(vector, base.Center) >= 30f)
					{
						Vector2 vector7 = base.Center - vector;
						vector7.Normalize();
						vector7 *= Vector2.Distance(vector, base.Center) - 30f;
						DelegateMethods.v3_1 = vector6 * 0.8f;
						Utils.PlotTileLine(base.Center - vector7, base.Center, 8f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, vector6.X, vector6.Y, vector6.Z);
				}
				if (Main.myPlayer == this.owner)
				{
					if (this.localAI[1] > 0f)
					{
						this.localAI[1] -= 1f;
					}
					if (!player.channel || player.noItems || player.CCed)
					{
						this.Kill();
					}
					else if (this.localAI[1] == 0f)
					{
						Vector2 vector8 = vector;
						Vector2 vector9 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector8;
						if (player.gravDir == -1f)
						{
							vector9.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector8.Y;
						}
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
						{
							vector9 = new Vector2((float)Player.tileTargetX, (float)Player.tileTargetY) * 16f + Vector2.One * 8f - vector8;
							this.localAI[1] = 2f;
						}
						vector9 = Vector2.Lerp(vector9, this.velocity, 0.7f);
						if (float.IsNaN(vector9.X) || float.IsNaN(vector9.Y))
						{
							vector9 = -Vector2.UnitY;
						}
						float num9 = 30f;
						if (vector9.Length() < num9)
						{
							vector9 = Vector2.Normalize(vector9) * num9;
						}
						int tileBoost = player.inventory[player.selectedItem].tileBoost;
						int num10 = -Player.tileRangeX - tileBoost + 1;
						int num11 = Player.tileRangeX + tileBoost - 1;
						int num12 = -Player.tileRangeY - tileBoost;
						int num13 = Player.tileRangeY + tileBoost - 1;
						int num14 = 12;
						bool flag2 = false;
						if (vector9.X < (float)(num10 * 16 - num14))
						{
							flag2 = true;
						}
						if (vector9.Y < (float)(num12 * 16 - num14))
						{
							flag2 = true;
						}
						if (vector9.X > (float)(num11 * 16 + num14))
						{
							flag2 = true;
						}
						if (vector9.Y > (float)(num13 * 16 + num14))
						{
							flag2 = true;
						}
						if (flag2)
						{
							Vector2 vector10 = Vector2.Normalize(vector9);
							float num15 = -1f;
							if (vector10.X < 0f && ((float)(num10 * 16 - num14) / vector10.X < num15 || num15 == -1f))
							{
								num15 = (float)(num10 * 16 - num14) / vector10.X;
							}
							if (vector10.X > 0f && ((float)(num11 * 16 + num14) / vector10.X < num15 || num15 == -1f))
							{
								num15 = (float)(num11 * 16 + num14) / vector10.X;
							}
							if (vector10.Y < 0f && ((float)(num12 * 16 - num14) / vector10.Y < num15 || num15 == -1f))
							{
								num15 = (float)(num12 * 16 - num14) / vector10.Y;
							}
							if (vector10.Y > 0f && ((float)(num13 * 16 + num14) / vector10.Y < num15 || num15 == -1f))
							{
								num15 = (float)(num13 * 16 + num14) / vector10.Y;
							}
							vector9 = vector10 * num15;
						}
						if (vector9.X != this.velocity.X || vector9.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector9;
					}
				}
			}
			if (this.type == 460)
			{
				this.ai[0] += 1f;
				int num16 = 0;
				if (this.ai[0] >= 60f)
				{
					num16++;
				}
				if (this.ai[0] >= 180f)
				{
					num16++;
				}
				bool flag3 = false;
				if (this.ai[0] == 60f || this.ai[0] == 180f || (this.ai[0] > 180f && this.ai[0] % 20f == 0f))
				{
					flag3 = true;
				}
				bool flag4 = this.ai[0] >= 180f;
				int num17 = 10;
				if (!flag4)
				{
					this.ai[1] += 1f;
				}
				bool flag5 = false;
				if (flag4 && this.ai[0] % 20f == 0f)
				{
					flag5 = true;
				}
				if (this.ai[1] >= (float)num17 && !flag4)
				{
					this.ai[1] = 0f;
					flag5 = true;
					if (!flag4)
					{
						float scaleFactor3 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector11 = vector;
						Vector2 value4 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector11;
						if (player.gravDir == -1f)
						{
							value4.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector11.Y;
						}
						Vector2 vector12 = Vector2.Normalize(value4);
						if (float.IsNaN(vector12.X) || float.IsNaN(vector12.Y))
						{
							vector12 = -Vector2.UnitY;
						}
						vector12 *= scaleFactor3;
						if (vector12.X != this.velocity.X || vector12.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector12;
					}
				}
				if (this.soundDelay <= 0 && !flag4)
				{
					this.soundDelay = num17 - num16;
					this.soundDelay *= 2;
					if (this.ai[0] != 1f)
					{
						Main.PlaySound(SoundID.Item15, this.position);
					}
				}
				if (this.ai[0] > 10f && !flag4)
				{
					Vector2 vector13 = Vector2.UnitX * 18f;
					vector13 = vector13.RotatedBy((double)(this.rotation - 1.57079637f), default(Vector2));
					Vector2 value5 = base.Center + vector13;
					for (int k = 0; k < num16 + 1; k++)
					{
						int num18 = 226;
						float num19 = 0.4f;
						if (k % 2 == 1)
						{
							num18 = 226;
							num19 = 0.65f;
						}
						Vector2 vector14 = value5 + ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (12f - (float)(num16 * 2));
						int num20 = Dust.NewDust(vector14 - Vector2.One * 8f, 16, 16, num18, this.velocity.X / 2f, this.velocity.Y / 2f, 0, default(Color), 1f);
						Main.dust[num20].velocity = Vector2.Normalize(value5 - vector14) * 1.5f * (10f - (float)num16 * 2f) / 10f;
						Main.dust[num20].noGravity = true;
						Main.dust[num20].scale = num19;
						Main.dust[num20].customData = player;
					}
				}
				if (flag5 && Main.myPlayer == this.owner)
				{
					bool flag6 = !flag3 || player.CheckMana(player.inventory[player.selectedItem].mana, true, false);
					if ((player.channel & flag6) && !player.noItems && !player.CCed)
					{
						if (this.ai[0] == 180f)
						{
							Vector2 center = base.Center;
							Vector2 vector15 = Vector2.Normalize(this.velocity);
							if (float.IsNaN(vector15.X) || float.IsNaN(vector15.Y))
							{
								vector15 = -Vector2.UnitY;
							}
							int num21 = (int)((float)this.damage * 3f);
							int num22 = Projectile.NewProjectile(center.X, center.Y, vector15.X, vector15.Y, 461, num21, this.knockBack, this.owner, 0f, (float)this.whoAmI);
							this.ai[1] = (float)num22;
							this.netUpdate = true;
						}
						else if (flag4)
						{
							Projectile projectile = Main.projectile[(int)this.ai[1]];
							if (!projectile.active || projectile.type != 461)
							{
								this.Kill();
								return;
							}
						}
					}
					else
					{
						if (!flag4)
						{
							int num23 = 459;
							float scaleFactor4 = 10f;
							Vector2 center2 = base.Center;
							Vector2 vector16 = Vector2.Normalize(this.velocity) * scaleFactor4;
							if (float.IsNaN(vector16.X) || float.IsNaN(vector16.Y))
							{
								vector16 = -Vector2.UnitY;
							}
							float num24 = 0.7f + (float)num16 * 0.3f;
							int num25 = (num24 < 1f) ? this.damage : ((int)((float)this.damage * 2f));
							Projectile.NewProjectile(center2.X, center2.Y, vector16.X, vector16.Y, num23, num25, this.knockBack, this.owner, 0f, num24);
						}
						this.Kill();
					}
				}
			}
			if (this.type == 633)
			{
				float num26 = 30f;
				if (this.ai[0] > 90f)
				{
					num26 = 15f;
				}
				if (this.ai[0] > 120f)
				{
					num26 = 5f;
				}
				this.damage = (int)((float)player.inventory[player.selectedItem].damage * player.magicDamage);
				this.ai[0] += 1f;
				this.ai[1] += 1f;
				bool flag7 = false;
				if (this.ai[0] % num26 == 0f)
				{
					flag7 = true;
				}
				int num27 = 10;
				bool flag8 = false;
				if (this.ai[0] % num26 == 0f)
				{
					flag8 = true;
				}
				if (this.ai[1] >= 1f)
				{
					this.ai[1] = 0f;
					flag8 = true;
					if (Main.myPlayer == this.owner)
					{
						float scaleFactor5 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector17 = vector;
						Vector2 value6 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector17;
						if (player.gravDir == -1f)
						{
							value6.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector17.Y;
						}
						Vector2 vector18 = Vector2.Normalize(value6);
						if (float.IsNaN(vector18.X) || float.IsNaN(vector18.Y))
						{
							vector18 = -Vector2.UnitY;
						}
						vector18 = Vector2.Normalize(Vector2.Lerp(vector18, Vector2.Normalize(this.velocity), 0.92f));
						vector18 *= scaleFactor5;
						if (vector18.X != this.velocity.X || vector18.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector18;
					}
				}
				this.frameCounter++;
				int num28 = (this.ai[0] < 120f) ? 4 : 1;
				if (this.frameCounter >= num28)
				{
					this.frameCounter = 0;
					int num29 = this.frame + 1;
					this.frame = num29;
					if (num29 >= 5)
					{
						this.frame = 0;
					}
				}
				if (this.soundDelay <= 0)
				{
					this.soundDelay = num27;
					this.soundDelay *= 2;
					if (this.ai[0] != 1f)
					{
						Main.PlaySound(SoundID.Item15, this.position);
					}
				}
				if (flag8 && Main.myPlayer == this.owner)
				{
					bool flag9 = !flag7 || player.CheckMana(player.inventory[player.selectedItem].mana, true, false);
					if ((player.channel & flag9) && !player.noItems && !player.CCed)
					{
						if (this.ai[0] == 1f)
						{
							Vector2 center3 = base.Center;
							Vector2 vector19 = Vector2.Normalize(this.velocity);
							if (float.IsNaN(vector19.X) || float.IsNaN(vector19.Y))
							{
								vector19 = -Vector2.UnitY;
							}
							int num30 = this.damage;
							for (int l = 0; l < 6; l++)
							{
								Projectile.NewProjectile(center3.X, center3.Y, vector19.X, vector19.Y, 632, num30, this.knockBack, this.owner, (float)l, (float)this.whoAmI);
							}
							this.netUpdate = true;
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			if (this.type == 595)
			{
				num = 0f;
				if (this.spriteDirection == -1)
				{
					num = 3.14159274f;
				}
				int num29 = this.frame + 1;
				this.frame = num29;
				if (num29 >= Main.projFrames[this.type])
				{
					this.frame = 0;
				}
				this.soundDelay--;
				if (this.soundDelay <= 0)
				{
					Main.PlaySound(SoundID.Item1, base.Center);
					this.soundDelay = 12;
				}
				if (Main.myPlayer == this.owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float scaleFactor6 = 1f;
						if (player.inventory[player.selectedItem].shoot == this.type)
						{
							scaleFactor6 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						}
						Vector2 vector20 = Main.MouseWorld - vector;
						vector20.Normalize();
						if (vector20.HasNaNs())
						{
							vector20 = Vector2.UnitX * (float)player.direction;
						}
						vector20 *= scaleFactor6;
						if (vector20.X != this.velocity.X || vector20.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector20;
					}
					else
					{
						this.Kill();
					}
				}
				Vector2 vector21 = base.Center + this.velocity * 3f;
				Lighting.AddLight(vector21, 0.8f, 0.8f, 0.8f);
				if (Main.rand.Next(3) == 0)
				{
					int num31 = Dust.NewDust(vector21 - base.Size / 2f, this.width, this.height, 63, this.velocity.X, this.velocity.Y, 100, default(Color), 2f);
					Main.dust[num31].noGravity = true;
					Main.dust[num31].position -= this.velocity;
				}
			}
			if (this.type == 600)
			{
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] != 0f)
					{
						Main.PlaySound(SoundID.Item114, this.position);
					}
					else
					{
						Main.PlaySound(SoundID.Item115, this.position);
					}
				}
				this.ai[0] += 1f;
				if (Main.myPlayer == this.owner && this.ai[0] == 1f)
				{
					float scaleFactor7 = player.inventory[player.selectedItem].shootSpeed * this.scale;
					Vector2 vector22 = vector;
					Vector2 value7 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector22;
					if (player.gravDir == -1f)
					{
						value7.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector22.Y;
					}
					Vector2 vector23 = Vector2.Normalize(value7);
					if (float.IsNaN(vector23.X) || float.IsNaN(vector23.Y))
					{
						vector23 = -Vector2.UnitY;
					}
					vector23 *= scaleFactor7;
					if (vector23.X != this.velocity.X || vector23.Y != this.velocity.Y)
					{
						this.netUpdate = true;
					}
					this.velocity = vector23;
					int num32 = 601;
					float scaleFactor8 = 3f;
					vector22 = base.Center;
					Vector2 vector24 = Vector2.Normalize(this.velocity) * scaleFactor8;
					if (float.IsNaN(vector24.X) || float.IsNaN(vector24.Y))
					{
						vector24 = -Vector2.UnitY;
					}
					Projectile.NewProjectile(vector22.X, vector22.Y, vector24.X, vector24.Y, num32, this.damage, this.knockBack, this.owner, this.ai[1], 0f);
				}
				if (this.ai[0] >= 30f)
				{
					this.Kill();
				}
			}
			if (this.type == 611)
			{
				if (this.localAI[1] > 0f)
				{
					this.localAI[1] -= 1f;
				}
				this.alpha -= 42;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = this.velocity.ToRotation();
				}
				float num33 = (float)((this.localAI[0].ToRotationVector2().X >= 0f) ? 1 : -1);
				if (this.ai[1] <= 0f)
				{
					num33 *= -1f;
				}
				Vector2 vector25 = (num33 * (this.ai[0] / 30f * 6.28318548f - 1.57079637f)).ToRotationVector2();
				vector25.Y *= (float)Math.Sin((double)this.ai[1]);
				if (this.ai[1] <= 0f)
				{
					vector25.Y *= -1f;
				}
				vector25 = vector25.RotatedBy((double)this.localAI[0], default(Vector2));
				this.ai[0] += 1f;
				if (this.ai[0] < 30f)
				{
					this.velocity += 48f * vector25;
				}
				else
				{
					this.Kill();
				}
			}
			if (this.type == 615)
			{
				num = 0f;
				if (this.spriteDirection == -1)
				{
					num = 3.14159274f;
				}
				this.ai[0] += 1f;
				int num34 = 0;
				if (this.ai[0] >= 40f)
				{
					num34++;
				}
				if (this.ai[0] >= 80f)
				{
					num34++;
				}
				if (this.ai[0] >= 120f)
				{
					num34++;
				}
				int num35 = 5;
				int num36 = 0;
				this.ai[1] -= 1f;
				bool flag10 = false;
				int num37 = -1;
				if (this.ai[1] <= 0f)
				{
					this.ai[1] = (float)(num35 - num36 * num34);
					flag10 = true;
					if ((int)this.ai[0] / (num35 - num36 * num34) % 7 == 0)
					{
						num37 = 0;
					}
				}
				this.frameCounter += 1 + num34;
				if (this.frameCounter >= 4)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
				}
				if (this.soundDelay <= 0)
				{
					this.soundDelay = num35 - num36 * num34;
					if (this.ai[0] != 1f)
					{
						Main.PlaySound(SoundID.Item36, this.position);
					}
				}
				if (flag10 && Main.myPlayer == this.owner)
				{
					bool flag11 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
					int num38 = 14;
					float scaleFactor9 = 14f;
					int weaponDamage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float weaponKnockback = player.inventory[player.selectedItem].knockBack;
					if (flag11)
					{
						player.PickAmmo(player.inventory[player.selectedItem], ref num38, ref scaleFactor9, ref flag11, ref weaponDamage, ref weaponKnockback, false);
						weaponKnockback = player.GetWeaponKnockback(player.inventory[player.selectedItem], weaponKnockback);
						float scaleFactor10 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector26 = vector;
						Vector2 value8 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector26;
						if (player.gravDir == -1f)
						{
							value8.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector26.Y;
						}
						Vector2 vector27 = Vector2.Normalize(value8);
						if (float.IsNaN(vector27.X) || float.IsNaN(vector27.Y))
						{
							vector27 = -Vector2.UnitY;
						}
						vector27 *= scaleFactor10;
						vector27 = vector27.RotatedBy(Main.rand.NextDouble() * 0.13089969754219055 - 0.065449848771095276, default(Vector2));
						if (vector27.X != this.velocity.X || vector27.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector27;
						for (int m = 0; m < 1; m++)
						{
							Vector2 vector28 = Vector2.Normalize(this.velocity) * scaleFactor9;
							vector28 = vector28.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914, default(Vector2));
							if (float.IsNaN(vector28.X) || float.IsNaN(vector28.Y))
							{
								vector28 = -Vector2.UnitY;
							}
							Projectile.NewProjectile(vector26.X, vector26.Y, vector28.X, vector28.Y, num38, weaponDamage, weaponKnockback, this.owner, 0f, 0f);
						}
						if (num37 == 0)
						{
							num38 = 616;
							scaleFactor9 = 8f;
							for (int n = 0; n < 1; n++)
							{
								Vector2 vector29 = Vector2.Normalize(this.velocity) * scaleFactor9;
								vector29 = vector29.RotatedBy(Main.rand.NextDouble() * 0.39269909262657166 - 0.19634954631328583, default(Vector2));
								if (float.IsNaN(vector29.X) || float.IsNaN(vector29.Y))
								{
									vector29 = -Vector2.UnitY;
								}
								Projectile.NewProjectile(vector26.X, vector26.Y, vector29.X, vector29.Y, num38, weaponDamage + 20, weaponKnockback * 1.25f, this.owner, 0f, 0f);
							}
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			if (this.type == 630)
			{
				num = 0f;
				if (this.spriteDirection == -1)
				{
					num = 3.14159274f;
				}
				this.ai[0] += 1f;
				int num39 = 0;
				if (this.ai[0] >= 40f)
				{
					num39++;
				}
				if (this.ai[0] >= 80f)
				{
					num39++;
				}
				if (this.ai[0] >= 120f)
				{
					num39++;
				}
				int num40 = 24;
				int num41 = 2;
				this.ai[1] -= 1f;
				bool flag12 = false;
				if (this.ai[1] <= 0f)
				{
					this.ai[1] = (float)(num40 - num41 * num39);
					flag12 = true;
					int arg_1E5E_0 = (int)this.ai[0] / (num40 - num41 * num39);
				}
				bool flag13 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
				if (this.localAI[0] > 0f)
				{
					this.localAI[0] -= 1f;
				}
				if (this.soundDelay <= 0 & flag13)
				{
					this.soundDelay = num40 - num41 * num39;
					if (this.ai[0] != 1f)
					{
						Main.PlaySound(SoundID.Item5, this.position);
					}
					this.localAI[0] = 12f;
				}
				player.phantasmTime = 2;
				if (flag12 && Main.myPlayer == this.owner)
				{
					int num42 = 14;
					float scaleFactor11 = 14f;
					int weaponDamage2 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float weaponKnockback2 = player.inventory[player.selectedItem].knockBack;
					if (flag13)
					{
						player.PickAmmo(player.inventory[player.selectedItem], ref num42, ref scaleFactor11, ref flag13, ref weaponDamage2, ref weaponKnockback2, false);
						weaponKnockback2 = player.GetWeaponKnockback(player.inventory[player.selectedItem], weaponKnockback2);
						float scaleFactor12 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector30 = vector;
						Vector2 value9 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector30;
						if (player.gravDir == -1f)
						{
							value9.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector30.Y;
						}
						Vector2 vector31 = Vector2.Normalize(value9);
						if (float.IsNaN(vector31.X) || float.IsNaN(vector31.Y))
						{
							vector31 = -Vector2.UnitY;
						}
						vector31 *= scaleFactor12;
						if (vector31.X != this.velocity.X || vector31.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector31 * 0.55f;
						for (int num43 = 0; num43 < 4; num43++)
						{
							Vector2 vector32 = Vector2.Normalize(this.velocity) * scaleFactor11 * (0.6f + Main.rand.NextFloat() * 0.8f);
							if (float.IsNaN(vector32.X) || float.IsNaN(vector32.Y))
							{
								vector32 = -Vector2.UnitY;
							}
							Vector2 vector33 = vector30 + Utils.RandomVector2(Main.rand, -15f, 15f);
							int num44 = Projectile.NewProjectile(vector33.X, vector33.Y, vector32.X, vector32.Y, num42, weaponDamage2, weaponKnockback2, this.owner, 0f, 0f);
							Main.projectile[num44].noDropItem = true;
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			if (this.type == 705)
			{
				num = 0f;
				if (this.spriteDirection == -1)
				{
					num = 3.14159274f;
				}
				this.ai[0] += 1f;
				int itemAnimationMax = player.itemAnimationMax;
				this.ai[1] -= 1f;
				bool flag14 = false;
				if (this.ai[1] <= 0f)
				{
					this.ai[1] = (float)itemAnimationMax;
					flag14 = true;
				}
				bool flag15 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
				if (this.localAI[0] > 0f)
				{
					this.localAI[0] -= 1f;
				}
				if (this.soundDelay <= 0 & flag15)
				{
					this.soundDelay = itemAnimationMax;
					if (this.ai[0] != 1f)
					{
						Main.PlaySound(SoundID.Item5, this.position);
					}
					this.localAI[0] = 12f;
				}
				if (flag14 && Main.myPlayer == this.owner)
				{
					int num45 = 14;
					float scaleFactor13 = 12f;
					int num46 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float weaponKnockback3 = player.inventory[player.selectedItem].knockBack;
					int num47 = 2;
					float num48 = 1.5f;
					if (flag15)
					{
						player.PickAmmo(player.inventory[player.selectedItem], ref num45, ref scaleFactor13, ref flag15, ref num46, ref weaponKnockback3, false);
						weaponKnockback3 = player.GetWeaponKnockback(player.inventory[player.selectedItem], weaponKnockback3);
						if (num45 == 1)
						{
							num45 = 2;
						}
						Player expr_230B = player;
						int num29 = expr_230B.phantomPhoneixCounter + 1;
						expr_230B.phantomPhoneixCounter = num29;
						if (num29 >= 4)
						{
							player.phantomPhoneixCounter = 0;
							num47 = 1;
							num46 *= 2;
							num48 = 0f;
							this.ai[1] *= 1.5f;
							num45 = 706;
							scaleFactor13 = 16f;
						}
						float scaleFactor14 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector34 = vector;
						Vector2 value10 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector34;
						if (player.gravDir == -1f)
						{
							value10.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector34.Y;
						}
						Vector2 vector35 = Vector2.Normalize(value10);
						if (float.IsNaN(vector35.X) || float.IsNaN(vector35.Y))
						{
							vector35 = -Vector2.UnitY;
						}
						vector35 *= scaleFactor14;
						if (vector35.X != this.velocity.X || vector35.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector35 * 0.55f;
						for (int num49 = 0; num49 < num47; num49++)
						{
							Vector2 vector36 = Vector2.Normalize(this.velocity) * scaleFactor13;
							vector36 += Main.rand.NextVector2Square(-num48, num48);
							if (float.IsNaN(vector36.X) || float.IsNaN(vector36.Y))
							{
								vector36 = -Vector2.UnitY;
							}
							Vector2 vector37 = vector34;
							int num50 = Projectile.NewProjectile(vector37.X, vector37.Y, vector36.X, vector36.Y, num45, num46, weaponKnockback3, this.owner, 0f, 0f);
							Main.projectile[num50].noDropItem = true;
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			this.position = player.RotatedRelativePoint(player.MountedCenter, true) - base.Size / 2f;
			this.rotation = this.velocity.ToRotation() + num;
			this.spriteDirection = this.direction;
			this.timeLeft = 2;
			player.ChangeDir(this.direction);
			player.heldProj = this.whoAmI;
			player.itemTime = 2;
			player.itemAnimation = 2;
			player.itemRotation = (float)Math.Atan2((double)(this.velocity.Y * (float)this.direction), (double)(this.velocity.X * (float)this.direction));
			if (this.type == 460 || this.type == 611)
			{
				Vector2 vector38 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
				if (player.direction != 1)
				{
					vector38.X = (float)player.bodyFrame.Width - vector38.X;
				}
				if (player.gravDir != 1f)
				{
					vector38.Y = (float)player.bodyFrame.Height - vector38.Y;
				}
				vector38 -= new Vector2((float)(player.bodyFrame.Width - player.width), (float)(player.bodyFrame.Height - 42)) / 2f;
				base.Center = player.RotatedRelativePoint(player.position + vector38, true) - this.velocity;
			}
			if (this.type == 615)
			{
				this.position.Y = this.position.Y + player.gravDir * 2f;
			}
			if (this.type == 611 && this.alpha == 0)
			{
				for (int num51 = 0; num51 < 2; num51++)
				{
					Dust expr_2733 = Main.dust[Dust.NewDust(this.position + this.velocity * 2f, this.width, this.height, 6, 0f, 0f, 100, Color.Transparent, 2f)];
					expr_2733.noGravity = true;
					expr_2733.velocity *= 2f;
					expr_2733.velocity += this.localAI[0].ToRotationVector2();
					expr_2733.fadeIn = 1.5f;
				}
				float num52 = 18f;
				int num53 = 0;
				while ((float)num53 < num52)
				{
					if (Main.rand.Next(4) == 0)
					{
						Vector2 position = this.position + this.velocity + this.velocity * ((float)num53 / num52);
						Dust expr_27FE = Main.dust[Dust.NewDust(position, this.width, this.height, 6, 0f, 0f, 100, Color.Transparent, 1f)];
						expr_27FE.noGravity = true;
						expr_27FE.fadeIn = 0.5f;
						expr_27FE.velocity += this.localAI[0].ToRotationVector2();
						expr_27FE.noLight = true;
					}
					num53++;
				}
			}
		}

		// Token: 0x060001D7 RID: 471 RVA: 0x000986F8 File Offset: 0x000968F8
		private void AI_099_1()
		{
			this.timeLeft = 6;
			bool flag = true;
			float num = 250f;
			float scaleFactor = 0.1f;
			float num2 = 15f;
			float num3 = 12f;
			num *= 0.5f;
			num2 *= 0.8f;
			num3 *= 1.5f;
			if (this.owner == Main.myPlayer)
			{
				bool flag2 = false;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == this.owner && Main.projectile[i].aiStyle == 99 && (Main.projectile[i].type < 556 || Main.projectile[i].type > 561))
					{
						flag2 = true;
					}
				}
				if (!flag2)
				{
					this.ai[0] = -1f;
					this.netUpdate = true;
				}
			}
			if (Main.player[this.owner].yoyoString)
			{
				num += num * 0.25f + 10f;
			}
			this.rotation += 0.5f;
			if (Main.player[this.owner].dead)
			{
				this.Kill();
				return;
			}
			if (!flag)
			{
				Main.player[this.owner].heldProj = this.whoAmI;
				Main.player[this.owner].itemAnimation = 2;
				Main.player[this.owner].itemTime = 2;
				if (this.position.X + (float)(this.width / 2) > Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2))
				{
					Main.player[this.owner].ChangeDir(1);
					this.direction = 1;
				}
				else
				{
					Main.player[this.owner].ChangeDir(-1);
					this.direction = -1;
				}
			}
			if (this.ai[0] == 0f || this.ai[0] == 1f)
			{
				if (this.ai[0] == 1f)
				{
					num *= 0.75f;
				}
				num3 *= 0.5f;
				bool flag3 = false;
				Vector2 vector = Main.player[this.owner].Center - base.Center;
				if ((double)vector.Length() > (double)num * 0.9)
				{
					flag3 = true;
				}
				if (vector.Length() > num)
				{
					float num4 = vector.Length() - num;
					Vector2 vector2;
					vector2.X = vector.Y;
					vector2.Y = vector.X;
					vector.Normalize();
					vector *= num;
					this.position = Main.player[this.owner].Center - vector;
					this.position.X = this.position.X - (float)(this.width / 2);
					this.position.Y = this.position.Y - (float)(this.height / 2);
					float num5 = this.velocity.Length();
					this.velocity.Normalize();
					if (num4 > num5 - 1f)
					{
						num4 = num5 - 1f;
					}
					this.velocity *= num5 - num4;
					num5 = this.velocity.Length();
					Vector2 vector3 = new Vector2(base.Center.X, base.Center.Y);
					Vector2 vector4 = new Vector2(Main.player[this.owner].Center.X, Main.player[this.owner].Center.Y);
					if (vector3.Y < vector4.Y)
					{
						vector2.Y = Math.Abs(vector2.Y);
					}
					else if (vector3.Y > vector4.Y)
					{
						vector2.Y = -Math.Abs(vector2.Y);
					}
					if (vector3.X < vector4.X)
					{
						vector2.X = Math.Abs(vector2.X);
					}
					else if (vector3.X > vector4.X)
					{
						vector2.X = -Math.Abs(vector2.X);
					}
					vector2.Normalize();
					vector2 *= this.velocity.Length();
					new Vector2(vector2.X, vector2.Y);
					if (Math.Abs(this.velocity.X) > Math.Abs(this.velocity.Y))
					{
						Vector2 vector5 = this.velocity;
						vector5.Y += vector2.Y;
						vector5.Normalize();
						vector5 *= this.velocity.Length();
						if ((double)Math.Abs(vector2.X) < 0.1 || (double)Math.Abs(vector2.Y) < 0.1)
						{
							this.velocity = vector5;
						}
						else
						{
							this.velocity = (vector5 + this.velocity * 2f) / 3f;
						}
					}
					else
					{
						Vector2 vector6 = this.velocity;
						vector6.X += vector2.X;
						vector6.Normalize();
						vector6 *= this.velocity.Length();
						if ((double)Math.Abs(vector2.X) < 0.2 || (double)Math.Abs(vector2.Y) < 0.2)
						{
							this.velocity = vector6;
						}
						else
						{
							this.velocity = (vector6 + this.velocity * 2f) / 3f;
						}
					}
				}
				if (Main.myPlayer == this.owner)
				{
					if (Main.player[this.owner].channel)
					{
						Vector2 vector7 = new Vector2((float)(Main.mouseX - Main.lastMouseX), (float)(Main.mouseY - Main.lastMouseY));
						if (this.velocity.X != 0f || this.velocity.Y != 0f)
						{
							if (flag)
							{
								vector7 *= -1f;
							}
							if (flag3)
							{
								if (base.Center.X < Main.player[this.owner].Center.X && vector7.X < 0f)
								{
									vector7.X = 0f;
								}
								if (base.Center.X > Main.player[this.owner].Center.X && vector7.X > 0f)
								{
									vector7.X = 0f;
								}
								if (base.Center.Y < Main.player[this.owner].Center.Y && vector7.Y < 0f)
								{
									vector7.Y = 0f;
								}
								if (base.Center.Y > Main.player[this.owner].Center.Y && vector7.Y > 0f)
								{
									vector7.Y = 0f;
								}
							}
							this.velocity += vector7 * scaleFactor;
							this.netUpdate = true;
						}
					}
					else
					{
						this.ai[0] = 10f;
						this.netUpdate = true;
					}
				}
				if (flag || this.type == 562 || this.type == 547 || this.type == 555 || this.type == 564 || this.type == 552 || this.type == 563 || this.type == 549 || this.type == 550 || this.type == 554 || this.type == 553 || this.type == 603)
				{
					float num6 = 800f;
					Vector2 vector8 = default(Vector2);
					bool flag4 = false;
					if (this.type == 549)
					{
						num6 = 200f;
					}
					if (this.type == 554)
					{
						num6 = 400f;
					}
					if (this.type == 553)
					{
						num6 = 250f;
					}
					if (this.type == 603)
					{
						num6 = 320f;
					}
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j].CanBeChasedBy(this, false))
						{
							float num7 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
							float num8 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
							float num9 = Math.Abs(this.position.X + (float)(this.width / 2) - num7) + Math.Abs(this.position.Y + (float)(this.height / 2) - num8);
							if (num9 < num6 && (this.type != 563 || num9 >= 200f) && Collision.CanHit(this.position, this.width, this.height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height) && (double)(Main.npc[j].Center - Main.player[this.owner].Center).Length() < (double)num * 0.9)
							{
								num6 = num9;
								vector8.X = num7;
								vector8.Y = num8;
								flag4 = true;
							}
						}
					}
					if (flag4)
					{
						vector8 -= base.Center;
						vector8.Normalize();
						if (this.type == 563)
						{
							vector8 *= 4f;
							this.velocity = (this.velocity * 14f + vector8) / 15f;
						}
						else if (this.type == 553)
						{
							vector8 *= 5f;
							this.velocity = (this.velocity * 12f + vector8) / 13f;
						}
						else if (this.type == 603)
						{
							vector8 *= 16f;
							this.velocity = (this.velocity * 9f + vector8) / 10f;
						}
						else if (this.type == 554)
						{
							vector8 *= 8f;
							this.velocity = (this.velocity * 6f + vector8) / 7f;
						}
						else
						{
							vector8 *= 6f;
							this.velocity = (this.velocity * 7f + vector8) / 8f;
						}
					}
				}
				if (this.velocity.Length() > num2)
				{
					this.velocity.Normalize();
					this.velocity *= num2;
				}
				if (this.velocity.Length() < num3)
				{
					this.velocity.Normalize();
					this.velocity *= num3;
					return;
				}
			}
			else
			{
				this.tileCollide = false;
				Vector2 vector9 = Main.player[this.owner].Center - base.Center;
				if (vector9.Length() < 40f || vector9.HasNaNs())
				{
					this.Kill();
					return;
				}
				float num10 = num2 * 1.5f;
				if (this.type == 546)
				{
					num10 *= 1.5f;
				}
				if (this.type == 554)
				{
					num10 *= 1.25f;
				}
				if (this.type == 555)
				{
					num10 *= 1.35f;
				}
				if (this.type == 562)
				{
					num10 *= 1.25f;
				}
				float num11 = 12f;
				vector9.Normalize();
				vector9 *= num10;
				this.velocity = (this.velocity * (num11 - 1f) + vector9) / num11;
			}
		}

		// Token: 0x060001D8 RID: 472 RVA: 0x00099374 File Offset: 0x00097574
		private void AI_099_2()
		{
			bool flag = false;
			for (int i = 0; i < this.whoAmI; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == this.owner && Main.projectile[i].type == this.type)
				{
					flag = true;
				}
			}
			if (this.owner == Main.myPlayer)
			{
				this.localAI[0] += 1f;
				if (flag)
				{
					this.localAI[0] += (float)Main.rand.Next(10, 31) * 0.1f;
				}
				float num = this.localAI[0] / 60f;
				num /= (1f + Main.player[this.owner].meleeSpeed) / 2f;
				float num2 = ProjectileID.Sets.YoyosLifeTimeMultiplier[this.type];
				if (num2 != -1f && num > num2)
				{
					this.ai[0] = -1f;
				}
			}
			if (this.type == 603 && this.owner == Main.myPlayer)
			{
				this.localAI[1] += 1f;
				if (this.localAI[1] >= 6f)
				{
					float num3 = 400f;
					Vector2 vector = this.velocity;
					Vector2 vector2 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					vector2.Normalize();
					vector2 *= (float)Main.rand.Next(10, 41) * 0.1f;
					if (Main.rand.Next(3) == 0)
					{
						vector2 *= 2f;
					}
					vector *= 0.25f;
					vector += vector2;
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j].CanBeChasedBy(this, false))
						{
							float num4 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
							float num5 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
							float num6 = Math.Abs(this.position.X + (float)(this.width / 2) - num4) + Math.Abs(this.position.Y + (float)(this.height / 2) - num5);
							if (num6 < num3 && Collision.CanHit(this.position, this.width, this.height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height))
							{
								num3 = num6;
								vector.X = num4;
								vector.Y = num5;
								vector -= base.Center;
								vector.Normalize();
								vector *= 8f;
							}
						}
					}
					vector *= 0.8f;
					Projectile.NewProjectile(base.Center.X - vector.X, base.Center.Y - vector.Y, vector.X, vector.Y, 604, this.damage, this.knockBack, this.owner, 0f, 0f);
					this.localAI[1] = 0f;
				}
			}
			bool flag2 = false;
			if (this.type >= 556 && this.type <= 561)
			{
				flag2 = true;
			}
			if (Main.player[this.owner].dead)
			{
				this.Kill();
				return;
			}
			if (!flag2 && !flag)
			{
				Main.player[this.owner].heldProj = this.whoAmI;
				Main.player[this.owner].itemAnimation = 2;
				Main.player[this.owner].itemTime = 2;
				if (this.position.X + (float)(this.width / 2) > Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2))
				{
					Main.player[this.owner].ChangeDir(1);
					this.direction = 1;
				}
				else
				{
					Main.player[this.owner].ChangeDir(-1);
					this.direction = -1;
				}
			}
			if (this.velocity.HasNaNs())
			{
				this.Kill();
			}
			this.timeLeft = 6;
			float num7 = ProjectileID.Sets.YoyosMaximumRange[this.type];
			float num8 = ProjectileID.Sets.YoyosTopSpeed[this.type];
			if (this.type == 545)
			{
				if (Main.rand.Next(6) == 0)
				{
					int num9 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num9].noGravity = true;
				}
			}
			else if (this.type == 553 && Main.rand.Next(2) == 0)
			{
				int num10 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num10].noGravity = true;
				Main.dust[num10].scale = 1.6f;
			}
			if (Main.player[this.owner].yoyoString)
			{
				num7 = num7 * 1.25f + 30f;
			}
			num7 /= (1f + Main.player[this.owner].meleeSpeed * 3f) / 4f;
			num8 /= (1f + Main.player[this.owner].meleeSpeed * 3f) / 4f;
			float num11 = 14f - num8 / 2f;
			float num12 = 5f + num8 / 2f;
			if (flag)
			{
				num12 += 20f;
			}
			if (this.ai[0] >= 0f)
			{
				if (this.velocity.Length() > num8)
				{
					this.velocity *= 0.98f;
				}
				bool flag3 = false;
				bool flag4 = false;
				Vector2 vector3 = Main.player[this.owner].Center - base.Center;
				if (vector3.Length() > num7)
				{
					flag3 = true;
					if ((double)vector3.Length() > (double)num7 * 1.3)
					{
						flag4 = true;
					}
				}
				if (this.owner == Main.myPlayer)
				{
					if (!Main.player[this.owner].channel || Main.player[this.owner].stoned || Main.player[this.owner].frozen)
					{
						this.ai[0] = -1f;
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
					else
					{
						Vector2 expr_732 = Main.ReverseGravitySupport(Main.MouseScreen, 0f) + Main.screenPosition;
						float x = expr_732.X;
						float y = expr_732.Y;
						Vector2 vector4 = new Vector2(x, y) - Main.player[this.owner].Center;
						if (vector4.Length() > num7)
						{
							vector4.Normalize();
							vector4 *= num7;
							vector4 = Main.player[this.owner].Center + vector4;
							x = vector4.X;
							y = vector4.Y;
						}
						if (this.ai[0] != x || this.ai[1] != y)
						{
							Vector2 vector5 = new Vector2(x, y) - Main.player[this.owner].Center;
							if (vector5.Length() > num7 - 1f)
							{
								vector5.Normalize();
								vector5 *= num7 - 1f;
								Vector2 expr_828 = Main.player[this.owner].Center + vector5;
								x = expr_828.X;
								y = expr_828.Y;
							}
							this.ai[0] = x;
							this.ai[1] = y;
							this.netUpdate = true;
						}
					}
				}
				if (flag4 && this.owner == Main.myPlayer)
				{
					this.ai[0] = -1f;
					this.netUpdate = true;
				}
				if (this.ai[0] >= 0f)
				{
					if (flag3)
					{
						num11 /= 2f;
						num8 *= 2f;
						if (base.Center.X > Main.player[this.owner].Center.X && this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X * 0.5f;
						}
						if (base.Center.Y > Main.player[this.owner].Center.Y && this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.5f;
						}
						if (base.Center.X < Main.player[this.owner].Center.X && this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X * 0.5f;
						}
						if (base.Center.Y < Main.player[this.owner].Center.Y && this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.5f;
						}
					}
					Vector2 vector6 = new Vector2(this.ai[0], this.ai[1]) - base.Center;
					this.velocity.Length();
					float num13 = vector6.Length();
					if (num13 > num12)
					{
						vector6.Normalize();
						float scaleFactor = (num13 > num8 * 2f) ? num8 : (num13 / 2f);
						vector6 *= scaleFactor;
						this.velocity = (this.velocity * (num11 - 1f) + vector6) / num11;
					}
					else if (flag)
					{
						if ((double)this.velocity.Length() < (double)num8 * 0.6)
						{
							vector6 = this.velocity;
							vector6.Normalize();
							vector6 *= num8 * 0.6f;
							this.velocity = (this.velocity * (num11 - 1f) + vector6) / num11;
						}
					}
					else
					{
						this.velocity *= 0.8f;
					}
					if (flag && !flag3 && (double)this.velocity.Length() < (double)num8 * 0.6)
					{
						this.velocity.Normalize();
						this.velocity *= num8 * 0.6f;
					}
				}
			}
			else
			{
				num11 = (float)((int)((double)num11 * 0.8));
				num8 *= 1.5f;
				this.tileCollide = false;
				Vector2 vector7 = Main.player[this.owner].position - base.Center;
				float num14 = vector7.Length();
				if (num14 < num8 + 10f || num14 == 0f)
				{
					this.Kill();
				}
				else
				{
					vector7.Normalize();
					vector7 *= num8;
					this.velocity = (this.velocity * (num11 - 1f) + vector7) / num11;
				}
			}
			this.rotation += 0.45f;
		}

		// Token: 0x060001D9 RID: 473 RVA: 0x00099F48 File Offset: 0x00098148
		private void AI_130_FlameBurstTower()
		{
			float num = 900f;
			float angleRatioMax = 1f;
			Vector2 vector = base.Center;
			int num2 = 664;
			int num3 = 12;
			float num4 = 12f;
			int num5 = 1;
			int num6 = 6;
			int num7 = 4;
			int num8 = 80;
			switch (this.type)
			{
				case 663:
					{
						Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f));
						Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f));
						vector = base.Bottom + new Vector2((float)(this.direction * 6), -40f);
						float[] expr_DC_cp_0 = this.localAI;
						int expr_DC_cp_1 = 0;
						float num9 = expr_DC_cp_0[expr_DC_cp_1] + 1f;
						expr_DC_cp_0[expr_DC_cp_1] = num9;
						if (num9 >= 300f)
						{
							this.localAI[0] = 0f;
						}
						Rectangle rectangle = new Rectangle((int)this.position.X + this.width / 4, (int)this.position.Y + this.height - 16, this.width / 4 * 3, 6);
						if (this.direction == 1)
						{
							rectangle.X -= this.width / 4;
						}
						for (int i = 0; i < 1; i++)
						{
							if (Main.rand.Next(2) == 0)
							{
								Dust dust = Dust.NewDustDirect(rectangle.TopLeft() + new Vector2(-2f, -2f), rectangle.Width + 4, rectangle.Height + 4, 270, (float)(-(float)this.direction * 2), -2f, 200, new Color(255, 255, 255, 0), 1f);
								dust.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
								dust.scale = 0.4f;
								dust.noGravity = true;
								dust.noLight = true;
								dust.velocity = Vector2.Zero;
								dust.velocity.X = (float)(-(float)this.direction) * Main.rand.NextFloat() * dust.fadeIn;
							}
						}
						rectangle = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, this.width / 4, 10);
						if (this.direction == -1)
						{
							rectangle.X -= rectangle.Width;
						}
						rectangle.X += this.direction * 4;
						rectangle.Y -= this.height - 10;
						for (int j = 0; j < 1; j++)
						{
							if (Main.rand.Next(5) == 0)
							{
								Dust expr_306 = Dust.NewDustDirect(rectangle.TopLeft(), rectangle.Width, rectangle.Height, 6, 0f, 0f, 0, default(Color), 1f);
								expr_306.fadeIn = 1f;
								expr_306.scale = 1f;
								expr_306.noGravity = true;
								expr_306.noLight = true;
								expr_306.velocity *= 2f;
							}
						}
						break;
					}
				case 665:
					{
						Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
						Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
						num8 = 70;
						num4 += 3f;
						num6 = 8;
						num2 = 666;
						vector = base.Bottom + new Vector2((float)(this.direction * 6), -44f);
						float[] expr_3FA_cp_0 = this.localAI;
						int expr_3FA_cp_1 = 0;
						float num9 = expr_3FA_cp_0[expr_3FA_cp_1] + 1f;
						expr_3FA_cp_0[expr_3FA_cp_1] = num9;
						if (num9 >= 300f)
						{
							this.localAI[0] = 0f;
						}
						Rectangle rectangle2 = new Rectangle((int)this.position.X + this.width / 4, (int)this.position.Y + this.height - 16, this.width / 4 * 2, 6);
						if (this.direction == 1)
						{
							rectangle2.X -= this.width / 4;
						}
						for (int k = 0; k < 1; k++)
						{
							if (Main.rand.Next(2) == 0)
							{
								Dust dust2 = Dust.NewDustDirect(rectangle2.TopLeft() + new Vector2(-2f, -2f), rectangle2.Width + 4, rectangle2.Height + 4, 270, (float)(-(float)this.direction * 2), -2f, 200, new Color(255, 255, 255, 0), 1f);
								dust2.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
								dust2.scale = 0.4f;
								dust2.noGravity = true;
								dust2.noLight = true;
								dust2.velocity = Vector2.Zero;
								dust2.velocity.X = (float)(-(float)this.direction) * Main.rand.NextFloat() * dust2.fadeIn;
							}
						}
						rectangle2 = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, this.width / 4, 10);
						if (this.direction == -1)
						{
							rectangle2.X -= rectangle2.Width;
						}
						rectangle2.X += this.direction * 4;
						rectangle2.Y -= this.height - 10;
						for (int l = 0; l < 2; l++)
						{
							if (Main.rand.Next(5) == 0)
							{
								Dust expr_624 = Dust.NewDustDirect(rectangle2.TopLeft(), rectangle2.Width, rectangle2.Height, 6, 0f, 0f, 0, default(Color), 1f);
								expr_624.fadeIn = 1f;
								expr_624.scale = 1f;
								expr_624.noGravity = true;
								expr_624.noLight = true;
								expr_624.velocity *= 2f;
							}
						}
						break;
					}
				case 667:
					{
						Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
						Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
						num8 = 60;
						num4 += 6f;
						num6 = 8;
						num2 = 668;
						vector = base.Bottom + new Vector2((float)(this.direction * 6), -46f);
						float[] expr_718_cp_0 = this.localAI;
						int expr_718_cp_1 = 0;
						float num9 = expr_718_cp_0[expr_718_cp_1] + 1f;
						expr_718_cp_0[expr_718_cp_1] = num9;
						if (num9 >= 300f)
						{
							this.localAI[0] = 0f;
						}
						Rectangle rectangle3 = new Rectangle((int)this.position.X + this.width / 4, (int)this.position.Y + this.height - 16, this.width / 4 * 2, 6);
						if (this.direction == 1)
						{
							rectangle3.X -= this.width / 4;
						}
						for (int m = 0; m < 1; m++)
						{
							if (Main.rand.Next(2) == 0)
							{
								Dust dust3 = Dust.NewDustDirect(rectangle3.TopLeft() + new Vector2(-2f, -2f), rectangle3.Width + 4, rectangle3.Height + 4, 270, (float)(-(float)this.direction * 2), -2f, 200, new Color(255, 255, 255, 0), 1f);
								dust3.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
								dust3.scale = 0.4f;
								dust3.noGravity = true;
								dust3.noLight = true;
								dust3.velocity = Vector2.Zero;
								dust3.velocity.X = (float)(-(float)this.direction) * Main.rand.NextFloat() * dust3.fadeIn;
							}
						}
						rectangle3 = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, this.width / 4, 10);
						if (this.direction == -1)
						{
							rectangle3.X -= rectangle3.Width;
						}
						rectangle3.X += this.direction * 4;
						rectangle3.Y -= this.height - 10;
						for (int n = 0; n < 3; n++)
						{
							if (Main.rand.Next(5) == 0)
							{
								Dust expr_942 = Dust.NewDustDirect(rectangle3.TopLeft(), rectangle3.Width, rectangle3.Height, 6, 0f, 0f, 0, default(Color), 1f);
								expr_942.fadeIn = 1.1f;
								expr_942.scale = 1f;
								expr_942.noGravity = true;
								expr_942.noLight = true;
								expr_942.velocity *= 2.4f;
							}
						}
						break;
					}
			}
			if (Main.player[this.owner].setApprenticeT2)
			{
				angleRatioMax = 0.1f;
				num *= 1.5f;
				num4 *= 1.4f;
			}
			if (this.ai[0] == 0f)
			{
				this.direction = (this.spriteDirection = Main.player[this.owner].direction);
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				this.netUpdate = true;
			}
			if (this.ai[0] == 1f)
			{
				this.frame = 0;
				bool flag = false;
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else
				{
					flag = true;
				}
				if (flag && this.owner == Main.myPlayer)
				{
					int num10 = this.AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector, true);
					if (num10 != -1)
					{
						this.direction = Math.Sign(base.DirectionTo(Main.npc[num10].Center).X);
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
				}
			}
			else if (this.ai[0] == 2f)
			{
				this.frame = num5 + (int)(this.ai[1] / (float)num7);
				if (this.ai[1] == (float)num3)
				{
					Vector2 value = new Vector2((float)this.direction, 0f);
					int num11 = this.AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector, false);
					if (num11 != -1)
					{
						value = (Main.npc[num11].Center - vector).SafeNormalize(Vector2.UnitX * (float)this.direction);
					}
					Vector2 velocity = value * num4;
					if (this.owner == Main.myPlayer)
					{
						Projectile.NewProjectile(vector, velocity, num2, this.damage, this.knockBack, this.owner, 0f, 0f);
					}
				}
				float[] expr_B90_cp_0 = this.ai;
				int expr_B90_cp_1 = 1;
				float num9 = expr_B90_cp_0[expr_B90_cp_1] + 1f;
				expr_B90_cp_0[expr_B90_cp_1] = num9;
				if (num9 >= (float)(num6 * num7))
				{
					this.ai[0] = 1f;
					this.ai[1] = (float)num8;
				}
			}
			this.spriteDirection = this.direction;
			this.tileCollide = true;
			this.velocity.Y = this.velocity.Y + 0.2f;
		}

		// Token: 0x060001DA RID: 474 RVA: 0x0009AB3C File Offset: 0x00098D3C
		private int AI_130_FlameBurstTower_FindTarget(float shot_range, float angleRatioMax, Vector2 shootingSpot, bool canChangeDirection = true)
		{
			int num = -1;
			NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
			{
				for (int i = 0; i < 1; i++)
				{
					if (ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
					{
						float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
						if (num2 <= shot_range)
						{
							Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
							if (Math.Abs(vector.X) >= Math.Abs(vector.Y) * angleRatioMax && (canChangeDirection || (float)this.direction * vector.X >= 0f) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
							{
								num = ownerMinionAttackTargetNPC.whoAmI;
							}
						}
					}
				}
				if (num != -1)
				{
					return num;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (nPC.CanBeChasedBy(this, false))
				{
					float num3 = Vector2.Distance(shootingSpot, nPC.Center);
					if (num3 <= shot_range)
					{
						Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
						if (Math.Abs(vector2.X) >= Math.Abs(vector2.Y) * angleRatioMax && (canChangeDirection || (float)this.direction * vector2.X >= 0f) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
						{
							num = j;
						}
					}
				}
			}
			return num;
		}

		// Token: 0x060001DC RID: 476 RVA: 0x0009AE74 File Offset: 0x00099074
		private void AI_131_FlameBurstShot()
		{
			if (this.type == 664 || this.type == 666 || this.type == 668)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					Main.PlayTrackedSound(SoundID.DD2_FlameburstTowerShot, base.Center);
				}
				if (this.alpha > 0)
				{
					this.alpha -= 25;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
				int num = 1;
				if (this.type == 666)
				{
					num = 2;
				}
				if (this.type == 668)
				{
					num = 3;
				}
				for (int i = 0; i < num; i++)
				{
					if (Main.rand.Next(2) != 0)
					{
						Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
						dust.noGravity = true;
						dust.velocity *= 0.3f;
						if (Main.rand.Next(1) == 0)
						{
							Dust expr_136_cp_0_cp_0 = dust;
							expr_136_cp_0_cp_0.velocity.Y = expr_136_cp_0_cp_0.velocity.Y + (float)Math.Sign(dust.velocity.Y) * 1.2f;
							dust.fadeIn += 0.5f;
						}
					}
				}
				this.rotation = this.velocity.ToRotation() + 1.57079637f;
			}
		}

		// Token: 0x060001DD RID: 477 RVA: 0x0009B008 File Offset: 0x00099208
		private void AI_134_Ballista()
		{
			float shot_range = 900f;
			float deadBottomAngle = 0.75f;
			Vector2 center = base.Center;
			int num = 680;
			float scaleFactor = 16f;
			int num2 = 1;
			int num3 = 5;
			int num4 = 5;
			int num5 = 180;
			if (Main.player[this.owner].setSquireT2)
			{
				scaleFactor = 21f;
			}
			if (Main.player[this.owner].setSquireT3)
			{
				num5 = 100;
			}
			if (Main.player[this.owner].ballistaPanic)
			{
				num5 = 60;
			}
			if (Main.player[this.owner].ballistaPanic && Main.player[this.owner].setSquireT3)
			{
				num5 = 30;
			}
			int num6 = num4;
			int num7 = this.type;
			if (num7 == 677)
			{
				center.Y -= 4f;
			}
			if (this.ai[0] == 0f)
			{
				this.direction = (this.spriteDirection = Main.player[this.owner].direction);
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				this.netUpdate = true;
				if (this.direction == -1)
				{
					this.rotation = 3.14159274f;
				}
			}
			if (this.ai[0] == 1f)
			{
				this.frame = 0;
				bool flag = false;
				if (Main.player[this.owner].ballistaPanic && this.ai[1] > 60f)
				{
					this.ai[1] = 60f;
				}
				if (Main.player[this.owner].ballistaPanic && Main.player[this.owner].setSquireT3 && this.ai[1] > 30f)
				{
					this.ai[1] = 30f;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else
				{
					flag = true;
				}
				int num8 = this.AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
				if (num8 != -1)
				{
					Vector2 vector = (Main.npc[num8].Center - center).SafeNormalize(Vector2.UnitY);
					this.rotation = this.rotation.AngleLerp(vector.ToRotation(), 0.08f);
					if (this.rotation > 1.57079637f || this.rotation < -1.57079637f)
					{
						this.direction = -1;
					}
					else
					{
						this.direction = 1;
					}
					if (flag && this.owner == Main.myPlayer)
					{
						this.direction = Math.Sign(vector.X);
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
				}
				else
				{
					float targetAngle = 0f;
					if (this.direction == -1)
					{
						targetAngle = 3.14159274f;
					}
					this.rotation = this.rotation.AngleLerp(targetAngle, 0.05f);
				}
			}
			else if (this.ai[0] == 2f)
			{
				this.frame = num2 + (int)(this.ai[1] / (float)num4);
				if (this.ai[1] == (float)num6)
				{
					Main.PlayTrackedSound(SoundID.DD2_BallistaTowerShot, base.Center);
					Vector2 vector2 = new Vector2((float)this.direction, 0f);
					int num9 = this.AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
					if (num9 != -1)
					{
						vector2 = (Main.npc[num9].Center - center).SafeNormalize(Vector2.UnitX * (float)this.direction);
					}
					this.rotation = vector2.ToRotation();
					if (this.rotation > 1.57079637f || this.rotation < -1.57079637f)
					{
						this.direction = -1;
					}
					else
					{
						this.direction = 1;
					}
					Vector2 velocity = vector2 * scaleFactor;
					if (this.owner == Main.myPlayer)
					{
						Projectile.NewProjectile(center, velocity, num, this.damage, this.knockBack, this.owner, 0f, 0f);
					}
				}
				float[] expr_3FE_cp_0 = this.ai;
				int expr_3FE_cp_1 = 1;
				float num10 = expr_3FE_cp_0[expr_3FE_cp_1] + 1f;
				expr_3FE_cp_0[expr_3FE_cp_1] = num10;
				if (num10 >= (float)(num3 * num4))
				{
					this.ai[0] = 1f;
					this.ai[1] = (float)num5;
				}
			}
			this.spriteDirection = this.direction;
			this.tileCollide = true;
			this.velocity.Y = this.velocity.Y + 0.2f;
		}

		// Token: 0x060001DB RID: 475 RVA: 0x0009ACE4 File Offset: 0x00098EE4
		private int AI_134_Ballista_FindTarget(float shot_range, float deadBottomAngle, Vector2 shootingSpot)
		{
			int num = -1;
			NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
			{
				for (int i = 0; i < 1; i++)
				{
					if (ownerMinionAttackTargetNPC.CanBeChasedBy(this, true))
					{
						float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
						if (num2 <= shot_range)
						{
							Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
							if ((Math.Abs(vector.X) >= Math.Abs(vector.Y) * deadBottomAngle || vector.Y <= 0f) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
							{
								num = ownerMinionAttackTargetNPC.whoAmI;
							}
						}
					}
				}
				if (num != -1)
				{
					return num;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (nPC.CanBeChasedBy(this, true))
				{
					float num3 = Vector2.Distance(shootingSpot, nPC.Center);
					if (num3 <= shot_range)
					{
						Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
						if ((Math.Abs(vector2.X) >= Math.Abs(vector2.Y) * deadBottomAngle || vector2.Y <= 0f) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
						{
							num = j;
						}
					}
				}
			}
			return num;
		}

		// Token: 0x060001DE RID: 478 RVA: 0x0009B46C File Offset: 0x0009966C
		private void AI_135_OgreStomp()
		{
			this.ai[0] += 1f;
			if (this.ai[0] > 9f)
			{
				this.Kill();
				return;
			}
			this.velocity = Vector2.Zero;
			this.position = base.Center;
			base.Size = new Vector2(16f, 16f) * MathHelper.Lerp(5f, 40f, Utils.InverseLerp(0f, 9f, this.ai[0], false));
			base.Center = this.position;
			Point point = base.TopLeft.ToTileCoordinates();
			Point point2 = base.BottomRight.ToTileCoordinates();
			int num = point.X / 2 + point2.X / 2;
			int num2 = this.width / 2;
			if ((int)this.ai[0] % 3 == 0)
			{
				int num3 = (int)this.ai[0] / 3;
				for (int i = point.X; i <= point2.X; i++)
				{
					for (int j = point.Y; j <= point2.Y; j++)
					{
						if (Vector2.Distance(base.Center, new Vector2((float)(i * 16), (float)(j * 16))) <= (float)num2)
						{
							Tile tileSafely = Framing.GetTileSafely(i, j);
							if (tileSafely.active() && Main.tileSolid[(int)tileSafely.type] && !Main.tileSolidTop[(int)tileSafely.type] && !Main.tileFrameImportant[(int)tileSafely.type])
							{
								Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
								if (!tileSafely2.active() || !Main.tileSolid[(int)tileSafely2.type] || Main.tileSolidTop[(int)tileSafely2.type])
								{
									int num4 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely);
									for (int k = 0; k < num4; k++)
									{
										Dust expr_1C0 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
										expr_1C0.velocity.Y = expr_1C0.velocity.Y - (3f + (float)num3 * 1.5f);
										expr_1C0.velocity.Y = expr_1C0.velocity.Y * Main.rand.NextFloat();
										expr_1C0.scale += (float)num3 * 0.03f;
									}
									if (num3 >= 2)
									{
										for (int l = 0; l < num4 - 1; l++)
										{
											Dust expr_233 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
											expr_233.velocity.Y = expr_233.velocity.Y - (1f + (float)num3);
											expr_233.velocity.Y = expr_233.velocity.Y * Main.rand.NextFloat();
										}
									}
									if (num4 > 0 && Main.rand.Next(3) != 0)
									{
										float num5 = (float)Math.Abs(num - i) / 20f;
										Gore expr_2D1 = Gore.NewGoreDirect(this.position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num3 * 0.15f + num5 * 0.5f);
										expr_2D1.velocity.Y = expr_2D1.velocity.Y - (0.1f + (float)num3 * 0.5f + num5 * (float)num3 * 1f);
										expr_2D1.velocity.Y = expr_2D1.velocity.Y * Main.rand.NextFloat();
										expr_2D1.position = new Vector2((float)(i * 16 + 20), (float)(j * 16 + 20));
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x060001DF RID: 479 RVA: 0x0009B7D0 File Offset: 0x000999D0
		private void AI_136_BetsyBreath()
		{
			if (this.ai[1] < 0f || this.ai[1] > 200f)
			{
				this.Kill();
				return;
			}
			NPC nPC = Main.npc[(int)this.ai[1]];
			float num = -8f;
			Vector2 center = nPC.Center + new Vector2((110f + num) * (float)nPC.spriteDirection, 30f).RotatedBy((double)nPC.rotation, default(Vector2));
			base.Center = center;
			this.rotation = nPC.DirectionTo(base.Center).ToRotation();
			DelegateMethods.v3_1 = new Vector3(1.2f, 1f, 0.3f);
			float num2 = this.ai[0] / 40f;
			if (num2 > 1f)
			{
				num2 = 1f;
			}
			float num3 = (this.ai[0] - 38f) / 40f;
			if (num3 < 0f)
			{
				num3 = 0f;
			}
			Utils.PlotTileLine(base.Center + this.rotation.ToRotationVector2() * 400f * num3, base.Center + this.rotation.ToRotationVector2() * 400f * num2, 16f, new Utils.PerLinePoint(DelegateMethods.CastLight));
			Utils.PlotTileLine(base.Center + this.rotation.ToRotationVector2().RotatedBy(0.19634954631328583, default(Vector2)) * 400f * num3, base.Center + this.rotation.ToRotationVector2().RotatedBy(0.19634954631328583, default(Vector2)) * 400f * num2, 16f, new Utils.PerLinePoint(DelegateMethods.CastLight));
			Utils.PlotTileLine(base.Center + this.rotation.ToRotationVector2().RotatedBy(-0.19634954631328583, default(Vector2)) * 400f * num3, base.Center + this.rotation.ToRotationVector2().RotatedBy(-0.19634954631328583, default(Vector2)) * 400f * num2, 16f, new Utils.PerLinePoint(DelegateMethods.CastLight));
			if (num3 == 0f && num2 > 0.1f)
			{
				for (int i = 0; i < 3; i++)
				{
					Dust expr_2CD = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
					expr_2CD.fadeIn = 1.5f;
					expr_2CD.velocity = this.rotation.ToRotationVector2().RotatedBy((double)(Main.rand.NextFloatDirection() * 0.2617994f), default(Vector2)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
					expr_2CD.velocity += nPC.velocity * 2f;
					expr_2CD.noLight = true;
					expr_2CD.noGravity = true;
					expr_2CD.alpha = 200;
				}
			}
			if (Main.rand.Next(5) == 0 && this.ai[0] >= 15f)
			{
				Gore expr_3ED = Gore.NewGoreDirect(base.Center + this.rotation.ToRotationVector2() * 300f - Utils.RandomVector2(Main.rand, -20f, 20f), Vector2.Zero, 61 + Main.rand.Next(3), 0.5f);
				expr_3ED.velocity *= 0.3f;
				expr_3ED.velocity += this.rotation.ToRotationVector2() * 4f;
			}
			for (int j = 0; j < 1; j++)
			{
				Dust expr_463 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 0, default(Color), 1f);
				expr_463.fadeIn = 1.5f;
				expr_463.scale = 0.4f;
				expr_463.velocity = this.rotation.ToRotationVector2().RotatedBy((double)(Main.rand.NextFloatDirection() * 0.2617994f), default(Vector2)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
				expr_463.velocity += nPC.velocity * 2f;
				expr_463.velocity *= 0.3f;
				expr_463.noLight = true;
				expr_463.noGravity = true;
				float num4 = Main.rand.NextFloat();
				expr_463.position = Vector2.Lerp(base.Center + this.rotation.ToRotationVector2() * 400f * num3, base.Center + this.rotation.ToRotationVector2() * 400f * num2, num4);
				expr_463.position += this.rotation.ToRotationVector2().RotatedBy(1.5707963705062866, default(Vector2)) * (20f + 100f * (num4 - 0.5f));
			}
			this.frameCounter++;
			this.ai[0] += 1f;
			if (this.ai[0] >= 78f)
			{
				this.Kill();
			}
		}

		// Token: 0x060001E9 RID: 489 RVA: 0x0009ED64 File Offset: 0x0009CF64
		public bool AI_137_CanHit(Vector2 targetPosition)
		{
			if (WorldGen.SolidTile((int)targetPosition.X / 16, (int)targetPosition.Y / 16))
			{
				return false;
			}
			Vector2 vector = base.Top + Vector2.UnitY * 20f;
			bool flag = Collision.CanHitLine(vector, 0, 0, targetPosition, 0, 0);
			if (!flag)
			{
				Vector2 v = targetPosition - vector;
				Vector2 spinningpoint = v.SafeNormalize(Vector2.UnitY);
				Vector2 value = Vector2.Lerp(vector, targetPosition, 0.5f);
				Vector2 vector2 = value + spinningpoint.RotatedBy(1.5707963705062866, default(Vector2)) * v.Length() * 0.2f;
				if (Collision.CanHitLine(vector, 0, 0, vector2, 0, 0) && Collision.CanHitLine(vector2, 0, 0, targetPosition, 0, 0))
				{
					flag = true;
				}
				if (!flag)
				{
					Vector2 vector3 = value + spinningpoint.RotatedBy(-1.5707963705062866, default(Vector2)) * v.Length() * 0.2f;
					if (Collision.CanHitLine(vector, 0, 0, vector3, 0, 0) && Collision.CanHitLine(vector3, 0, 0, targetPosition, 0, 0))
					{
						flag = true;
					}
				}
			}
			return flag;
		}

		// Token: 0x060001E0 RID: 480 RVA: 0x0009BDEC File Offset: 0x00099FEC
		private void AI_137_LightningAura()
		{
			int num = 10;
			int num2 = 999;
			int num3 = 30;
			int num4 = 40;
			int num5 = 4;
			this.knockBack = 0f;
			if (Main.player[this.owner].setMonkT2)
			{
				num3 -= 5;
			}
			if (Main.player[this.owner].setMonkT3)
			{
				num = 14;
				num5 = 8;
			}
			this.ai[0] += 1f;
			if (this.ai[0] >= (float)num3)
			{
				this.ai[0] = 0f;
			}
			if (this.ai[0] == 0f)
			{
				bool flag = false;
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this, false) && nPC.Hitbox.Distance(base.Center) < (float)(this.width / 2) && this.Colliding(base.Hitbox, nPC.Hitbox))
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					Main.PlayTrackedSound(SoundID.DD2_LightningAuraZap, base.Center);
				}
			}
			if (this.localAI[0] == 0f)
			{
				this.localAI[0] = 1f;
				this.velocity = Vector2.Zero;
				Point point = base.Center.ToTileCoordinates();
				Point point2;
				if (!WorldUtils.Find(point, Searches.Chain(new Searches.Down(500), new GenCondition[]
				{
					new Conditions.IsSolid()
				}), out point2))
				{
					this.position.Y = this.position.Y + 16f;
					return;
				}
				Point p;
				if (!WorldUtils.Find(new Point(point2.X, point2.Y - 1), Searches.Chain(new Searches.Up(num), new GenCondition[]
				{
					new Conditions.IsSolid()
				}), out p))
				{
					p = new Point(point.X, point.Y - num - 1);
				}
				Vector2 vector = point2.ToWorldCoordinates(8f, 0f);
				Vector2 vector2 = p.ToWorldCoordinates(8f, 0f);
				base.Size = new Vector2(1f, vector.Y - vector2.Y);
				if (this.height > num * 16)
				{
					this.height = num * 16;
				}
				if (this.height < num5 * 16)
				{
					this.height = num5 * 16;
				}
				this.height *= 2;
				this.width = (int)((float)this.height * 1f);
				if (this.width > num2)
				{
					this.width = num2;
				}
				base.Center = vector;
			}
			int num6 = this.frameCounter + 1;
			this.frameCounter = num6;
			if (num6 >= 8)
			{
				this.frameCounter = 0;
				num6 = this.frame + 1;
				this.frame = num6;
				if (num6 >= Main.projFrames[this.type])
				{
					this.frame = 0;
				}
			}
			DelegateMethods.v3_1 = new Vector3(0.2f, 0.7f, 1f);
			Utils.PlotTileLine(base.Center + Vector2.UnitX * -40f, base.Center + Vector2.UnitX * 40f, 80f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
			Vector2 value = new Vector2(base.Top.X, this.position.Y + (float)num4);
			for (int j = 0; j < 4; j++)
			{
				if (Main.rand.Next(6) == 0)
				{
					Vector2 vector3 = Main.rand.NextVector2Unit(0f, 6.28318548f);
					if (Math.Abs(vector3.X) >= 0.12f)
					{
						Vector2 vector4 = base.Center + vector3 * new Vector2((float)((this.height - num4) / 2));
						if (!WorldGen.SolidTile((int)vector4.X / 16, (int)vector4.Y / 16) && this.AI_137_CanHit(vector4))
						{
							Dust dust = Dust.NewDustDirect(vector4, 0, 0, 226, 0f, 0f, 100, default(Color), 1f);
							dust.position = vector4;
							dust.velocity = (value - dust.position).SafeNormalize(Vector2.Zero);
							dust.scale = 0.7f;
							dust.fadeIn = 1f;
							dust.noGravity = true;
							dust.noLight = true;
						}
					}
				}
			}
			for (int k = 0; k < 0; k++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 vector5 = Main.rand.NextVector2Unit(0f, 6.28318548f);
					if (Math.Abs(vector5.X) >= 0.12f)
					{
						Vector2 vector6 = base.Center + vector5 * new Vector2((float)((this.height - num4) / 2)) * Main.rand.NextFloat();
						if (!WorldGen.SolidTile((int)vector6.X / 16, (int)vector6.Y / 16) && this.AI_137_CanHit(vector6))
						{
							Dust expr_521 = Dust.NewDustDirect(vector6, 0, 0, 226, 0f, 0f, 100, default(Color), 1f);
							expr_521.velocity *= 0.6f;
							expr_521.velocity += Vector2.UnitY * -2f;
							expr_521.noGravity = true;
							expr_521.noLight = true;
						}
					}
				}
			}
			for (int l = 0; l < 4; l++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Dust expr_5D3 = Dust.NewDustDirect(value - new Vector2(8f, 0f), 16, this.height / 2 - 40, 226, 0f, 0f, 100, default(Color), 1f);
					expr_5D3.velocity *= 0.6f;
					expr_5D3.velocity += Vector2.UnitY * -2f;
					expr_5D3.scale = 0.7f;
					expr_5D3.noGravity = true;
					expr_5D3.noLight = true;
				}
			}
			this.tileCollide = true;
			this.velocity.Y = this.velocity.Y + 0.2f;
		}

		// Token: 0x060001E1 RID: 481 RVA: 0x0009C444 File Offset: 0x0009A644
		private void AI_138_ExplosiveTrap()
		{
			this.spriteDirection = (this.direction = 1);
			int num = 110;
			int num2 = 694;
			int num3 = 48;
			if (Main.player[this.owner].setHuntressT2)
			{
				num = 74;
			}
			if (Main.player[this.owner].setHuntressT3)
			{
				num = 40;
			}
			int num4 = this.type;
			if (num4 != 692)
			{
				if (num4 == 693)
				{
					num2 = 696;
				}
			}
			else
			{
				num2 = 695;
			}
			Lighting.AddLight(base.Center, 0.6f, 0.5f, 0.3f);
			num4 = this.frameCounter + 1;
			this.frameCounter = num4;
			if (num4 >= 12)
			{
				this.frameCounter = 0;
				num4 = this.frame + 1;
				this.frame = num4;
				if (num4 >= Main.projFrames[this.type])
				{
					this.frame = 0;
				}
			}
			if (this.localAI[0] > 0f)
			{
				this.localAI[0] -= 1f;
			}
			if (this.localAI[0] <= 0f && this.owner == Main.myPlayer)
			{
				this.localAI[0] = 3f;
				bool flag = false;
				Rectangle rectangle = Utils.CenteredRectangle(base.Center + new Vector2(0f, (float)(-(float)num3)), new Vector2((float)(num3 * 2)));
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this, true) && rectangle.Intersects(nPC.Hitbox))
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					Main.PlayTrackedSound(SoundID.DD2_ExplosiveTrapExplode);
					this.localAI[0] = (float)num;
					Projectile.NewProjectile(base.Center + new Vector2(0f, (float)(-(float)num3)), Vector2.Zero, num2, this.damage, this.knockBack, this.owner, 0f, 0f);
				}
			}
			this.tileCollide = true;
			this.velocity.Y = this.velocity.Y + 0.2f;
		}

		// Token: 0x060001E2 RID: 482 RVA: 0x0009C64C File Offset: 0x0009A84C
		private void AI_139_ExplosiveTrapExplosion()
		{
			int num = Main.projFrames[this.type];
			int num2 = 3;
			this.alpha -= 25;
			if (this.alpha < 0)
			{
				this.alpha = 0;
			}
			if (this.localAI[0] == 0f)
			{
				this.localAI[0] = 1f;
			}
			int num3 = this.frameCounter + 1;
			this.frameCounter = num3;
			if (num3 >= num2)
			{
				this.frameCounter = 0;
				num3 = this.frame + 1;
				this.frame = num3;
				if (num3 >= num)
				{
					this.Kill();
					return;
				}
			}
			DelegateMethods.v3_1 = new Vector3(1.3f, 0.9f, 0.2f);
			Utils.PlotTileLine(base.Top, base.Bottom, 2f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
		}

		// Token: 0x060001E3 RID: 483 RVA: 0x0009C718 File Offset: 0x0009A918
		private void AI_140_MonkStaffT1()
		{
			float num = 50f;
			float num2 = 2f;
			float scaleFactor = 20f;
			Player player = Main.player[this.owner];
			float num3 = -0.7853982f;
			Vector2 value = player.RotatedRelativePoint(player.MountedCenter, true);
			Vector2 value2 = Vector2.Zero;
			if (player.dead)
			{
				this.Kill();
				return;
			}
			if (this.type == 697)
			{
				int num4 = this.damage * 2;
				int num5 = Math.Sign(this.velocity.X);
				this.velocity = new Vector2((float)num5, 0f);
				if (this.ai[0] == 0f)
				{
					this.rotation = new Vector2((float)num5, -player.gravDir).ToRotation() + num3 + 3.14159274f;
					if (this.velocity.X < 0f)
					{
						this.rotation -= 1.57079637f;
					}
				}
				this.alpha -= 128;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				float arg_2E4_0 = this.ai[0] / num;
				float num6 = 1f;
				this.ai[0] += num6;
				this.rotation += 6.28318548f * num2 / num * (float)num5;
				bool flag = this.ai[0] == (float)((int)(num / 2f));
				if (this.ai[0] >= num || (flag && !player.controlUseItem))
				{
					this.Kill();
					player.reuseDelay = 10;
				}
				else if (flag)
				{
					Vector2 mouseWorld = Main.MouseWorld;
					int num7 = (player.DirectionTo(mouseWorld).X > 0f) ? 1 : -1;
					if ((float)num7 != this.velocity.X)
					{
						player.ChangeDir(num7);
						this.velocity = new Vector2((float)num7, 0f);
						this.netUpdate = true;
						this.rotation -= 3.14159274f;
					}
				}
				float num8 = this.rotation - 0.7853982f * (float)num5;
				value2 = (num8 + ((num5 == -1) ? 3.14159274f : 0f)).ToRotationVector2() * (this.ai[0] / num) * scaleFactor;
				Vector2 vector = base.Center + (num8 + ((num5 == -1) ? 3.14159274f : 0f)).ToRotationVector2() * 30f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust = Dust.NewDustDirect(vector - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150, default(Color), 1f);
					dust.velocity = base.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
				}
				if (arg_2E4_0 >= 0.75f)
				{
					Dust dust2 = Dust.NewDustDirect(vector - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50, default(Color), 1f);
					dust2.velocity = base.DirectionTo(dust2.position) * 0.1f + dust2.velocity * 0.1f;
					dust2.noGravity = true;
					dust2.color = new Color(20, 255, 100, 160);
				}
				if (this.ai[0] >= num - 8f && this.ai[0] < num - 2f)
				{
					for (int i = 0; i < 5; i++)
					{
						Dust expr_3F7 = Dust.NewDustDirect(vector - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50, default(Color), 1f);
						expr_3F7.velocity *= 1.2f;
						expr_3F7.noGravity = true;
						expr_3F7.scale += 0.1f;
						expr_3F7.color = new Color(20, 255, 100, 160);
					}
				}
				if (this.ai[0] == num - 3f && this.owner == Main.myPlayer)
				{
					Point point;
					if (this.localAI[1] == 1f || WorldUtils.Find(vector.ToTileCoordinates(), Searches.Chain(new Searches.Down(4), new GenCondition[]
					{
						new Conditions.IsSolid()
					}), out point))
					{
						Projectile.NewProjectile(vector + new Vector2((float)(num5 * 20), -60f), Vector2.Zero, 698, num4, 0f, this.owner, 0f, 0f);
						Main.PlayTrackedSound(SoundID.DD2_MonkStaffGroundImpact, base.Center);
					}
					else
					{
						Main.PlayTrackedSound(SoundID.DD2_MonkStaffGroundMiss, base.Center);
					}
				}
			}
			if (this.type == 707)
			{
				Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
				int num9 = Math.Sign(this.velocity.X);
				this.velocity = new Vector2((float)num9, 0f);
				if (this.ai[0] == 0f)
				{
					this.rotation = new Vector2((float)num9, -player.gravDir).ToRotation() + num3 + 3.14159274f;
					if (this.velocity.X < 0f)
					{
						this.rotation -= 1.57079637f;
					}
				}
				this.alpha -= 128;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				float arg_5DB_0 = this.ai[0] / num;
				float num10 = 1f;
				this.ai[0] += num10;
				this.rotation += 6.28318548f * num2 / num * (float)num9;
				bool flag2 = this.ai[0] == (float)((int)(num / 2f));
				if (this.ai[0] >= num || (flag2 && !player.controlUseItem))
				{
					this.Kill();
					player.reuseDelay = 2;
				}
				else if (flag2)
				{
					Vector2 mouseWorld2 = Main.MouseWorld;
					int num11 = (player.DirectionTo(mouseWorld2).X > 0f) ? 1 : -1;
					if ((float)num11 != this.velocity.X)
					{
						player.ChangeDir(num11);
						this.velocity = new Vector2((float)num11, 0f);
						this.netUpdate = true;
						this.rotation -= 3.14159274f;
					}
				}
				if ((this.ai[0] == num10 || (this.ai[0] == (float)((int)(num / 2f)) && this.active)) && this.owner == Main.myPlayer)
				{
					Vector2 mouseWorld3 = Main.MouseWorld;
					//TODO: 看看这是做什么的   //					player.DirectionTo(mouseWorld3) * 0f;
				}
				float num12 = this.rotation - 0.7853982f * (float)num9;
				value2 = (num12 + ((num9 == -1) ? 3.14159274f : 0f)).ToRotationVector2() * (this.ai[0] / num) * scaleFactor;
				Vector2 value3 = base.Center + (num12 + ((num9 == -1) ? 3.14159274f : 0f)).ToRotationVector2() * 30f;
				Vector2 vector2 = num12.ToRotationVector2();
				Vector2 value4 = vector2.RotatedBy((double)(1.57079637f * (float)this.spriteDirection), default(Vector2));
				if (Main.rand.Next(2) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(value3 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150, default(Color), 1f);
					dust3.velocity = base.DirectionTo(dust3.position) * 0.1f + dust3.velocity * 0.1f;
				}
				for (int j = 0; j < 4; j++)
				{
					float scaleFactor2 = 1f;
					float scaleFactor3 = 1f;
					switch (j)
					{
						case 1:
							scaleFactor3 = -1f;
							break;
						case 2:
							scaleFactor3 = 1.25f;
							scaleFactor2 = 0.5f;
							break;
						case 3:
							scaleFactor3 = -1.25f;
							scaleFactor2 = 0.5f;
							break;
					}
					if (Main.rand.Next(6) != 0)
					{
						Dust dust4 = Dust.NewDustDirect(this.position, 0, 0, 226, 0f, 0f, 100, default(Color), 1f);
						dust4.position = base.Center + vector2 * (60f + Main.rand.NextFloat() * 20f) * scaleFactor3;
						dust4.velocity = value4 * (4f + 4f * Main.rand.NextFloat()) * scaleFactor3 * scaleFactor2;
						dust4.noGravity = true;
						dust4.noLight = true;
						dust4.scale = 0.5f;
						dust4.customData = this;
						if (Main.rand.Next(4) == 0)
						{
							dust4.noGravity = false;
						}
					}
				}
			}
			this.position = value - base.Size / 2f;
			this.position += value2;
			this.spriteDirection = this.direction;
			this.timeLeft = 2;
			player.ChangeDir(this.direction);
			player.heldProj = this.whoAmI;
			player.itemTime = 2;
			player.itemAnimation = 2;
			player.itemRotation = MathHelper.WrapAngle(this.rotation);
		}

		// Token: 0x060001E4 RID: 484 RVA: 0x0009D108 File Offset: 0x0009B308
		private void AI_141_MonkStaffT1Explosion()
		{
			Point point = base.TopLeft.ToTileCoordinates();
			Point point2 = base.BottomRight.ToTileCoordinates();
			int arg_20_0 = point.X / 2;
			int arg_29_0 = point2.X / 2;
			int width = this.width;
			this.ai[0] += 1f;
			if (this.ai[0] > 20f)
			{
				this.Kill();
				return;
			}
			if (this.ai[0] == 1f)
			{
				bool flag = false;
				int num = 4;
				for (int i = point.X; i <= point2.X; i++)
				{
					for (int j = point.Y; j <= point2.Y; j++)
					{
						if (Vector2.Distance(base.Bottom, new Vector2((float)(i * 16), (float)(j * 16))) <= (float)width)
						{
							Tile tileSafely = Framing.GetTileSafely(i, j);
							if (tileSafely.active() && Main.tileSolid[(int)tileSafely.type] && !Main.tileSolidTop[(int)tileSafely.type] && !Main.tileFrameImportant[(int)tileSafely.type])
							{
								Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
								if (!tileSafely2.active() || !Main.tileSolid[(int)tileSafely2.type] || Main.tileSolidTop[(int)tileSafely2.type])
								{
									int num2 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely) * 6;
									for (int k = 0; k < num2; k++)
									{
										Dust expr_156 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
										expr_156.velocity.Y = expr_156.velocity.Y - (3f + (float)num * 1.5f);
										expr_156.velocity.Y = expr_156.velocity.Y * Main.rand.NextFloat();
										expr_156.scale += (float)num * 0.03f;
									}
									if (num >= 2)
									{
										for (int l = 0; l < num2 - 1; l++)
										{
											Dust expr_1C9 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
											expr_1C9.velocity.Y = expr_1C9.velocity.Y - (1f + (float)num);
											expr_1C9.velocity.Y = expr_1C9.velocity.Y * Main.rand.NextFloat();
										}
									}
									if (num2 > 0)
									{
										flag = true;
									}
								}
							}
						}
					}
				}
				Vector2 bottom = base.Bottom;
				Vector2 spinningpoint = new Vector2(7f, 0f);
				Vector2 value = new Vector2(1f, 0.7f);
				Color color = new Color(20, 255, 100, 200);
				for (float num3 = 0f; num3 < 25f; num3 += 1f)
				{
					Vector2 value2 = spinningpoint.RotatedBy((double)(num3 * 6.28318548f / 25f), default(Vector2)) * value;
					Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0f, 0f, 0, default(Color), 1f);
					dust.alpha = 0;
					if (!flag)
					{
						dust.alpha = 50;
					}
					dust.color = color;
					dust.position = bottom + value2;
					Dust expr_316_cp_0_cp_0 = dust;
					expr_316_cp_0_cp_0.velocity.Y = expr_316_cp_0_cp_0.velocity.Y - 3f;
					Dust expr_32B_cp_0_cp_0 = dust;
					expr_32B_cp_0_cp_0.velocity.X = expr_32B_cp_0_cp_0.velocity.X * 0.5f;
					dust.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
					dust.noLight = true;
				}
				if (!flag)
				{
					for (float num4 = 0f; num4 < 25f; num4 += 1f)
					{
						Vector2 value3 = spinningpoint.RotatedBy((double)(num4 * 6.28318548f / 25f), default(Vector2)) * value;
						Dust expr_3DD = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0f, 0f, 0, default(Color), 1f);
						expr_3DD.alpha = 100;
						expr_3DD.color = color;
						expr_3DD.position = bottom + value3;
						expr_3DD.velocity.Y = expr_3DD.velocity.Y - 5f;
						expr_3DD.velocity.X = expr_3DD.velocity.X * 0.8f;
						expr_3DD.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
						expr_3DD.noLight = true;
					}
				}
			}
		}

		// Token: 0x060001E5 RID: 485 RVA: 0x0009D574 File Offset: 0x0009B774
		private void AI_142_MonkStaffT2And3()
		{
			Player player = Main.player[this.owner];
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter, true);
			this.direction = player.direction;
			player.heldProj = this.whoAmI;
			base.Center = vector;
			if (player.dead)
			{
				this.Kill();
				return;
			}
			if (!player.frozen)
			{
				if (this.type == 699)
				{
					this.spriteDirection = (this.direction = player.direction);
					this.alpha -= 127;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					if (this.localAI[0] > 0f)
					{
						this.localAI[0] -= 1f;
					}
					float num = (float)player.itemAnimation / (float)player.itemAnimationMax;
					float num2 = 1f - num;
					float num3 = this.velocity.ToRotation();
					float num4 = this.velocity.Length();
					float num5 = 22f;
					Vector2 spinningpoint = new Vector2(1f, 0f).RotatedBy((double)(3.14159274f + num2 * 6.28318548f), default(Vector2)) * new Vector2(num4, this.ai[0]);
					this.position += spinningpoint.RotatedBy((double)num3, default(Vector2)) + new Vector2(num4 + num5, 0f).RotatedBy((double)num3, default(Vector2));
					Vector2 destination = vector + spinningpoint.RotatedBy((double)num3, default(Vector2)) + new Vector2(num4 + num5 + 40f, 0f).RotatedBy((double)num3, default(Vector2));
					this.rotation = player.AngleTo(destination) + 0.7853982f * (float)player.direction;
					if (this.spriteDirection == -1)
					{
						this.rotation += 3.14159274f;
					}
					player.DirectionTo(base.Center);
					Vector2 value = player.DirectionTo(destination);
					Vector2 vector2 = this.velocity.SafeNormalize(Vector2.UnitY);
					float num6 = 2f;
					int num7 = 0;
					while ((float)num7 < num6)
					{
						Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110, default(Color), 1f);
						dust.velocity = player.DirectionTo(dust.position) * 2f;
						dust.position = base.Center + vector2.RotatedBy((double)(num2 * 6.28318548f * 2f + (float)num7 / num6 * 6.28318548f), default(Vector2)) * 10f;
						dust.scale = 1f + 0.6f * Main.rand.NextFloat();
						dust.velocity += vector2 * 3f;
						dust.noGravity = true;
						num7++;
					}
					for (int i = 0; i < 1; i++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust dust2 = Dust.NewDustDirect(base.Center, 20, 20, 228, 0f, 0f, 110, default(Color), 1f);
							dust2.velocity = player.DirectionTo(dust2.position) * 2f;
							dust2.position = base.Center + value * -110f;
							dust2.scale = 0.45f + 0.4f * Main.rand.NextFloat();
							dust2.fadeIn = 0.7f + 0.4f * Main.rand.NextFloat();
							dust2.noGravity = true;
							dust2.noLight = true;
						}
					}
				}
				else if (this.type == 708)
				{
					Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
					this.spriteDirection = (this.direction = player.direction);
					this.alpha -= 127;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					float num8 = (float)player.itemAnimation / (float)player.itemAnimationMax;
					float num9 = 1f - num8;
					float num10 = this.velocity.ToRotation();
					float num11 = this.velocity.Length();
					float num12 = 22f;
					Vector2 spinningpoint2 = new Vector2(1f, 0f).RotatedBy((double)(3.14159274f + num9 * 6.28318548f), default(Vector2)) * new Vector2(num11, this.ai[0]);
					this.position += spinningpoint2.RotatedBy((double)num10, default(Vector2)) + new Vector2(num11 + num12, 0f).RotatedBy((double)num10, default(Vector2));
					Vector2 destination2 = vector + spinningpoint2.RotatedBy((double)num10, default(Vector2)) + new Vector2(num11 + num12 + 40f, 0f).RotatedBy((double)num10, default(Vector2));
					this.rotation = player.AngleTo(destination2) + 0.7853982f * (float)player.direction;
					if (this.spriteDirection == -1)
					{
						this.rotation += 3.14159274f;
					}
					player.DirectionTo(base.Center);
					player.DirectionTo(destination2);
					Vector2 vector3 = this.velocity.SafeNormalize(Vector2.UnitY);
					if ((player.itemAnimation == 2 || player.itemAnimation == 6 || player.itemAnimation == 10) && this.owner == Main.myPlayer)
					{
						Vector2 vector4 = vector3 + Main.rand.NextVector2Square(-0.2f, 0.2f);
						vector4 *= 12f;
						int itemAnimation = player.itemAnimation;
						if (itemAnimation != 2)
						{
							if (itemAnimation != 6)
							{
								if (itemAnimation == 10)
								{
									vector4 = vector3.RotatedBy(0.0, default(Vector2));
								}
							}
							else
							{
								vector4 = vector3.RotatedBy(-0.38397246599197388, default(Vector2));
							}
						}
						else
						{
							vector4 = vector3.RotatedBy(0.38397246599197388, default(Vector2));
						}
						vector4 *= 10f + (float)Main.rand.Next(4);
						Projectile.NewProjectile(base.Center, vector4, 709, this.damage, 0f, this.owner, 0f, 0f);
					}
					for (int j = 0; j < 3; j += 2)
					{
						float scaleFactor = 1f;
						float num13 = 1f;
						switch (j)
						{
							case 1:
								num13 = -1f;
								break;
							case 2:
								num13 = 1.25f;
								scaleFactor = 0.5f;
								break;
							case 3:
								num13 = -1.25f;
								scaleFactor = 0.5f;
								break;
						}
						if (Main.rand.Next(6) != 0)
						{
							num13 *= 1.2f;
							Dust dust3 = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 1f);
							dust3.velocity = vector3 * (4f + 4f * Main.rand.NextFloat()) * num13 * scaleFactor;
							dust3.noGravity = true;
							dust3.noLight = true;
							dust3.scale = 0.75f;
							dust3.fadeIn = 0.8f;
							dust3.customData = this;
							if (Main.rand.Next(3) == 0)
							{
								dust3.noGravity = false;
								dust3.fadeIn = 0f;
							}
						}
					}
				}
			}
			if (player.itemAnimation == 2)
			{
				this.Kill();
				player.reuseDelay = 2;
			}
		}

		// Token: 0x060001E6 RID: 486 RVA: 0x0009DDBC File Offset: 0x0009BFBC
		private void AI_143_MonkStaffT2Ghast()
		{
			if (this.ai[0] == 0f)
			{
				this.localAI[1] = Main.PlayTrackedSound(SoundID.DD2_GhastlyGlaiveImpactGhost, base.Center).ToFloat();
			}
			ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
			if (activeSound == null)
			{
				this.localAI[1] = SlotId.Invalid.ToFloat();
			}
			else
			{
				activeSound.Position = base.Center;
			}
			this.ai[0] += 1f;
			if (this.ai[0] > 50f)
			{
				this.alpha += 25;
				if (this.alpha > 255)
				{
					this.alpha = 255;
				}
			}
			else
			{
				this.alpha -= 25;
				if (this.alpha < 100)
				{
					this.alpha = 100;
				}
			}
			this.velocity *= 0.98f;
			int num = this.frameCounter + 1;
			this.frameCounter = num;
			if (num >= 5)
			{
				this.frameCounter = 0;
				num = this.frame + 1;
				this.frame = num;
				if (num >= 4)
				{
					this.frame = 0;
				}
			}
			if (this.ai[0] >= 60f)
			{
				this.Kill();
			}
			this.direction = (this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1));
			this.rotation = this.velocity.ToRotation();
			if (this.spriteDirection == -1)
			{
				this.rotation += 3.14159274f;
			}
			if (this.ai[0] >= 10f && this.ai[0] < 34f)
			{
				Vector2 vector = this.velocity.SafeNormalize(Vector2.UnitY);
				float num2 = this.ai[0] / 60f;
				float num3 = 2f;
				int num4 = 0;
				while ((float)num4 < num3)
				{
					Dust expr_20B = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110, default(Color), 1f);
					expr_20B.velocity = vector * 2f;
					expr_20B.position = base.Center + vector.RotatedBy((double)(num2 * 6.28318548f * 2f + (float)num4 / num3 * 6.28318548f), default(Vector2)) * 7f;
					expr_20B.scale = 1f + 0.6f * Main.rand.NextFloat();
					expr_20B.velocity += vector * 3f;
					expr_20B.noGravity = true;
					num4++;
				}
			}
		}

		// Token: 0x060001E7 RID: 487 RVA: 0x0009E07C File Offset: 0x0009C27C
		private void AI_144_DD2Pet()
		{
			Player player = Main.player[this.owner];
			float num = 4f;
			int num2 = 6;
			int num3 = 4;
			int num4 = Main.projFrames[this.type];
			int num5 = 0;
			Vector2 value = new Vector2((float)(player.direction * 30), -20f);
			if (player.dead)
			{
				this.Kill();
				return;
			}
			bool flag = true;
			switch (this.type)
			{
				case 701:
					if (Main.myPlayer == this.owner && player.petFlagDD2Dragon)
					{
						this.timeLeft = 2;
					}
					break;
				case 702:
					{
						if (Main.myPlayer == this.owner && player.petFlagDD2Ghost)
						{
							this.timeLeft = 2;
						}
						value.Y += (float)Math.Cos((double)(this.localAI[0] * 0.05235988f)) * 2f;
						num3 = 4;
						num2 = 10;
						flag = false;
						num = 6f;
						Vector2 value2 = new Vector2((float)((this.spriteDirection == -1) ? -6 : -2), -20f).RotatedBy((double)this.rotation, default(Vector2));
						if (Main.rand.Next(24) == 0)
						{
							Dust dust = Dust.NewDustDirect(base.Center + value2, 4, 4, 135, 0f, 0f, 100, default(Color), 1f);
							if (Main.rand.Next(3) != 0)
							{
								dust.noGravity = true;
								Dust expr_160_cp_0_cp_0 = dust;
								expr_160_cp_0_cp_0.velocity.Y = expr_160_cp_0_cp_0.velocity.Y - 3f;
								dust.noLight = true;
							}
							else if (Main.rand.Next(2) != 0)
							{
								dust.noLight = true;
							}
							dust.velocity *= 0.5f;
							Dust expr_1AB_cp_0_cp_0 = dust;
							expr_1AB_cp_0_cp_0.velocity.Y = expr_1AB_cp_0_cp_0.velocity.Y - 0.9f;
							dust.scale += 0.1f + Main.rand.NextFloat() * 0.6f;
						}
						DelegateMethods.v3_1 = new Vector3(0.3f, 0.5f, 1f);
						Utils.PlotTileLine(base.Center, base.Center + this.velocity * 6f, 20f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
						Utils.PlotTileLine(base.Left, base.Right, 20f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
						Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
						Utils.PlotTileLine(player.Left, player.Right, 40f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
						break;
					}
				case 703:
					if (Main.myPlayer == this.owner && player.petFlagDD2Gato)
					{
						this.timeLeft = 2;
					}
					value.Y += (float)Math.Cos((double)(this.localAI[0] * 0.104719758f)) * 2f;
					num2 = 4;
					num3 = 2;
					num = 3f;
					num4 = 4;
					break;
			}
			if (flag && (player.suspiciouslookingTentacle || player.petFlagDD2Ghost))
			{
				value.X += (float)(-(float)player.direction * 64);
			}
			this.direction = (this.spriteDirection = player.direction);
			Vector2 vector = player.MountedCenter + value;
			float expr_373 = Vector2.Distance(base.Center, vector);
			if (expr_373 > 1000f)
			{
				base.Center = player.Center + value;
			}
			Vector2 vector2 = vector - base.Center;
			if (expr_373 < num)
			{
				this.velocity *= 0.25f;
			}
			if (vector2 != Vector2.Zero)
			{
				if (vector2.Length() < num * 0.5f)
				{
					this.velocity = vector2;
				}
				else
				{
					this.velocity = vector2 * 0.1f;
				}
			}
			if (this.velocity.Length() > 6f)
			{
				float num6 = this.velocity.X * 0.08f + this.velocity.Y * (float)this.spriteDirection * 0.02f;
				if (Math.Abs(this.rotation - num6) >= 3.14159274f)
				{
					if (num6 < this.rotation)
					{
						this.rotation -= 6.28318548f;
					}
					else
					{
						this.rotation += 6.28318548f;
					}
				}
				float num7 = 12f;
				this.rotation = (this.rotation * (num7 - 1f) + num6) / num7;
				int num8 = this.frameCounter + 1;
				this.frameCounter = num8;
				if (num8 >= num3)
				{
					this.frameCounter = 0;
					num8 = this.frame + 1;
					this.frame = num8;
					if (num8 >= num4)
					{
						this.frame = num5;
					}
				}
			}
			else
			{
				if (this.rotation > 3.14159274f)
				{
					this.rotation -= 6.28318548f;
				}
				if (this.rotation > -0.005f && this.rotation < 0.005f)
				{
					this.rotation = 0f;
				}
				else
				{
					this.rotation *= 0.96f;
				}
				int num8 = this.frameCounter + 1;
				this.frameCounter = num8;
				if (num8 >= num2)
				{
					this.frameCounter = 0;
					num8 = this.frame + 1;
					this.frame = num8;
					if (num8 >= num4)
					{
						this.frame = num5;
					}
				}
			}
			this.localAI[0] += 1f;
			if (this.localAI[0] > 120f)
			{
				this.localAI[0] = 0f;
			}
		}

		// Token: 0x060001E8 RID: 488 RVA: 0x0009E634 File Offset: 0x0009C834
		private void AI_145_BookStaffStorm()
		{
			float num = 300f;
			if (this.soundDelay == 0)
			{
				this.soundDelay = -1;
				this.localAI[1] = Main.PlayTrackedSound(SoundID.DD2_BookStaffTwisterLoop, base.Center).ToFloat();
			}
			ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
			if (activeSound != null)
			{
				activeSound.Position = base.Center;
				activeSound.Volume = 1f - Math.Max(this.ai[0] - (num - 15f), 0f) / 15f;
			}
			else
			{
				this.localAI[1] = SlotId.Invalid.ToFloat();
			}
			if (this.localAI[0] >= 16f && this.ai[0] < num - 15f)
			{
				this.ai[0] = num - 15f;
			}
			this.ai[0] += 1f;
			if (this.ai[0] >= num)
			{
				this.Kill();
			}
			Vector2 top = base.Top;
			Vector2 bottom = base.Bottom;
			Vector2 value = Vector2.Lerp(top, bottom, 0.5f);
			Vector2 vector = new Vector2(0f, bottom.Y - top.Y);
			vector.X = vector.Y * 0.2f;
			int num2 = 16;
			int num3 = 160;
			for (int i = 0; i < 1; i++)
			{
				Vector2 position = new Vector2(base.Center.X - (float)(num2 / 2), this.position.Y + (float)this.height - (float)num3);
				if (Collision.SolidCollision(position, num2, num3) || Collision.WetCollision(position, num2, num3))
				{
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = 0f;
					}
					if (this.velocity.Y > -4f)
					{
						this.velocity.Y = this.velocity.Y - 2f;
					}
					else
					{
						this.velocity.Y = this.velocity.Y - 4f;
						this.localAI[0] += 2f;
					}
					if (this.velocity.Y < -16f)
					{
						this.velocity.Y = -16f;
					}
				}
				else
				{
					this.localAI[0] -= 1f;
					if (this.localAI[0] < 0f)
					{
						this.localAI[0] = 0f;
					}
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = 0f;
					}
					if (this.velocity.Y < 4f)
					{
						this.velocity.Y = this.velocity.Y + 2f;
					}
					else
					{
						this.velocity.Y = this.velocity.Y + 4f;
					}
					if (this.velocity.Y > 16f)
					{
						this.velocity.Y = 16f;
					}
				}
			}
			if (this.ai[0] < num - 30f)
			{
				for (int j = 0; j < 1; j++)
				{
					float value2 = -1f;
					float value3 = 0.9f;
					float amount = Main.rand.NextFloat();
					Vector2 vector2 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value2, value3, amount));
					vector2.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
					vector2.X *= -1f;
					Vector2 value4 = new Vector2(6f, 10f);
					Vector2 position2 = value + vector * vector2 * 0.5f + value4;
					Dust dust = Main.dust[Dust.NewDust(position2, 0, 0, 274, 0f, 0f, 0, default(Color), 1f)];
					dust.position = position2;
					dust.fadeIn = 1.3f;
					dust.scale = 0.87f;
					dust.alpha = 211;
					if (vector2.X > -1.2f)
					{
						dust.velocity.X = 1f + Main.rand.NextFloat();
					}
					dust.noGravity = true;
					dust.velocity.Y = Main.rand.NextFloat() * -0.5f - 1.3f;
					Dust expr_473_cp_0_cp_0 = dust;
					expr_473_cp_0_cp_0.velocity.X = expr_473_cp_0_cp_0.velocity.X + this.velocity.X * 2.1f;
					dust.noLight = true;
				}
			}
			Vector2 position3 = base.Bottom + new Vector2(-25f, -25f);
			for (int k = 0; k < 4; k++)
			{
				Dust expr_4ED = Dust.NewDustDirect(position3, 50, 25, 31, this.velocity.X, -2f, 100, default(Color), 1f);
				expr_4ED.fadeIn = 1.1f;
				expr_4ED.noGravity = true;
			}
			for (int l = 0; l < 1; l++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Gore expr_597 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(this.velocity.X * 1.5f, -Main.rand.NextFloat() * 16f), Utils.SelectRandom<int>(Main.rand, new int[]
					{
						1007,
						1008,
						1008
					}), 1f);
					expr_597.timeLeft = 60;
					expr_597.alpha = 50;
					expr_597.velocity.X = expr_597.velocity.X + this.velocity.X;
				}
			}
			for (int m = 0; m < 1; m++)
			{
				if (Main.rand.Next(7) == 0)
				{
					Gore expr_65C = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(this.velocity.X * 1.5f, -Main.rand.NextFloat() * 16f), Utils.SelectRandom<int>(Main.rand, new int[]
					{
						1007,
						1008,
						1008
					}), 1f);
					expr_65C.timeLeft = 0;
					expr_65C.alpha = 80;
				}
			}
			for (int n = 0; n < 1; n++)
			{
				if (Main.rand.Next(7) == 0)
				{
					Gore expr_706 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(this.velocity.X * 1.5f, -Main.rand.NextFloat() * 16f), Utils.SelectRandom<int>(Main.rand, new int[]
					{
						1007,
						1008,
						1008
					}), 1f);
					expr_706.timeLeft = 0;
					expr_706.alpha = 80;
				}
			}
		}

		// Token: 0x060001D1 RID: 465 RVA: 0x00029F71 File Offset: 0x00028171
		private void AI_146_DD2Victory()
		{
		}

		// Token: 0x060001D2 RID: 466 RVA: 0x00081220 File Offset: 0x0007F420
		private void BetsySharpnel(int npcIndex)
		{
			if (this.ai[1] == -1f || this.owner != Main.myPlayer)
			{
				return;
			}
			Vector2 spinningpoint = new Vector2(0f, 6f);
			Vector2 center = base.Center;
			float num = 0.7853982f;
			int num2 = 5;
			float num3 = -(num * 2f) / (float)(num2 - 1);
			for (int i = 0; i < num2; i++)
			{
				int num4 = Projectile.NewProjectile(center, spinningpoint.RotatedBy((double)(num + num3 * (float)i), default(Vector2)), 710, this.damage, this.knockBack, this.owner, 0f, -1f);
				Projectile projectile = Main.projectile[num4];
				for (int j = 0; j < this.localNPCImmunity.Length; j++)
				{
					projectile.localNPCImmunity[j] = this.localNPCImmunity[j];
				}
			}
		}

		// Token: 0x060001C2 RID: 450 RVA: 0x00042AC4 File Offset: 0x00040CC4
		private bool CanCutTiles()
		{
			return this.aiStyle != 45 && this.aiStyle != 137 && this.aiStyle != 92 && this.aiStyle != 105 && this.aiStyle != 106 && this.type != 463 && this.type != 69 && this.type != 70 && this.type != 621 && this.type != 10 && this.type != 11 && this.type != 379 && this.type != 407 && this.type != 476 && this.type != 623 && (this.type < 625 || this.type > 628);
		}

		// Token: 0x060001BE RID: 446 RVA: 0x0003EF28 File Offset: 0x0003D128
		public bool CanHit(Entity ent)
		{
			return base.Distance(ent.Center) <= this.ownerHitCheckDistance && (Collision.CanHit(Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height, ent.position, ent.width, ent.height) || Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float)(Main.player[this.owner].direction * Main.player[this.owner].width / 2), Main.player[this.owner].gravDir * (float)(-(float)Main.player[this.owner].height) / 3f), 0, 0, ent.Center + new Vector2(0f, (float)(-(float)ent.height / 3)), 0, 0) || Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float)(Main.player[this.owner].direction * Main.player[this.owner].width / 2), Main.player[this.owner].gravDir * (float)(-(float)Main.player[this.owner].height) / 3f), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float)(Main.player[this.owner].direction * Main.player[this.owner].width / 2), 0f), 0, 0, ent.Center + new Vector2(0f, (float)(ent.height / 3)), 0, 0));
		}

		// Token: 0x060001CA RID: 458 RVA: 0x0004A7F8 File Offset: 0x000489F8
		public bool CanReflect()
		{
			return this.active && this.friendly && !this.hostile && this.damage > 0 && (this.aiStyle == 1 || this.aiStyle == 2 || this.aiStyle == 8 || this.aiStyle == 21 || this.aiStyle == 24 || this.aiStyle == 28 || this.aiStyle == 29 || this.aiStyle == 131);
		}

		// Token: 0x060001C3 RID: 451 RVA: 0x00042BAC File Offset: 0x00040DAC
		public bool Colliding(Rectangle myRect, Rectangle targetRect)
		{
			if (this.type == 598 && targetRect.Width > 8 && targetRect.Height > 8)
			{
				targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
			}
			else if (this.type == 614 && targetRect.Width > 8 && targetRect.Height > 8)
			{
				targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
			}
			else if (this.type == 636 && targetRect.Width > 8 && targetRect.Height > 8)
			{
				targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
			}
			else if (this.type == 607)
			{
				myRect.X += (int)this.velocity.X;
				myRect.Y += (int)this.velocity.Y;
			}
			else if (this.type == 661)
			{
				if (Vector2.Distance(myRect.Center.ToVector2(), targetRect.Center.ToVector2()) > 500f || !Collision.CanHitLine(myRect.Center.ToVector2(), 0, 0, targetRect.Center.ToVector2(), 0, 0))
				{
					return false;
				}
			}
			else if (this.aiStyle == 137)
			{
				if (myRect.Intersects(targetRect) && targetRect.Distance(base.Center) < (float)(this.height / 2 - 20))
				{
					if (this.AI_137_CanHit(targetRect.Center.ToVector2()))
					{
						return true;
					}
					if (this.AI_137_CanHit(targetRect.TopLeft() + new Vector2((float)(targetRect.Width / 2), 0f)))
					{
						return true;
					}
				}
				return false;
			}
			if (myRect.Intersects(targetRect))
			{
				return true;
			}
			if (this.type == 461)
			{
				float num = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * this.localAI[1], 22f * this.scale, ref num))
				{
					return true;
				}
			}
			else if (this.type == 697 || this.type == 707)
			{
				float f = this.rotation - 0.7853982f * (float)Math.Sign(this.velocity.X);
				float num2 = 0f;
				float num3 = 50f;
				if (this.type == 707)
				{
					num3 = 110f;
				}
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center + f.ToRotationVector2() * -num3, base.Center + f.ToRotationVector2() * num3, 23f * this.scale, ref num2))
				{
					return true;
				}
			}
			else if (this.type == 699)
			{
				float f2 = this.rotation - 0.7853982f * (float)Math.Sign(this.velocity.X) + ((this.spriteDirection == -1) ? 3.14159274f : 0f);
				float num4 = 0f;
				float scaleFactor = -95f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f2.ToRotationVector2() * scaleFactor, 23f * this.scale, ref num4))
				{
					return true;
				}
			}
			else if (this.type == 642)
			{
				float num5 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * this.localAI[1], 30f * this.scale, ref num5))
				{
					return true;
				}
			}
			else if (this.type == 632)
			{
				float num6 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * this.localAI[1], 22f * this.scale, ref num6))
				{
					return true;
				}
			}
			else if (this.type == 455)
			{
				float num7 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * this.localAI[1], 36f * this.scale, ref num7))
				{
					return true;
				}
			}
			else if (this.type == 611)
			{
				float num8 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity, 16f * this.scale, ref num8))
				{
					return true;
				}
			}
			else if (this.type == 684)
			{
				float num9 = 0f;
				Vector2 value = this.velocity.SafeNormalize(Vector2.UnitY).RotatedBy(-1.5707963705062866, default(Vector2)) * this.scale;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - value * 40f, base.Center + value * 40f, 16f * this.scale, ref num9))
				{
					return true;
				}
			}
			else if (this.type == 537)
			{
				float num10 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * this.localAI[1], 22f * this.scale, ref num10))
				{
					return true;
				}
			}
			else if (this.type == 687)
			{
				float num11 = 0f;
				float num12 = this.ai[0] / 25f;
				if (num12 > 1f)
				{
					num12 = 1f;
				}
				float num13 = (this.ai[0] - 38f) / 40f;
				if (num13 < 0f)
				{
					num13 = 0f;
				}
				Vector2 lineStart = base.Center + this.rotation.ToRotationVector2() * 400f * num13;
				Vector2 lineEnd = base.Center + this.rotation.ToRotationVector2() * 400f * num12;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), lineStart, lineEnd, 40f * this.scale, ref num11))
				{
					return true;
				}
			}
			else if (this.type == 466 || this.type == 580 || this.type == 686)
			{
				for (int i = 0; i < this.oldPos.Length; i++)
				{
					if (this.oldPos[i].X == 0f && this.oldPos[i].Y == 0f)
					{
						break;
					}
					myRect.X = (int)this.oldPos[i].X;
					myRect.Y = (int)this.oldPos[i].Y;
					if (myRect.Intersects(targetRect))
					{
						return true;
					}
				}
			}
			else if (this.type == 711)
			{
				if (this.penetrate != -1)
				{
					for (int j = 0; j < this.oldPos.Length; j++)
					{
						if (this.oldPos[j].X == 0f && this.oldPos[j].Y == 0f)
						{
							break;
						}
						myRect.X = (int)this.oldPos[j].X;
						myRect.Y = (int)this.oldPos[j].Y;
						if (myRect.Intersects(targetRect))
						{
							return true;
						}
					}
				}
			}
			else if (this.type == 464 && this.ai[1] != 1f)
			{
				Vector2 arg_884_0 = new Vector2(0f, -720f).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
				float scaleFactor2 = this.ai[0] % 45f / 45f;
				Vector2 spinningpoint = arg_884_0 * scaleFactor2;
				for (int k = 0; k < 6; k++)
				{
					float num14 = (float)k * 6.28318548f / 6f;
					if (Utils.CenteredRectangle(base.Center + spinningpoint.RotatedBy((double)num14, default(Vector2)), new Vector2(30f, 30f)).Intersects(targetRect))
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x060001C1 RID: 449 RVA: 0x0004281C File Offset: 0x00040A1C
		private void CutTiles()
		{
			if (this.CanCutTiles())
			{
				int num = (int)(this.position.X / 16f);
				int num2 = (int)((this.position.X + (float)this.width) / 16f) + 1;
				int num3 = (int)(this.position.Y / 16f);
				int num4 = (int)((this.position.Y + (float)this.height) / 16f) + 1;
				if (num < 0)
				{
					num = 0;
				}
				if (num2 > Main.maxTilesX)
				{
					num2 = Main.maxTilesX;
				}
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesY)
				{
					num4 = Main.maxTilesY;
				}
				AchievementsHelper.CurrentlyMining = true;
				for (int i = num; i < num2; i++)
				{
					for (int j = num3; j < num4; j++)
					{
						if (Main.tile[i, j] != null && Main.tileCut[(int)Main.tile[i, j].type] && WorldGen.CanCutTile(i, j, TileCuttingContext.AttackProjectile))
						{
							WorldGen.KillTile(i, j, false, false, false);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
							}
						}
					}
				}
				if (this.type == 461 || this.type == 632 || this.type == 642)
				{
					DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
					Utils.PlotTileLine(base.Center, base.Center + this.velocity * this.localAI[1], (float)this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CutTiles));
				}
				else if (this.type == 611)
				{
					DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
					Utils.PlotTileLine(base.Center, base.Center + this.velocity, (float)this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CutTiles));
				}
				else if (this.type == 697 || this.type == 707)
				{
					float num5 = 40f;
					if (this.type == 707)
					{
						num5 = 60f;
					}
					float f = this.rotation - 0.7853982f * (float)Math.Sign(this.velocity.X);
					DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
					Utils.PlotTileLine(base.Center + f.ToRotationVector2() * -num5, base.Center + f.ToRotationVector2() * num5, (float)this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CutTiles));
				}
				AchievementsHelper.CurrentlyMining = false;
			}
		}

		// Token: 0x060001BF RID: 447 RVA: 0x0003F120 File Offset: 0x0003D320
		public void Damage()
		{
			if (this.type == 18 || this.type == 72 || this.type == 86 || this.type == 87 || this.aiStyle == 31 || this.aiStyle == 32 || this.type == 226 || this.type == 378 || this.type == 613 || this.type == 650 || (this.type == 434 && this.localAI[0] != 0f) || this.type == 439 || this.type == 444 || (this.type == 451 && ((int)(this.ai[0] - 1f) / this.penetrate == 0 || this.ai[1] < 5f) && this.ai[0] != 0f) || (this.type == 500 || this.type == 653 || this.type == 460 || this.type == 633 || this.type == 600 || this.type == 601 || this.type == 602 || this.type == 535 || (this.type == 631 && this.localAI[1] == 0f)) || (this.type == 651 || (this.aiStyle == 137 && this.ai[0] != 0f)) || this.aiStyle == 138)
			{
				return;
			}
			if (this.aiStyle == 93 && this.ai[0] != 0f && this.ai[0] != 2f)
			{
				return;
			}
			if (this.aiStyle == 10 && this.localAI[1] == -1f)
			{
				return;
			}
			if (Main.projPet[this.type] && this.type != 266 && this.type != 407 && this.type != 317 && (this.type != 388 || this.ai[0] != 2f) && (this.type < 390 || this.type > 392) && (this.type < 393 || this.type > 395) && (this.type != 533 || this.ai[0] < 6f || this.ai[0] > 8f) && (this.type < 625 || this.type > 628))
			{
				return;
			}
			Rectangle myRect = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
			if (this.type == 85 || this.type == 101)
			{
				int num = 30;
				myRect.X -= num;
				myRect.Y -= num;
				myRect.Width += num * 2;
				myRect.Height += num * 2;
			}
			if (this.type == 188)
			{
				int num2 = 20;
				myRect.X -= num2;
				myRect.Y -= num2;
				myRect.Width += num2 * 2;
				myRect.Height += num2 * 2;
			}
			if (this.aiStyle == 29)
			{
				int num3 = 4;
				myRect.X -= num3;
				myRect.Y -= num3;
				myRect.Width += num3 * 2;
				myRect.Height += num3 * 2;
			}
			if (this.friendly && this.owner == Main.myPlayer && !this.npcProj)
			{
				if ((this.aiStyle == 16 && this.type != 338 && this.type != 339 && this.type != 340 && this.type != 341 && (this.timeLeft <= 1 || this.type == 108 || this.type == 164)) || (this.type == 286 && this.localAI[1] == -1f))
				{
					int myPlayer = Main.myPlayer;
					if (Main.player[myPlayer].active && !Main.player[myPlayer].dead && !Main.player[myPlayer].immune && (!this.ownerHitCheck || this.CanHit(Main.player[myPlayer])))
					{
						Rectangle value = new Rectangle((int)Main.player[myPlayer].position.X, (int)Main.player[myPlayer].position.Y, Main.player[myPlayer].width, Main.player[myPlayer].height);
						if (myRect.Intersects(value))
						{
							if (Main.player[myPlayer].position.X + (float)(Main.player[myPlayer].width / 2) < this.position.X + (float)(this.width / 2))
							{
								this.direction = -1;
							}
							else
							{
								this.direction = 1;
							}
							int num4 = Main.DamageVar((float)this.damage);
							this.StatusPlayer(myPlayer);
							Main.player[myPlayer].Hurt(PlayerDeathReason.ByProjectile(this.owner, this.whoAmI), num4, this.direction, true, false, false, -1);
							if (this.trap)
							{
								Main.player[myPlayer].trapDebuffSource = true;
								if (Main.player[myPlayer].dead)
								{
									AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer], 4);
								}
							}
						}
					}
				}
				this.CutTiles();
			}
			if (this.owner == Main.myPlayer)
			{
				if (this.damage > 0)
				{
					for (int i = 0; i < 200; i++)
					{
						bool flag = (!this.usesLocalNPCImmunity && !this.usesIDStaticNPCImmunity) || (this.usesLocalNPCImmunity && this.localNPCImmunity[i] == 0) || (this.usesIDStaticNPCImmunity && Projectile.IsNPCImmune(this.type, i));
						if (((Main.npc[i].active && !Main.npc[i].dontTakeDamage) & flag) && ((this.friendly && (!Main.npc[i].friendly || this.type == 318 || (Main.npc[i].type == 22 && this.owner < 255 && Main.player[this.owner].killGuide) || (Main.npc[i].type == 54 && this.owner < 255 && Main.player[this.owner].killClothier))) || (this.hostile && Main.npc[i].friendly && !Main.npc[i].dontTakeDamageFromHostiles)) && (this.owner < 0 || Main.npc[i].immune[this.owner] == 0 || this.maxPenetrate == 1))
						{
							bool flag2 = false;
							if (this.type == 11 && (Main.npc[i].type == 47 || Main.npc[i].type == 57))
							{
								flag2 = true;
							}
							else if (this.type == 31 && Main.npc[i].type == 69)
							{
								flag2 = true;
							}
							else if (Main.npc[i].trapImmune && this.trap)
							{
								flag2 = true;
							}
							else if (Main.npc[i].immortal && this.npcProj)
							{
								flag2 = true;
							}
							if (!flag2 && (Main.npc[i].noTileCollide || !this.ownerHitCheck || this.CanHit(Main.npc[i])))
							{
								bool flag3;
								if (Main.npc[i].type == 414)
								{
									Rectangle rect = Main.npc[i].getRect();
									int num5 = 8;
									rect.X -= num5;
									rect.Y -= num5;
									rect.Width += num5 * 2;
									rect.Height += num5 * 2;
									flag3 = this.Colliding(myRect, rect);
								}
								else
								{
									flag3 = this.Colliding(myRect, Main.npc[i].getRect());
								}
								if (flag3)
								{
									if (this.type == 604)
									{
										Main.player[this.owner].Counterweight(Main.npc[i].Center, this.damage, this.knockBack);
									}
									if (Main.npc[i].reflectingProjectiles && this.CanReflect())
									{
										Main.npc[i].ReflectProjectile(this.whoAmI);
										return;
									}
									int num6 = this.damage;
									if (this.type > 0 && this.type < 714 && ProjectileID.Sets.StardustDragon[this.type])
									{
										float num7 = (this.scale - 1f) * 100f;
										num7 = Utils.Clamp<float>(num7, 0f, 50f);
										num6 = (int)((float)num6 * (1f + num7 * 0.23f));
									}
									int num8 = Main.DamageVar((float)num6);
									bool flag4 = !this.npcProj && !this.trap;
									if (this.trap && NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[i].type])
									{
										num8 /= 2;
									}
									if (this.type == 604)
									{
										this.friendly = false;
										this.ai[1] = 1000f;
									}
									if ((this.type == 400 || this.type == 401 || this.type == 402) && Main.npc[i].type >= 13 && Main.npc[i].type <= 15)
									{
										num8 = (int)((double)num8 * 0.65);
										if (this.penetrate > 1)
										{
											this.penetrate--;
										}
									}
									Point point;
									if (this.type == 710 && !WorldUtils.Find(base.Center.ToTileCoordinates(), Searches.Chain(new Searches.Down(12), new GenCondition[]
									{
										new Conditions.IsSolid()
									}), out point))
									{
										num8 = (int)((float)num8 * 1.5f);
									}
									if (this.type == 504)
									{
										float num9 = (60f - this.ai[0]) / 2f;
										this.ai[0] += num9;
									}
									if (this.aiStyle == 3 && this.type != 301)
									{
										if (this.ai[0] == 0f)
										{
											this.velocity.X = -this.velocity.X;
											this.velocity.Y = -this.velocity.Y;
											this.netUpdate = true;
										}
										this.ai[0] = 1f;
									}
									else if (this.type == 582)
									{
										if (this.ai[0] != 0f)
										{
											this.direction *= -1;
										}
									}
									else if (this.type == 612)
									{
										this.direction = Main.player[this.owner].direction;
									}
									else if (this.type == 624)
									{
										float num10 = 1f;
										if (Main.npc[i].knockBackResist > 0f)
										{
											num10 = 1f / Main.npc[i].knockBackResist;
										}
										this.knockBack = 4f * num10;
										if (Main.npc[i].Center.X < base.Center.X)
										{
											this.direction = 1;
										}
										else
										{
											this.direction = -1;
										}
									}
									else if (this.aiStyle == 16)
									{
										if (this.timeLeft > 3)
										{
											this.timeLeft = 3;
										}
										if (Main.npc[i].position.X + (float)(Main.npc[i].width / 2) < this.position.X + (float)(this.width / 2))
										{
											this.direction = -1;
										}
										else
										{
											this.direction = 1;
										}
									}
									else if (this.aiStyle == 68)
									{
										if (this.timeLeft > 3)
										{
											this.timeLeft = 3;
										}
										if (Main.npc[i].position.X + (float)(Main.npc[i].width / 2) < this.position.X + (float)(this.width / 2))
										{
											this.direction = -1;
										}
										else
										{
											this.direction = 1;
										}
									}
									else if (this.aiStyle == 50)
									{
										if (Main.npc[i].position.X + (float)(Main.npc[i].width / 2) < this.position.X + (float)(this.width / 2))
										{
											this.direction = -1;
										}
										else
										{
											this.direction = 1;
										}
									}
									if (this.type == 509)
									{
										int num11 = Main.rand.Next(2, 6);
										for (int j = 0; j < num11; j++)
										{
											Vector2 vector = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
											vector += this.velocity * 3f;
											vector.Normalize();
											vector *= (float)Main.rand.Next(35, 81) * 0.1f;
											int num12 = (int)((double)this.damage * 0.5);
											Projectile.NewProjectile(base.Center.X, base.Center.Y, vector.X, vector.Y, 504, num12, this.knockBack * 0.2f, this.owner, 0f, 0f);
										}
									}
									if (this.type == 598 || this.type == 636 || this.type == 614)
									{
										this.ai[0] = 1f;
										this.ai[1] = (float)i;
										this.velocity = (Main.npc[i].Center - base.Center) * 0.75f;
										this.netUpdate = true;
									}
									if (this.type >= 511 && this.type <= 513)
									{
										this.timeLeft = 0;
									}
									if (this.type == 659)
									{
										this.timeLeft = 0;
									}
									if (this.type == 524)
									{
										this.netUpdate = true;
										this.ai[0] += 50f;
									}
									if ((this.type == 688 || this.type == 689 || this.type == 690) && Main.npc[i].type != 68 && Main.npc[i].defense < 999)
									{
										num8 += Main.npc[i].defense / 2;
									}
									if (this.aiStyle == 39)
									{
										if (this.ai[1] == 0f)
										{
											this.ai[1] = (float)(i + 1);
											this.netUpdate = true;
										}
										if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) < this.position.X + (float)(this.width / 2))
										{
											this.direction = 1;
										}
										else
										{
											this.direction = -1;
										}
									}
									if (this.type == 41 && this.timeLeft > 1)
									{
										this.timeLeft = 1;
									}
									bool flag5 = false;
									if (flag4)
									{
										if (this.melee && Main.rand.Next(1, 101) <= Main.player[this.owner].meleeCrit)
										{
											flag5 = true;
										}
										if (this.ranged && Main.rand.Next(1, 101) <= Main.player[this.owner].rangedCrit)
										{
											flag5 = true;
										}
										if (this.magic && Main.rand.Next(1, 101) <= Main.player[this.owner].magicCrit)
										{
											flag5 = true;
										}
										if (this.thrown && Main.rand.Next(1, 101) <= Main.player[this.owner].thrownCrit)
										{
											flag5 = true;
										}
										int num13 = this.type;
										if (num13 - 688 <= 2)
										{
											if (Main.player[this.owner].setMonkT3)
											{
												if (Main.rand.Next(4) == 0)
												{
													flag5 = true;
												}
											}
											else if (Main.player[this.owner].setMonkT2 && Main.rand.Next(6) == 0)
											{
												flag5 = true;
											}
										}
									}
									if (this.aiStyle == 99)
									{
										Main.player[this.owner].Counterweight(Main.npc[i].Center, this.damage, this.knockBack);
										if (Main.npc[i].Center.X < Main.player[this.owner].Center.X)
										{
											this.direction = -1;
										}
										else
										{
											this.direction = 1;
										}
										if (this.ai[0] >= 0f)
										{
											Vector2 value2 = base.Center - Main.npc[i].Center;
											value2.Normalize();
											float scaleFactor = 16f;
											this.velocity *= -0.5f;
											this.velocity += value2 * scaleFactor;
											this.netUpdate = true;
											this.localAI[0] += 20f;
											if (!Collision.CanHit(this.position, this.width, this.height, Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height))
											{
												this.localAI[0] += 40f;
												num8 = (int)((double)num8 * 0.75);
											}
										}
									}
									if (this.aiStyle == 93)
									{
										if (this.ai[0] == 0f)
										{
											this.ai[1] = 0f;
											int num14 = -i - 1;
											this.ai[0] = (float)num14;
											this.velocity = Main.npc[i].Center - base.Center;
										}
										if (this.ai[0] == 2f)
										{
											num8 = (int)((double)num8 * 1.35);
										}
										else
										{
											num8 = (int)((double)num8 * 0.15);
										}
									}
									if (flag4)
									{
										int num15 = Item.NPCtoBanner(Main.npc[i].BannerID());
										if (num15 >= 0)
										{
											Main.player[Main.myPlayer].lastCreatureHit = num15;
										}
									}
									if (Main.netMode != 2 & flag4)
									{
										int num16 = Item.NPCtoBanner(Main.npc[i].BannerID());
										if (num16 > 0 && Main.player[this.owner].NPCBannerBuff[num16])
										{
											if (Main.expertMode)
											{
												num8 = (int)((float)num8 * ItemID.Sets.BannerStrength[Item.BannerToItem(num16)].ExpertDamageDealt);
											}
											else
											{
												num8 = (int)((float)num8 * ItemID.Sets.BannerStrength[Item.BannerToItem(num16)].NormalDamageDealt);
											}
										}
									}
									if (Main.expertMode)
									{
										if ((this.type == 30 || this.type == 28 || this.type == 29 || this.type == 470 || this.type == 517 || this.type == 588 || this.type == 637) && Main.npc[i].type >= 13 && Main.npc[i].type <= 15)
										{
											num8 /= 5;
										}
										if (this.type == 280 && ((Main.npc[i].type >= 134 && Main.npc[i].type <= 136) || Main.npc[i].type == 139))
										{
											num8 = (int)((double)num8 * 0.75);
										}
									}
									if (Main.netMode != 2 && Main.npc[i].type == 439 && this.type >= 0 && this.type <= 714 && ProjectileID.Sets.Homing[this.type])
									{
										num8 = (int)((float)num8 * 0.75f);
									}
									if (this.type == 497 && this.penetrate != 1)
									{
										this.ai[0] = 25f;
										float scaleFactor2 = this.velocity.Length();
										Vector2 value3 = Main.npc[i].Center - base.Center;
										value3.Normalize();
										value3 *= scaleFactor2;
										this.velocity = -value3 * 0.9f;
										this.netUpdate = true;
									}
									if (this.type == 323 && (Main.npc[i].type == 158 || Main.npc[i].type == 159))
									{
										num8 *= 10;
									}
									if (this.type == 294)
									{
										this.damage = (int)((double)this.damage * 0.8);
									}
									if (this.type == 477 && this.penetrate > 1)
									{
										int[] array = new int[10];
										int num17 = 0;
										int num18 = 700;
										int num19 = 20;
										for (int k = 0; k < 200; k++)
										{
											if (k != i && Main.npc[k].CanBeChasedBy(this, false))
											{
												float num20 = (base.Center - Main.npc[k].Center).Length();
												if (num20 > (float)num19 && num20 < (float)num18 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[k].Center, 1, 1))
												{
													array[num17] = k;
													num17++;
													if (num17 >= 9)
													{
														break;
													}
												}
											}
										}
										if (num17 > 0)
										{
											num17 = Main.rand.Next(num17);
											Vector2 value4 = Main.npc[array[num17]].Center - base.Center;
											float scaleFactor3 = this.velocity.Length();
											value4.Normalize();
											this.velocity = value4 * scaleFactor3;
											this.netUpdate = true;
										}
									}
									if (this.type == 261)
									{
										float num21 = (float)Math.Sqrt((double)(this.velocity.X * this.velocity.X + this.velocity.Y * this.velocity.Y));
										if (num21 < 1f)
										{
											num21 = 1f;
										}
										num8 = (int)((float)num8 * num21 / 8f);
									}
									if (flag4 && this.melee && Main.player[this.owner].parryDamageBuff)
									{
										num8 *= 5;
										Main.player[this.owner].parryDamageBuff = false;
										Main.player[this.owner].ClearBuff(198);
									}
									this.StatusNPC(i);
									if (flag4 && this.type != 221 && this.type != 227 && this.type != 614)
									{
										Main.player[this.owner].OnHit(Main.npc[i].Center.X, Main.npc[i].Center.Y, Main.npc[i]);
									}
									if (this.type == 317)
									{
										this.ai[1] = -1f;
										this.netUpdate = true;
									}
									int hitDirection = this.direction;
									if (this.type == 697 || this.type == 699 || this.type == 707 || this.type == 708)
									{
										hitDirection = ((Main.player[this.owner].Center.X < Main.npc[i].Center.X) ? 1 : -1);
									}
									if (flag4 && !this.hostile && Main.player[this.owner].armorPenetration > 0)
									{
										num8 += Main.npc[i].checkArmorPenetration(Main.player[this.owner].armorPenetration);
									}
									int num22;
									if (flag4)
									{
										num22 = (int)Main.npc[i].StrikeNPC(num8, this.knockBack, hitDirection, flag5, false, false);
									}
									else
									{
										num22 = (int)Main.npc[i].StrikeNPCNoInteraction(num8, this.knockBack, hitDirection, flag5, false, false);
									}
									if (flag4 && Main.player[this.owner].accDreamCatcher)
									{
										Main.player[this.owner].addDPS(num22);
									}
									if (flag4 && !Main.npc[i].immortal)
									{
										if (this.type == 304 && num22 > 0 && Main.npc[i].lifeMax > 5 && !Main.player[this.owner].moonLeech)
										{
											this.vampireHeal(num22, new Vector2(Main.npc[i].Center.X, Main.npc[i].Center.Y));
										}
										if (Main.npc[i].value > 0f && Main.player[this.owner].coins && Main.rand.Next(5) == 0)
										{
											int num23 = 71;
											if (Main.rand.Next(10) == 0)
											{
												num23 = 72;
											}
											if (Main.rand.Next(100) == 0)
											{
												num23 = 73;
											}
											int num24 = Item.NewItem((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height, num23, 1, false, 0, false, false);
											Main.item[num24].stack = Main.rand.Next(1, 11);
											Main.item[num24].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
											Main.item[num24].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)this.direction;
											if (Main.netMode == 1)
											{
												NetMessage.SendData(21, -1, -1, null, num24, 0f, 0f, 0f, 0, 0, 0);
											}
										}
										if (num22 > 0 && Main.npc[i].lifeMax > 5 && this.friendly && !this.hostile && this.aiStyle != 59)
										{
											if (Main.npc[i].canGhostHeal)
											{
												if (Main.player[this.owner].ghostHeal && !Main.player[this.owner].moonLeech)
												{
													this.ghostHeal(num22, new Vector2(Main.npc[i].Center.X, Main.npc[i].Center.Y));
												}
												if (Main.player[this.owner].ghostHurt)
												{
													this.ghostHurt(num22, new Vector2(Main.npc[i].Center.X, Main.npc[i].Center.Y));
												}
												if (Main.player[this.owner].setNebula && Main.player[this.owner].nebulaCD == 0 && Main.rand.Next(3) == 0)
												{
													Main.player[this.owner].nebulaCD = 30;
													int num25 = Utils.SelectRandom<int>(Main.rand, new int[]
													{
														3453,
														3454,
														3455
													});
													int num26 = Item.NewItem((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height, num25, 1, false, 0, false, false);
													Main.item[num26].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
													Main.item[num26].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)this.direction;
													if (Main.netMode == 1)
													{
														NetMessage.SendData(21, -1, -1, null, num26, 0f, 0f, 0f, 0, 0, 0);
													}
												}
											}
											if (this.melee && Main.player[this.owner].beetleOffense && !Main.npc[i].immortal)
											{
												if (Main.player[this.owner].beetleOrbs == 0)
												{
													Main.player[this.owner].beetleCounter += (float)(num22 * 3);
												}
												else if (Main.player[this.owner].beetleOrbs == 1)
												{
													Main.player[this.owner].beetleCounter += (float)(num22 * 2);
												}
												else
												{
													Main.player[this.owner].beetleCounter += (float)num22;
												}
												Main.player[this.owner].beetleCountdown = 0;
											}
											if (this.arrow && this.type != 631 && Main.player[this.owner].phantasmTime > 0)
											{
												Vector2 vector2 = Main.player[this.owner].position + Main.player[this.owner].Size * Utils.RandomVector2(Main.rand, 0f, 1f);
												Vector2 vector3 = Main.npc[i].DirectionFrom(vector2) * 6f;
												int num27 = (int)((float)this.damage * 0.3f);
												Projectile.NewProjectile(vector2.X, vector2.Y, vector3.X, vector3.Y, 631, num27, 0f, this.owner, (float)i, 0f);
												Projectile.NewProjectile(vector2.X, vector2.Y, vector3.X, vector3.Y, 631, num27, 0f, this.owner, (float)i, 15f);
												Projectile.NewProjectile(vector2.X, vector2.Y, vector3.X, vector3.Y, 631, num27, 0f, this.owner, (float)i, 30f);
											}
										}
									}
									if (flag4 && this.melee && Main.player[this.owner].meleeEnchant == 7)
									{
										Projectile.NewProjectile(Main.npc[i].Center.X, Main.npc[i].Center.Y, Main.npc[i].velocity.X, Main.npc[i].velocity.Y, 289, 0, 0f, this.owner, 0f, 0f);
									}
									if (Main.netMode != 0)
									{
										if (flag5)
										{
											NetMessage.SendData(28, -1, -1, null, i, (float)num8, this.knockBack, (float)this.direction, 1, 0, 0);
										}
										else
										{
											NetMessage.SendData(28, -1, -1, null, i, (float)num8, this.knockBack, (float)this.direction, 0, 0, 0);
										}
									}
									if (this.type >= 390 && this.type <= 392)
									{
										this.localAI[1] = 20f;
									}
									if (this.usesIDStaticNPCImmunity)
									{
										Main.npc[i].immune[this.owner] = 0;
										Projectile.perIDStaticNPCImmunity[this.type][i] = Main.GameUpdateCount + (uint)this.idStaticNPCHitCooldown;
									}
									else if (this.type == 434)
									{
										this.numUpdates = 0;
									}
									else if (this.type == 598 || this.type == 636 || this.type == 614)
									{
										this.damage = 0;
										int num28 = 6;
										if (this.type == 614)
										{
											num28 = 10;
										}
										if (this.type == 636)
										{
											num28 = 8;
										}
										Point[] array2 = new Point[num28];
										int num29 = 0;
										for (int l = 0; l < 1000; l++)
										{
											if (l != this.whoAmI && Main.projectile[l].active && Main.projectile[l].owner == Main.myPlayer && Main.projectile[l].type == this.type && Main.projectile[l].ai[0] == 1f && Main.projectile[l].ai[1] == (float)i)
											{
												array2[num29++] = new Point(l, Main.projectile[l].timeLeft);
												if (num29 >= array2.Length)
												{
													break;
												}
											}
										}
										if (num29 >= array2.Length)
										{
											int num30 = 0;
											for (int m = 1; m < array2.Length; m++)
											{
												if (array2[m].Y < array2[num30].Y)
												{
													num30 = m;
												}
											}
											Main.projectile[array2[num30].X].Kill();
										}
									}
									else if (this.type == 632)
									{
										Main.npc[i].immune[this.owner] = 5;
									}
									else if (this.type == 514)
									{
										Main.npc[i].immune[this.owner] = 1;
									}
									else if (this.type == 611)
									{
										if (this.localAI[1] <= 0f)
										{
											Projectile.NewProjectile(Main.npc[i].Center.X, Main.npc[i].Center.Y, 0f, 0f, 612, this.damage, 10f, this.owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f);
										}
										this.localAI[1] = 4f;
									}
									else if (this.type == 595)
									{
										Main.npc[i].immune[this.owner] = 5;
									}
									else if (this.type >= 625 && this.type <= 628)
									{
										Main.npc[i].immune[this.owner] = 6;
									}
									else if (this.type == 286)
									{
										Main.npc[i].immune[this.owner] = 5;
									}
									else if (this.type == 514)
									{
										Main.npc[i].immune[this.owner] = 3;
									}
									else if (this.type == 443)
									{
										Main.npc[i].immune[this.owner] = 8;
									}
									else if (this.type >= 424 && this.type <= 426)
									{
										Main.npc[i].immune[this.owner] = 5;
									}
									else if (this.type == 634 || this.type == 635)
									{
										Main.npc[i].immune[this.owner] = 5;
									}
									else if (this.type == 659)
									{
										Main.npc[i].immune[this.owner] = 5;
									}
									else if (this.type == 246)
									{
										Main.npc[i].immune[this.owner] = 7;
									}
									else if (this.type == 249)
									{
										Main.npc[i].immune[this.owner] = 7;
									}
									else if (this.type == 190)
									{
										Main.npc[i].immune[this.owner] = 8;
									}
									else if (this.type == 409)
									{
										Main.npc[i].immune[this.owner] = 6;
									}
									else if (this.type == 407)
									{
										Main.npc[i].immune[this.owner] = 20;
									}
									else if (this.type == 311)
									{
										Main.npc[i].immune[this.owner] = 7;
									}
									else if (this.type == 582)
									{
										Main.npc[i].immune[this.owner] = 7;
										if (this.ai[0] != 1f)
										{
											this.ai[0] = 1f;
											this.netUpdate = true;
										}
									}
									else
									{
										if (this.type == 451)
										{
											if (this.ai[0] == 0f)
											{
												this.ai[0] += (float)this.penetrate;
											}
											else
											{
												this.ai[0] -= (float)(this.penetrate + 1);
											}
											this.ai[1] = 0f;
											this.netUpdate = true;
											break;
										}
										if (this.type == 661)
										{
											this.localNPCImmunity[i] = 8;
											Main.npc[i].immune[this.owner] = 0;
										}
										else if (this.usesLocalNPCImmunity && this.localNPCHitCooldown != -2)
										{
											Main.npc[i].immune[this.owner] = 0;
											this.localNPCImmunity[i] = this.localNPCHitCooldown;
										}
										else if (this.penetrate != 1)
										{
											Main.npc[i].immune[this.owner] = 10;
										}
									}
									if (this.type == 710)
									{
										this.BetsySharpnel(i);
									}
									if (this.penetrate > 0 && this.type != 317)
									{
										if (this.type == 357)
										{
											this.damage = (int)((double)this.damage * 0.9);
										}
										this.penetrate--;
										if (this.penetrate == 0)
										{
											break;
										}
									}
									if (this.aiStyle == 7)
									{
										this.ai[0] = 1f;
										this.damage = 0;
										this.netUpdate = true;
									}
									else if (this.aiStyle == 13)
									{
										this.ai[0] = 1f;
										this.netUpdate = true;
									}
									else if (this.aiStyle == 69)
									{
										this.ai[0] = 1f;
										this.netUpdate = true;
									}
									else if (this.type == 607)
									{
										this.ai[0] = 1f;
										this.netUpdate = true;
										this.friendly = false;
									}
									else if (this.type == 638 || this.type == 639 || this.type == 640)
									{
										this.localNPCImmunity[i] = -1;
										Main.npc[i].immune[this.owner] = 0;
										this.damage = (int)((double)this.damage * 0.96);
									}
									else if (this.type == 617)
									{
										this.localNPCImmunity[i] = 8;
										Main.npc[i].immune[this.owner] = 0;
									}
									else if (this.type == 656)
									{
										this.localNPCImmunity[i] = 8;
										Main.npc[i].immune[this.owner] = 0;
										this.localAI[0] += 1f;
									}
									else if (this.type == 618)
									{
										this.localNPCImmunity[i] = 20;
										Main.npc[i].immune[this.owner] = 0;
									}
									else if (this.type == 642)
									{
										this.localNPCImmunity[i] = 10;
										Main.npc[i].immune[this.owner] = 0;
									}
									else if (this.type == 611 || this.type == 612)
									{
										this.localNPCImmunity[i] = 6;
										Main.npc[i].immune[this.owner] = 4;
									}
									else if (this.type == 645)
									{
										this.localNPCImmunity[i] = -1;
										Main.npc[i].immune[this.owner] = 0;
										if (this.ai[1] != -1f)
										{
											this.ai[0] = 0f;
											this.ai[1] = -1f;
											this.netUpdate = true;
										}
									}
									this.numHits++;
									if (this.type == 697)
									{
										if (this.ai[0] >= 42f)
										{
											this.localAI[1] = 1f;
										}
									}
									else if (this.type == 699)
									{
										this.SummonMonkGhast();
									}
									else if (this.type == 706)
									{
										this.damage = (int)((float)this.damage * 0.95f);
									}
								}
							}
						}
					}
				}
				if (this.damage > 0 && Main.player[Main.myPlayer].hostile)
				{
					for (int n = 0; n < 255; n++)
					{
						if (n != this.owner && Main.player[n].active && !Main.player[n].dead && !Main.player[n].immune && Main.player[n].hostile && this.playerImmune[n] <= 0 && (Main.player[Main.myPlayer].team == 0 || Main.player[Main.myPlayer].team != Main.player[n].team) && (!this.ownerHitCheck || this.CanHit(Main.player[n])) && this.Colliding(myRect, Main.player[n].getRect()))
						{
							if (this.aiStyle == 3)
							{
								if (this.ai[0] == 0f)
								{
									this.velocity.X = -this.velocity.X;
									this.velocity.Y = -this.velocity.Y;
									this.netUpdate = true;
								}
								this.ai[0] = 1f;
							}
							else if (this.aiStyle == 16)
							{
								if (this.timeLeft > 3)
								{
									this.timeLeft = 3;
								}
								if (Main.player[n].position.X + (float)(Main.player[n].width / 2) < this.position.X + (float)(this.width / 2))
								{
									this.direction = -1;
								}
								else
								{
									this.direction = 1;
								}
							}
							else if (this.aiStyle == 68)
							{
								if (this.timeLeft > 3)
								{
									this.timeLeft = 3;
								}
								if (Main.player[n].position.X + (float)(Main.player[n].width / 2) < this.position.X + (float)(this.width / 2))
								{
									this.direction = -1;
								}
								else
								{
									this.direction = 1;
								}
							}
							PlayerDeathReason playerDeathReason = PlayerDeathReason.ByProjectile(this.owner, this.whoAmI);
							if (this.type == 41 && this.timeLeft > 1)
							{
								this.timeLeft = 1;
							}
							bool flag6 = false;
							if (this.melee && Main.rand.Next(1, 101) <= Main.player[this.owner].meleeCrit)
							{
								flag6 = true;
							}
							int num31 = Main.DamageVar((float)this.damage);
							if (!Main.player[n].immune)
							{
								this.StatusPvP(n);
							}
							if (this.type != 221 && this.type != 227 && this.type != 614)
							{
								Main.player[this.owner].OnHit(Main.player[n].Center.X, Main.player[n].Center.Y, Main.player[n]);
							}
							int num32 = (int)Main.player[n].Hurt(playerDeathReason, num31, this.direction, true, false, flag6, -1);
							if (num32 > 0 && Main.player[this.owner].ghostHeal && this.friendly && !this.hostile)
							{
								this.ghostHeal(num32, new Vector2(Main.player[n].Center.X, Main.player[n].Center.Y));
							}
							if (this.type == 304 && num32 > 0)
							{
								this.vampireHeal(num32, new Vector2(Main.player[n].Center.X, Main.player[n].Center.Y));
							}
							if (this.melee && Main.player[this.owner].meleeEnchant == 7)
							{
								Projectile.NewProjectile(Main.player[n].Center.X, Main.player[n].Center.Y, Main.player[n].velocity.X, Main.player[n].velocity.Y, 289, 0, 0f, this.owner, 0f, 0f);
							}
							if (Main.netMode != 0)
							{
								NetMessage.SendPlayerHurt(n, playerDeathReason, num31, this.direction, flag6, true, 0, -1, -1);
							}
							this.playerImmune[n] = 40;
							if (this.penetrate > 0)
							{
								this.penetrate--;
								if (this.penetrate == 0)
								{
									break;
								}
							}
							if (this.aiStyle == 7)
							{
								this.ai[0] = 1f;
								this.damage = 0;
								this.netUpdate = true;
							}
							else if (this.aiStyle == 13)
							{
								this.ai[0] = 1f;
								this.netUpdate = true;
							}
							else if (this.aiStyle == 69)
							{
								this.ai[0] = 1f;
								this.netUpdate = true;
							}
						}
					}
				}
			}
			if (this.type == 10 && Main.netMode != 1)
			{
				for (int num33 = 0; num33 < 200; num33++)
				{
					if (Main.npc[num33].active && Main.npc[num33].type == 534)
					{
						Rectangle value5 = new Rectangle((int)Main.npc[num33].position.X, (int)Main.npc[num33].position.Y, Main.npc[num33].width, Main.npc[num33].height);
						if (myRect.Intersects(value5))
						{
							Main.npc[num33].Transform(441);
						}
					}
				}
			}
			if (this.type == 11 && Main.netMode != 1)
			{
				for (int num34 = 0; num34 < 200; num34++)
				{
					if (Main.npc[num34].active)
					{
						if (Main.npc[num34].type == 46 || Main.npc[num34].type == 303)
						{
							Rectangle value6 = new Rectangle((int)Main.npc[num34].position.X, (int)Main.npc[num34].position.Y, Main.npc[num34].width, Main.npc[num34].height);
							if (myRect.Intersects(value6))
							{
								Main.npc[num34].Transform(47);
							}
						}
						else if (Main.npc[num34].type == 55)
						{
							Rectangle value7 = new Rectangle((int)Main.npc[num34].position.X, (int)Main.npc[num34].position.Y, Main.npc[num34].width, Main.npc[num34].height);
							if (myRect.Intersects(value7))
							{
								Main.npc[num34].Transform(57);
							}
						}
						else if (Main.npc[num34].type == 148 || Main.npc[num34].type == 149)
						{
							Rectangle value8 = new Rectangle((int)Main.npc[num34].position.X, (int)Main.npc[num34].position.Y, Main.npc[num34].width, Main.npc[num34].height);
							if (myRect.Intersects(value8))
							{
								Main.npc[num34].Transform(168);
							}
						}
					}
				}
			}
			if (this.type == 463 && Main.netMode != 1)
			{
				for (int num35 = 0; num35 < 200; num35++)
				{
					if (Main.npc[num35].active)
					{
						if (Main.npc[num35].type == 46 || Main.npc[num35].type == 303)
						{
							Rectangle value9 = new Rectangle((int)Main.npc[num35].position.X, (int)Main.npc[num35].position.Y, Main.npc[num35].width, Main.npc[num35].height);
							if (myRect.Intersects(value9))
							{
								Main.npc[num35].Transform(464);
							}
						}
						else if (Main.npc[num35].type == 55)
						{
							Rectangle value10 = new Rectangle((int)Main.npc[num35].position.X, (int)Main.npc[num35].position.Y, Main.npc[num35].width, Main.npc[num35].height);
							if (myRect.Intersects(value10))
							{
								Main.npc[num35].Transform(465);
							}
						}
						else if (Main.npc[num35].type == 148 || Main.npc[num35].type == 149)
						{
							Rectangle value11 = new Rectangle((int)Main.npc[num35].position.X, (int)Main.npc[num35].position.Y, Main.npc[num35].width, Main.npc[num35].height);
							if (myRect.Intersects(value11))
							{
								Main.npc[num35].Transform(470);
							}
						}
					}
				}
			}
			if (Main.netMode != 2 && this.hostile && Main.myPlayer < 255 && this.damage > 0)
			{
				int num36 = -1;
				if (this.type == 455 || this.type == 452 || this.type == 454 || this.type == 462)
				{
					num36 = 1;
				}
				int myPlayer2 = Main.myPlayer;
				if (Main.player[myPlayer2].active && !Main.player[myPlayer2].dead && (!Main.player[myPlayer2].immune || num36 != -1) && this.Colliding(myRect, Main.player[myPlayer2].getRect()))
				{
					int hitDirection2 = this.direction;
					if (Main.player[myPlayer2].position.X + (float)(Main.player[myPlayer2].width / 2) < this.position.X + (float)(this.width / 2))
					{
						hitDirection2 = -1;
					}
					else
					{
						hitDirection2 = 1;
					}
					if (!Main.player[myPlayer2].CanParryAgainst(Main.player[myPlayer2].Hitbox, base.Hitbox, this.velocity))
					{
						int num37 = Main.DamageVar((float)this.damage);
						if (!Main.player[myPlayer2].immune)
						{
							this.StatusPlayer(myPlayer2);
						}
						if (Main.player[myPlayer2].resistCold && this.coldDamage)
						{
							num37 = (int)((float)num37 * 0.7f);
						}
						if (Main.expertMode)
						{
							num37 = (int)((float)num37 * Main.expertDamage);
						}
						Main.player[myPlayer2].Hurt(PlayerDeathReason.ByProjectile(-1, this.whoAmI), num37 * 2, hitDirection2, false, false, false, num36);
						if (this.trap)
						{
							Main.player[myPlayer2].trapDebuffSource = true;
							if (Main.player[myPlayer2].dead)
							{
								AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer2], 4);
							}
						}
					}
					if (true)
					{
						if (this.type == 435 || this.type == 682)
						{
							this.penetrate--;
						}
						if (this.type == 436)
						{
							this.penetrate--;
						}
						if (this.type == 681)
						{
							this.timeLeft = 0;
						}
						if (this.type == 437)
						{
							this.penetrate--;
						}
					}
				}
			}
		}

		// Token: 0x060001C9 RID: 457 RVA: 0x0004978C File Offset: 0x0004798C
		public void FishingCheck()
		{
			int num = (int)(base.Center.X / 16f);
			int num2 = (int)(base.Center.Y / 16f);
			if (Main.tile[num, num2].liquid < 0)
			{
				num2++;
			}
			bool flag = false;
			bool flag2 = false;
			int num3 = num;
			int num4 = num;
			while (num3 > 10 && Main.tile[num3, num2].liquid > 0)
			{
				if (WorldGen.SolidTile(num3, num2))
				{
					break;
				}
				num3--;
			}
			while (num4 < Main.maxTilesX - 10 && Main.tile[num4, num2].liquid > 0 && !WorldGen.SolidTile(num4, num2))
			{
				num4++;
			}
			int num5 = 0;
			for (int i = num3; i <= num4; i++)
			{
				int num6 = num2;
				while (Main.tile[i, num6].liquid > 0 && !WorldGen.SolidTile(i, num6) && num6 < Main.maxTilesY - 10)
				{
					num5++;
					num6++;
					if (Main.tile[i, num6].lava())
					{
						flag = true;
					}
					else if (Main.tile[i, num6].honey())
					{
						flag2 = true;
					}
				}
			}
			if (flag2)
			{
				num5 = (int)((double)num5 * 1.5);
			}
			if (num5 < 75)
			{
				Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.NotEnoughWater");
				return;
			}
			int num7 = Main.player[this.owner].FishingLevel();
			if (num7 == 0)
			{
				return;
			}
			Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", num7);
			if (num7 < 0)
			{
				if (num7 == -1)
				{
					Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
					if ((num < 380 || num > Main.maxTilesX - 380) && num5 > 1000 && !NPC.AnyNPCs(370))
					{
						this.ai[1] = (float)(Main.rand.Next(-180, -60) - 100);
						this.localAI[1] = (float)num7;
						this.netUpdate = true;
					}
				}
				return;
			}
			int num8 = 300;
			float num9 = (float)(Main.maxTilesX / 4200);
			num9 *= num9;
			float num10 = (float)((double)(this.position.Y / 16f - (60f + 10f * num9)) / (Main.worldSurface / 6.0));
			if ((double)num10 < 0.25)
			{
				num10 = 0.25f;
			}
			if (num10 > 1f)
			{
				num10 = 1f;
			}
			num8 = (int)((float)num8 * num10);
			float num11 = (float)num5 / (float)num8;
			if (num11 < 1f)
			{
				num7 = (int)((float)num7 * num11);
			}
			num11 = 1f - num11;
			if (num5 < num8)
			{
				Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FullFishingPower", num7, -Math.Round((double)(num11 * 100f)));
			}
			int num12 = (num7 + 75) / 2;
			if (Main.player[this.owner].wet)
			{
				return;
			}
			if (Main.rand.Next(100) > num12)
			{
				return;
			}
			int num13 = 0;
			int num14;
			if ((double)num2 < Main.worldSurface * 0.5)
			{
				num14 = 0;
			}
			else if ((double)num2 < Main.worldSurface)
			{
				num14 = 1;
			}
			else if ((double)num2 < Main.rockLayer)
			{
				num14 = 2;
			}
			else if (num2 < Main.maxTilesY - 300)
			{
				num14 = 3;
			}
			else
			{
				num14 = 4;
			}
			int expr_37C = 150;
			int num15 = expr_37C / num7;
			int num16 = expr_37C * 2 / num7;
			int num17 = expr_37C * 7 / num7;
			int num18 = expr_37C * 15 / num7;
			int num19 = expr_37C * 30 / num7;
			if (num15 < 2)
			{
				num15 = 2;
			}
			if (num16 < 3)
			{
				num16 = 3;
			}
			if (num17 < 4)
			{
				num17 = 4;
			}
			if (num18 < 5)
			{
				num18 = 5;
			}
			if (num19 < 6)
			{
				num19 = 6;
			}
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			if (Main.rand.Next(num15) == 0)
			{
				flag3 = true;
			}
			if (Main.rand.Next(num16) == 0)
			{
				flag4 = true;
			}
			if (Main.rand.Next(num17) == 0)
			{
				flag5 = true;
			}
			if (Main.rand.Next(num18) == 0)
			{
				flag6 = true;
			}
			if (Main.rand.Next(num19) == 0)
			{
				flag7 = true;
			}
			int num20 = 10;
			if (Main.player[this.owner].cratePotion)
			{
				num20 += 10;
			}
			int num21 = Main.anglerQuestItemNetIDs[Main.anglerQuest];
			if (Main.player[this.owner].HasItem(num21))
			{
				num21 = -1;
			}
			if (Main.anglerQuestFinished)
			{
				num21 = -1;
			}
			if (flag)
			{
				if (!ItemID.Sets.CanFishInLava[Main.player[this.owner].HeldItem.type])
				{
					return;
				}
				if (flag7)
				{
					num13 = 2331;
				}
				else if (flag6)
				{
					num13 = 2312;
				}
				else if (flag5)
				{
					num13 = 2315;
				}
			}
			else if (flag2)
			{
				if (flag5 || (flag4 && Main.rand.Next(2) == 0))
				{
					num13 = 2314;
				}
				else if (flag4 && num21 == 2451)
				{
					num13 = 2451;
				}
			}
			else if (Main.rand.Next(50) > num7 && Main.rand.Next(50) > num7 && num5 < num8)
			{
				num13 = Main.rand.Next(2337, 2340);
			}
			else if (Main.rand.Next(100) < num20)
			{
				if (flag6 | flag7)
				{
					num13 = 2336;
				}
				else if (flag5 && Main.player[this.owner].ZoneCorrupt)
				{
					num13 = 3203;
				}
				else if (flag5 && Main.player[this.owner].ZoneCrimson)
				{
					num13 = 3204;
				}
				else if (flag5 && Main.player[this.owner].ZoneHoly)
				{
					num13 = 3207;
				}
				else if (flag5 && Main.player[this.owner].ZoneDungeon)
				{
					num13 = 3205;
				}
				else if (flag5 && Main.player[this.owner].ZoneJungle)
				{
					num13 = 3208;
				}
				else if (flag5 && num14 == 0)
				{
					num13 = 3206;
				}
				else if (flag4)
				{
					num13 = 2335;
				}
				else
				{
					num13 = 2334;
				}
			}
			else if (flag7 && Main.rand.Next(5) == 0)
			{
				num13 = 2423;
			}
			else if (flag7 && Main.rand.Next(5) == 0)
			{
				num13 = 3225;
			}
			else if (flag7 && Main.rand.Next(10) == 0)
			{
				num13 = 2420;
			}
			else if (((!flag7 && !flag6) & flag4) && Main.rand.Next(5) == 0)
			{
				num13 = 3196;
			}
			else
			{
				bool flag8 = Main.player[this.owner].ZoneCorrupt;
				bool flag9 = Main.player[this.owner].ZoneCrimson;
				if (flag8 & flag9)
				{
					if (Main.rand.Next(2) == 0)
					{
						flag9 = false;
					}
					else
					{
						flag8 = false;
					}
				}
				if (flag8)
				{
					if (flag7 && Main.hardMode && Main.player[this.owner].ZoneSnow && num14 == 3 && Main.rand.Next(3) != 0)
					{
						num13 = 2429;
					}
					else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
					{
						num13 = 3210;
					}
					else if (flag5)
					{
						num13 = 2330;
					}
					else if (flag4 && num21 == 2454)
					{
						num13 = 2454;
					}
					else if (flag4 && num21 == 2485)
					{
						num13 = 2485;
					}
					else if (flag4 && num21 == 2457)
					{
						num13 = 2457;
					}
					else if (flag4)
					{
						num13 = 2318;
					}
				}
				else if (flag9)
				{
					if (flag7 && Main.hardMode && Main.player[this.owner].ZoneSnow && num14 == 3 && Main.rand.Next(3) != 0)
					{
						num13 = 2429;
					}
					else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
					{
						num13 = 3211;
					}
					else if (flag4 && num21 == 2477)
					{
						num13 = 2477;
					}
					else if (flag4 && num21 == 2463)
					{
						num13 = 2463;
					}
					else if (flag4)
					{
						num13 = 2319;
					}
					else if (flag3)
					{
						num13 = 2305;
					}
				}
				else if (Main.player[this.owner].ZoneHoly)
				{
					if (flag7 && Main.hardMode && Main.player[this.owner].ZoneSnow && num14 == 3 && Main.rand.Next(3) != 0)
					{
						num13 = 2429;
					}
					else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
					{
						num13 = 3209;
					}
					else if (num14 > 1 & flag6)
					{
						num13 = 2317;
					}
					else if ((num14 > 1 & flag5) && num21 == 2465)
					{
						num13 = 2465;
					}
					else if ((num14 < 2 & flag5) && num21 == 2468)
					{
						num13 = 2468;
					}
					else if (flag5)
					{
						num13 = 2310;
					}
					else if (flag4 && num21 == 2471)
					{
						num13 = 2471;
					}
					else if (flag4)
					{
						num13 = 2307;
					}
				}
				if (num13 == 0 && Main.player[this.owner].ZoneSnow)
				{
					if ((num14 < 2 & flag4) && num21 == 2467)
					{
						num13 = 2467;
					}
					else if ((num14 == 1 & flag4) && num21 == 2470)
					{
						num13 = 2470;
					}
					else if ((num14 >= 2 & flag4) && num21 == 2484)
					{
						num13 = 2484;
					}
					else if ((num14 > 1 & flag4) && num21 == 2466)
					{
						num13 = 2466;
					}
					else if ((flag3 && Main.rand.Next(12) == 0) || (flag4 && Main.rand.Next(6) == 0))
					{
						num13 = 3197;
					}
					else if (flag4)
					{
						num13 = 2306;
					}
					else if (flag3)
					{
						num13 = 2299;
					}
					else if (num14 > 1 && Main.rand.Next(3) == 0)
					{
						num13 = 2309;
					}
				}
				if (num13 == 0 && Main.player[this.owner].ZoneJungle)
				{
					if ((num14 == 1 & flag4) && num21 == 2452)
					{
						num13 = 2452;
					}
					else if ((num14 == 1 & flag4) && num21 == 2483)
					{
						num13 = 2483;
					}
					else if ((num14 == 1 & flag4) && num21 == 2488)
					{
						num13 = 2488;
					}
					else if ((num14 >= 1 & flag4) && num21 == 2486)
					{
						num13 = 2486;
					}
					else if (num14 > 1 & flag4)
					{
						num13 = 2311;
					}
					else if (flag4)
					{
						num13 = 2313;
					}
					else if (flag3)
					{
						num13 = 2302;
					}
				}
				if (num13 == 0 && Main.shroomTiles > 200 && flag4 && num21 == 2475)
				{
					num13 = 2475;
				}
				if (num13 == 0)
				{
					if (num14 <= 1 && (num < 380 || num > Main.maxTilesX - 380) && num5 > 1000)
					{
						if (flag6 && Main.rand.Next(2) == 0)
						{
							num13 = 2341;
						}
						else if (flag6)
						{
							num13 = 2342;
						}
						else if (flag5 && Main.rand.Next(5) == 0)
						{
							num13 = 2438;
						}
						else if (flag5 && Main.rand.Next(2) == 0)
						{
							num13 = 2332;
						}
						else if (flag4 && num21 == 2480)
						{
							num13 = 2480;
						}
						else if (flag4 && num21 == 2481)
						{
							num13 = 2481;
						}
						else if (flag4)
						{
							num13 = 2316;
						}
						else if (flag3 && Main.rand.Next(2) == 0)
						{
							num13 = 2301;
						}
						else if (flag3)
						{
							num13 = 2300;
						}
						else
						{
							num13 = 2297;
						}
					}
					else
					{
						int arg_C7E_0 = Main.sandTiles;
					}
				}
				if (num13 == 0)
				{
					if ((num14 < 2 & flag4) && num21 == 2461)
					{
						num13 = 2461;
					}
					else if ((num14 == 0 & flag4) && num21 == 2453)
					{
						num13 = 2453;
					}
					else if ((num14 == 0 & flag4) && num21 == 2473)
					{
						num13 = 2473;
					}
					else if ((num14 == 0 & flag4) && num21 == 2476)
					{
						num13 = 2476;
					}
					else if ((num14 < 2 & flag4) && num21 == 2458)
					{
						num13 = 2458;
					}
					else if ((num14 < 2 & flag4) && num21 == 2459)
					{
						num13 = 2459;
					}
					else if (num14 == 0 & flag4)
					{
						num13 = 2304;
					}
					else if (((num14 > 0 && num14 < 3) & flag4) && num21 == 2455)
					{
						num13 = 2455;
					}
					else if ((num14 == 1 & flag4) && num21 == 2479)
					{
						num13 = 2479;
					}
					else if ((num14 == 1 & flag4) && num21 == 2456)
					{
						num13 = 2456;
					}
					else if ((num14 == 1 & flag4) && num21 == 2474)
					{
						num13 = 2474;
					}
					else if ((num14 > 1 & flag5) && Main.rand.Next(5) == 0)
					{
						if (Main.hardMode && Main.rand.Next(2) == 0)
						{
							num13 = 2437;
						}
						else
						{
							num13 = 2436;
						}
					}
					else if (num14 > 1 & flag7)
					{
						num13 = 2308;
					}
					else if ((num14 > 1 & flag6) && Main.rand.Next(2) == 0)
					{
						num13 = 2320;
					}
					else if (num14 > 1 & flag5)
					{
						num13 = 2321;
					}
					else if ((num14 > 1 & flag4) && num21 == 2478)
					{
						num13 = 2478;
					}
					else if ((num14 > 1 & flag4) && num21 == 2450)
					{
						num13 = 2450;
					}
					else if ((num14 > 1 & flag4) && num21 == 2464)
					{
						num13 = 2464;
					}
					else if ((num14 > 1 & flag4) && num21 == 2469)
					{
						num13 = 2469;
					}
					else if ((num14 > 2 & flag4) && num21 == 2462)
					{
						num13 = 2462;
					}
					else if ((num14 > 2 & flag4) && num21 == 2482)
					{
						num13 = 2482;
					}
					else if ((num14 > 2 & flag4) && num21 == 2472)
					{
						num13 = 2472;
					}
					else if ((num14 > 2 & flag4) && num21 == 2460)
					{
						num13 = 2460;
					}
					else if ((num14 > 1 & flag4) && Main.rand.Next(4) != 0)
					{
						num13 = 2303;
					}
					else if (num14 > 1 && ((flag4 | flag3) || Main.rand.Next(4) == 0))
					{
						if (Main.rand.Next(4) == 0)
						{
							num13 = 2303;
						}
						else
						{
							num13 = 2309;
						}
					}
					else if (flag4 && num21 == 2487)
					{
						num13 = 2487;
					}
					else if (num5 > 1000 & flag3)
					{
						num13 = 2298;
					}
					else
					{
						num13 = 2290;
					}
				}
			}
			if (num13 > 0)
			{
				if (Main.player[this.owner].sonarPotion)
				{
					Item expr_100D = new Item();
					expr_100D.SetDefaults(num13, false);
					expr_100D.position = this.position;
					ItemText.NewText(expr_100D, 1, true, false);
				}
				float num22 = (float)num7;
				this.ai[1] = (float)Main.rand.Next(-240, -90) - num22;
				this.localAI[1] = (float)num13;
				this.netUpdate = true;
			}
		}

		// Token: 0x060001EB RID: 491 RVA: 0x000BD3C0 File Offset: 0x000BB5C0
		public Color GetAlpha(Color newColor)
		{
			if (this.type == 270)
			{
				return new Color(255, 255, 255, Main.rand.Next(0, 255));
			}
			int num;
			int num2;
			int num3;
			if (this.type == 650)
			{
				num = (int)((double)newColor.R * 1.5);
				num2 = (int)((double)newColor.G * 1.5);
				num3 = (int)((double)newColor.B * 1.5);
				if (num > 255)
				{
				}
				if (num2 > 255)
				{
				}
				if (num3 > 255)
				{
				}
			}
			else
			{
				if (this.type == 604 || this.type == 631)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
				}
				if (this.type == 636)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 64 - this.alpha / 4);
				}
				if (this.type == 673 || this.type == 706)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 180 - this.alpha / 2 - this.alpha / 4);
				}
				if (this.type == 603 || this.type == 633)
				{
					return new Color(255, 255, 255, 200);
				}
				if (this.type == 623 || (this.type >= 625 && this.type <= 628) || this.type == 710)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
				}
				if (this.type == 645 || this.type == 643)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 127 - this.alpha / 2);
				}
				if (this.type == 611)
				{
					return new Color(255, 255, 255, 200);
				}
				if (this.type == 640 || this.type == 644 || this.type == 658)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
				}
				if (this.type == 612)
				{
					return new Color(255, 255, 255, 127);
				}
				if (this.aiStyle == 105)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
				}
				if (this.type == 554)
				{
					return new Color(200, 200, 200, 200);
				}
				if (this.type == 601)
				{
					return PortalHelper.GetPortalColor(this.owner, (int)this.ai[0]);
				}
				if (this.type == 602)
				{
					Color portalColor = PortalHelper.GetPortalColor(this.owner, (int)this.ai[1]);
					portalColor.A = 227;
					return portalColor;
				}
				if (this.type == 585)
				{
					byte a = newColor.A;
					newColor = Color.Lerp(newColor, Color.White, 0.5f);
					newColor.A = a;
					return newColor;
				}
				if (this.type == 573 || this.type == 578 || this.type == 579 || this.type == 617 || this.type == 641 || this.type == 707)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
				}
				if (this.type == 9 || this.type == 490)
				{
					return Color.White;
				}
				if (this.type == 575 || this.type == 596 || this.type == 659)
				{
					if (this.timeLeft < 30)
					{
						float num4 = (float)this.timeLeft / 30f;
						this.alpha = (int)(255f - 255f * num4);
					}
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 128 - this.alpha / 2);
				}
				if (this.type == 546)
				{
					return new Color(255, 200, 255, 200);
				}
				if (this.type == 553)
				{
					return new Color(255, 255, 200, 200);
				}
				if (this.type == 540)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
				}
				if (this.type == 498)
				{
					return new Color(255, 100, 20, 200);
				}
				if (this.type == 538)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
				}
				if (this.type == 518)
				{
					float num5 = 1f - (float)this.alpha / 255f;
					return new Color((int)(200f * num5), (int)(200f * num5), (int)(200f * num5), (int)(100f * num5));
				}
				if (this.type == 518 || this.type == 595)
				{
					Color value = Color.Lerp(newColor, Color.White, 0.85f);
					value.A = 128;
					return value * (1f - (float)this.alpha / 255f);
				}
				if (this.type == 536 || this.type == 607)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 63 - this.alpha / 4);
				}
				if (this.type == 591)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 63 - this.alpha / 4);
				}
				if (this.type == 493 || this.type == 494)
				{
					return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
				}
				if (this.type == 492)
				{
					return new Color(255, 255, 255, 255);
				}
				if (this.type == 491)
				{
					return new Color(255, 255, 255, 255);
				}
				if (this.type == 485 || this.type == 502)
				{
					return new Color(255, 255, 255, 200);
				}
				if (this.type == 488)
				{
					return new Color(255, 255, 255, 255);
				}
				if (this.type == 477 || this.type == 478 || this.type == 479)
				{
					if (this.alpha == 0)
					{
						return new Color(255, 255, 255, 200);
					}
					return new Color(0, 0, 0, 0);
				}
				else
				{
					if (this.type == 473)
					{
						return new Color(255, 255, 255, 255);
					}
					if (this.type == 50 || this.type == 53 || this.type == 515)
					{
						return new Color(255, 255, 255, 0);
					}
					if (this.type == 92)
					{
						return new Color(255, 255, 255, 0);
					}
					if (this.type == 91)
					{
						return new Color(200, 200, 200, 0);
					}
					if (this.type == 34 || this.type == 15 || this.type == 93 || this.type == 94 || this.type == 95 || this.type == 96 || this.type == 253 || this.type == 258 || (this.type == 102 && this.alpha < 255))
					{
						return new Color(200, 200, 200, 25);
					}
					if (this.type == 465)
					{
						return new Color(255, 255, 255, 0) * (1f - (float)this.alpha / 255f);
					}
					if (this.type == 503)
					{
						Color arg_A64_0 = Color.Lerp(newColor, Color.White, 0.5f) * (1f - (float)this.alpha / 255f);
						Color value2 = Color.Lerp(Color.Purple, Color.White, 0.33f);
						float amount = 0.25f + (float)Math.Cos((double)this.localAI[0]) * 0.25f;
						return Color.Lerp(arg_A64_0, value2, amount);
					}
					if (this.type == 467)
					{
						return new Color(255, 255, 255, 255) * (1f - (float)this.alpha / 255f);
					}
					if (this.type == 694 || this.type == 695 || this.type == 696)
					{
						return new Color(255, 255, 255, 127) * (1f - (float)this.alpha / 255f);
					}
					if (this.type == 634 || this.type == 635)
					{
						return new Color(255, 255, 255, 127) * this.Opacity;
					}
					if (this.type == 671)
					{
						return new Color(255, 255, 255, 255) * this.Opacity;
					}
					if (this.type == 664 || this.type == 666 || this.type == 668)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.5f);
						return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 200) * this.Opacity;
					}
					if (this.type == 451)
					{
						return new Color(255, 255, 255, 200) * ((255f - (float)this.alpha) / 255f);
					}
					if (this.type == 684)
					{
						return new Color(255, 255, 255, 200) * ((255f - (float)this.alpha) / 255f);
					}
					if (this.type == 454 || this.type == 452)
					{
						return new Color(255, 255, 255, 255) * (1f - (float)this.alpha / 255f);
					}
					if (this.type == 464)
					{
						return new Color(255, 255, 255, 255) * ((255f - (float)this.alpha) / 255f);
					}
					if (this.type == 450)
					{
						return new Color(200, 200, 200, 255 - this.alpha);
					}
					if (this.type == 459 || this.type == 709)
					{
						return new Color(255, 255, 255, 200);
					}
					if (this.type == 447)
					{
						return new Color(255, 255, 255, 200);
					}
					if (this.type == 446)
					{
						return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)this.alpha / 255f);
					}
					if (this.type == 691 || this.type == 692 || this.type == 693)
					{
						return Color.Lerp(newColor, Color.White, 0.4f) * (1f - (float)this.alpha / 255f);
					}
					if (this.type >= 646 && this.type <= 649)
					{
						return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)this.alpha / 255f);
					}
					if (this.type == 445)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)this.alpha / 255f);
					}
					if (this.type == 440 || this.type == 449 || this.type == 606)
					{
						num = 255 - this.alpha;
						num2 = 255 - this.alpha;
						num3 = 255 - this.alpha;
					}
					else
					{
						if (this.type == 444)
						{
							return newColor * (1f - (float)this.alpha / 255f);
						}
						if (this.type == 443 || this.type == 675 || this.type == 686 || this.type == 711)
						{
							return new Color(255, 255, 255, 128) * (1f - (float)this.alpha / 255f);
						}
						if (this.type == 676)
						{
							return newColor * this.Opacity;
						}
						if (this.type == 438)
						{
							return new Color(255, 255, 255, 128) * (1f - (float)this.alpha / 255f);
						}
						if (this.type == 592)
						{
							return new Color(255, 255, 255, 128) * (1f - (float)this.alpha / 255f);
						}
						if (this.type == 437 || this.type == 700)
						{
							return new Color(255, 255, 255, 0) * (1f - (float)this.alpha / 255f);
						}
						if (this.type == 462)
						{
							return new Color(255, 255, 255, 128) * (1f - (float)this.alpha / 255f);
						}
						if (this.type == 352)
						{
							return new Color(250, 250, 250, this.alpha);
						}
						if (this.type == 435)
						{
							newColor = Color.Lerp(newColor, Color.White, 0.8f);
							return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 25);
						}
						if (this.type == 682)
						{
							newColor = Color.Lerp(newColor, Color.White, 0.8f);
							return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 127);
						}
						if (this.type == 436)
						{
							newColor = Color.Lerp(newColor, Color.White, 0.8f);
							return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 25);
						}
						if (this.type == 409)
						{
							return new Color(250, 250, 250, 200);
						}
						if (this.type == 348 || this.type == 349)
						{
							return new Color(200, 200, 200, this.alpha);
						}
						if (this.type == 337)
						{
							return new Color(250, 250, 250, 150);
						}
						if (this.type >= 424 && this.type <= 426)
						{
							byte b = 150;
							if (newColor.R < b)
							{
								newColor.R = b;
							}
							if (newColor.G < b)
							{
								newColor.G = b;
							}
							if (newColor.B < b)
							{
								newColor.B = b;
							}
							return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 255);
						}
						if (this.type == 431 || this.type == 432)
						{
							return new Color(250, 250, 250, 255 - this.alpha);
						}
						if (this.type == 343 || this.type == 344)
						{
							float num6 = 1f - (float)this.alpha / 255f;
							return new Color((int)(250f * num6), (int)(250f * num6), (int)(250f * num6), (int)(100f * num6));
						}
						if (this.type == 332)
						{
							return new Color(255, 255, 255, 255);
						}
						if (this.type == 329)
						{
							return new Color(200, 200, 200, 50);
						}
						if (this.type >= 326 && this.type <= 328)
						{
							return Color.Transparent;
						}
						if (this.type >= 400 && this.type <= 402)
						{
							return Color.Transparent;
						}
						if (this.type == 324 && this.frame >= 6 && this.frame <= 9)
						{
							return new Color(255, 255, 255, 255);
						}
						if (this.type == 16)
						{
							return new Color(255, 255, 255, 0);
						}
						if (this.type == 321)
						{
							return new Color(200, 200, 200, 0);
						}
						if (this.type == 76 || this.type == 77 || this.type == 78)
						{
							return new Color(255, 255, 255, 0);
						}
						if (this.type == 308)
						{
							return new Color(200, 200, 255, 125);
						}
						if (this.type == 263)
						{
							if (this.timeLeft < 255)
							{
								return new Color(255, 255, 255, (int)((byte)this.timeLeft));
							}
							return new Color(255, 255, 255, 255);
						}
						else if (this.type == 274)
						{
							if (this.timeLeft < 85)
							{
								byte b2 = (byte)(this.timeLeft * 3);
								byte a2 = (byte)(100f * ((float)b2 / 255f));
								return new Color((int)b2, (int)b2, (int)b2, (int)a2);
							}
							return new Color(255, 255, 255, 100);
						}
						else
						{
							if (this.type == 5)
							{
								return new Color(255, 255, 255, 0);
							}
							if (this.type == 300 || this.type == 301)
							{
								return new Color(250, 250, 250, 50);
							}
							if (this.type == 712)
							{
								return Color.Lerp(newColor, Color.White, 0.4f) * this.Opacity;
							}
							if (this.type == 304)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, (int)((byte)((float)(255 - this.alpha) / 3f)));
							}
							if (this.type == 116 || this.type == 132 || this.type == 156 || this.type == 157 || this.type == 157 || this.type == 173)
							{
								if (this.localAI[1] >= 15f)
								{
									return new Color(255, 255, 255, this.alpha);
								}
								if (this.localAI[1] < 5f)
								{
									return Color.Transparent;
								}
								int expr_164C = (int)((this.localAI[1] - 5f) / 10f * 255f);
								return new Color(expr_164C, expr_164C, expr_164C, expr_164C);
							}
							else
							{
								if (this.type == 254)
								{
									if (this.timeLeft < 30)
									{
										float num7 = (float)this.timeLeft / 30f;
										this.alpha = (int)(255f - 255f * num7);
									}
									return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
								}
								if (this.type == 265 || this.type == 355)
								{
									if (this.alpha > 0)
									{
										return Color.Transparent;
									}
									return new Color(255, 255, 255, 0);
								}
								else if (this.type == 270 && this.ai[0] >= 0f)
								{
									if (this.alpha > 0)
									{
										return Color.Transparent;
									}
									return new Color(255, 255, 255, 200);
								}
								else if (this.type == 257)
								{
									if (this.alpha > 200)
									{
										return Color.Transparent;
									}
									return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
								}
								else if (this.type == 259)
								{
									if (this.alpha > 200)
									{
										return Color.Transparent;
									}
									return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
								}
								else
								{
									if (this.type >= 150 && this.type <= 152)
									{
										return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
									}
									if (this.type == 250)
									{
										return Color.Transparent;
									}
									if (this.type == 251)
									{
										num = 255 - this.alpha;
										num2 = 255 - this.alpha;
										num3 = 255 - this.alpha;
										return new Color(num, num2, num3, 0);
									}
									if (this.type == 131)
									{
										return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
									}
									if (this.type == 211)
									{
										return new Color(255, 255, 255, 0);
									}
									if (this.type == 229)
									{
										return new Color(255, 255, 255, 50);
									}
									if (this.type == 221)
									{
										return new Color(255, 255, 255, 200);
									}
									if (this.type == 20)
									{
										if (this.alpha <= 150)
										{
											return new Color(255, 255, 255, 0);
										}
										return new Color(0, 0, 0, 0);
									}
									else if (this.type == 207)
									{
										num = 255 - this.alpha;
										num2 = 255 - this.alpha;
										num3 = 255 - this.alpha;
									}
									else if (this.type == 242)
									{
										if (this.alpha < 140)
										{
											return new Color(255, 255, 255, 100);
										}
										return Color.Transparent;
									}
									else
									{
										if (this.type == 638)
										{
											return new Color(255, 255, 255, 100) * this.Opacity;
										}
										if (this.type == 660)
										{
											return new Color(150, 255, 255, 0) * this.Opacity;
										}
										if (this.type == 209)
										{
											num = (int)newColor.R - this.alpha;
											num2 = (int)newColor.G - this.alpha;
											num3 = (int)newColor.B - this.alpha / 2;
										}
										else
										{
											if (this.type == 130)
											{
												return new Color(255, 255, 255, 175);
											}
											if (this.type == 182)
											{
												return new Color(255, 255, 255, 200);
											}
											if (this.type == 226)
											{
												num = 255;
												num2 = 255;
												num3 = 255;
												float num8 = (float)Main.mouseTextColor / 200f - 0.3f;
												num = (int)((float)num * num8);
												num2 = (int)((float)num2 * num8);
												num3 = (int)((float)num3 * num8);
												num += 50;
												if (num > 255)
												{
													num = 255;
												}
												num2 += 50;
												if (num2 > 255)
												{
													num2 = 255;
												}
												num3 += 50;
												if (num3 > 255)
												{
													num3 = 255;
												}
												return new Color(num, num2, num3, 200);
											}
											if (this.type == 227)
											{
												num2 = (num = (num3 = 255));
												float num9 = (float)Main.mouseTextColor / 100f - 1.6f;
												num = (int)((float)num * num9);
												num2 = (int)((float)num2 * num9);
												num3 = (int)((float)num3 * num9);
												int a3 = (int)(100f * num9);
												num += 50;
												if (num > 255)
												{
													num = 255;
												}
												num2 += 50;
												if (num2 > 255)
												{
													num2 = 255;
												}
												num3 += 50;
												if (num3 > 255)
												{
													num3 = 255;
												}
												return new Color(num, num2, num3, a3);
											}
											if (this.type == 114 || this.type == 115)
											{
												if (this.localAI[1] >= 15f)
												{
													return new Color(255, 255, 255, this.alpha);
												}
												if (this.localAI[1] < 5f)
												{
													return Color.Transparent;
												}
												int expr_1C41 = (int)((this.localAI[1] - 5f) / 10f * 255f);
												return new Color(expr_1C41, expr_1C41, expr_1C41, expr_1C41);
											}
											else if (this.type == 83 || this.type == 88 || this.type == 89 || this.type == 90 || this.type == 100 || this.type == 104 || this.type == 279 || (this.type >= 283 && this.type <= 287))
											{
												if (this.alpha < 200)
												{
													return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
												}
												return Color.Transparent;
											}
											else
											{
												if (this.type == 34 || this.type == 35 || this.type == 15 || this.type == 19 || this.type == 44 || this.type == 45)
												{
													return Color.White;
												}
												if (this.type == 79)
												{
													num = Main.DiscoR;
													num2 = Main.DiscoG;
													num3 = Main.DiscoB;
													return default(Color);
												}
												if (this.type == 9 || this.type == 15 || this.type == 34 || this.type == 50 || this.type == 53 || this.type == 76 || this.type == 77 || this.type == 78 || this.type == 92 || this.type == 91)
												{
													num = (int)newColor.R - this.alpha / 3;
													num2 = (int)newColor.G - this.alpha / 3;
													num3 = (int)newColor.B - this.alpha / 3;
												}
												else
												{
													if (this.type == 18)
													{
														return new Color(255, 255, 255, 50);
													}
													if (this.type == 16 || this.type == 44 || this.type == 45)
													{
														num = (int)newColor.R;
														num2 = (int)newColor.G;
														num3 = (int)newColor.B;
													}
													else if (this.type == 12 || this.type == 72 || this.type == 86 || this.type == 87)
													{
														return new Color(255, 255, 255, (int)newColor.A - this.alpha);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			float num10 = (float)(255 - this.alpha) / 255f;
			num = (int)((float)newColor.R * num10);
			num2 = (int)((float)newColor.G * num10);
			num3 = (int)((float)newColor.B * num10);
			int num11 = (int)newColor.A - this.alpha;
			if (num11 < 0)
			{
				num11 = 0;
			}
			if (num11 > 255)
			{
				num11 = 255;
			}
			return new Color(num, num2, num3, num11);
		}

		// Token: 0x060001CC RID: 460 RVA: 0x0004AC1B File Offset: 0x00048E1B
		public static int GetByUUID(int owner, float uuid)
		{
			return Projectile.GetByUUID(owner, (int)uuid);
		}

		// Token: 0x060001CD RID: 461 RVA: 0x0004AC28 File Offset: 0x00048E28
		public static int GetByUUID(int owner, int uuid)
		{
			if (uuid < 0 || uuid >= 1000 || owner < 0 || owner >= 255)
			{
				return -1;
			}
			int num = Main.projectileIdentity[owner, uuid];
			if (num >= 0 && Main.projectile[num].active)
			{
				return num;
			}
			return -1;
		}

		// Token: 0x060001B5 RID: 437 RVA: 0x0003CA20 File Offset: 0x0003AC20
		public static int GetNextSlot()
		{
			int result = 1000;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active)
				{
					result = i;
					break;
				}
			}
			return result;
		}

		// Token: 0x060001CB RID: 459 RVA: 0x0004A87C File Offset: 0x00048A7C
		public float GetPrismHue(float indexing)
		{
			if (Main.player[this.owner].active)
			{
				switch (Main.player[this.owner].name)
				{
					case "Tsuki":
					case "Yoraiz0r":
						return 0.85f;
					case "Ghostar":
						return 0.33f;
					case "Devalaous":
						return (float)(0.660000026226044 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.100000001490116);
					case "Leinfors":
						return 0.77f;
					case "Aeroblop":
						return (float)(0.25 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.100000001490116);
					case "Doylee":
						return 0.0f;
					case "Darkhalis":
					case "Arkhalis":
						return (float)(0.75 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.0700000002980232);
					case "Nike Leon":
						return (float)(0.0750000029802322 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.0700000002980232);
					case "Suweeka":
						return (float)(0.5 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.180000007152557);
					case "W1K":
						return (float)(0.75 + Math.Cos(Main.time / 120.0 * 6.28318548202515) * 0.0500000007450581);
					case "Grox The Great":
						return (float)(0.310000002384186 + Math.Cos(Main.time / 120.0 * 6.28318548202515) * 0.0299999993294477);
					case "Random":
						return Main.rand.NextFloat();
				}
			}
			return (float)(int)indexing / 6f;
		}

		// Token: 0x060001C5 RID: 453 RVA: 0x000089B0 File Offset: 0x00006BB0
		public Rectangle getRect()
		{
			return new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
		}

		// Token: 0x060001BB RID: 443 RVA: 0x0003E4DC File Offset: 0x0003C6DC
		public void ghostHeal(int dmg, Vector2 Position)
		{
			float num = 0.2f;
			num -= (float)this.numHits * 0.05f;
			if (num <= 0f)
			{
				return;
			}
			float num2 = (float)dmg * num;
			if ((int)num2 <= 0)
			{
				return;
			}
			if (Main.player[Main.myPlayer].lifeSteal <= 0f)
			{
				return;
			}
			Main.player[Main.myPlayer].lifeSteal -= num2;
			if (!this.magic)
			{
				return;
			}
			float num3 = 0f;
			int num4 = this.owner;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && ((!Main.player[this.owner].hostile && !Main.player[i].hostile) || Main.player[this.owner].team == Main.player[i].team) && Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - this.position.X + (float)(this.width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - this.position.Y + (float)(this.height / 2)) < 1200f && (float)(Main.player[i].statLifeMax2 - Main.player[i].statLife) > num3)
				{
					num3 = (float)(Main.player[i].statLifeMax2 - Main.player[i].statLife);
					num4 = i;
				}
			}
			Projectile.NewProjectile(Position.X, Position.Y, 0f, 0f, 298, 0, 0f, this.owner, (float)num4, num2);
		}

		// Token: 0x060001BA RID: 442 RVA: 0x0003E2A4 File Offset: 0x0003C4A4
		public void ghostHurt(int dmg, Vector2 Position)
		{
			if (!this.magic)
			{
				return;
			}
			int num = this.damage / 2;
			if (dmg / 2 <= 1)
			{
				return;
			}
			int num2 = 1000;
			if (Main.player[Main.myPlayer].ghostDmg > (float)num2)
			{
				return;
			}
			Main.player[Main.myPlayer].ghostDmg += (float)num;
			int[] array = new int[200];
			int num3 = 0;
			//TODO: 看看这是做什么的   //			new int[200];
			int num4 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].CanBeChasedBy(this, false))
				{
					float num5 = Math.Abs(Main.npc[i].position.X + (float)(Main.npc[i].width / 2) - this.position.X + (float)(this.width / 2)) + Math.Abs(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) - this.position.Y + (float)(this.height / 2));
					if (num5 < 800f)
					{
						if (Collision.CanHit(this.position, 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height) && num5 > 50f)
						{
							array[num4] = i;
							num4++;
						}
						else if (num4 == 0)
						{
							array[num3] = i;
							num3++;
						}
					}
				}
			}
			if (num3 == 0 && num4 == 0)
			{
				return;
			}
			int num6;
			if (num4 > 0)
			{
				num6 = array[Main.rand.Next(num4)];
			}
			else
			{
				num6 = array[Main.rand.Next(num3)];
			}
			float arg_1E9_0 = 4f;
			float num7 = (float)Main.rand.Next(-100, 101);
			float num8 = (float)Main.rand.Next(-100, 101);
			float num9 = (float)Math.Sqrt((double)(num7 * num7 + num8 * num8));
			num9 = arg_1E9_0 / num9;
			num7 *= num9;
			num8 *= num9;
			Projectile.NewProjectile(Position.X, Position.Y, num7, num8, 356, num, 0f, this.owner, (float)num6, 0f);
		}

		// Token: 0x060001C7 RID: 455 RVA: 0x00045FCC File Offset: 0x000441CC
		private unsafe void HandleMovement(Vector2 wetVelocity, out int overrideWidth, out int overrideHeight)
		{
			bool flag = false;
			overrideWidth = -1;
			overrideHeight = -1;
			bool flag2 = false;
			bool? flag3 = ProjectileID.Sets.ForcePlateDetection[this.type];
			bool flag4 = flag3.HasValue && !flag3.Value;
			bool flag5 = flag3.HasValue && flag3.Value;
			if (this.tileCollide)
			{
				Vector2 velocity = this.velocity;
				bool flag6 = true;
				Vector2? vector = null;
				if (Main.projPet[this.type])
				{
					flag6 = false;
					if (Main.player[this.owner].position.Y + (float)Main.player[this.owner].height - 12f > this.position.Y + (float)this.height)
					{
						flag6 = true;
					}
				}
				if (this.type == 500)
				{
					flag6 = false;
					if (Main.player[this.owner].Bottom.Y > base.Bottom.Y + 4f)
					{
						flag6 = true;
					}
				}
				if (this.type == 653)
				{
					flag6 = false;
					if (Main.player[this.owner].Bottom.Y > base.Bottom.Y + 4f)
					{
						flag6 = true;
					}
				}
				if (this.aiStyle == 62)
				{
					flag6 = true;
				}
				if (this.aiStyle == 66)
				{
					flag6 = true;
				}
				if (this.type == 317)
				{
					flag6 = true;
				}
				if (this.type == 373)
				{
					flag6 = true;
				}
				if (this.aiStyle == 53)
				{
					flag6 = false;
				}
				if (this.type == 9 || this.type == 12 || this.type == 15 || this.type == 13 || this.type == 31 || this.type == 39 || this.type == 40)
				{
					flag6 = false;
				}
				if (this.type == 24)
				{
					flag6 = false;
				}
				int num = this.type;
				switch (num)
				{
					case 663:
					case 665:
					case 667:
						break;
					case 664:
					case 666:
						goto IL_214;
					default:
						if (num - 677 > 2 && num - 688 > 5)
						{
							goto IL_214;
						}
						break;
				}
				flag6 = false;
				IL_214:
				if (this.aiStyle == 29 || this.type == 28 || this.aiStyle == 49)
				{
					overrideWidth = this.width - 8;
					overrideHeight = this.height - 8;
				}
				else if (this.type == 250 || this.type == 267 || this.type == 297 || this.type == 323 || this.type == 3 || this.type == 711)
				{
					overrideWidth = 6;
					overrideHeight = 6;
				}
				else if (this.type == 308)
				{
					overrideWidth = 26;
					overrideHeight = this.height;
				}
				else if (this.type == 663 || this.type == 665 || this.type == 667 || this.type == 677 || this.type == 678 || this.type == 679 || this.type == 691 || this.type == 692 || this.type == 693)
				{
					overrideWidth = 16;
					overrideHeight = this.height;
				}
				else if (this.type == 688 || this.type == 689 || this.type == 690)
				{
					overrideWidth = 16;
					overrideHeight = this.height;
					vector = new Vector2?(new Vector2(0.5f, 1f));
				}
				else if (this.type == 669 || this.type == 706)
				{
					overrideWidth = 10;
					overrideHeight = 10;
				}
				else if (this.type == 261 || this.type == 277)
				{
					overrideWidth = 26;
					overrideHeight = 26;
				}
				else if (this.type == 481 || this.type == 491 || this.type == 106 || this.type == 262 || this.type == 271 || this.type == 270 || this.type == 272 || this.type == 273 || this.type == 274 || this.type == 280 || this.type == 288 || this.type == 301 || this.type == 320 || this.type == 333 || this.type == 335 || this.type == 343 || this.type == 344 || this.type == 497 || this.type == 496 || this.type == 6 || this.type == 19 || this.type == 113 || this.type == 52 || this.type == 520 || this.type == 523 || this.type == 585 || this.type == 598 || this.type == 599 || this.type == 636)
				{
					overrideWidth = 10;
					overrideHeight = 10;
				}
				else if (this.type == 514)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				else if (this.type == 248 || this.type == 247 || this.type == 507 || this.type == 508 || this.type == 662 || this.type == 680 || this.type == 685)
				{
					overrideWidth = this.width - 12;
					overrideHeight = this.height - 12;
				}
				else if (this.aiStyle == 18 || this.type == 254)
				{
					overrideWidth = this.width - 36;
					overrideHeight = this.height - 36;
				}
				else if (this.type == 182 || this.type == 190 || this.type == 33 || this.type == 229 || this.type == 237 || this.type == 243)
				{
					overrideWidth = this.width - 20;
					overrideHeight = this.height - 20;
				}
				else if (this.aiStyle == 27)
				{
					overrideWidth = this.width - 12;
					overrideHeight = this.height - 12;
				}
				else if (this.type == 533 && this.ai[0] >= 6f)
				{
					overrideWidth = this.width + 6;
					overrideHeight = this.height + 6;
				}
				else if (this.type == 582 || this.type == 634 || this.type == 635)
				{
					overrideWidth = 8;
					overrideHeight = 8;
				}
				else if (this.type == 617)
				{
					overrideWidth = (int)(20f * this.scale);
					overrideHeight = (int)(20f * this.scale);
				}
				if (((this.type != 440 && this.type != 449 && this.type != 606) || this.ai[1] != 1f) && (this.type != 466 || this.localAI[1] != 1f) && (this.type != 580 || this.localAI[1] <= 0f) && (this.type != 640 || this.localAI[1] <= 0f))
				{
					if (this.aiStyle == 10)
					{
						if (this.type == 42 || this.type == 65 || this.type == 68 || this.type == 354 || (this.type == 31 && this.ai[0] == 2f))
						{
							this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, this.height, flag6, flag6, 1);
						}
						else
						{
							this.velocity = Collision.AnyCollision(this.position, this.velocity, this.width, this.height, true);
						}
					}
					else
					{
						Vector2 vector2 = this.position;
						int num2 = (overrideWidth != -1) ? overrideWidth : this.width;
						int num3 = (overrideHeight != -1) ? overrideHeight : this.height;
						if (overrideHeight != -1 || overrideWidth != -1)
						{
							if (vector.HasValue)
							{
								vector2 = base.Center - new Vector2((float)num2, (float)num3) * vector.Value;
							}
							else
							{
								vector2 = new Vector2(this.position.X + (float)(this.width / 2) - (float)(num2 / 2), this.position.Y + (float)(this.height / 2) - (float)(num3 / 2));
							}
						}
						if (this.wet)
						{
							if (this.honeyWet)
							{
								Vector2 velocity2 = this.velocity;
								this.velocity = Collision.TileCollision(vector2, this.velocity, num2, num3, flag6, flag6, 1);
								wetVelocity = this.velocity * 0.25f;
								if (this.velocity.X != velocity2.X)
								{
									wetVelocity.X = this.velocity.X;
								}
								if (this.velocity.Y != velocity2.Y)
								{
									wetVelocity.Y = this.velocity.Y;
								}
							}
							else
							{
								Vector2 velocity3 = this.velocity;
								this.velocity = Collision.TileCollision(vector2, this.velocity, num2, num3, flag6, flag6, 1);
								wetVelocity = this.velocity * 0.5f;
								if (this.velocity.X != velocity3.X)
								{
									wetVelocity.X = this.velocity.X;
								}
								if (this.velocity.Y != velocity3.Y)
								{
									wetVelocity.Y = this.velocity.Y;
								}
							}
						}
						else
						{
							int num4 = Math.Min(num2, num3);
							if (num4 < 3)
							{
								num4 = 3;
							}
							if (num4 > 16)
							{
								num4 = 16;
							}
							if (this.velocity.Length() > (float)num4)
							{
								Vector2 arg_ACF_0 = Collision.TileCollision(vector2, this.velocity, num2, num3, flag6, flag6, 1);
								float num5 = this.velocity.Length();
								float num6 = (float)num4;
								Vector2 value = Vector2.Normalize(this.velocity);
								if (arg_ACF_0.Y == 0f)
								{
									value.Y = 0f;
								}
								Vector2 vector3 = Vector2.Zero;
								Vector2 arg_AF3_0 = Vector2.Zero;
								Vector2 value2 = Vector2.Zero;
								int num7 = 0;
								while (num5 > 0f)
								{
									num7++;
									if (num7 > 300)
									{
										break;
									}
									Vector2 vector4 = vector2;
									float num8 = num5;
									if (num8 > num6)
									{
										num8 = num6;
									}
									num5 -= num8;
									Vector2 velocity4 = value * num8;
									Vector2 vector5 = Collision.TileCollision(vector2, velocity4, num2, num3, flag6, flag6, 1);
									vector2 += vector5;
									this.velocity = vector5;
									if (!Main.projPet[this.type])
									{
										Vector4 vector6 = Collision.SlopeCollision(vector2, this.velocity, num2, num3, 0f, true);
										Vector2 value3 = this.position - vector2;
										if (vector2.X != vector6.X)
										{
											flag = true;
										}
										if (vector2.Y != vector6.Y)
										{
											flag = true;
										}
										if (this.velocity.X != vector6.Z)
										{
											flag = true;
										}
										if (this.velocity.Y != vector6.W)
										{
											flag = true;
										}
										vector2.X = vector6.X;
										vector2.Y = vector6.Y;
										value2 += vector2 + value3 - this.position;
										this.velocity.X = vector6.Z;
										this.velocity.Y = vector6.W;
									}
									flag2 = true;
									if (this.owner == Main.myPlayer && vector2 != vector4 && !flag4)
									{
										Collision.SwitchTiles(vector2, num2, num3, vector4, 4);
									}
									vector5 = this.velocity;
									vector3 += vector5;
								}
								this.velocity = vector3;
								if (Math.Abs(this.velocity.X - velocity.X) < 0.0001f)
								{
									this.velocity.X = velocity.X;
								}
								if (Math.Abs(this.velocity.Y - velocity.Y) < 0.0001f)
								{
									this.velocity.Y = velocity.Y;
								}
								if (!Main.projPet[this.type])
								{
									Vector4 vector7 = Collision.SlopeCollision(vector2, this.velocity, num2, num3, 0f, true);
									Vector2 value4 = this.position - vector2;
									if (vector2.X != vector7.X)
									{
										flag = true;
									}
									if (vector2.Y != vector7.Y)
									{
										flag = true;
									}
									if (this.velocity.X != vector7.Z)
									{
										flag = true;
									}
									if (this.velocity.Y != vector7.W)
									{
										flag = true;
									}
									vector2.X = vector7.X;
									vector2.Y = vector7.Y;
									this.position = vector2 + value4;
									this.velocity.X = vector7.Z;
									this.velocity.Y = vector7.W;
								}
							}
							else
							{
								this.velocity = Collision.TileCollision(vector2, this.velocity, num2, num3, flag6, flag6, 1);
								if (!Main.projPet[this.type])
								{
									Vector4 vector8 = Collision.SlopeCollision(vector2, this.velocity, num2, num3, 0f, true);
									Vector2 value5 = this.position - vector2;
									if (vector2.X != vector8.X)
									{
										flag = true;
									}
									if (vector2.Y != vector8.Y)
									{
										flag = true;
									}
									if (this.velocity.X != vector8.Z)
									{
										flag = true;
									}
									if (this.velocity.Y != vector8.W)
									{
										flag = true;
									}
									vector2.X = vector8.X;
									vector2.Y = vector8.Y;
									this.position = vector2 + value5;
									this.velocity.X = vector8.Z;
									this.velocity.Y = vector8.W;
								}
							}
						}
					}
				}
				if (velocity != this.velocity)
				{
					flag = true;
				}
				if (flag)
				{
					if (this.type == 663 || this.type == 665 || this.type == 667 || this.type == 677 || this.type == 678 || this.type == 679 || this.type == 691 || this.type == 692 || this.type == 693 || this.type == 688 || this.type == 689 || this.type == 690)
					{
						this.position += this.velocity;
						this.velocity = Vector2.Zero;
					}
					else if (this.type == 434)
					{
						this.position += this.velocity;
						this.numUpdates = 0;
					}
					else if (this.type == 601)
					{
						if (this.owner == Main.myPlayer)
						{
							PortalHelper.TryPlacingPortal(this, velocity, this.velocity);
						}
						this.position += this.velocity;
						this.Kill();
					}
					else if (this.type == 451)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.netUpdate = true;
						this.velocity = velocity / 2f;
					}
					else if (this.type == 645)
					{
						this.ai[0] = 0f;
						this.ai[1] = -1f;
						this.netUpdate = true;
					}
					else if (this.type == 584)
					{
						bool flag7 = false;
						if (this.velocity.X != velocity.X)
						{
							this.velocity.X = velocity.X * -0.75f;
							flag7 = true;
						}
						if ((this.velocity.Y != velocity.Y && velocity.Y > 2f) || this.velocity.Y == 0f)
						{
							this.velocity.Y = velocity.Y * -0.75f;
							flag7 = true;
						}
						if (flag7)
						{
							float num9 = velocity.Length() / this.velocity.Length();
							if (num9 == 0f)
							{
								num9 = 1f;
							}
							this.velocity /= num9;
							this.penetrate--;
						}
					}
					else if (this.type == 532)
					{
						bool flag8 = false;
						if (this.velocity.X != velocity.X)
						{
							this.velocity.X = velocity.X * -0.75f;
							flag8 = true;
						}
						if ((this.velocity.Y != velocity.Y && velocity.Y > 2f) || this.velocity.Y == 0f)
						{
							this.velocity.Y = velocity.Y * -0.75f;
							flag8 = true;
						}
						if (flag8)
						{
							float num10 = velocity.Length() / this.velocity.Length();
							if (num10 == 0f)
							{
								num10 = 1f;
							}
							this.velocity /= num10;
							this.penetrate--;
							Collision.HitTiles(this.position, velocity, this.width, this.height);
						}
					}
					else if (this.type == 533)
					{
						float num11 = 1f;
						bool flag9 = false;
						if (this.velocity.X != velocity.X)
						{
							this.velocity.X = velocity.X * -num11;
							flag9 = true;
						}
						if (this.velocity.Y != velocity.Y || this.velocity.Y == 0f)
						{
							this.velocity.Y = velocity.Y * -num11 * 0.5f;
							flag9 = true;
						}
						if (flag9)
						{
							float num12 = velocity.Length() / this.velocity.Length();
							if (num12 == 0f)
							{
								num12 = 1f;
							}
							this.velocity /= num12;
							if (this.ai[0] == 7f && (double)this.velocity.Y < -0.1)
							{
								this.velocity.Y = this.velocity.Y + 0.1f;
							}
							if (this.ai[0] >= 6f && this.ai[0] < 9f)
							{
								Collision.HitTiles(this.position, velocity, this.width, this.height);
							}
						}
					}
					else if (this.type == 502)
					{
						this.ai[0] += 1f;
						Main.PlaySound(37, (int)this.position.X, (int)this.position.Y, 5 + (int)this.ai[0], 1f, 0f);
						if (this.ai[0] >= 5f)
						{
							this.position += this.velocity;
							this.Kill();
						}
						else
						{
							if (this.velocity.Y != velocity.Y)
							{
								this.velocity.Y = -velocity.Y;
							}
							if (this.velocity.X != velocity.X)
							{
								this.velocity.X = -velocity.X;
							}
						}
						Vector2 spinningpoint = new Vector2(0f, -3f - this.ai[0]).RotatedByRandom(3.1415927410125732);
						float num13 = 10f + this.ai[0] * 4f;
						Vector2 value6 = new Vector2(1.05f, 1f);
						for (float num14 = 0f; num14 < num13; num14 += 1f)
						{
							int num15 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent, 1f);
							Main.dust[num15].position = base.Center;
							Main.dust[num15].velocity = spinningpoint.RotatedBy((double)(6.28318548f * num14 / num13), default(Vector2)) * value6 * (0.8f + Main.rand.NextFloat() * 0.4f);
							Main.dust[num15].color = Main.hslToRgb(num14 / num13, 1f, 0.5f);
							Main.dust[num15].noGravity = true;
							Main.dust[num15].scale = 1f + this.ai[0] / 3f;
						}
						if (Main.myPlayer == this.owner)
						{
							int width = this.width;
							int height = this.height;
							int num16 = this.penetrate;
							this.position = base.Center;
							this.width = (this.height = 40 + 8 * (int)this.ai[0]);
							base.Center = this.position;
							this.penetrate = -1;
							this.Damage();
							this.penetrate = num16;
							this.position = base.Center;
							this.width = width;
							this.height = height;
							base.Center = this.position;
						}
					}
					else if (this.type == 653)
					{
						if (this.velocity.Y != velocity.Y && this.velocity.Y == 0f && velocity.Y > 1f && velocity.Y < 4f)
						{
							this.velocity.Y = -velocity.Y * 2f;
						}
					}
					else if (this.type == 444)
					{
						if (this.velocity.X != velocity.X)
						{
							this.velocity.X = -velocity.X;
						}
						if (this.velocity.Y != velocity.Y)
						{
							this.velocity.Y = -velocity.Y;
						}
						this.ai[0] = this.velocity.ToRotation();
					}
					else if (this.type == 617)
					{
						if (this.velocity.X != velocity.X)
						{
							this.velocity.X = -velocity.X * 0.35f;
						}
						if (this.velocity.Y != velocity.Y)
						{
							this.velocity.Y = -velocity.Y * 0.35f;
						}
					}
					else if (this.type == 440 || this.type == 449 || this.type == 606)
					{
						if (this.ai[1] != 1f)
						{
							this.ai[1] = 1f;
							this.position += this.velocity;
							this.velocity = velocity;
						}
					}
					else if (this.type == 466 || this.type == 580 || this.type == 640)
					{
						if (this.localAI[1] < 1f)
						{
							this.localAI[1] += 2f;
							this.position += this.velocity;
							this.velocity = Vector2.Zero;
						}
					}
					else if (this.aiStyle == 54)
					{
						if (this.velocity.X != velocity.X)
						{
							this.velocity.X = velocity.X * -0.6f;
						}
						if (this.velocity.Y != velocity.Y)
						{
							this.velocity.Y = velocity.Y * -0.6f;
						}
					}
					else if (!Main.projPet[this.type] && this.type != 500 && this.type != 650)
					{
						if (this.aiStyle == 99)
						{
							if (this.type >= 556 && this.type <= 561)
							{
								bool flag10 = false;
								if (this.velocity.X != velocity.X)
								{
									flag10 = true;
									this.velocity.X = velocity.X * -1f;
								}
								if (this.velocity.Y != velocity.Y)
								{
									flag10 = true;
									this.velocity.Y = velocity.Y * -1f;
								}
								if (flag10)
								{
									Vector2 vector9 = Main.player[this.owner].Center - base.Center;
									vector9.Normalize();
									vector9 *= this.velocity.Length();
									vector9 *= 0.25f;
									this.velocity *= 0.75f;
									this.velocity += vector9;
									if (this.velocity.Length() > 6f)
									{
										this.velocity *= 0.5f;
									}
								}
							}
						}
						else if (this.type == 604)
						{
							if (this.velocity.X != velocity.X)
							{
								this.velocity.X = -velocity.X;
							}
							if (this.velocity.Y != velocity.Y)
							{
								this.velocity.Y = -velocity.Y;
							}
						}
						else if (this.type == 379)
						{
							if (this.velocity.X != velocity.X)
							{
								this.velocity.X = velocity.X * -0.6f;
							}
							if (this.velocity.Y != velocity.Y && velocity.Y > 2f)
							{
								this.velocity.Y = velocity.Y * -0.6f;
							}
						}
						else if (this.type == 491)
						{
							if (this.ai[0] <= 0f)
							{
								this.ai[0] = -10f;
							}
							if (this.velocity.X != velocity.X && Math.Abs(velocity.X) > 0f)
							{
								this.velocity.X = velocity.X * -1f;
							}
							if (this.velocity.Y != velocity.Y && Math.Abs(velocity.Y) > 0f)
							{
								this.velocity.Y = velocity.Y * -1f;
							}
						}
						else if ((this.type >= 515 && this.type <= 517) || this.type == 637)
						{
							if (this.velocity.X != velocity.X && Math.Abs(velocity.X) > 1f)
							{
								this.velocity.X = velocity.X * -0.9f;
							}
							if (this.velocity.Y != velocity.Y && Math.Abs(velocity.Y) > 1f)
							{
								this.velocity.Y = velocity.Y * -0.9f;
							}
						}
						else if (this.type == 681)
						{
							this.timeLeft = 4;
						}
						else if (this.type == 409)
						{
							if (this.velocity.X != velocity.X)
							{
								this.velocity.X = velocity.X * -1f;
							}
							if (this.velocity.Y != velocity.Y)
							{
								this.velocity.Y = velocity.Y * -1f;
							}
						}
						else if (this.type == 254)
						{
							this.tileCollide = false;
							this.velocity = velocity;
							if (this.timeLeft > 30)
							{
								this.timeLeft = 30;
							}
						}
						else if (this.type == 225 && this.penetrate > 0)
						{
							this.velocity.X = -velocity.X;
							this.velocity.Y = -velocity.Y;
							this.penetrate--;
						}
						else if (this.type == 155)
						{
							if (this.ai[1] > 10f)
							{
								NetworkText networkText = NetworkText.FromKey("Game.BallBounceResult", new object[]
								{
									NetworkText.FromKey(Lang.GetProjectileName(this.type).Key, new object[0]),
									this.ai[1]
								});
								if (Main.netMode == 0)
								{
									Main.NewText(networkText.ToString(), 255, 240, 20, false);
								}
								else if (Main.netMode == 2)
								{
									NetMessage.BroadcastChatMessage(networkText, new Color(255, 240, 20), -1);
								}
							}
							this.ai[1] = 0f;
							if (this.velocity.X != velocity.X)
							{
								this.velocity.X = velocity.X * -0.6f;
							}
							if (this.velocity.Y != velocity.Y && velocity.Y > 2f)
							{
								this.velocity.Y = velocity.Y * -0.6f;
							}
						}
						else if (this.aiStyle == 33)
						{
							if (this.localAI[0] == 0f)
							{
								if (this.wet)
								{
									this.position += velocity / 2f;
								}
								else
								{
									this.position += velocity;
								}
								this.velocity *= 0f;
								this.localAI[0] = 1f;
							}
						}
						else if (this.type != 308 && this.type != 377)
						{
							if (this.type == 477)
							{
								if (this.velocity.Y != velocity.Y || this.velocity.X != velocity.X)
								{
									this.penetrate--;
									if (this.penetrate <= 0)
									{
										this.Kill();
									}
									if (this.velocity.X != velocity.X)
									{
										this.velocity.X = -velocity.X;
									}
									if (this.velocity.Y != velocity.Y)
									{
										this.velocity.Y = -velocity.Y;
									}
								}
								if (this.penetrate > 0 && this.owner == Main.myPlayer)
								{
									int[] array = new int[10];
									int num17 = 0;
									int num18 = 700;
									int num19 = 20;
									for (int i = 0; i < 200; i++)
									{
										if (Main.npc[i].CanBeChasedBy(this, false))
										{
											float num20 = (base.Center - Main.npc[i].Center).Length();
											if (num20 > (float)num19 && num20 < (float)num18 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[i].Center, 1, 1))
											{
												array[num17] = i;
												num17++;
												if (num17 >= 9)
												{
													break;
												}
											}
										}
									}
									if (num17 > 0)
									{
										num17 = Main.rand.Next(num17);
										Vector2 value7 = Main.npc[array[num17]].Center - base.Center;
										float scaleFactor = this.velocity.Length();
										value7.Normalize();
										this.velocity = value7 * scaleFactor;
										this.netUpdate = true;
									}
								}
							}
							else if (this.type == 94)
							{
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = -velocity.X;
								}
								if (this.velocity.Y != velocity.Y)
								{
									this.velocity.Y = -velocity.Y;
								}
							}
							else if (this.type == 496)
							{
								if (this.velocity.X != velocity.X)
								{
									if (Math.Abs(this.velocity.X) < 1f)
									{
										this.velocity.X = -velocity.X;
									}
									else
									{
										this.Kill();
									}
								}
								if (this.velocity.Y != velocity.Y)
								{
									if (Math.Abs(this.velocity.Y) < 1f)
									{
										this.velocity.Y = -velocity.Y;
									}
									else
									{
										this.Kill();
									}
								}
							}
							else if (this.type == 311)
							{
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = -velocity.X;
									this.ai[1] += 1f;
								}
								if (this.velocity.Y != velocity.Y)
								{
									this.velocity.Y = -velocity.Y;
									this.ai[1] += 1f;
								}
								if (this.ai[1] > 4f)
								{
									this.Kill();
								}
							}
							else if (this.type == 312)
							{
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = -velocity.X;
									this.ai[1] += 1f;
								}
								if (this.velocity.Y != velocity.Y)
								{
									this.velocity.Y = -velocity.Y;
									this.ai[1] += 1f;
								}
							}
							else if (this.type == 522 || this.type == 620)
							{
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = -velocity.X;
								}
								if (this.velocity.Y != velocity.Y)
								{
									this.velocity.Y = -velocity.Y;
								}
							}
							else if (this.type == 524)
							{
								this.ai[0] += 100f;
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = -velocity.X;
								}
								if (this.velocity.Y != velocity.Y)
								{
									this.velocity.Y = -velocity.Y;
								}
							}
							else if (this.aiStyle == 93)
							{
								if (this.velocity != velocity)
								{
									this.ai[1] = 0f;
									this.ai[0] = 1f;
									this.netUpdate = true;
									this.tileCollide = false;
									this.position += this.velocity;
									this.velocity = velocity;
									this.velocity.Normalize();
									this.velocity *= 3f;
								}
							}
							else if (this.type == 281)
							{
								if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 2f || this.ai[1] == 2f)
								{
									this.ai[1] = 2f;
								}
								else
								{
									if (this.velocity.X != velocity.X)
									{
										this.velocity.X = -velocity.X * 0.5f;
									}
									if (this.velocity.Y != velocity.Y)
									{
										this.velocity.Y = -velocity.Y * 0.5f;
									}
								}
							}
							else if (this.type == 290 || this.type == 294)
							{
								if (this.velocity.X != velocity.X)
								{
									this.position.X = this.position.X + this.velocity.X;
									this.velocity.X = -velocity.X;
								}
								if (this.velocity.Y != velocity.Y)
								{
									this.position.Y = this.position.Y + this.velocity.Y;
									this.velocity.Y = -velocity.Y;
								}
							}
							else if ((this.type == 181 || this.type == 189 || this.type == 357 || this.type == 566) && this.penetrate > 0)
							{
								if (this.type == 357)
								{
									this.damage = (int)((double)this.damage * 0.9);
								}
								this.penetrate--;
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = -velocity.X;
								}
								if (this.velocity.Y != velocity.Y)
								{
									this.velocity.Y = -velocity.Y;
								}
							}
							else if (this.type == 307 && this.ai[1] < 5f)
							{
								this.ai[1] += 1f;
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = -velocity.X;
								}
								if (this.velocity.Y != velocity.Y)
								{
									this.velocity.Y = -velocity.Y;
								}
							}
							else if (this.type == 99)
							{
								if (this.velocity.Y != velocity.Y && velocity.Y > 5f)
								{
									Collision.HitTiles(this.position, this.velocity, this.width, this.height);
									Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									this.velocity.Y = -velocity.Y * 0.2f;
								}
								if (this.velocity.X != velocity.X)
								{
									this.Kill();
								}
							}
							else if (this.type == 444)
							{
								if (this.velocity.Y != velocity.Y && velocity.Y > 5f)
								{
									Collision.HitTiles(this.position, this.velocity, this.width, this.height);
									Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									this.velocity.Y = -velocity.Y * 0.2f;
								}
								if (this.velocity.X != velocity.X)
								{
									this.Kill();
								}
							}
							else if (this.type == 36)
							{
								if (this.penetrate > 1)
								{
									Collision.HitTiles(this.position, this.velocity, this.width, this.height);
									Main.PlaySound(SoundID.Item10, this.position);
									this.penetrate--;
									if (this.velocity.X != velocity.X)
									{
										this.velocity.X = -velocity.X;
									}
									if (this.velocity.Y != velocity.Y)
									{
										this.velocity.Y = -velocity.Y;
									}
								}
								else
								{
									this.Kill();
								}
							}
							else if (this.aiStyle == 21)
							{
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = -velocity.X;
								}
								if (this.velocity.Y != velocity.Y)
								{
									this.velocity.Y = -velocity.Y;
								}
							}
							else if (this.aiStyle == 17)
							{
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = velocity.X * -0.75f;
								}
								if (this.velocity.Y != velocity.Y && (double)velocity.Y > 1.5)
								{
									this.velocity.Y = velocity.Y * -0.7f;
								}
							}
							else if (this.aiStyle == 15)
							{
								bool flag11 = false;
								if (velocity.X != this.velocity.X)
								{
									if (Math.Abs(velocity.X) > 4f)
									{
										flag11 = true;
									}
									this.position.X = this.position.X + this.velocity.X;
									this.velocity.X = -velocity.X * 0.2f;
								}
								if (velocity.Y != this.velocity.Y)
								{
									if (Math.Abs(velocity.Y) > 4f)
									{
										flag11 = true;
									}
									this.position.Y = this.position.Y + this.velocity.Y;
									this.velocity.Y = -velocity.Y * 0.2f;
								}
								this.ai[0] = 1f;
								if (flag11)
								{
									this.netUpdate = true;
									Collision.HitTiles(this.position, this.velocity, this.width, this.height);
									Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								}
								if (this.wet)
								{
									wetVelocity = this.velocity;
								}
							}
							else if (this.aiStyle == 39)
							{
								Collision.HitTiles(this.position, this.velocity, this.width, this.height);
								if (this.type == 33 || this.type == 106)
								{
									if (this.velocity.X != velocity.X)
									{
										this.velocity.X = -velocity.X;
									}
									if (this.velocity.Y != velocity.Y)
									{
										this.velocity.Y = -velocity.Y;
									}
								}
								else
								{
									this.ai[0] = 1f;
									if (this.aiStyle == 3)
									{
										this.velocity.X = -velocity.X;
										this.velocity.Y = -velocity.Y;
									}
								}
								this.netUpdate = true;
								Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
							}
							else if (this.aiStyle == 3 || this.aiStyle == 13 || this.aiStyle == 69 || this.aiStyle == 109)
							{
								Collision.HitTiles(this.position, this.velocity, this.width, this.height);
								if (this.type == 33 || this.type == 106)
								{
									if (this.velocity.X != velocity.X)
									{
										this.velocity.X = -velocity.X;
									}
									if (this.velocity.Y != velocity.Y)
									{
										this.velocity.Y = -velocity.Y;
									}
								}
								else
								{
									this.ai[0] = 1f;
									if ((this.aiStyle == 3 || this.aiStyle == 109) && this.type != 383)
									{
										this.velocity.X = -velocity.X;
										this.velocity.Y = -velocity.Y;
									}
								}
								this.netUpdate = true;
								Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
							}
							else if (this.aiStyle == 8 && this.type != 96)
							{
								Main.PlaySound(SoundID.Item10, this.position);
								this.ai[0] += 1f;
								if ((this.ai[0] >= 5f && this.type != 253) || (this.type == 253 && this.ai[0] >= 8f))
								{
									this.position += this.velocity;
									this.Kill();
								}
								else
								{
									if (this.type == 15 && this.velocity.Y > 4f)
									{
										if (this.velocity.Y != velocity.Y)
										{
											this.velocity.Y = -velocity.Y * 0.8f;
										}
									}
									else if (this.velocity.Y != velocity.Y)
									{
										this.velocity.Y = -velocity.Y;
									}
									if (this.velocity.X != velocity.X)
									{
										this.velocity.X = -velocity.X;
									}
								}
							}
							else if (this.aiStyle == 61)
							{
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = velocity.X * -0.3f;
								}
								if (this.velocity.Y != velocity.Y && velocity.Y > 1f)
								{
									this.velocity.Y = velocity.Y * -0.3f;
								}
							}
							else if (this.aiStyle == 14)
							{
								if (this.type == 261 && ((this.velocity.X != velocity.X && (velocity.X < -3f || velocity.X > 3f)) || (this.velocity.Y != velocity.Y && (velocity.Y < -3f || velocity.Y > 3f))))
								{
									Collision.HitTiles(this.position, this.velocity, this.width, this.height);
									Main.PlaySound(0, (int)base.Center.X, (int)base.Center.Y, 1, 1f, 0f);
								}
								if (this.type >= 326 && this.type <= 328 && this.velocity.X != velocity.X)
								{
									this.velocity.X = velocity.X * -0.1f;
								}
								if (this.type >= 400 && this.type <= 402)
								{
									if (this.velocity.X != velocity.X)
									{
										this.velocity.X = velocity.X * -0.1f;
									}
								}
								else if (this.type == 50)
								{
									if (this.velocity.X != velocity.X)
									{
										this.velocity.X = velocity.X * -0.2f;
									}
									if (this.velocity.Y != velocity.Y && (double)velocity.Y > 1.5)
									{
										this.velocity.Y = velocity.Y * -0.2f;
									}
								}
								else if (this.type == 185)
								{
									if (this.velocity.X != velocity.X)
									{
										this.velocity.X = velocity.X * -0.9f;
									}
									if (this.velocity.Y != velocity.Y && velocity.Y > 1f)
									{
										this.velocity.Y = velocity.Y * -0.9f;
									}
								}
								else if (this.type == 277)
								{
									if (this.velocity.X != velocity.X)
									{
										this.velocity.X = velocity.X * -0.9f;
									}
									if (this.velocity.Y != velocity.Y && velocity.Y > 3f)
									{
										this.velocity.Y = velocity.Y * -0.9f;
									}
								}
								else if (this.type != 480)
								{
									if (this.type == 450)
									{
										if (this.velocity.X != velocity.X)
										{
											this.velocity.X = velocity.X * -0.1f;
										}
									}
									else
									{
										if (this.velocity.X != velocity.X)
										{
											this.velocity.X = velocity.X * -0.5f;
										}
										if (this.velocity.Y != velocity.Y && velocity.Y > 1f)
										{
											this.velocity.Y = velocity.Y * -0.5f;
										}
									}
								}
							}
							else if (this.aiStyle == 16)
							{
								if (this.velocity.X != velocity.X)
								{
									this.velocity.X = velocity.X * -0.4f;
									if (this.type == 29)
									{
										this.velocity.X = this.velocity.X * 0.8f;
									}
								}
								if (this.velocity.Y != velocity.Y && (double)velocity.Y > 0.7 && this.type != 102)
								{
									this.velocity.Y = velocity.Y * -0.4f;
									if (this.type == 29)
									{
										this.velocity.Y = this.velocity.Y * 0.8f;
									}
								}
								if (this.type == 134 || this.type == 137 || this.type == 140 || this.type == 143 || this.type == 303 || (this.type >= 338 && this.type <= 341))
								{
									this.velocity *= 0f;
									this.alpha = 255;
									this.timeLeft = 3;
								}
							}
							else if (this.aiStyle == 68)
							{
								this.velocity *= 0f;
								this.alpha = 255;
								this.timeLeft = 3;
							}
							else if (this.aiStyle != 9 || this.owner == Main.myPlayer)
							{
								this.position += this.velocity;
								this.Kill();
							}
						}
					}
				}
			}
			this.UpdatePosition(wetVelocity);
			if (!flag2 && !flag4 && this.owner == Main.myPlayer && (this.tileCollide | flag5) && this.position != this.oldPosition)
			{
				Vector2 position = this.position;
				Vector2 oldPosition = this.oldPosition;
				int num21 = (overrideWidth != -1) ? overrideWidth : this.width;
				int num22 = (overrideHeight != -1) ? overrideHeight : this.height;
				if (overrideHeight != -1 || overrideWidth != -1)
				{
					position = new Vector2(this.position.X + (float)(this.width / 2) - (float)(num21 / 2), this.position.Y + (float)(this.height / 2) - (float)(num22 / 2));
					oldPosition = new Vector2(this.oldPosition.X + (float)(this.width / 2) - (float)(num21 / 2), this.oldPosition.Y + (float)(this.height / 2) - (float)(num22 / 2));
				}
				Collision.SwitchTiles(position, num21, num22, oldPosition, 4);
			}
		}

		// Token: 0x060001AA RID: 426 RVA: 0x00030114 File Offset: 0x0002E314
		public static void InitializeStaticThings()
		{
			Projectile.perIDStaticNPCImmunity = new uint[714][];
			for (int i = 0; i < Projectile.perIDStaticNPCImmunity.Length; i++)
			{
				Projectile.perIDStaticNPCImmunity[i] = new uint[200];
			}
			WorldGen.Hooks.OnWorldLoad += new Action(Projectile.ResetImmunity);
		}

		// Token: 0x060001AC RID: 428 RVA: 0x0003019B File Offset: 0x0002E39B
		public static bool IsNPCImmune(int projectileType, int npcIndex)
		{
			return Projectile.perIDStaticNPCImmunity[projectileType][npcIndex] <= Main.GameUpdateCount;
		}

		// Token: 0x060001EA RID: 490 RVA: 0x0009EE90 File Offset: 0x0009D090
		public void Kill()
		{
			if (!this.active)
			{
				return;
			}
			Main.projectileIdentity[this.owner, this.identity] = -1;
			int num = this.timeLeft;
			this.timeLeft = 0;
			if (this.type == 686)
			{
				Main.PlayTrackedSound(SoundID.DD2_BetsyFireballImpact, base.Center);
			}
			else if (this.type == 711)
			{
				Main.PlayTrackedSound(SoundID.DD2_BetsysWrathImpact, base.Center);
			}
			else if (this.type == 704)
			{
				ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
				if (activeSound != null)
				{
					activeSound.Volume = 0f;
					activeSound.Stop();
				}
			}
			if (this.type == 710)
			{
				this.ai[1] = -1f;
				this.position = base.Center;
				this.width = (this.height = 40);
				base.Center = this.position;
				this.Damage();
				Main.PlaySound(SoundID.Item14, this.position);
				int num3;
				for (int i = 0; i < 2; i = num3 + 1)
				{
					int num2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num3 = i;
				}
				for (int j = 0; j < 10; j = num3 + 1)
				{
					int num4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num4].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num4].noGravity = true;
					Dust dust = Main.dust[num4];
					dust.velocity *= 2f;
					num3 = j;
				}
				for (int k = 0; k < 5; k = num3 + 1)
				{
					int num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num5].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num5].noGravity = true;
					Dust dust = Main.dust[num5];
					dust.velocity *= 2f;
					num3 = k;
				}
			}
			else if (this.type == 711)
			{
				Rectangle hitbox = base.Hitbox;
				int num3;
				for (int l = 0; l < this.oldPos.Length / 2; l += 2)
				{
					hitbox.X = (int)this.oldPos[l].X;
					hitbox.Y = (int)this.oldPos[l].Y;
					for (int m = 0; m < 2; m = num3 + 1)
					{
						int num6 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							6,
							55,
							158
						});
						int num7 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, num6, (float)this.direction, -2.5f, 0, default(Color), 1f);
						Main.dust[num7].alpha = 200;
						Dust dust = Main.dust[num7];
						dust.velocity *= 2.4f;
						dust = Main.dust[num7];
						dust.scale += Main.rand.NextFloat();
						dust = Main.dust[num7];
						dust.scale -= 0.5f;
						if (Main.dust[num7].type == 55)
						{
							Main.dust[num7].color = Color.Lerp(new Color(128, 0, 180, 128), Color.Gold, Main.rand.NextFloat());
						}
						Main.dust[num7].noLight = true;
						num3 = m;
					}
				}
				for (int n = 10; n < this.oldPos.Length; n += 2)
				{
					hitbox.X = (int)this.oldPos[n].X;
					hitbox.Y = (int)this.oldPos[n].Y;
					for (int num8 = 0; num8 < 2; num8 = num3 + 1)
					{
						if (Main.rand.Next(3) != 0)
						{
							int num9 = Utils.SelectRandom<int>(Main.rand, new int[]
							{
								55
							});
							int num10 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, num9, (float)this.direction, -2.5f, 0, default(Color), 1f);
							Main.dust[num10].alpha = 120;
							Dust dust = Main.dust[num10];
							dust.velocity *= 2.4f;
							dust = Main.dust[num10];
							dust.scale += Main.rand.NextFloat() * 0.7f;
							dust = Main.dust[num10];
							dust.scale -= 0.5f;
							if (Main.dust[num10].type == 55)
							{
								Main.dust[num10].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
							}
							Main.dust[num10].noLight = true;
						}
						num3 = num8;
					}
				}
				for (int num11 = 5; num11 < this.oldPos.Length; num11++)
				{
					hitbox.X = (int)this.oldPos[num11].X;
					hitbox.Y = (int)this.oldPos[num11].Y;
					for (int num12 = 0; num12 < 1; num12 = num3 + 1)
					{
						if (Main.rand.Next(3) != 0)
						{
							int num13 = Utils.SelectRandom<int>(Main.rand, new int[]
							{
								55
							});
							int num14 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, num13, (float)this.direction, -2.5f, 0, default(Color), 1f);
							Main.dust[num14].alpha = 80;
							Dust dust = Main.dust[num14];
							dust.velocity *= 0.3f;
							dust = Main.dust[num14];
							dust.velocity += this.velocity * 0.5f;
							dust = Main.dust[num14];
							dust.scale += Main.rand.NextFloat() * 0.7f;
							dust = Main.dust[num14];
							dust.scale -= 0.5f;
							if (Main.dust[num14].type == 55)
							{
								Main.dust[num14].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
							}
							Main.dust[num14].noLight = true;
						}
						num3 = num12;
					}
				}
				for (int num15 = 0; num15 < 20; num15 = num3 + 1)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num16 = 228;
						Dust dust2 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num16, 0f, 0f, 0, default(Color), 1f)];
						dust2.noGravity = true;
						dust2.scale = 1.25f + Main.rand.NextFloat();
						dust2.fadeIn = 1.5f;
						Dust dust = dust2;
						dust.velocity *= 6f;
						dust2.noLight = true;
					}
					num3 = num15;
				}
				for (int num17 = 0; num17 < 20; num17 = num3 + 1)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num18 = 55;
						Dust dust3 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num18, 0f, 0f, 0, default(Color), 1f)];
						dust3.noGravity = true;
						dust3.scale = 1.25f + Main.rand.NextFloat();
						dust3.fadeIn = 1.5f;
						Dust dust = dust3;
						dust.velocity *= 6f;
						dust3.noLight = true;
						dust3.color = new Color(0, 0, 220, 128);
					}
					num3 = num17;
				}
				if (this.owner == Main.myPlayer)
				{
					this.position = base.Center;
					base.Size = new Vector2(140f);
					base.Center = this.position;
					this.penetrate = -1;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = -1;
					this.Damage();
				}
			}
			else if (this.type == 662 || this.type == 685)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 value = this.oldVelocity.SafeNormalize(Vector2.Zero);
				Vector2 vector = this.position + value * 16f;
				int num3;
				for (int num19 = 0; num19 < 16; num19 = num3 + 1)
				{
					if (Main.rand.Next(2) == 0)
					{
						vector -= value * 8f;
					}
					else
					{
						Dust dust4 = Dust.NewDustDirect(vector, this.width, this.height, 11, 0f, 0f, 0, default(Color), 1f);
						dust4.position = (dust4.position + base.Center) / 2f;
						Dust dust = dust4;
						dust.velocity += this.oldVelocity * 0.4f;
						dust = dust4;
						dust.velocity *= 0.5f;
						dust4.noGravity = true;
						vector -= value * 8f;
					}
					num3 = num19;
				}
			}
			if (this.type == 680)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 value2 = this.oldVelocity.SafeNormalize(Vector2.Zero);
				Vector2 vector2 = this.position + value2 * 16f;
				int num3;
				for (int num20 = 0; num20 < 16; num20 = num3 + 1)
				{
					if (Main.rand.Next(2) == 0)
					{
						vector2 -= value2 * 8f;
					}
					else
					{
						Dust dust5 = Dust.NewDustDirect(vector2, this.width, this.height, 11, 0f, 0f, 0, default(Color), 1f);
						dust5.position = (dust5.position + base.Center) / 2f;
						Dust dust = dust5;
						dust.velocity += this.oldVelocity * 0.4f;
						dust = dust5;
						dust.velocity *= 0.5f;
						dust5.noGravity = true;
						vector2 -= value2 * 8f;
					}
					num3 = num20;
				}
				Dust.NewDustDirect(this.position, this.width, this.height, 11, 0f, 0f, 0, Color.Red, 1.6f).noGravity = true;
			}
			if (this.type == 664 || this.type == 666 || this.type == 668 || this.type == 706)
			{
				int num21 = 4;
				int num22 = 20;
				int num23 = 10;
				int num24 = 20;
				int num25 = 20;
				int num26 = 4;
				float num27 = 1.5f;
				int num28 = 6;
				int num29 = 6;
				if (Main.player[this.owner].setApprenticeT3)
				{
					num21 += 4;
					num25 += 10;
					num22 += 20;
					num24 += 30;
					num23 /= 2;
					num26 += 4;
					num27 += 0.5f;
					num28 += 7;
					num29 = 270;
				}
				this.position = base.Center;
				this.width = (this.height = 16 * num28);
				base.Center = this.position;
				this.Damage();
				Main.PlaySound(SoundID.Item100, this.position);
				int num3;
				for (int num30 = 0; num30 < num21; num30 = num3 + 1)
				{
					int num31 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num31].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num3 = num30;
				}
				for (int num32 = 0; num32 < num22; num32 = num3 + 1)
				{
					Dust dust6 = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 2.5f);
					dust6.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 10f;
					Dust dust = dust6;
					dust.velocity *= 16f;
					if (dust6.velocity.Y > -2f)
					{
						Dust expr_FB1_cp_0_cp_0 = dust6;
						expr_FB1_cp_0_cp_0.velocity.Y = expr_FB1_cp_0_cp_0.velocity.Y * -0.4f;
					}
					dust6.noLight = true;
					dust6.noGravity = true;
					num3 = num32;
				}
				for (int num33 = 0; num33 < num24; num33 = num3 + 1)
				{
					Dust dust7 = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, num29, 0f, 0f, 100, default(Color), 1.5f);
					dust7.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Dust dust = dust7;
					dust.velocity *= 2f;
					dust7.noGravity = true;
					dust7.fadeIn = num27;
					num3 = num33;
				}
				for (int num34 = 0; num34 < num23; num34 = num3 + 1)
				{
					int num35 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num35].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num35].noGravity = true;
					Dust dust = Main.dust[num35];
					dust.velocity *= 3f;
					num3 = num34;
				}
				for (int num36 = 0; num36 < num25; num36 = num3 + 1)
				{
					int num37 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num37].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num37].noGravity = true;
					Dust dust = Main.dust[num37];
					dust.velocity *= 3f;
					num3 = num36;
				}
				for (int num38 = 0; num38 < num26; num38 = num3 + 1)
				{
					int num39 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num39].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Gore gore = Main.gore[num39];
					gore.position -= Vector2.One * 16f;
					if (Main.rand.Next(2) == 0)
					{
						Gore expr_13B4_cp_0_cp_0 = Main.gore[num39];
						expr_13B4_cp_0_cp_0.position.Y = expr_13B4_cp_0_cp_0.position.Y - 30f;
					}
					gore = Main.gore[num39];
					gore.velocity *= 0.3f;
					Gore expr_13F1_cp_0_cp_0 = Main.gore[num39];
					expr_13F1_cp_0_cp_0.velocity.X = expr_13F1_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_141C_cp_0_cp_0 = Main.gore[num39];
					expr_141C_cp_0_cp_0.velocity.Y = expr_141C_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num38;
				}
			}
			else if (this.type == 681)
			{
				this.position.X = this.position.X + (float)(this.width / 2);
				this.position.Y = this.position.Y + (float)(this.height / 2);
				Main.PlaySound(SoundID.DD2_GoblinBomb, this.position);
				this.width = 22;
				this.height = 22;
				this.position.X = this.position.X - (float)(this.width / 2);
				this.position.Y = this.position.Y - (float)(this.height / 2);
				int num3;
				for (int num40 = 0; num40 < 10; num40 = num3 + 1)
				{
					int num41 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num41];
					dust.velocity *= 1.4f;
					num41 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num41];
					dust.velocity *= 1.4f;
					Main.dust[num41].noGravity = true;
					Main.dust[num41].fadeIn = 2f;
					num3 = num40;
				}
				for (int num42 = 0; num42 < 10; num42 = num3 + 1)
				{
					int num43 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num43].noGravity = true;
					Dust dust = Main.dust[num43];
					dust.velocity *= 5f;
					num43 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num43];
					dust.velocity *= 3f;
					num3 = num42;
				}
				int num44 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
				Gore gore = Main.gore[num44];
				gore.velocity *= 0.4f;
				Gore expr_1760_cp_0_cp_0 = Main.gore[num44];
				expr_1760_cp_0_cp_0.velocity.X = expr_1760_cp_0_cp_0.velocity.X + 1f;
				Gore expr_177B_cp_0_cp_0 = Main.gore[num44];
				expr_177B_cp_0_cp_0.velocity.Y = expr_177B_cp_0_cp_0.velocity.Y + 1f;
				num44 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
				gore = Main.gore[num44];
				gore.velocity *= 0.4f;
				Gore expr_17F7_cp_0_cp_0 = Main.gore[num44];
				expr_17F7_cp_0_cp_0.velocity.X = expr_17F7_cp_0_cp_0.velocity.X - 1f;
				Gore expr_1812_cp_0_cp_0 = Main.gore[num44];
				expr_1812_cp_0_cp_0.velocity.Y = expr_1812_cp_0_cp_0.velocity.Y + 1f;
				num44 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
				gore = Main.gore[num44];
				gore.velocity *= 0.4f;
				Gore expr_188E_cp_0_cp_0 = Main.gore[num44];
				expr_188E_cp_0_cp_0.velocity.X = expr_188E_cp_0_cp_0.velocity.X + 1f;
				Gore expr_18A9_cp_0_cp_0 = Main.gore[num44];
				expr_18A9_cp_0_cp_0.velocity.Y = expr_18A9_cp_0_cp_0.velocity.Y - 1f;
				num44 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
				gore = Main.gore[num44];
				gore.velocity *= 0.4f;
				Gore expr_1925_cp_0_cp_0 = Main.gore[num44];
				expr_1925_cp_0_cp_0.velocity.X = expr_1925_cp_0_cp_0.velocity.X - 1f;
				Gore expr_1940_cp_0_cp_0 = Main.gore[num44];
				expr_1940_cp_0_cp_0.velocity.Y = expr_1940_cp_0_cp_0.velocity.Y - 1f;
				this.position.X = this.position.X + (float)(this.width / 2);
				this.position.Y = this.position.Y + (float)(this.height / 2);
				this.width = 80;
				this.height = 80;
				this.position.X = this.position.X - (float)(this.width / 2);
				this.position.Y = this.position.Y - (float)(this.height / 2);
				this.Damage();
			}
			if (this.type == 669)
			{
				Main.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 vector3 = new Vector2(20f, 20f);
				int num3;
				for (int num45 = 0; num45 < 10; num45 = num3 + 1)
				{
					Dust dust8 = Dust.NewDustDirect(base.Center - vector3 / 2f, (int)vector3.X, (int)vector3.Y, 4, 0f, 0f, 100, new Color(255, 255, 255, 110), 1.1f);
					Dust dust = dust8;
					dust.velocity *= 1.4f;
					num3 = num45;
				}
				for (int num46 = 0; num46 < 40; num46 = num3 + 1)
				{
					Dust dust9 = Dust.NewDustDirect(base.Center - vector3 / 2f, (int)vector3.X, (int)vector3.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 1.2f);
					dust9.noGravity = true;
					Dust dust = dust9;
					dust.velocity *= 4f;
					dust9 = Dust.NewDustDirect(base.Center - vector3 / 2f, (int)vector3.X, (int)vector3.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 0.8f);
					dust = dust9;
					dust.velocity *= 2f;
					num3 = num46;
				}
			}
			if (this.type == 634 || this.type == 635)
			{
				int num47 = Utils.SelectRandom<int>(Main.rand, new int[]
				{
					242,
					73,
					72,
					71,
					255
				});
				int num48 = 255;
				int num49 = 255;
				int height = 50;
				float num50 = 1.7f;
				float num51 = 0.8f;
				float num52 = 2f;
				Vector2 value3 = (this.rotation - 1.57079637f).ToRotationVector2();
				Vector2 value4 = value3 * this.velocity.Length() * (float)this.MaxUpdates;
				if (this.type == 635)
				{
					num48 = 88;
					num49 = 88;
					num47 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						242,
						59,
						88
					});
					num50 = 3.7f;
					num51 = 1.5f;
					num52 = 2.2f;
					value4 *= 0.5f;
				}
				Main.PlaySound(SoundID.Item14, this.position);
				this.position = base.Center;
				this.width = (this.height = height);
				base.Center = this.position;
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				int num3;
				for (int num53 = 0; num53 < 40; num53 = num3 + 1)
				{
					num47 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						242,
						73,
						72,
						71,
						255
					});
					if (this.type == 635)
					{
						num47 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							242,
							59,
							88
						});
					}
					int num54 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num47, 0f, 0f, 200, default(Color), num50);
					Main.dust[num54].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num54].noGravity = true;
					Dust dust = Main.dust[num54];
					dust.velocity *= 3f;
					dust = Main.dust[num54];
					dust.velocity += value4 * Main.rand.NextFloat();
					num54 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num48, 0f, 0f, 100, default(Color), num51);
					Main.dust[num54].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					dust = Main.dust[num54];
					dust.velocity *= 2f;
					Main.dust[num54].noGravity = true;
					Main.dust[num54].fadeIn = 1f;
					Main.dust[num54].color = Color.Crimson * 0.5f;
					dust = Main.dust[num54];
					dust.velocity += value4 * Main.rand.NextFloat();
					num3 = num53;
				}
				for (int num55 = 0; num55 < 20; num55 = num3 + 1)
				{
					int num56 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num49, 0f, 0f, 0, default(Color), num52);
					Main.dust[num56].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 3f;
					Main.dust[num56].noGravity = true;
					Dust dust = Main.dust[num56];
					dust.velocity *= 0.5f;
					dust = Main.dust[num56];
					dust.velocity += value4 * (0.6f + 0.6f * Main.rand.NextFloat());
					num3 = num55;
				}
			}
			else if (this.type == 651)
			{
				if (this.localAI[0] == 1f && this.owner == Main.myPlayer)
				{
					Player master = Main.player[this.owner];
					Point point = new Vector2(this.ai[0], this.ai[1]).ToPoint();
					Point point2 = base.Center.ToTileCoordinates();
					if (Main.netMode == 1)
					{
						NetMessage.SendData(109, -1, -1, null, point.X, (float)point.Y, (float)point2.X, (float)point2.Y, (int)WiresUI.Settings.ToolMode, 0, 0);
					}
					else
					{
						Wiring.MassWireOperation(point, point2, master);
					}
				}
			}
			else if (this.type == 641)
			{
				if (this.owner == Main.myPlayer)
				{
					int num3;
					for (int num57 = 0; num57 < 1000; num57 = num3 + 1)
					{
						if (Main.projectile[num57].active && Main.projectile[num57].owner == this.owner && Main.projectile[num57].type == 642)
						{
							Main.projectile[num57].Kill();
						}
						num3 = num57;
					}
				}
			}
			else if (this.type == 643)
			{
				if (this.owner == Main.myPlayer)
				{
					int num3;
					for (int num58 = 0; num58 < 1000; num58 = num3 + 1)
					{
						if (Main.projectile[num58].active && Main.projectile[num58].owner == this.owner && Main.projectile[num58].type == 644)
						{
							Main.projectile[num58].Kill();
						}
						num3 = num58;
					}
				}
			}
			else if (this.type == 645)
			{
				bool flag = WorldGen.SolidTile(Framing.GetTileSafely((int)this.position.X / 16, (int)this.position.Y / 16));
				int num3;
				for (int num59 = 0; num59 < 4; num59 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					num3 = num59;
				}
				for (int num60 = 0; num60 < 4; num60 = num3 + 1)
				{
					int num61 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num61].noGravity = true;
					Dust dust = Main.dust[num61];
					dust.velocity *= 3f;
					if (flag)
					{
						Main.dust[num61].noLight = true;
					}
					num61 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num61];
					dust.velocity *= 2f;
					Main.dust[num61].noGravity = true;
					if (flag)
					{
						Main.dust[num61].noLight = true;
					}
					num3 = num60;
				}
				for (int num62 = 0; num62 < 1; num62 = num3 + 1)
				{
					int num63 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore = Main.gore[num63];
					gore.velocity *= 0.3f;
					Gore expr_24AB_cp_0_cp_0 = Main.gore[num63];
					expr_24AB_cp_0_cp_0.velocity.X = expr_24AB_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_24D6_cp_0_cp_0 = Main.gore[num63];
					expr_24D6_cp_0_cp_0.velocity.Y = expr_24D6_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num62;
				}
			}
			else if (this.type == 636)
			{
				Rectangle hitbox2 = base.Hitbox;
				for (int num64 = 0; num64 < 6; num64 += 3)
				{
					hitbox2.X = (int)this.oldPos[num64].X;
					hitbox2.Y = (int)this.oldPos[num64].Y;
					int num3;
					for (int num65 = 0; num65 < 5; num65 = num3 + 1)
					{
						int num66 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							6,
							259,
							158
						});
						int num67 = Dust.NewDust(hitbox2.TopLeft(), this.width, this.height, num66, 2.5f * (float)this.direction, -2.5f, 0, default(Color), 1f);
						Main.dust[num67].alpha = 200;
						Dust dust = Main.dust[num67];
						dust.velocity *= 2.4f;
						dust = Main.dust[num67];
						dust.scale += Main.rand.NextFloat();
						num3 = num65;
					}
				}
			}
			else if (this.type == 614)
			{
				int num3;
				for (int num68 = 0; num68 < 10; num68 = num3 + 1)
				{
					Dust dust10 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
					dust10.noGravity = true;
					Dust dust = dust10;
					dust.velocity *= 3f;
					num3 = num68;
				}
			}
			if (this.type == 644)
			{
				Vector2 spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
				float num69 = (float)Main.rand.Next(7, 13);
				Vector2 value5 = new Vector2(2.1f, 2f);
				Color newColor = Main.hslToRgb(this.ai[0], 1f, 0.5f);
				newColor.A = 255;
				float num72;
				for (float num70 = 0f; num70 < num69; num70 = num72 + 1f)
				{
					int num71 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor, 1f);
					Main.dust[num71].position = base.Center;
					Main.dust[num71].velocity = spinningpoint.RotatedBy((double)(6.28318548f * num70 / num69), default(Vector2)) * value5 * (0.8f + Main.rand.NextFloat() * 0.4f);
					Main.dust[num71].noGravity = true;
					Main.dust[num71].scale = 2f;
					Main.dust[num71].fadeIn = Main.rand.NextFloat() * 2f;
					Dust dust11 = Dust.CloneDust(num71);
					Dust dust = dust11;
					dust.scale /= 2f;
					dust = dust11;
					dust.fadeIn /= 2f;
					dust11.color = new Color(255, 255, 255, 255);
					num72 = num70;
				}
				for (float num73 = 0f; num73 < num69; num73 = num72 + 1f)
				{
					int num74 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor, 1f);
					Main.dust[num74].position = base.Center;
					Main.dust[num74].velocity = spinningpoint.RotatedBy((double)(6.28318548f * num73 / num69), default(Vector2)) * value5 * (0.8f + Main.rand.NextFloat() * 0.4f);
					Dust dust = Main.dust[num74];
					dust.velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num74].noGravity = true;
					Main.dust[num74].scale = Main.rand.NextFloat() * 1f;
					Main.dust[num74].fadeIn = Main.rand.NextFloat() * 2f;
					Dust dust12 = Dust.CloneDust(num74);
					dust = dust12;
					dust.scale /= 2f;
					dust = dust12;
					dust.fadeIn /= 2f;
					dust12.color = new Color(255, 255, 255, 255);
					num72 = num73;
				}
				if (Main.myPlayer == this.owner)
				{
					this.friendly = true;
					int width = this.width;
					int height2 = this.height;
					int num75 = this.penetrate;
					this.position = base.Center;
					this.width = (this.height = 60);
					base.Center = this.position;
					this.penetrate = -1;
					this.maxPenetrate = -1;
					this.Damage();
					this.penetrate = num75;
					this.position = base.Center;
					this.width = width;
					this.height = height2;
					base.Center = this.position;
				}
			}
			if (this.type == 608)
			{
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				Main.PlaySound(SoundID.Item14, this.position);
				int num3;
				for (int num76 = 0; num76 < 4; num76 = num3 + 1)
				{
					int num77 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num77].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num3 = num76;
				}
				for (int num78 = 0; num78 < 30; num78 = num3 + 1)
				{
					int num79 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num79].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num79].noGravity = true;
					Dust dust = Main.dust[num79];
					dust.velocity *= 3f;
					Main.dust[num79].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
					num79 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num79].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					dust = Main.dust[num79];
					dust.velocity *= 2f;
					Main.dust[num79].noGravity = true;
					Main.dust[num79].fadeIn = 2.5f;
					Main.dust[num79].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
					num3 = num78;
				}
				for (int num80 = 0; num80 < 10; num80 = num3 + 1)
				{
					int num81 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num81].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num81].noGravity = true;
					Dust dust = Main.dust[num81];
					dust.velocity *= 3f;
					Main.dust[num81].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
					num3 = num80;
				}
				for (int num82 = 0; num82 < 10; num82 = num3 + 1)
				{
					int num83 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num83].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num83].noGravity = true;
					Dust dust = Main.dust[num83];
					dust.velocity *= 3f;
					num3 = num82;
				}
				for (int num84 = 0; num84 < 2; num84 = num3 + 1)
				{
					int num85 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num85].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Gore gore = Main.gore[num85];
					gore.velocity *= 0.3f;
					Gore expr_30AB_cp_0_cp_0 = Main.gore[num85];
					expr_30AB_cp_0_cp_0.velocity.X = expr_30AB_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_30D6_cp_0_cp_0 = Main.gore[num85];
					expr_30D6_cp_0_cp_0.velocity.Y = expr_30D6_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num84;
				}
			}
			else if (this.type == 661)
			{
				this.position = base.Center;
				this.width = (this.height = 160);
				base.Center = this.position;
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				Main.PlaySound(SoundID.Item14, this.position);
				Vector2 position = base.Center + Vector2.One * -20f;
				int num86 = 40;
				int height3 = num86;
				int num3;
				for (int num87 = 0; num87 < 4; num87 = num3 + 1)
				{
					int num88 = Dust.NewDust(position, num86, height3, 240, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num88].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)num86 / 2f;
					num3 = num87;
				}
				for (int num89 = 0; num89 < 20; num89 = num3 + 1)
				{
					int num90 = Dust.NewDust(position, num86, height3, 62, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num90].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)num86 / 2f;
					Main.dust[num90].noGravity = true;
					Main.dust[num90].noLight = true;
					Dust dust = Main.dust[num90];
					dust.velocity *= 3f;
					dust = Main.dust[num90];
					dust.velocity += base.DirectionTo(Main.dust[num90].position) * (2f + Main.rand.NextFloat() * 4f);
					num90 = Dust.NewDust(position, num86, height3, 62, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num90].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)num86 / 2f;
					dust = Main.dust[num90];
					dust.velocity *= 2f;
					Main.dust[num90].noGravity = true;
					Main.dust[num90].fadeIn = 1f;
					Main.dust[num90].color = Color.Crimson * 0.5f;
					Main.dust[num90].noLight = true;
					dust = Main.dust[num90];
					dust.velocity += base.DirectionTo(Main.dust[num90].position) * 8f;
					num3 = num89;
				}
				for (int num91 = 0; num91 < 20; num91 = num3 + 1)
				{
					int num92 = Dust.NewDust(position, num86, height3, 62, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num92].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)num86 / 2f;
					Main.dust[num92].noGravity = true;
					Main.dust[num92].noLight = true;
					Dust dust = Main.dust[num92];
					dust.velocity *= 3f;
					dust = Main.dust[num92];
					dust.velocity += base.DirectionTo(Main.dust[num92].position) * 2f;
					num3 = num91;
				}
				for (int num93 = 0; num93 < 70; num93 = num3 + 1)
				{
					int num94 = Dust.NewDust(position, num86, height3, 240, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num94].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)num86 / 2f;
					Main.dust[num94].noGravity = true;
					Dust dust = Main.dust[num94];
					dust.velocity *= 3f;
					dust = Main.dust[num94];
					dust.velocity += base.DirectionTo(Main.dust[num94].position) * 3f;
					num3 = num93;
				}
			}
			else if (this.type == 617)
			{
				this.position = base.Center;
				this.width = (this.height = 176);
				base.Center = this.position;
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				Main.PlaySound(SoundID.Item14, this.position);
				int num3;
				for (int num95 = 0; num95 < 4; num95 = num3 + 1)
				{
					int num96 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 240, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num96].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num3 = num95;
				}
				for (int num97 = 0; num97 < 30; num97 = num3 + 1)
				{
					int num98 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 62, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num98].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num98].noGravity = true;
					Dust dust = Main.dust[num98];
					dust.velocity *= 3f;
					num98 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 90, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num98].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					dust = Main.dust[num98];
					dust.velocity *= 2f;
					Main.dust[num98].noGravity = true;
					Main.dust[num98].fadeIn = 1f;
					Main.dust[num98].color = Color.Crimson * 0.5f;
					num3 = num97;
				}
				for (int num99 = 0; num99 < 10; num99 = num3 + 1)
				{
					int num100 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 62, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num100].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num100].noGravity = true;
					Dust dust = Main.dust[num100];
					dust.velocity *= 3f;
					num3 = num99;
				}
				for (int num101 = 0; num101 < 10; num101 = num3 + 1)
				{
					int num102 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 240, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num102].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num102].noGravity = true;
					Dust dust = Main.dust[num102];
					dust.velocity *= 3f;
					num3 = num101;
				}
				for (int num103 = 0; num103 < 2; num103 = num3 + 1)
				{
					int num104 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num104].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Gore gore = Main.gore[num104];
					gore.velocity *= 0.3f;
					Gore expr_3C56_cp_0_cp_0 = Main.gore[num104];
					expr_3C56_cp_0_cp_0.velocity.X = expr_3C56_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_3C81_cp_0_cp_0 = Main.gore[num104];
					expr_3C81_cp_0_cp_0.velocity.Y = expr_3C81_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num103;
				}
				if (Main.myPlayer == this.owner)
				{
					for (int num105 = 0; num105 < 1000; num105 = num3 + 1)
					{
						if (Main.projectile[num105].active && Main.projectile[num105].type == 618 && Main.projectile[num105].ai[1] == (float)this.whoAmI)
						{
							Main.projectile[num105].Kill();
						}
						num3 = num105;
					}
					int num106 = Main.rand.Next(5, 9);
					int num107 = Main.rand.Next(5, 9);
					int num108 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						86,
						90
					});
					int num109 = (num108 == 86) ? 90 : 86;
					for (int num110 = 0; num110 < num106; num110 = num3 + 1)
					{
						Vector2 vector4 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
						Vector2 vector5 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						while (vector5.X == 0f && vector5.Y == 0f)
						{
							vector5 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						}
						vector5.Normalize();
						if (vector5.Y > 0.2f)
						{
							vector5.Y *= -1f;
						}
						vector5 *= (float)Main.rand.Next(70, 101) * 0.1f;
						Projectile.NewProjectile(vector4.X, vector4.Y, vector5.X, vector5.Y, 620, (int)((double)this.damage * 0.65), this.knockBack * 0.8f, this.owner, (float)num108, 0f);
						num3 = num110;
					}
					for (int num111 = 0; num111 < num107; num111 = num3 + 1)
					{
						Vector2 vector6 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
						Vector2 vector7 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						while (vector7.X == 0f && vector7.Y == 0f)
						{
							vector7 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						}
						vector7.Normalize();
						if (vector7.Y > 0.4f)
						{
							vector7.Y *= -1f;
						}
						vector7 *= (float)Main.rand.Next(40, 81) * 0.1f;
						Projectile.NewProjectile(vector6.X, vector6.Y, vector7.X, vector7.Y, 620, (int)((double)this.damage * 0.65), this.knockBack * 0.8f, this.owner, (float)num109, 0f);
						num3 = num111;
					}
				}
			}
			else if (this.type == 658)
			{
				int num3;
				for (int num112 = 0; num112 < 10; num112 = num3 + 1)
				{
					int num113 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 269, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num113].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num113].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust = Main.dust[num113];
						dust.type++;
					}
					else
					{
						Main.dust[num113].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num113].noGravity = true;
					dust = Main.dust[num113];
					dust.velocity *= 1.25f;
					dust = Main.dust[num113];
					dust.velocity -= this.oldVelocity / 10f;
					num3 = num112;
				}
			}
			else if (this.type == 620 || this.type == 618)
			{
				if (this.type == 618)
				{
					this.ai[0] = 86f;
				}
				int num3;
				for (int num114 = 0; num114 < 10; num114 = num3 + 1)
				{
					int num115 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int)this.ai[0], this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num115].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num115].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust = Main.dust[num115];
						dust.type++;
					}
					else
					{
						Main.dust[num115].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num115].noGravity = true;
					dust = Main.dust[num115];
					dust.velocity *= 1.25f;
					dust = Main.dust[num115];
					dust.velocity -= this.oldVelocity / 10f;
					num3 = num114;
				}
			}
			else if (this.type == 619)
			{
				Main.PlaySound(SoundID.Item50, this.position);
				int num3;
				for (int num116 = 0; num116 < 20; num116 = num3 + 1)
				{
					int num117 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int)this.ai[0], this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num117].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num117].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
						dust = Main.dust[num117];
						dust.type++;
					}
					else
					{
						Main.dust[num117].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num117].noGravity = true;
					dust = Main.dust[num117];
					dust.velocity *= 2.5f;
					dust = Main.dust[num117];
					dust.velocity -= this.oldVelocity / 10f;
					num3 = num116;
				}
				if (Main.myPlayer == this.owner)
				{
					int num118 = Main.rand.Next(3, 6);
					for (int num119 = 0; num119 < num118; num119 = num3 + 1)
					{
						Vector2 vector8 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						while (vector8.X == 0f && vector8.Y == 0f)
						{
							vector8 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						}
						vector8.Normalize();
						vector8 *= (float)Main.rand.Next(70, 101) * 0.1f;
						Projectile.NewProjectile(this.oldPosition.X + (float)(this.width / 2), this.oldPosition.Y + (float)(this.height / 2), vector8.X, vector8.Y, 620, (int)((double)this.damage * 0.8), this.knockBack * 0.8f, this.owner, this.ai[0], 0f);
						num3 = num119;
					}
				}
			}
			if (this.type == 601)
			{
				Color portalColor = PortalHelper.GetPortalColor(this.owner, (int)this.ai[0]);
				Color color = portalColor;
				color.A = 255;
				int num3;
				for (int num120 = 0; num120 < 6; num120 = num3 + 1)
				{
					Vector2 value6 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f * Main.rand.NextFloat());
					Dust dust13 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263, 0f, 0f, 0, default(Color), 1f)];
					dust13.position = base.Center;
					dust13.velocity = value6 + this.velocity / 5f;
					dust13.color = color;
					dust13.scale = 2f;
					dust13.noLight = true;
					dust13.noGravity = true;
					num3 = num120;
				}
			}
			if (this.type == 596)
			{
				this.position = base.Center;
				this.width = (this.height = 60);
				base.Center = this.position;
				int num121 = 40;
				if (Main.expertMode)
				{
					num121 = 30;
				}
				this.damage = num121;
				this.Damage();
				Main.PlaySound(SoundID.Item14, this.position);
				int num3;
				for (int num122 = 0; num122 < 4; num122 = num3 + 1)
				{
					int num123 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num123].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num3 = num122;
				}
				for (int num124 = 0; num124 < 20; num124 = num3 + 1)
				{
					int num125 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num125].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num125].noGravity = true;
					Dust dust = Main.dust[num125];
					dust.velocity *= 2f;
					num3 = num124;
				}
				for (int num126 = 0; num126 < 10; num126 = num3 + 1)
				{
					int num127 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num127].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num127].noGravity = true;
					Dust dust = Main.dust[num127];
					dust.velocity *= 2f;
					num3 = num126;
				}
			}
			if (this.type == 659)
			{
				if (this.ai[0] >= 0f)
				{
					this.position = base.Center;
					this.width = (this.height = 40);
					base.Center = this.position;
					this.Damage();
					Main.PlaySound(SoundID.Item14, this.position);
					int num3;
					for (int num128 = 0; num128 < 2; num128 = num3 + 1)
					{
						int num129 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num129].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
						num3 = num128;
					}
					for (int num130 = 0; num130 < 10; num130 = num3 + 1)
					{
						int num131 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 0, default(Color), 2.5f);
						Main.dust[num131].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
						Main.dust[num131].noGravity = true;
						Dust dust = Main.dust[num131];
						dust.velocity *= 2f;
						num3 = num130;
					}
					for (int num132 = 0; num132 < 5; num132 = num3 + 1)
					{
						int num133 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num133].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
						Main.dust[num133].noGravity = true;
						Dust dust = Main.dust[num133];
						dust.velocity *= 2f;
						num3 = num132;
					}
				}
			}
			else if (this.type >= 625 && this.type <= 628)
			{
				int num3;
				for (int num134 = 0; num134 < 6; num134 = num3 + 1)
				{
					int num135 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num135].noGravity = true;
					Main.dust[num135].noLight = true;
					num3 = num134;
				}
			}
			if (this.type == 631)
			{
				int num136 = Main.rand.Next(5, 10);
				int num3;
				for (int num137 = 0; num137 < num136; num137 = num3 + 1)
				{
					int num138 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 1f);
					Dust dust = Main.dust[num138];
					dust.velocity *= 1.6f;
					Dust expr_4DDD_cp_0_cp_0 = Main.dust[num138];
					expr_4DDD_cp_0_cp_0.velocity.Y = expr_4DDD_cp_0_cp_0.velocity.Y - 1f;
					dust = Main.dust[num138];
					dust.position -= Vector2.One * 4f;
					Main.dust[num138].position = Vector2.Lerp(Main.dust[num138].position, base.Center, 0.5f);
					Main.dust[num138].noGravity = true;
					num3 = num137;
				}
			}
			if (this.type == 539)
			{
				this.position = base.Center;
				this.width = (this.height = 80);
				base.Center = this.position;
				this.Damage();
				Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 7, 1f, 0f);
				int num3;
				for (int num139 = 0; num139 < 4; num139 = num3 + 1)
				{
					int num140 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num140].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num3 = num139;
				}
				for (int num141 = 0; num141 < 20; num141 = num3 + 1)
				{
					int num142 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 176, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num142].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num142].noGravity = true;
					Dust dust = Main.dust[num142];
					dust.velocity *= 3f;
					num3 = num141;
				}
				for (int num143 = 0; num143 < 20; num143 = num3 + 1)
				{
					int num144 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 180, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num144].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num144].noGravity = true;
					Dust dust = Main.dust[num144];
					dust.velocity *= 3f;
					num3 = num143;
				}
				for (int num145 = 0; num145 < 10; num145 = num3 + 1)
				{
					int num146 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num146].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num146].noGravity = true;
					Dust dust = Main.dust[num146];
					dust.velocity *= 3f;
					num3 = num145;
				}
			}
			else if (this.type == 585)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 27, 1f, 0f);
				int num3;
				for (int num147 = 0; num147 < 20; num147 = num3 + 1)
				{
					int num148 = Dust.NewDust(this.position, this.width, this.height, 26, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num148].noGravity = true;
					Dust dust = Main.dust[num148];
					dust.velocity *= 1.2f;
					Main.dust[num148].scale = 1.3f;
					dust = Main.dust[num148];
					dust.velocity -= this.oldVelocity * 0.3f;
					num148 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 27, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num148].noGravity = true;
					dust = Main.dust[num148];
					dust.velocity *= 3f;
					num3 = num147;
				}
			}
			else if (this.type == 590)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 27, 1f, 0f);
				int num3;
				for (int num149 = 0; num149 < 10; num149 = num3 + 1)
				{
					int num150 = Dust.NewDust(this.position, this.width, this.height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust = Main.dust[num150];
					dust.velocity *= 2f;
					Main.dust[num150].noGravity = true;
					num3 = num149;
				}
				float num151 = 0.6f + Main.rand.NextFloat() * 0.4f;
				int num152 = Gore.NewGore(this.position, Vector2.Zero, 375, num151);
				Gore gore = Main.gore[num152];
				gore.velocity *= 0.3f;
				num152 = Gore.NewGore(this.position, Vector2.Zero, 376, num151);
				gore = Main.gore[num152];
				gore.velocity *= 0.3f;
				num152 = Gore.NewGore(this.position, Vector2.Zero, 377, num151);
				gore = Main.gore[num152];
				gore.velocity *= 0.3f;
			}
			else if (this.type == 587)
			{
				Color newColor2 = Main.hslToRgb(this.ai[1], 1f, 0.5f);
				newColor2.A = 200;
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num153 = 0; num153 < 10; num153 = num3 + 1)
				{
					int num154 = Dust.NewDust(this.position, this.width, this.height, 76, 0f, 0f, 0, newColor2, 1f);
					Main.dust[num154].noGravity = true;
					Dust dust = Main.dust[num154];
					dust.velocity *= 1.2f;
					Main.dust[num154].scale = 0.9f;
					dust = Main.dust[num154];
					dust.velocity -= this.oldVelocity * 0.3f;
					num154 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 76, 0f, 0f, 0, newColor2, 1.1f);
					Main.dust[num154].noGravity = true;
					dust = Main.dust[num154];
					dust.velocity *= 2f;
					num3 = num153;
				}
			}
			else if (this.type == 572)
			{
				int num3;
				for (int num155 = 0; num155 < 15; num155 = num3 + 1)
				{
					int num156 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, default(Color), 1f);
					Dust dust = Main.dust[num156];
					dust.velocity *= 3f;
					Main.dust[num156].noGravity = true;
					Main.dust[num156].scale = 1.25f;
					Main.dust[num156].position = (base.Center + this.position) / 2f;
					num3 = num155;
				}
			}
			else if (this.type == 581)
			{
				int num3;
				for (int num157 = 0; num157 < 30; num157 = num3 + 1)
				{
					int num158 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						229,
						229,
						161
					});
					Dust dust14 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num158, 0f, 0f, 0, default(Color), 1f)];
					dust14.noGravity = true;
					dust14.scale = 1.25f + Main.rand.NextFloat();
					dust14.fadeIn = 0.25f;
					Dust dust = dust14;
					dust.velocity *= 2f;
					dust14.noLight = true;
					num3 = num157;
				}
			}
			else if (this.type == 671)
			{
				int num3;
				for (int num159 = 0; num159 < 30; num159 = num3 + 1)
				{
					int num160 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						27,
						27,
						62
					});
					Dust dust15 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num160, 0f, 0f, 0, default(Color), 1f)];
					dust15.noGravity = true;
					dust15.scale = 1.25f + Main.rand.NextFloat();
					dust15.fadeIn = 0.25f;
					Dust dust = dust15;
					dust.velocity *= 2f;
					dust15.noLight = true;
					num3 = num159;
				}
			}
			else if (this.type == 675)
			{
				int num3;
				for (int num161 = 0; num161 < 40; num161 = num3 + 1)
				{
					int num162 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						27,
						242,
						73,
						72,
						71,
						255,
						255,
						255
					});
					Dust dust16 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num162, 0f, 0f, 0, default(Color), 1f)];
					dust16.noGravity = true;
					dust16.scale = 1.25f + Main.rand.NextFloat();
					dust16.fadeIn = 0.25f;
					Dust dust = dust16;
					dust.velocity *= 3f;
					dust16.noLight = true;
					num3 = num161;
				}
			}
			else if (this.type == 676)
			{
				int num3;
				for (int num163 = 0; num163 < 120; num163 = num3 + 1)
				{
					int num164 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						4,
						256
					});
					Dust dust17 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num164, 0f, 0f, 100, default(Color), 1f)];
					dust17.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
					dust17.fadeIn = 0.5f;
					Dust dust = dust17;
					dust.velocity *= 4.5f;
					dust17.noLight = true;
					if (dust17.velocity.Y > 0f)
					{
						dust = dust17;
						dust.velocity *= -0.5f;
					}
					if (dust17.type == 4)
					{
						dust17.color = new Color(80, 170, 40, 120);
					}
					num3 = num163;
				}
				for (int num165 = 0; num165 < 10; num165 = num3 + 1)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), -Main.rand.NextFloat() * 5f), 1024, 1f);
					num3 = num165;
				}
				for (int num166 = 0; num166 < 10; num166 = num3 + 1)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), -Main.rand.NextFloat() * 5f), 1025, 1f);
					num3 = num166;
				}
				for (int num167 = 0; num167 < 10; num167 = num3 + 1)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), -Main.rand.NextFloat() * 5f), 1026, 1f);
					num3 = num167;
				}
				for (int num168 = 0; num168 < 20; num168 = num3 + 1)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-0.5f, 0.5f, Main.rand.NextFloat()), -Main.rand.NextFloat() * 2f), 1026, 1f);
					num3 = num168;
				}
				if (Main.netMode != 2)
				{
					Player player = Main.player[Main.myPlayer];
					if (!player.dead && player.active && (player.Center - base.Center).Length() < 300f)
					{
						player.AddBuff(197, 900, false);
					}
				}
			}
			else if (this.type == 686)
			{
				Rectangle hitbox3 = base.Hitbox;
				int num3;
				for (int num169 = 0; num169 < this.oldPos.Length / 2; num169 += 2)
				{
					hitbox3.X = (int)this.oldPos[num169].X;
					hitbox3.Y = (int)this.oldPos[num169].Y;
					for (int num170 = 0; num170 < 3; num170 = num3 + 1)
					{
						int num171 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							6,
							55,
							158
						});
						int num172 = Dust.NewDust(hitbox3.TopLeft(), this.width, this.height, num171, (float)this.direction, -2.5f, 0, default(Color), 1f);
						Main.dust[num172].alpha = 200;
						Dust dust = Main.dust[num172];
						dust.velocity *= 2.4f;
						dust = Main.dust[num172];
						dust.scale += Main.rand.NextFloat();
						dust = Main.dust[num172];
						dust.scale -= 0.5f;
						if (Main.dust[num172].type == 55)
						{
							Main.dust[num172].color = Color.Lerp(Color.Red, Color.Gold, Main.rand.NextFloat());
						}
						Main.dust[num172].noLight = true;
						num3 = num170;
					}
				}
				for (int num173 = 10; num173 < this.oldPos.Length; num173 += 2)
				{
					hitbox3.X = (int)this.oldPos[num173].X;
					hitbox3.Y = (int)this.oldPos[num173].Y;
					for (int num174 = 0; num174 < 2; num174 = num3 + 1)
					{
						int num175 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							55
						});
						int num176 = Dust.NewDust(hitbox3.TopLeft(), this.width, this.height, num175, (float)this.direction, -2.5f, 0, default(Color), 1f);
						Main.dust[num176].alpha = 120;
						Dust dust = Main.dust[num176];
						dust.velocity *= 2.4f;
						dust = Main.dust[num176];
						dust.scale += Main.rand.NextFloat() * 0.7f;
						dust = Main.dust[num176];
						dust.scale -= 0.5f;
						if (Main.dust[num176].type == 55)
						{
							Main.dust[num176].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num176].noLight = true;
						num3 = num174;
					}
				}
				for (int num177 = 5; num177 < this.oldPos.Length; num177++)
				{
					hitbox3.X = (int)this.oldPos[num177].X;
					hitbox3.Y = (int)this.oldPos[num177].Y;
					for (int num178 = 0; num178 < 1; num178 = num3 + 1)
					{
						int num179 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							55
						});
						int num180 = Dust.NewDust(hitbox3.TopLeft(), this.width, this.height, num179, (float)this.direction, -2.5f, 0, default(Color), 1f);
						Main.dust[num180].alpha = 80;
						Dust dust = Main.dust[num180];
						dust.velocity *= 0.3f;
						dust = Main.dust[num180];
						dust.velocity += this.velocity * 0.5f;
						dust = Main.dust[num180];
						dust.scale += Main.rand.NextFloat() * 0.7f;
						dust = Main.dust[num180];
						dust.scale -= 0.5f;
						if (Main.dust[num180].type == 55)
						{
							Main.dust[num180].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num180].noLight = true;
						num3 = num178;
					}
				}
				for (int num181 = 0; num181 < 30; num181 = num3 + 1)
				{
					int num182 = 228;
					Dust dust18 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num182, 0f, 0f, 0, default(Color), 1f)];
					dust18.noGravity = true;
					dust18.scale = 1.25f + Main.rand.NextFloat();
					dust18.fadeIn = 1.5f;
					Dust dust = dust18;
					dust.velocity *= 6f;
					dust18.noLight = true;
					num3 = num181;
				}
			}
			if (this.type == 405)
			{
				Main.PlaySound(SoundID.Item54, this.position);
				Vector2 arg_62D3_0 = base.Center;
				int num3;
				for (int num183 = 0; num183 < 20; num183 = num3 + 1)
				{
					int num184 = 10;
					int num185 = Dust.NewDust(base.Center - Vector2.One * (float)num184, num184 * 2, num184 * 2, 212, 0f, 0f, 0, default(Color), 1f);
					Dust dust19 = Main.dust[num185];
					Vector2 value7 = Vector2.Normalize(dust19.position - base.Center);
					dust19.position = base.Center + value7 * (float)num184 * this.scale;
					if (num183 < 30)
					{
						dust19.velocity = value7 * dust19.velocity.Length();
					}
					else
					{
						dust19.velocity = value7 * (float)Main.rand.Next(45, 91) / 10f;
					}
					dust19.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
					dust19.color = Color.Lerp(dust19.color, Color.White, 0.3f);
					dust19.noGravity = true;
					dust19.scale = 0.7f;
					num3 = num183;
				}
			}
			if (this.type == 501)
			{
				Main.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num186 = 20;
				this.position.X = this.position.X - (float)num186;
				this.position.Y = this.position.Y - (float)num186;
				this.width += num186 * 2;
				this.height += num186 * 2;
				num186 += 20;
				int num3;
				for (int num187 = 0; num187 < 20; num187 = num3 + 1)
				{
					int num188 = Dust.NewDust(this.position, this.width, this.height, 188, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num188];
					dust.velocity *= 0.5f;
					num3 = num187;
				}
				for (int num189 = 0; num189 < 5; num189 = num3 + 1)
				{
					int num190 = Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), default(Vector2), Main.rand.Next(435, 438), 1f);
					Gore gore = Main.gore[num190];
					gore.velocity *= 0.5f;
					if (num189 == 0)
					{
						Gore expr_65D3_cp_0_cp_0 = Main.gore[num190];
						expr_65D3_cp_0_cp_0.velocity.X = expr_65D3_cp_0_cp_0.velocity.X + 1f;
						Gore expr_65EE_cp_0_cp_0 = Main.gore[num190];
						expr_65EE_cp_0_cp_0.velocity.Y = expr_65EE_cp_0_cp_0.velocity.Y + 1f;
					}
					else if (num189 == 1)
					{
						Gore expr_6613_cp_0_cp_0 = Main.gore[num190];
						expr_6613_cp_0_cp_0.velocity.X = expr_6613_cp_0_cp_0.velocity.X - 1f;
						Gore expr_662E_cp_0_cp_0 = Main.gore[num190];
						expr_662E_cp_0_cp_0.velocity.Y = expr_662E_cp_0_cp_0.velocity.Y + 1f;
					}
					else if (num189 == 2)
					{
						Gore expr_6650_cp_0_cp_0 = Main.gore[num190];
						expr_6650_cp_0_cp_0.velocity.X = expr_6650_cp_0_cp_0.velocity.X + 1f;
						Gore expr_666B_cp_0_cp_0 = Main.gore[num190];
						expr_666B_cp_0_cp_0.velocity.Y = expr_666B_cp_0_cp_0.velocity.Y - 1f;
					}
					else
					{
						Gore expr_6688_cp_0_cp_0 = Main.gore[num190];
						expr_6688_cp_0_cp_0.velocity.X = expr_6688_cp_0_cp_0.velocity.X - 1f;
						Gore expr_66A3_cp_0_cp_0 = Main.gore[num190];
						expr_66A3_cp_0_cp_0.velocity.Y = expr_66A3_cp_0_cp_0.velocity.Y - 1f;
					}
					gore = Main.gore[num190];
					gore.velocity *= 0.5f;
					num3 = num189;
				}
				this.position.X = this.position.X - (float)num186;
				this.position.Y = this.position.Y - (float)num186;
				this.width += num186 * 2;
				this.height += num186 * 2;
				this.Damage();
			}
			if (this.type == 410)
			{
				Main.PlaySound(SoundID.Item54, this.position);
				Vector2 arg_6751_0 = base.Center;
				int num3;
				for (int num191 = 0; num191 < 10; num191 = num3 + 1)
				{
					int num192 = (int)(10f * this.ai[1]);
					int num193 = Dust.NewDust(base.Center - Vector2.One * (float)num192, num192 * 2, num192 * 2, 212, 0f, 0f, 0, default(Color), 1f);
					Dust dust20 = Main.dust[num193];
					Vector2 value8 = Vector2.Normalize(dust20.position - base.Center);
					dust20.position = base.Center + value8 * (float)num192 * this.scale;
					if (num191 < 30)
					{
						dust20.velocity = value8 * dust20.velocity.Length();
					}
					else
					{
						dust20.velocity = value8 * (float)Main.rand.Next(45, 91) / 10f;
					}
					dust20.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
					dust20.color = Color.Lerp(dust20.color, Color.White, 0.3f);
					dust20.noGravity = true;
					dust20.scale = 0.7f;
					num3 = num191;
				}
			}
			if (this.type == 629 && Main.netMode != 1)
			{
				int num3 = Main.npc[(int)this.ai[0]].type;
				if (num3 <= 493)
				{
					if (num3 != 422)
					{
						if (num3 == 493)
						{
                            if (NpcMgr.ShieldStrengthTowerStardust != 0)
							{
								Main.npc[(int)this.ai[0]].ai[3] = 1f;
							}
                            NpcMgr.ShieldStrengthTowerStardust = (int)MathHelper.Clamp((float)(NpcMgr.ShieldStrengthTowerStardust - 1), 0f, (float)NpcMgr.ShieldStrengthTowerMax);
						}
					}
					else
					{
                        if (NpcMgr.ShieldStrengthTowerVortex != 0)
						{
							Main.npc[(int)this.ai[0]].ai[3] = 1f;
						}
                        NpcMgr.ShieldStrengthTowerVortex = (int)MathHelper.Clamp((float)(NpcMgr.ShieldStrengthTowerVortex - 1), 0f, (float)NpcMgr.ShieldStrengthTowerMax);
					}
				}
				else if (num3 != 507)
				{
					if (num3 == 517)
					{
                        if (NpcMgr.ShieldStrengthTowerSolar != 0)
						{
							Main.npc[(int)this.ai[0]].ai[3] = 1f;
						}
                        NpcMgr.ShieldStrengthTowerSolar = (int)MathHelper.Clamp((float)(NpcMgr.ShieldStrengthTowerSolar - 1), 0f, (float)NpcMgr.ShieldStrengthTowerMax);
					}
				}
				else
				{
                    if (NpcMgr.ShieldStrengthTowerNebula != 0)
					{
						Main.npc[(int)this.ai[0]].ai[3] = 1f;
					}
                    NpcMgr.ShieldStrengthTowerNebula = (int)MathHelper.Clamp((float)(NpcMgr.ShieldStrengthTowerNebula - 1), 0f, (float)NpcMgr.ShieldStrengthTowerMax);
				}
				Main.npc[(int)this.ai[0]].netUpdate = true;
				NetMessage.SendData(101, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
			if (this.aiStyle == 105 && this.owner == Main.myPlayer && this.ai[1] == 0f)
			{
				Vector2 vector9 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
				vector9.Normalize();
				vector9 *= 0.3f;
				Projectile.NewProjectile(base.Center.X, base.Center.Y, vector9.X, vector9.Y, Main.rand.Next(569, 572), this.damage, 0f, this.owner, 0f, 0f);
			}
			if (this.type == 452)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 103, 1f, 0f);
				this.position = base.Center;
				this.width = (this.height = 144);
				this.position.X = this.position.X - (float)(this.width / 2);
				this.position.Y = this.position.Y - (float)(this.height / 2);
				int num3;
				for (int num194 = 0; num194 < 4; num194 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					num3 = num194;
				}
				for (int num195 = 0; num195 < 40; num195 = num3 + 1)
				{
					int num196 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num196].noGravity = true;
					Dust dust = Main.dust[num196];
					dust.velocity *= 3f;
					num196 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num196];
					dust.velocity *= 2f;
					Main.dust[num196].noGravity = true;
					num3 = num195;
				}
				for (int num197 = 0; num197 < 1; num197 = num3 + 1)
				{
					int num198 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore = Main.gore[num198];
					gore.velocity *= 0.3f;
					Gore expr_6E79_cp_0_cp_0 = Main.gore[num198];
					expr_6E79_cp_0_cp_0.velocity.X = expr_6E79_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_6EA8_cp_0_cp_0 = Main.gore[num198];
					expr_6EA8_cp_0_cp_0.velocity.Y = expr_6EA8_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num197;
				}
				this.Damage();
			}
			if (this.type == 454)
			{
				Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 6, 1f, 0f);
				this.position = base.Center;
				this.width = (this.height = 208);
				this.position.X = this.position.X - (float)(this.width / 2);
				this.position.Y = this.position.Y - (float)(this.height / 2);
				int num3;
				for (int num199 = 0; num199 < 7; num199 = num3 + 1)
				{
					int num200 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num200].position = new Vector2((float)(this.width / 2), 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble(), default(Vector2)) * (float)Main.rand.NextDouble() + base.Center;
					num3 = num199;
				}
				for (int num201 = 0; num201 < 60; num201 = num3 + 1)
				{
					int num202 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num202].position = new Vector2((float)(this.width / 2), 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble(), default(Vector2)) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num202].noGravity = true;
					Dust dust = Main.dust[num202];
					dust.velocity *= 1f;
					num202 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num202].position = new Vector2((float)(this.width / 2), 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble(), default(Vector2)) * (float)Main.rand.NextDouble() + base.Center;
					dust = Main.dust[num202];
					dust.velocity *= 1f;
					Main.dust[num202].noGravity = true;
					num3 = num201;
				}
				for (int num203 = 0; num203 < 3; num203 = num3 + 1)
				{
					int num204 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore = Main.gore[num204];
					gore.velocity *= 0.3f;
					Gore expr_730E_cp_0_cp_0 = Main.gore[num204];
					expr_730E_cp_0_cp_0.velocity.X = expr_730E_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_733D_cp_0_cp_0 = Main.gore[num204];
					expr_733D_cp_0_cp_0.velocity.Y = expr_733D_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num203;
				}
				this.Damage();
			}
			if (this.type == 467)
			{
				this.position = base.Center;
				this.width = (this.height = 176);
				base.Center = this.position;
				this.Damage();
				Main.PlaySound(SoundID.Item14, this.position);
				int num3;
				for (int num205 = 0; num205 < 4; num205 = num3 + 1)
				{
					int num206 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num206].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num3 = num205;
				}
				for (int num207 = 0; num207 < 30; num207 = num3 + 1)
				{
					int num208 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num208].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num208].noGravity = true;
					Dust dust = Main.dust[num208];
					dust.velocity *= 3f;
					num208 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num208].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					dust = Main.dust[num208];
					dust.velocity *= 2f;
					Main.dust[num208].noGravity = true;
					Main.dust[num208].fadeIn = 2.5f;
					num3 = num207;
				}
				for (int num209 = 0; num209 < 10; num209 = num3 + 1)
				{
					int num210 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num210].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num210].noGravity = true;
					Dust dust = Main.dust[num210];
					dust.velocity *= 3f;
					num3 = num209;
				}
				for (int num211 = 0; num211 < 10; num211 = num3 + 1)
				{
					int num212 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num212].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num212].noGravity = true;
					Dust dust = Main.dust[num212];
					dust.velocity *= 3f;
					num3 = num211;
				}
				for (int num213 = 0; num213 < 2; num213 = num3 + 1)
				{
					int num214 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num214].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Gore gore = Main.gore[num214];
					gore.velocity *= 0.3f;
					Gore expr_79C9_cp_0_cp_0 = Main.gore[num214];
					expr_79C9_cp_0_cp_0.velocity.X = expr_79C9_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_79F8_cp_0_cp_0 = Main.gore[num214];
					expr_79F8_cp_0_cp_0.velocity.Y = expr_79F8_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num213;
				}
			}
			if (this.type == 468)
			{
				this.position = base.Center;
				this.width = (this.height = 176);
				base.Center = this.position;
				this.Damage();
				Main.PlaySound(SoundID.Item14, this.position);
				int num3;
				for (int num215 = 0; num215 < 4; num215 = num3 + 1)
				{
					int num216 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num216].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num3 = num215;
				}
				for (int num217 = 0; num217 < 20; num217 = num3 + 1)
				{
					int num218 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num218].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num218].noGravity = true;
					Dust dust = Main.dust[num218];
					dust.velocity *= 3f;
					num218 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num218].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					dust = Main.dust[num218];
					dust.velocity *= 2f;
					Main.dust[num218].noGravity = true;
					Main.dust[num218].fadeIn = 2.5f;
					num3 = num217;
				}
				for (int num219 = 0; num219 < 10; num219 = num3 + 1)
				{
					int num220 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num220].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num220].noGravity = true;
					Dust dust = Main.dust[num220];
					dust.velocity *= 3f;
					num3 = num219;
				}
				for (int num221 = 0; num221 < 10; num221 = num3 + 1)
				{
					int num222 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num222].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num222].noGravity = true;
					Dust dust = Main.dust[num222];
					dust.velocity *= 3f;
					num3 = num221;
				}
				for (int num223 = 0; num223 < 2; num223 = num3 + 1)
				{
					int num224 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num224].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Gore gore = Main.gore[num224];
					gore.velocity *= 0.3f;
					Gore expr_8081_cp_0_cp_0 = Main.gore[num224];
					expr_8081_cp_0_cp_0.velocity.X = expr_8081_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_80B0_cp_0_cp_0 = Main.gore[num224];
					expr_80B0_cp_0_cp_0.velocity.Y = expr_80B0_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num223;
				}
			}
			if (this.type == 485)
			{
				int num3;
				for (int num225 = 0; num225 < 15; num225 = num3 + 1)
				{
					int num226 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num226].noGravity = true;
					Dust dust = Main.dust[num226];
					dust.velocity -= this.oldVelocity * (float)Main.rand.Next(20, 60) * 0.01f;
					num3 = num225;
				}
			}
			else if (this.type == 484)
			{
				int num3;
				for (int num227 = 0; num227 < 5; num227 = num3 + 1)
				{
					int num228 = Dust.NewDust(this.position, this.width, this.height, 78, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num228].noGravity = true;
					Dust dust = Main.dust[num228];
					dust.velocity -= this.oldVelocity / 5f;
					Main.dust[num228].scale = 0.85f;
					num3 = num227;
				}
			}
			else if (this.type == 483)
			{
				Main.PlaySound(SoundID.Item14, this.position);
				int num3;
				if (this.owner == Main.myPlayer)
				{
					int num229 = Main.rand.Next(4, 8);
					int[] array = new int[num229];
					int num230 = 0;
					for (int num231 = 0; num231 < 200; num231 = num3 + 1)
					{
						if (Main.npc[num231].CanBeChasedBy(this, true) && Collision.CanHitLine(this.position, this.width, this.height, Main.npc[num231].position, Main.npc[num231].width, Main.npc[num231].height))
						{
							array[num230] = num231;
							num230++;
							if (num230 == num229)
							{
								break;
							}
						}
						num3 = num231;
					}
					if (num230 > 1)
					{
						for (int num232 = 0; num232 < 100; num232 = num3 + 1)
						{
							int num233 = Main.rand.Next(num230);
							int num234;
							for (num234 = num233; num234 == num233; num234 = Main.rand.Next(num230))
							{
							}
							int num235 = array[num233];
							array[num233] = array[num234];
							array[num234] = num235;
							num3 = num232;
						}
					}
					Vector2 vector10 = new Vector2(-1f, -1f);
					for (int num236 = 0; num236 < num230; num236 = num3 + 1)
					{
						Vector2 value9 = Main.npc[array[num236]].Center - base.Center;
						value9.Normalize();
						vector10 += value9;
						num3 = num236;
					}
					vector10.Normalize();
					for (int num237 = 0; num237 < num229; num237 = num3 + 1)
					{
						float scaleFactor = (float)Main.rand.Next(8, 15);
						Vector2 vector11 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						vector11.Normalize();
						if (num230 > 0)
						{
							vector11 += vector10;
							vector11.Normalize();
						}
						vector11 *= scaleFactor;
						if (num230 > 0)
						{
							num230--;
							vector11 = Main.npc[array[num230]].Center - base.Center;
							vector11.Normalize();
							vector11 *= scaleFactor;
						}
						Projectile.NewProjectile(base.Center.X, base.Center.Y, vector11.X, vector11.Y, 484, (int)((double)this.damage * 0.7), this.knockBack * 0.7f, this.owner, 0f, 0f);
						num3 = num237;
					}
				}
				for (int num238 = 0; num238 < 20; num238 = num3 + 1)
				{
					int num239 = Dust.NewDust(this.position, this.width, this.height, 78, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num239].noGravity = true;
					Dust dust = Main.dust[num239];
					dust.velocity *= 4f;
					num3 = num238;
				}
				for (int num240 = 0; num240 < 7; num240 = num3 + 1)
				{
					int num241 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num241];
					dust.velocity *= 0.9f;
					Main.dust[num241].scale = 0.9f;
					num3 = num240;
				}
				for (int num242 = 0; num242 < 3; num242 = num3 + 1)
				{
					int num243 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num243].noGravity = true;
					Dust dust = Main.dust[num243];
					dust.velocity *= 3f;
					num243 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num243];
					dust.velocity *= 2f;
					num3 = num242;
				}
				int num244 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
				Gore gore = Main.gore[num244];
				gore.velocity *= 0.3f;
				Gore expr_8953_cp_0_cp_0 = Main.gore[num244];
				expr_8953_cp_0_cp_0.velocity.X = expr_8953_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-1, 2);
				Gore expr_897A_cp_0_cp_0 = Main.gore[num244];
				expr_897A_cp_0_cp_0.velocity.Y = expr_897A_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-1, 2);
				if (this.owner == Main.myPlayer)
				{
					int num245 = 100;
					this.position.X = this.position.X - (float)(num245 / 2);
					this.position.Y = this.position.Y - (float)(num245 / 2);
					this.width += num245;
					this.height++;
					this.penetrate = -1;
					this.Damage();
				}
			}
			if (this.type == 523)
			{
				Main.PlaySound(SoundID.Item54, this.position);
				int num3;
				for (int num246 = 0; num246 < 25; num246 = num3 + 1)
				{
					int num247 = Dust.NewDust(this.position, this.width, this.height, 256, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num247].noGravity = true;
					Main.dust[num247].position = (Main.dust[num247].position + this.position) / 2f;
					Main.dust[num247].velocity = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					Main.dust[num247].velocity.Normalize();
					Dust dust = Main.dust[num247];
					dust.velocity *= (float)Main.rand.Next(1, 30) * 0.1f;
					Main.dust[num247].alpha = this.alpha;
					num3 = num246;
				}
			}
			else if (this.type == 522)
			{
				Main.PlaySound(SoundID.Item118, this.position);
				int num3;
				for (int num248 = 0; num248 < 10; num248 = num3 + 1)
				{
					int num249 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num249].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num249].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust = Main.dust[num249];
						dust.type++;
					}
					else
					{
						Main.dust[num249].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num249].noGravity = true;
					dust = Main.dust[num249];
					dust.velocity *= 1.25f;
					dust = Main.dust[num249];
					dust.velocity -= this.oldVelocity / 10f;
					num3 = num248;
				}
			}
			else if (this.type == 521)
			{
				Main.PlaySound(SoundID.Item110, this.position);
				int num3;
				for (int num250 = 0; num250 < 20; num250 = num3 + 1)
				{
					int num251 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num251].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num251].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
						dust = Main.dust[num251];
						dust.type++;
					}
					else
					{
						Main.dust[num251].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num251].noGravity = true;
					dust = Main.dust[num251];
					dust.velocity *= 2.5f;
					dust = Main.dust[num251];
					dust.velocity -= this.oldVelocity / 10f;
					num3 = num250;
				}
				if (Main.myPlayer == this.owner)
				{
					int num252 = Main.rand.Next(3, 6);
					for (int num253 = 0; num253 < num252; num253 = num3 + 1)
					{
						Vector2 vector12 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						while (vector12.X == 0f && vector12.Y == 0f)
						{
							vector12 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						}
						vector12.Normalize();
						vector12 *= (float)Main.rand.Next(70, 101) * 0.1f;
						Projectile.NewProjectile(this.oldPosition.X + (float)(this.width / 2), this.oldPosition.Y + (float)(this.height / 2), vector12.X, vector12.Y, 522, (int)((double)this.damage * 0.8), this.knockBack * 0.8f, this.owner, 0f, 0f);
						num3 = num253;
					}
				}
			}
			if (this.type == 520)
			{
				Main.PlaySound(SoundID.Item50, this.position);
				int num3;
				for (int num254 = 0; num254 < 10; num254 = num3 + 1)
				{
					int num255 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 252, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.75f);
					Main.dust[num255].noGravity = true;
					Dust dust = Main.dust[num255];
					dust.velocity -= this.oldVelocity / 3f;
					num3 = num254;
				}
			}
			if (this.type == 459 || this.type == 709)
			{
				int num256 = 3;
				int num257 = 10;
				int num258 = 0;
				if (this.scale >= 1f)
				{
					this.position = base.Center;
					this.width = (this.height = 144);
					base.Center = this.position;
					num256 = 7;
					num257 = 30;
					num258 = 2;
					this.Damage();
				}
				int num3;
				for (int num259 = 0; num259 < num256; num259 = num3 + 1)
				{
					int num260 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num260].position = new Vector2((float)(this.width / 2), 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble(), default(Vector2)) * (float)Main.rand.NextDouble() + base.Center;
					num3 = num259;
				}
				for (int num261 = 0; num261 < num257; num261 = num3 + 1)
				{
					int num262 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 226, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num262].position = new Vector2((float)(this.width / 2), 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble(), default(Vector2)) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num262].noGravity = true;
					Dust dust = Main.dust[num262];
					dust.velocity *= 1f;
					num3 = num261;
				}
				for (int num263 = 0; num263 < num258; num263 = num3 + 1)
				{
					int num264 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore = Main.gore[num264];
					gore.velocity *= 0.3f;
					Gore expr_94B4_cp_0_cp_0 = Main.gore[num264];
					expr_94B4_cp_0_cp_0.velocity.X = expr_94B4_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_94E3_cp_0_cp_0 = Main.gore[num264];
					expr_94E3_cp_0_cp_0.velocity.Y = expr_94E3_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num263;
				}
				if (this.type == 709 && Main.myPlayer == this.owner)
				{
					Rectangle value10 = new Rectangle((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
					for (int num265 = 0; num265 < 1000; num265 = num3 + 1)
					{
						if (num265 != this.whoAmI && Main.projectile[num265].active && Main.projectile[num265].owner == this.owner && Main.projectile[num265].type == 443 && Main.projectile[num265].getRect().Intersects(value10))
						{
							Main.projectile[num265].ai[1] = 1f;
							Main.projectile[num265].velocity = (base.Center - Main.projectile[num265].Center) / 5f;
							Main.projectile[num265].netUpdate = true;
						}
						num3 = num265;
					}
					int num266 = Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 443, this.damage, 0f, this.owner, 0f, 0f);
					Main.projectile[num266].timeLeft = 30 * Main.rand.Next(2, 6);
					Main.projectile[num266].localAI[0] = Main.PlayTrackedSound(SoundID.DD2_SkyDragonsFuryCircle, base.Center).ToFloat();
				}
			}
			if (this.owner != Main.myPlayer && this.type == 453 && Main.player[this.owner].mount.AbilityActive)
			{
				Main.player[this.owner].mount.UseAbility(Main.player[this.owner], this.position, false);
			}
			if (this.type == 441)
			{
				Main.player[this.owner].mount.StopAbilityCharge();
			}
			if (this.type == 444)
			{
				Main.PlaySound(SoundID.Item96, this.position);
				int num267 = Main.rand.Next(5, 9);
				int num3;
				for (int num268 = 0; num268 < num267; num268 = num3 + 1)
				{
					int num269 = Dust.NewDust(base.Center, 0, 0, 171, 0f, 0f, 100, default(Color), 1.4f);
					Dust dust = Main.dust[num269];
					dust.velocity *= 0.8f;
					Main.dust[num269].position = Vector2.Lerp(Main.dust[num269].position, base.Center, 0.5f);
					Main.dust[num269].noGravity = true;
					num3 = num268;
				}
				if (this.owner == Main.myPlayer)
				{
					Vector2 value11 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
					if (Main.player[this.owner].gravDir == -1f)
					{
						value11.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
					}
					Vector2 vector13 = Vector2.Normalize(value11 - base.Center);
					vector13 *= this.localAI[1];
					Projectile.NewProjectile(base.Center.X, base.Center.Y, vector13.X, vector13.Y, (int)this.localAI[0], this.damage, this.knockBack, this.owner, 0f, 0f);
				}
			}
			if (this.type == 472)
			{
				int num3;
				for (int num270 = 0; num270 < 20; num270 = num3 + 1)
				{
					int num271 = Dust.NewDust(this.position, this.width, this.height, 30, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num271].noGravity = true;
					Dust dust = Main.dust[num271];
					dust.velocity *= 0.45f;
					dust = Main.dust[num271];
					dust.velocity += this.velocity * 0.9f;
					num3 = num270;
				}
			}
			if (this.type == 639 || this.type == 640)
			{
				int num272 = Main.rand.Next(5, 10);
				int num3;
				for (int num273 = 0; num273 < num272; num273 = num3 + 1)
				{
					int num274 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num274];
					dust.velocity *= 1.6f;
					Dust expr_9B17_cp_0_cp_0 = Main.dust[num274];
					expr_9B17_cp_0_cp_0.velocity.Y = expr_9B17_cp_0_cp_0.velocity.Y - 1f;
					Main.dust[num274].position = Vector2.Lerp(Main.dust[num274].position, base.Center, 0.5f);
					Main.dust[num274].noGravity = true;
					num3 = num273;
				}
				if (this.owner == Main.myPlayer && this.type == 639)
				{
					int num275 = num + 1;
					int nextSlot = Projectile.GetNextSlot();
					if (Main.ProjectileUpdateLoopIndex < nextSlot && Main.ProjectileUpdateLoopIndex != -1)
					{
						num275++;
					}
					Vector2 vector14 = new Vector2(this.ai[0], this.ai[1]);
					Projectile.NewProjectile(this.localAI[0], this.localAI[1], vector14.X, vector14.Y, 640, this.damage, this.knockBack, this.owner, 0f, (float)num275);
				}
			}
			if (this.type == 684)
			{
				int num276 = Main.rand.Next(15, 25);
				int num3;
				for (int num277 = 0; num277 < num276; num277 = num3 + 1)
				{
					int num278 = Dust.NewDust(base.Center, 0, 0, 60, 0f, 0f, 100, new Color(255, 255, 255, 0), 1.3f);
					Dust dust = Main.dust[num278];
					dust.velocity *= 8f * (0.3f + 0.7f * Main.rand.NextFloat());
					Main.dust[num278].fadeIn = 1.3f + Main.rand.NextFloat() * 0.2f;
					Main.dust[num278].noLight = true;
					Main.dust[num278].noGravity = true;
					dust = Main.dust[num278];
					dust.position += Main.dust[num278].velocity * 4f;
					num3 = num277;
				}
			}
			if (this.type == 435)
			{
				int num279 = Main.rand.Next(5, 10);
				int num3;
				for (int num280 = 0; num280 < num279; num280 = num3 + 1)
				{
					int num281 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num281];
					dust.velocity *= 1.6f;
					Dust expr_9E34_cp_0_cp_0 = Main.dust[num281];
					expr_9E34_cp_0_cp_0.velocity.Y = expr_9E34_cp_0_cp_0.velocity.Y - 1f;
					Main.dust[num281].position = Vector2.Lerp(Main.dust[num281].position, base.Center, 0.5f);
					Main.dust[num281].noGravity = true;
					num3 = num280;
				}
			}
			if (this.type == 682)
			{
				int num282 = 22;
				int num3;
				for (int num283 = 0; num283 < num282; num283 = num3 + 1)
				{
					int num284 = Dust.NewDust(base.Center, 0, 0, 272, 0f, 0f, 0, default(Color), 0.5f);
					Dust dust = Main.dust[num284];
					dust.velocity *= 1.6f;
					Dust expr_9F34_cp_0_cp_0 = Main.dust[num284];
					expr_9F34_cp_0_cp_0.velocity.Y = expr_9F34_cp_0_cp_0.velocity.Y - 1f;
					Main.dust[num284].position = Vector2.Lerp(Main.dust[num284].position, base.Center, 0.5f);
					num3 = num283;
				}
			}
			if (this.type == 436)
			{
				int num285 = Main.rand.Next(5, 10);
				int num3;
				for (int num286 = 0; num286 < num285; num286 = num3 + 1)
				{
					int num287 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num287];
					dust.velocity *= 1.6f;
					Dust expr_A02E_cp_0_cp_0 = Main.dust[num287];
					expr_A02E_cp_0_cp_0.velocity.Y = expr_A02E_cp_0_cp_0.velocity.Y - 1f;
					Main.dust[num287].position = Vector2.Lerp(Main.dust[num287].position, base.Center, 0.5f);
					Main.dust[num287].noGravity = true;
					num3 = num286;
				}
			}
			if (this.type == 462)
			{
				int num288 = Main.rand.Next(5, 10);
				int num3;
				for (int num289 = 0; num289 < num288; num289 = num3 + 1)
				{
					int num290 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num290];
					dust.velocity *= 1.6f;
					Dust expr_A13A_cp_0_cp_0 = Main.dust[num290];
					expr_A13A_cp_0_cp_0.velocity.Y = expr_A13A_cp_0_cp_0.velocity.Y - 1f;
					dust = Main.dust[num290];
					dust.position -= Vector2.One * 4f;
					Main.dust[num290].position = Vector2.Lerp(Main.dust[num290].position, base.Center, 0.5f);
					Main.dust[num290].noGravity = true;
					num3 = num289;
				}
			}
			if (this.type == 442)
			{
				Main.PlaySound(SoundID.Item94, this.position);
				int num291 = Main.rand.Next(3, 7);
				int num3;
				for (int num292 = 0; num292 < num291; num292 = num3 + 1)
				{
					int num293 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust = Main.dust[num293];
					dust.velocity *= 2f;
					Main.dust[num293].noGravity = true;
					num3 = num292;
				}
				if (Main.myPlayer == this.owner)
				{
					Rectangle value12 = new Rectangle((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
					for (int num294 = 0; num294 < 1000; num294 = num3 + 1)
					{
						if (num294 != this.whoAmI && Main.projectile[num294].active && Main.projectile[num294].owner == this.owner && Main.projectile[num294].type == 443 && Main.projectile[num294].getRect().Intersects(value12))
						{
							Main.projectile[num294].ai[1] = 1f;
							Main.projectile[num294].velocity = (base.Center - Main.projectile[num294].Center) / 5f;
							Main.projectile[num294].netUpdate = true;
						}
						num3 = num294;
					}
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 443, this.damage, 0f, this.owner, 0f, 0f);
				}
			}
			if (this.type == 440)
			{
				int num295 = Main.rand.Next(3, 7);
				int num3;
				for (int num296 = 0; num296 < num295; num296 = num3 + 1)
				{
					int num297 = Dust.NewDust(base.Center - this.velocity / 2f, 0, 0, 135, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust = Main.dust[num297];
					dust.velocity *= 2f;
					Main.dust[num297].noGravity = true;
					num3 = num296;
				}
			}
			if (this.type == 606)
			{
				int num298 = Main.rand.Next(3, 7);
				int num3;
				for (int num299 = 0; num299 < num298; num299 = num3 + 1)
				{
					int num300 = Dust.NewDust(base.Center - this.velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.6f);
					Dust dust = Main.dust[num300];
					dust.velocity *= 1.5f;
					Main.dust[num300].noGravity = true;
					num3 = num299;
				}
			}
			if (this.type == 449)
			{
				int num301 = Main.rand.Next(3, 7);
				int num3;
				for (int num302 = 0; num302 < num301; num302 = num3 + 1)
				{
					int num303 = Dust.NewDust(base.Center - this.velocity / 2f, 0, 0, 228, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust = Main.dust[num303];
					dust.velocity *= 2f;
					Main.dust[num303].noGravity = true;
					num3 = num302;
				}
			}
			if (this.type == 495)
			{
				int num3;
				for (int num304 = 0; num304 < 15; num304 = num3 + 1)
				{
					int num305 = Dust.NewDust(base.Center, 10, 10, 27, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num305].noGravity = true;
					Dust dust = Main.dust[num305];
					dust.velocity -= this.oldVelocity * 0.3f;
					num3 = num304;
				}
			}
			if (this.type == 497)
			{
				int num3;
				for (int num306 = 0; num306 < 15; num306 = num3 + 1)
				{
					int num307 = Dust.NewDust(base.Center, 10, 10, 27, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num307].noGravity = true;
					Dust dust = Main.dust[num307];
					dust.velocity *= 2f;
					dust = Main.dust[num307];
					dust.velocity -= this.oldVelocity * 0.3f;
					dust = Main.dust[num307];
					dust.scale += (float)Main.rand.Next(150) * 0.001f;
					num3 = num306;
				}
			}
			if (this.type == 448)
			{
				Main.PlaySound(SoundID.Item14, this.position);
				this.position = base.Center;
				this.width = (this.height = 112);
				this.position.X = this.position.X - (float)(this.width / 2);
				this.position.Y = this.position.Y - (float)(this.height / 2);
				int num3;
				for (int num308 = 0; num308 < 4; num308 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					num3 = num308;
				}
				for (int num309 = 0; num309 < 40; num309 = num3 + 1)
				{
					int num310 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num310].noGravity = true;
					Dust dust = Main.dust[num310];
					dust.velocity *= 3f;
					num310 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num310];
					dust.velocity *= 2f;
					Main.dust[num310].noGravity = true;
					num3 = num309;
				}
				for (int num311 = 0; num311 < 1; num311 = num3 + 1)
				{
					int num312 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore = Main.gore[num312];
					gore.velocity *= 0.3f;
					Gore expr_AB43_cp_0_cp_0 = Main.gore[num312];
					expr_AB43_cp_0_cp_0.velocity.X = expr_AB43_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_AB72_cp_0_cp_0 = Main.gore[num312];
					expr_AB72_cp_0_cp_0.velocity.Y = expr_AB72_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num311;
				}
				this.Damage();
			}
			if (this.type == 616)
			{
				Main.PlaySound(SoundID.Item14, this.position);
				this.position = base.Center;
				this.width = (this.height = 80);
				this.position.X = this.position.X - (float)(this.width / 2);
				this.position.Y = this.position.Y - (float)(this.height / 2);
				int num3;
				for (int num313 = 0; num313 < 4; num313 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					num3 = num313;
				}
				for (int num314 = 0; num314 < 40; num314 = num3 + 1)
				{
					int num315 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 200, default(Color), 2.5f);
					Main.dust[num315].noGravity = true;
					Dust dust = Main.dust[num315];
					dust.velocity *= 2f;
					num315 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 200, default(Color), 1.5f);
					dust = Main.dust[num315];
					dust.velocity *= 1.2f;
					Main.dust[num315].noGravity = true;
					num3 = num314;
				}
				for (int num316 = 0; num316 < 1; num316 = num3 + 1)
				{
					int num317 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore = Main.gore[num317];
					gore.velocity *= 0.3f;
					Gore expr_AE92_cp_0_cp_0 = Main.gore[num317];
					expr_AE92_cp_0_cp_0.velocity.X = expr_AE92_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_AEC1_cp_0_cp_0 = Main.gore[num317];
					expr_AEC1_cp_0_cp_0.velocity.Y = expr_AEC1_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num316;
				}
				this.Damage();
			}
			if (this.type == 502)
			{
				Vector2 value13 = new Vector2((float)this.width, (float)this.height) / 2f;
				int num3;
				for (int num318 = 0; num318 < this.oldPos.Length; num318 = num3 + 1)
				{
					if (!(this.oldPos[num318] == Vector2.Zero))
					{
						int num319 = Dust.NewDust(this.oldPos[num318] + value13, 0, 0, 66, 0f, 0f, 150, Color.Transparent, 0.7f);
						Main.dust[num319].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
						Main.dust[num319].noGravity = true;
					}
					num3 = num318;
				}
			}
			if (this.type == 510)
			{
				Main.PlaySound(SoundID.Item107, this.position);
				Gore.NewGore(base.Center, -this.oldVelocity * 0.2f, 704, 1f);
				Gore.NewGore(base.Center, -this.oldVelocity * 0.2f, 705, 1f);
				if (this.owner == Main.myPlayer)
				{
					int num320 = Main.rand.Next(20, 31);
					int num3;
					for (int num321 = 0; num321 < num320; num321 = num3 + 1)
					{
						Vector2 vector15 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						vector15.Normalize();
						vector15 *= (float)Main.rand.Next(10, 201) * 0.01f;
						Projectile.NewProjectile(base.Center.X, base.Center.Y, vector15.X, vector15.Y, 511 + Main.rand.Next(3), this.damage, 1f, this.owner, 0f, (float)Main.rand.Next(-45, 1));
						num3 = num321;
					}
				}
			}
			if (this.type == 408)
			{
				int num3;
				for (int num322 = 0; num322 < 15; num322 = num3 + 1)
				{
					int num323 = Dust.NewDust(base.Center - Vector2.One * 10f, 50, 50, 5, 0f, -2f, 0, default(Color), 1f);
					Dust dust = Main.dust[num323];
					dust.velocity /= 2f;
					num3 = num322;
				}
				int num324 = 10;
				int num325 = Gore.NewGore(base.Center, this.velocity * 0.8f, 584, 1f);
				Gore gore = Main.gore[num325];
				gore.timeLeft /= num324;
				num325 = Gore.NewGore(base.Center, this.velocity * 0.9f, 585, 1f);
				gore = Main.gore[num325];
				gore.timeLeft /= num324;
				num325 = Gore.NewGore(base.Center, this.velocity * 1f, 586, 1f);
				gore = Main.gore[num325];
				gore.timeLeft /= num324;
			}
			if (this.type == 385)
			{
				Main.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19, 1f, 0f);
				int num326 = 36;
				int num3;
				for (int num327 = 0; num327 < num326; num327 = num3 + 1)
				{
					Vector2 vector16 = Vector2.Normalize(this.velocity) * new Vector2((float)this.width / 2f, (float)this.height) * 0.75f;
					vector16 = vector16.RotatedBy((double)((float)(num327 - (num326 / 2 - 1)) * 6.28318548f / (float)num326), default(Vector2)) + base.Center;
					Vector2 vector17 = vector16 - base.Center;
					int num328 = Dust.NewDust(vector16 + vector17, 0, 0, 172, vector17.X * 2f, vector17.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num328].noGravity = true;
					Main.dust[num328].noLight = true;
					Main.dust[num328].velocity = vector17;
					num3 = num327;
				}
				if (this.owner == Main.myPlayer)
				{
					if (this.ai[1] < 1f)
					{
						int num329 = Main.expertMode ? 25 : 40;
						int num330 = Projectile.NewProjectile(base.Center.X - (float)(this.direction * 30), base.Center.Y - 4f, (float)(-(float)this.direction) * 0.01f, 0f, 384, num329, 4f, this.owner, 16f, 15f);
						Main.projectile[num330].netUpdate = true;
					}
					else
					{
						int num331 = (int)(base.Center.Y / 16f);
						int num332 = (int)(base.Center.X / 16f);
						int num333 = 100;
						if (num332 < 10)
						{
							num332 = 10;
						}
						if (num332 > Main.maxTilesX - 10)
						{
							num332 = Main.maxTilesX - 10;
						}
						if (num331 < 10)
						{
							num331 = 10;
						}
						if (num331 > Main.maxTilesY - num333 - 10)
						{
							num331 = Main.maxTilesY - num333 - 10;
						}
						for (int num334 = num331; num334 < num331 + num333; num334 = num3 + 1)
						{
							Tile tile = Main.tile[num332, num334];
							if (tile.active() && (Main.tileSolid[(int)tile.type] || tile.liquid != 0))
							{
								num331 = num334;
								break;
							}
							num3 = num334;
						}
						int num335 = Main.expertMode ? 50 : 80;
						int num336 = Projectile.NewProjectile((float)(num332 * 16 + 8), (float)(num331 * 16 - 24), 0f, 0f, 386, num335, 4f, Main.myPlayer, 16f, 24f);
						Main.projectile[num336].netUpdate = true;
					}
				}
			}
			else if (this.type >= 424 && this.type <= 426)
			{
				Main.PlaySound(SoundID.Item89, this.position);
				this.position.X = this.position.X + (float)(this.width / 2);
				this.position.Y = this.position.Y + (float)(this.height / 2);
				this.width = (int)(128f * this.scale);
				this.height = (int)(128f * this.scale);
				this.position.X = this.position.X - (float)(this.width / 2);
				this.position.Y = this.position.Y - (float)(this.height / 2);
				int num3;
				for (int num337 = 0; num337 < 8; num337 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					num3 = num337;
				}
				for (int num338 = 0; num338 < 32; num338 = num3 + 1)
				{
					int num339 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num339].noGravity = true;
					Dust dust = Main.dust[num339];
					dust.velocity *= 3f;
					num339 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num339];
					dust.velocity *= 2f;
					Main.dust[num339].noGravity = true;
					num3 = num338;
				}
				for (int num340 = 0; num340 < 2; num340 = num3 + 1)
				{
					int num341 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore = Main.gore[num341];
					gore.velocity *= 0.3f;
					Gore expr_BA33_cp_0_cp_0 = Main.gore[num341];
					expr_BA33_cp_0_cp_0.velocity.X = expr_BA33_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore expr_BA62_cp_0_cp_0 = Main.gore[num341];
					expr_BA62_cp_0_cp_0.velocity.Y = expr_BA62_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					num3 = num340;
				}
				if (this.owner == Main.myPlayer)
				{
					this.localAI[1] = -1f;
					this.maxPenetrate = 0;
					this.Damage();
				}
				for (int num342 = 0; num342 < 5; num342 = num3 + 1)
				{
					int num343 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						6,
						259,
						158
					});
					int num344 = Dust.NewDust(this.position, this.width, this.height, num343, 2.5f * (float)this.direction, -2.5f, 0, default(Color), 1f);
					Main.dust[num344].alpha = 200;
					Dust dust = Main.dust[num344];
					dust.velocity *= 2.4f;
					dust = Main.dust[num344];
					dust.scale += Main.rand.NextFloat();
					num3 = num342;
				}
			}
			if (this.type == 399)
			{
				Main.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 vector18 = new Vector2(20f, 20f);
				int num3;
				for (int num345 = 0; num345 < 5; num345 = num3 + 1)
				{
					Dust.NewDust(base.Center - vector18 / 2f, (int)vector18.X, (int)vector18.Y, 12, 0f, 0f, 0, Color.Red, 1f);
					num3 = num345;
				}
				for (int num346 = 0; num346 < 10; num346 = num3 + 1)
				{
					int num347 = Dust.NewDust(base.Center - vector18 / 2f, (int)vector18.X, (int)vector18.Y, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num347];
					dust.velocity *= 1.4f;
					num3 = num346;
				}
				for (int num348 = 0; num348 < 20; num348 = num3 + 1)
				{
					int num349 = Dust.NewDust(base.Center - vector18 / 2f, (int)vector18.X, (int)vector18.Y, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num349].noGravity = true;
					Dust dust = Main.dust[num349];
					dust.velocity *= 5f;
					num349 = Dust.NewDust(base.Center - vector18 / 2f, (int)vector18.X, (int)vector18.Y, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num349];
					dust.velocity *= 3f;
					num3 = num348;
				}
				if (Main.myPlayer == this.owner)
				{
					for (int num350 = 0; num350 < 6; num350 = num3 + 1)
					{
						float num351 = -this.velocity.X * (float)Main.rand.Next(20, 50) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
						float num352 = -Math.Abs(this.velocity.Y) * (float)Main.rand.Next(30, 50) * 0.01f + (float)Main.rand.Next(-20, 5) * 0.4f;
						Projectile.NewProjectile(base.Center.X + num351, base.Center.Y + num352, num351, num352, 400 + Main.rand.Next(3), (int)((double)this.damage * 0.5), 0f, this.owner, 0f, 0f);
						num3 = num350;
					}
				}
			}
			if (this.type == 384 || this.type == 386)
			{
				int num3;
				for (int num353 = 0; num353 < 20; num353 = num3 + 1)
				{
					int num354 = Dust.NewDust(this.position, this.width, this.height, 212, (float)(this.direction * 2), 0f, 100, default(Color), 1.4f);
					Dust dust21 = Main.dust[num354];
					dust21.color = Color.CornflowerBlue;
					dust21.color = Color.Lerp(dust21.color, Color.White, 0.3f);
					dust21.noGravity = true;
					num3 = num353;
				}
			}
			if (this.type == 507 || this.type == 508)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 vector19 = this.position;
				Vector2 oldVelocity = this.oldVelocity;
				oldVelocity.Normalize();
				vector19 += oldVelocity * 16f;
				int num3;
				for (int num355 = 0; num355 < 20; num355 = num3 + 1)
				{
					int num356 = Dust.NewDust(vector19, this.width, this.height, 81, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num356].position = (Main.dust[num356].position + base.Center) / 2f;
					Dust dust = Main.dust[num356];
					dust.velocity += this.oldVelocity * 0.4f;
					dust = Main.dust[num356];
					dust.velocity *= 0.5f;
					Main.dust[num356].noGravity = true;
					vector19 -= oldVelocity * 8f;
					num3 = num355;
				}
			}
			if (this.type == 598)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 vector20 = this.position;
				Vector2 value14 = (this.rotation - 1.57079637f).ToRotationVector2();
				vector20 += value14 * 16f;
				int num3;
				for (int num357 = 0; num357 < 20; num357 = num3 + 1)
				{
					int num358 = Dust.NewDust(vector20, this.width, this.height, 81, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num358].position = (Main.dust[num358].position + base.Center) / 2f;
					Dust dust = Main.dust[num358];
					dust.velocity += value14 * 2f;
					dust = Main.dust[num358];
					dust.velocity *= 0.5f;
					Main.dust[num358].noGravity = true;
					vector20 -= value14 * 8f;
					num3 = num357;
				}
			}
			if (this.type == 1 || this.type == 81 || this.type == 98)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num359 = 0; num359 < 10; num359 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0f, 0f, 0, default(Color), 1f);
					num3 = num359;
				}
			}
			if (this.type == 336 || this.type == 345)
			{
				int num3;
				for (int num360 = 0; num360 < 6; num360 = num3 + 1)
				{
					int num361 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 196, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num361].noGravity = true;
					Main.dust[num361].scale = this.scale;
					num3 = num360;
				}
			}
			if (this.type == 358)
			{
				this.velocity = this.oldVelocity * 0.2f;
				int num3;
				for (int num362 = 0; num362 < 100; num362 = num3 + 1)
				{
					int num363 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 211, 0f, 0f, 75, default(Color), 1.2f);
					Dust dust;
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num363];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num363];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num363];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num363].scale = 0.6f;
					}
					else
					{
						Main.dust[num363].noGravity = true;
					}
					dust = Main.dust[num363];
					dust.velocity *= 0.3f;
					dust = Main.dust[num363];
					dust.velocity += this.velocity;
					dust = Main.dust[num363];
					dust.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
					Dust expr_C6F7_cp_0_cp_0 = Main.dust[num363];
					expr_C6F7_cp_0_cp_0.velocity.X = expr_C6F7_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.015f;
					Dust expr_C726_cp_0_cp_0 = Main.dust[num363];
					expr_C726_cp_0_cp_0.velocity.Y = expr_C726_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num363].position = base.Center;
					num3 = num362;
				}
			}
			if (this.type == 406)
			{
				int num364 = 175;
				Color newColor3 = new Color(0, 80, 255, 100);
				this.velocity = this.oldVelocity * 0.2f;
				int num3;
				for (int num365 = 0; num365 < 40; num365 = num3 + 1)
				{
					int num366 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0f, 0f, num364, newColor3, 1.6f);
					Dust dust;
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num366];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num366];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num366];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num366].scale = 0.6f;
					}
					else
					{
						Main.dust[num366].noGravity = true;
					}
					dust = Main.dust[num366];
					dust.velocity *= 0.3f;
					dust = Main.dust[num366];
					dust.velocity += this.velocity;
					dust = Main.dust[num366];
					dust.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
					Dust expr_C96D_cp_0_cp_0 = Main.dust[num366];
					expr_C96D_cp_0_cp_0.velocity.X = expr_C96D_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.015f;
					Dust expr_C99C_cp_0_cp_0 = Main.dust[num366];
					expr_C99C_cp_0_cp_0.velocity.Y = expr_C99C_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num366].position = base.Center;
					num3 = num365;
				}
			}
			if (this.type == 344)
			{
				int num3;
				for (int num367 = 0; num367 < 3; num367 = num3 + 1)
				{
					int num368 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 197, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num368].noGravity = true;
					Main.dust[num368].scale = this.scale;
					num3 = num367;
				}
			}
			else if (this.type == 343)
			{
				Main.PlaySound(SoundID.Item27, this.position);
				int num3;
				for (int num369 = 4; num369 < 31; num369 = num3 + 1)
				{
					float num370 = this.oldVelocity.X * (30f / (float)num369);
					float num371 = this.oldVelocity.Y * (30f / (float)num369);
					int num372 = Dust.NewDust(new Vector2(this.oldPosition.X - num370, this.oldPosition.Y - num371), 8, 8, 197, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.2f);
					Main.dust[num372].noGravity = true;
					Dust dust = Main.dust[num372];
					dust.velocity *= 0.5f;
					num3 = num369;
				}
			}
			else if (this.type == 349)
			{
				Main.PlaySound(SoundID.Item27, this.position);
				int num3;
				for (int num373 = 0; num373 < 3; num373 = num3 + 1)
				{
					int num374 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 76, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num374].noGravity = true;
					Main.dust[num374].noLight = true;
					Main.dust[num374].scale = 0.7f;
					num3 = num373;
				}
			}
			if (this.type == 323)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num375 = 0; num375 < 20; num375 = num3 + 1)
				{
					int num376 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0f, 0f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num376].noGravity = true;
						Main.dust[num376].scale = 1.3f;
						Dust dust = Main.dust[num376];
						dust.velocity *= 1.5f;
						dust = Main.dust[num376];
						dust.velocity -= this.oldVelocity * 0.5f;
						dust = Main.dust[num376];
						dust.velocity *= 1.5f;
					}
					else
					{
						Dust dust = Main.dust[num376];
						dust.velocity *= 0.75f;
						dust = Main.dust[num376];
						dust.velocity -= this.oldVelocity * 0.25f;
						Main.dust[num376].scale = 0.8f;
					}
					num3 = num375;
				}
			}
			if (this.type == 589)
			{
				Main.PlaySound(SoundID.Item27, this.position);
				Color newColor4 = Color.Red;
				if (this.ai[1] == 1f)
				{
					newColor4 = Color.Green;
				}
				if (this.ai[1] == 2f)
				{
					newColor4 = Color.Purple;
				}
				if (this.ai[1] == 3f)
				{
					newColor4 = Color.Gold;
				}
				if (this.ai[1] == 4f)
				{
					newColor4 = Color.White;
				}
				newColor4.A = 100;
				int num3;
				for (int num377 = 0; num377 < 30; num377 = num3 + 1)
				{
					int num378 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11, 0f, 0f, 0, newColor4, 1f);
					Dust dust = Main.dust[num378];
					dust.velocity *= 1f + Main.rand.NextFloat() * 1f;
					if (num377 < 10)
					{
						Main.dust[num378].noGravity = true;
						dust = Main.dust[num378];
						dust.velocity *= 0.5f;
					}
					num3 = num377;
				}
			}
			if (this.type == 346)
			{
				Main.PlaySound(SoundID.Item27, this.position);
				int num3;
				for (int num379 = 0; num379 < 10; num379 = num3 + 1)
				{
					int num380 = 10;
					if (this.ai[1] == 1f)
					{
						num380 = 4;
					}
					int num381 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num380, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num381].noGravity = true;
					num3 = num379;
				}
			}
			if (this.type == 335)
			{
				Main.PlaySound(SoundID.Item27, this.position);
				int num3;
				for (int num382 = 0; num382 < 10; num382 = num3 + 1)
				{
					int num383 = 90 - (int)this.ai[1];
					int num384 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num383, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num384].noLight = true;
					Main.dust[num384].scale = 0.8f;
					num3 = num382;
				}
			}
			if (this.type == 318)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num385 = 0; num385 < 10; num385 = num3 + 1)
				{
					int num386 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 30, 0f, 0f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num386].noGravity = true;
					}
					num3 = num385;
				}
			}
			if (this.type == 378)
			{
				int num3;
				for (int num387 = 0; num387 < 10; num387 = num3 + 1)
				{
					int num388 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 30, 0f, 0f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num388].noGravity = true;
					}
					num3 = num387;
				}
			}
			else if (this.type == 311)
			{
				int num3;
				for (int num389 = 0; num389 < 5; num389 = num3 + 1)
				{
					int num390 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 189, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num390].scale = 0.85f;
					Main.dust[num390].noGravity = true;
					Dust dust = Main.dust[num390];
					dust.velocity += this.velocity * 0.5f;
					num3 = num389;
				}
			}
			else if (this.type == 316)
			{
				int num3;
				for (int num391 = 0; num391 < 5; num391 = num3 + 1)
				{
					int num392 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 195, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num392].scale = 0.85f;
					Main.dust[num392].noGravity = true;
					Dust dust = Main.dust[num392];
					dust.velocity += this.velocity * 0.5f;
					num3 = num391;
				}
			}
			else if (this.type == 184 || this.type == 195)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num393 = 0; num393 < 5; num393 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0f, 0f, 0, default(Color), 1f);
					num3 = num393;
				}
			}
			else if (this.type == 275 || this.type == 276)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num394 = 0; num394 < 5; num394 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0f, 0f, 0, default(Color), 1f);
					num3 = num394;
				}
			}
			else if (this.type == 291)
			{
				if (this.owner == Main.myPlayer)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 292, this.damage, this.knockBack, this.owner, 0f, 0f);
				}
			}
			else if (this.type == 295)
			{
				if (this.owner == Main.myPlayer)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 296, (int)((double)this.damage * 0.65), this.knockBack, this.owner, 0f, 0f);
				}
			}
			else if (this.type == 270)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 27, 1f, 0f);
				if (this.ai[0] < 0f)
				{
					int num3;
					for (int num395 = 0; num395 < 20; num395 = num3 + 1)
					{
						int num396 = Dust.NewDust(this.position, this.width, this.height, 26, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num396].noGravity = true;
						Dust dust = Main.dust[num396];
						dust.velocity *= 1.2f;
						Main.dust[num396].scale = 1.3f;
						dust = Main.dust[num396];
						dust.velocity -= this.oldVelocity * 0.3f;
						num396 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 5, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num396].noGravity = true;
						dust = Main.dust[num396];
						dust.velocity *= 3f;
						num3 = num395;
					}
				}
				else
				{
					int num3;
					for (int num397 = 0; num397 < 20; num397 = num3 + 1)
					{
						int num398 = Dust.NewDust(this.position, this.width, this.height, 26, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num398].noGravity = true;
						Dust dust = Main.dust[num398];
						dust.velocity *= 1.2f;
						Main.dust[num398].scale = 1.3f;
						dust = Main.dust[num398];
						dust.velocity -= this.oldVelocity * 0.3f;
						num398 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num398].noGravity = true;
						dust = Main.dust[num398];
						dust.velocity *= 3f;
						num3 = num397;
					}
				}
			}
			else if (this.type == 265)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 27, 1f, 0f);
				int num3;
				for (int num399 = 0; num399 < 15; num399 = num3 + 1)
				{
					int num400 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num400].noGravity = true;
					Dust dust = Main.dust[num400];
					dust.velocity *= 1.2f;
					dust = Main.dust[num400];
					dust.velocity -= this.oldVelocity * 0.3f;
					num3 = num399;
				}
			}
			else if (this.type == 355)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 27, 1f, 0f);
				int num3;
				for (int num401 = 0; num401 < 15; num401 = num3 + 1)
				{
					int num402 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 205, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num402].noGravity = true;
					Dust dust = Main.dust[num402];
					dust.velocity *= 1.2f;
					dust = Main.dust[num402];
					dust.velocity -= this.oldVelocity * 0.3f;
					num3 = num401;
				}
			}
			else if (this.type == 304)
			{
				int num3;
				for (int num403 = 0; num403 < 3; num403 = num3 + 1)
				{
					int num404 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 182, 0f, 0f, 100, default(Color), 0.8f);
					Main.dust[num404].noGravity = true;
					Dust dust = Main.dust[num404];
					dust.velocity *= 1.2f;
					dust = Main.dust[num404];
					dust.velocity -= this.oldVelocity * 0.3f;
					num3 = num403;
				}
			}
			else if (this.type == 263)
			{
				Main.PlaySound(SoundID.Item27, this.position);
				int num3;
				for (int num405 = 0; num405 < 15; num405 = num3 + 1)
				{
					int num406 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(40) * 0.01f);
					Main.dust[num406].noGravity = true;
					Dust dust = Main.dust[num406];
					dust.velocity *= 2f;
					num3 = num405;
				}
			}
			else if (this.type == 261)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num407 = 0; num407 < 5; num407 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 148, 0f, 0f, 0, default(Color), 1f);
					num3 = num407;
				}
			}
			else if (this.type == 229)
			{
				int num3;
				for (int num408 = 0; num408 < 25; num408 = num3 + 1)
				{
					int num409 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num409].noGravity = true;
					Dust dust = Main.dust[num409];
					dust.velocity *= 1.5f;
					Main.dust[num409].scale = 1.5f;
					num3 = num408;
				}
			}
			else if (this.type == 239)
			{
				int num410 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), 2, 2, 154, 0f, 0f, 0, default(Color), 1f);
				Dust var_503_E0B5_cp_0_cp_0 = Main.dust[num410];
				var_503_E0B5_cp_0_cp_0.position.X = var_503_E0B5_cp_0_cp_0.position.X - 2f;
				Main.dust[num410].alpha = 38;
				Dust dust = Main.dust[num410];
				dust.velocity *= 0.1f;
				dust = Main.dust[num410];
				dust.velocity += -this.oldVelocity * 0.25f;
				Main.dust[num410].scale = 0.95f;
			}
			else if (this.type == 245)
			{
				int num411 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), 2, 2, 114, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num411].noGravity = true;
				Dust var_503_E1E3_cp_0_cp_0 = Main.dust[num411];
				var_503_E1E3_cp_0_cp_0.position.X = var_503_E1E3_cp_0_cp_0.position.X - 2f;
				Main.dust[num411].alpha = 38;
				Dust dust = Main.dust[num411];
				dust.velocity *= 0.1f;
				dust = Main.dust[num411];
				dust.velocity += -this.oldVelocity * 0.25f;
				Main.dust[num411].scale = 0.95f;
			}
			else if (this.type == 264)
			{
				int num412 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), 2, 2, 54, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num412].noGravity = true;
				Dust var_503_E311_cp_0_cp_0 = Main.dust[num412];
				var_503_E311_cp_0_cp_0.position.X = var_503_E311_cp_0_cp_0.position.X - 2f;
				Main.dust[num412].alpha = 38;
				Dust dust = Main.dust[num412];
				dust.velocity *= 0.1f;
				dust = Main.dust[num412];
				dust.velocity += -this.oldVelocity * 0.25f;
				Main.dust[num412].scale = 0.95f;
			}
			else if (this.type == 206 || this.type == 225)
			{
				Main.PlaySound(6, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num413 = 0; num413 < 5; num413 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, 0f, 0f, 0, default(Color), 1f);
					num3 = num413;
				}
			}
			else if (this.type == 227)
			{
				Main.PlaySound(6, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num414 = 0; num414 < 15; num414 = num3 + 1)
				{
					int num415 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num415].noGravity = true;
					Dust dust = Main.dust[num415];
					dust.velocity += this.oldVelocity;
					Main.dust[num415].scale = 1.5f;
					num3 = num414;
				}
			}
			else if (this.type == 237 && this.owner == Main.myPlayer)
			{
				Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 238, this.damage, this.knockBack, this.owner, 0f, 0f);
			}
			else if (this.type == 243 && this.owner == Main.myPlayer)
			{
				Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 244, this.damage, this.knockBack, this.owner, 0f, 0f);
			}
			else if (this.type == 120)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num416 = 0; num416 < 10; num416 = num3 + 1)
				{
					int num417 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 67, this.velocity.X, this.velocity.Y, 100, default(Color), 1f);
					if (num416 < 5)
					{
						Main.dust[num417].noGravity = true;
					}
					Dust dust = Main.dust[num417];
					dust.velocity *= 0.2f;
					num3 = num416;
				}
			}
			else if (this.type == 181 || this.type == 189 || this.type == 566)
			{
				int num3;
				for (int num418 = 0; num418 < 6; num418 = num3 + 1)
				{
					int num419 = Dust.NewDust(this.position, this.width, this.height, 150, this.velocity.X, this.velocity.Y, 50, default(Color), 1f);
					Main.dust[num419].noGravity = true;
					Main.dust[num419].scale = 1f;
					num3 = num418;
				}
			}
			else if (this.type == 178)
			{
				int num3;
				for (int num420 = 0; num420 < 85; num420 = num3 + 1)
				{
					int num421 = Main.rand.Next(139, 143);
					int num422 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num421, this.velocity.X, this.velocity.Y, 0, default(Color), 1.2f);
					Dust var_503_E8CB_cp_0_cp_0 = Main.dust[num422];
					var_503_E8CB_cp_0_cp_0.velocity.X = var_503_E8CB_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.01f;
					Dust var_503_E90B_cp_0_cp_0 = Main.dust[num422];
					var_503_E90B_cp_0_cp_0.velocity.Y = var_503_E90B_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.01f;
					Dust var_503_E94B_cp_0_cp_0 = Main.dust[num422];
					var_503_E94B_cp_0_cp_0.velocity.X = var_503_E94B_cp_0_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Dust var_503_E991_cp_0_cp_0 = Main.dust[num422];
					var_503_E991_cp_0_cp_0.velocity.Y = var_503_E991_cp_0_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Dust var_503_E9D7_cp_0_cp_0 = Main.dust[num422];
					var_503_E9D7_cp_0_cp_0.velocity.X = var_503_E9D7_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust var_503_EA17_cp_0_cp_0 = Main.dust[num422];
					var_503_EA17_cp_0_cp_0.velocity.Y = var_503_EA17_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust dust = Main.dust[num422];
					dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
					num3 = num420;
				}
				for (int num423 = 0; num423 < 40; num423 = num3 + 1)
				{
					int num424 = Main.rand.Next(276, 283);
					int num425 = Gore.NewGore(this.position, this.velocity, num424, 1f);
					Gore var_503_EAF4_cp_0_cp_0 = Main.gore[num425];
					var_503_EAF4_cp_0_cp_0.velocity.X = var_503_EAF4_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore var_503_EB34_cp_0_cp_0 = Main.gore[num425];
					var_503_EB34_cp_0_cp_0.velocity.Y = var_503_EB34_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore var_503_EB74_cp_0_cp_0 = Main.gore[num425];
					var_503_EB74_cp_0_cp_0.velocity.X = var_503_EB74_cp_0_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Gore var_503_EBBA_cp_0_cp_0 = Main.gore[num425];
					var_503_EBBA_cp_0_cp_0.velocity.Y = var_503_EBBA_cp_0_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Gore gore = Main.gore[num425];
					gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Gore var_503_EC38_cp_0_cp_0 = Main.gore[num425];
					var_503_EC38_cp_0_cp_0.velocity.X = var_503_EC38_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
					Gore var_503_EC78_cp_0_cp_0 = Main.gore[num425];
					var_503_EC78_cp_0_cp_0.velocity.Y = var_503_EC78_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
					num3 = num423;
				}
			}
			else if (this.type == 289)
			{
				int num3;
				for (int num426 = 0; num426 < 30; num426 = num3 + 1)
				{
					int num427 = Main.rand.Next(139, 143);
					int num428 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num427, this.velocity.X, this.velocity.Y, 0, default(Color), 1.2f);
					Dust var_503_ED6E_cp_0_cp_0 = Main.dust[num428];
					var_503_ED6E_cp_0_cp_0.velocity.X = var_503_ED6E_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.01f;
					Dust var_503_EDAE_cp_0_cp_0 = Main.dust[num428];
					var_503_EDAE_cp_0_cp_0.velocity.Y = var_503_EDAE_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.01f;
					Dust var_503_EDEE_cp_0_cp_0 = Main.dust[num428];
					var_503_EDEE_cp_0_cp_0.velocity.X = var_503_EDEE_cp_0_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Dust var_503_EE34_cp_0_cp_0 = Main.dust[num428];
					var_503_EE34_cp_0_cp_0.velocity.Y = var_503_EE34_cp_0_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Dust var_503_EE7A_cp_0_cp_0 = Main.dust[num428];
					var_503_EE7A_cp_0_cp_0.velocity.X = var_503_EE7A_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust var_503_EEBA_cp_0_cp_0 = Main.dust[num428];
					var_503_EEBA_cp_0_cp_0.velocity.Y = var_503_EEBA_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust dust = Main.dust[num428];
					dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
					num3 = num426;
				}
				for (int num429 = 0; num429 < 15; num429 = num3 + 1)
				{
					int num430 = Main.rand.Next(276, 283);
					int num431 = Gore.NewGore(this.position, this.velocity, num430, 1f);
					Gore var_503_EF97_cp_0_cp_0 = Main.gore[num431];
					var_503_EF97_cp_0_cp_0.velocity.X = var_503_EF97_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore var_503_EFD7_cp_0_cp_0 = Main.gore[num431];
					var_503_EFD7_cp_0_cp_0.velocity.Y = var_503_EFD7_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore var_503_F017_cp_0_cp_0 = Main.gore[num431];
					var_503_F017_cp_0_cp_0.velocity.X = var_503_F017_cp_0_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Gore var_503_F05D_cp_0_cp_0 = Main.gore[num431];
					var_503_F05D_cp_0_cp_0.velocity.Y = var_503_F05D_cp_0_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Gore gore = Main.gore[num431];
					gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Gore var_503_F0DB_cp_0_cp_0 = Main.gore[num431];
					var_503_F0DB_cp_0_cp_0.velocity.X = var_503_F0DB_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
					Gore var_503_F11B_cp_0_cp_0 = Main.gore[num431];
					var_503_F11B_cp_0_cp_0.velocity.Y = var_503_F11B_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
					num3 = num429;
				}
			}
			else if (this.type == 475 || this.type == 505 || this.type == 506)
			{
				if (this.ai[1] == 0f)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				if (this.ai[1] < 10f)
				{
					Vector2 position2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num432 = -this.velocity.X;
					float num433 = -this.velocity.Y;
					float num434 = 1f;
					if (this.ai[0] <= 17f)
					{
						num434 = this.ai[0] / 17f;
					}
					int num435 = (int)(30f * num434);
					float num436 = 1f;
					if (this.ai[0] <= 30f)
					{
						num436 = this.ai[0] / 30f;
					}
					float num437 = 0.4f * num436;
					float num438 = num437;
					num433 += num438;
					int num3;
					for (int num439 = 0; num439 < num435; num439 = num3 + 1)
					{
						float num440 = (float)Math.Sqrt((double)(num432 * num432 + num433 * num433));
						float num441 = 5.6f;
						if (Math.Abs(num432) + Math.Abs(num433) < 1f)
						{
							num441 *= Math.Abs(num432) + Math.Abs(num433) / 1f;
						}
						num440 = num441 / num440;
						num432 *= num440;
						num433 *= num440;
						Math.Atan2((double)num433, (double)num432);
						int num442 = 3;
						if (this.type == 506)
						{
							num442 = 30;
						}
						if (this.type == 505)
						{
							num442 = 239;
						}
						if ((float)num439 > this.ai[1])
						{
							for (int num443 = 0; num443 < 4; num443 = num3 + 1)
							{
								int num444 = Dust.NewDust(position2, this.width, this.height, num442, 0f, 0f, 0, default(Color), 1f);
								Main.dust[num444].noGravity = true;
								Dust dust = Main.dust[num444];
								dust.velocity *= 0.3f;
								num3 = num443;
							}
						}
						position2.X += num432;
						position2.Y += num433;
						num432 = -this.velocity.X;
						num433 = -this.velocity.Y;
						num438 += num437;
						num433 += num438;
						num3 = num439;
					}
				}
			}
			else if (this.type == 171)
			{
				if (this.ai[1] == 0f)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				if (this.ai[1] < 10f)
				{
					Vector2 position3 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num445 = -this.velocity.X;
					float num446 = -this.velocity.Y;
					float num447 = 1f;
					if (this.ai[0] <= 17f)
					{
						num447 = this.ai[0] / 17f;
					}
					int num448 = (int)(30f * num447);
					float num449 = 1f;
					if (this.ai[0] <= 30f)
					{
						num449 = this.ai[0] / 30f;
					}
					float num450 = 0.4f * num449;
					float num451 = num450;
					num446 += num451;
					int num3;
					for (int num452 = 0; num452 < num448; num452 = num3 + 1)
					{
						float num453 = (float)Math.Sqrt((double)(num445 * num445 + num446 * num446));
						float num454 = 5.6f;
						if (Math.Abs(num445) + Math.Abs(num446) < 1f)
						{
							num454 *= Math.Abs(num445) + Math.Abs(num446) / 1f;
						}
						num453 = num454 / num453;
						num445 *= num453;
						num446 *= num453;
						Math.Atan2((double)num446, (double)num445);
						if ((float)num452 > this.ai[1])
						{
							for (int num455 = 0; num455 < 4; num455 = num3 + 1)
							{
								int num456 = Dust.NewDust(position3, this.width, this.height, 129, 0f, 0f, 0, default(Color), 1f);
								Main.dust[num456].noGravity = true;
								Dust dust = Main.dust[num456];
								dust.velocity *= 0.3f;
								num3 = num455;
							}
						}
						position3.X += num445;
						position3.Y += num446;
						num445 = -this.velocity.X;
						num446 = -this.velocity.Y;
						num451 += num450;
						num446 += num451;
						num3 = num452;
					}
				}
			}
			else if (this.type == 117)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num457 = 0; num457 < 10; num457 = num3 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0f, 0f, 0, default(Color), 1f);
					num3 = num457;
				}
			}
			else if (this.type == 166)
			{
				Main.PlaySound(SoundID.Item51, this.position);
				int num3;
				for (int num458 = 0; num458 < 10; num458 = num3 + 1)
				{
					int num459 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 76, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num459].noGravity = true;
					Dust dust = Main.dust[num459];
					dust.velocity -= this.oldVelocity * 0.25f;
					num3 = num458;
				}
			}
			else if (this.type == 158)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num460 = 0; num460 < 10; num460 = num3 + 1)
				{
					int num461 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 9, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num461].noGravity = true;
					Dust dust = Main.dust[num461];
					dust.velocity -= this.velocity * 0.5f;
					num3 = num460;
				}
			}
			else if (this.type == 159)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num462 = 0; num462 < 10; num462 = num3 + 1)
				{
					int num463 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num463].noGravity = true;
					Dust dust = Main.dust[num463];
					dust.velocity -= this.velocity * 0.5f;
					num3 = num462;
				}
			}
			else if (this.type == 160)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num464 = 0; num464 < 10; num464 = num3 + 1)
				{
					int num465 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 19, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num465].noGravity = true;
					Dust dust = Main.dust[num465];
					dust.velocity -= this.velocity * 0.5f;
					num3 = num464;
				}
			}
			else if (this.type == 161)
			{
				Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num3;
				for (int num466 = 0; num466 < 10; num466 = num3 + 1)
				{
					int num467 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num467].noGravity = true;
					Dust dust = Main.dust[num467];
					dust.velocity -= this.velocity * 0.5f;
					num3 = num466;
				}
			}
			else if (this.type >= 191 && this.type <= 194)
			{
				int num468 = Gore.NewGore(new Vector2(this.position.X - (float)(this.width / 2), this.position.Y - (float)(this.height / 2)), new Vector2(0f, 0f), Main.rand.Next(61, 64), this.scale);
				Gore gore = Main.gore[num468];
				gore.velocity *= 0.1f;
			}
			else if (!Main.projPet[this.type])
			{
				if (this.type == 93)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num469 = 0; num469 < 10; num469 = num3 + 1)
					{
						int num470 = Dust.NewDust(this.position, this.width, this.height, 57, 0f, 0f, 100, default(Color), 0.5f);
						Dust var_503_FFA6_cp_0_cp_0 = Main.dust[num470];
						var_503_FFA6_cp_0_cp_0.velocity.X = var_503_FFA6_cp_0_cp_0.velocity.X * 2f;
						Dust var_503_FFD6_cp_0_cp_0 = Main.dust[num470];
						var_503_FFD6_cp_0_cp_0.velocity.Y = var_503_FFD6_cp_0_cp_0.velocity.Y * 2f;
						num3 = num469;
					}
				}
				else if (this.type == 99)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num471 = 0; num471 < 30; num471 = num3 + 1)
					{
						int num472 = Dust.NewDust(this.position, this.width, this.height, 1, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num472];
							dust.scale *= 1.4f;
						}
						this.velocity *= 1.9f;
						num3 = num471;
					}
				}
				else if (this.type == 655)
				{
					Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num473 = 0; num473 < 30; num473 = num3 + 1)
					{
						int num474 = Dust.NewDust(this.position, this.width, this.height, 147, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num474];
							dust.scale *= 1.4f;
						}
						this.velocity *= 1.9f;
						num3 = num473;
					}
					if (Main.netMode != 1 && !this.wet)
					{
						int num475 = 2;
						if (Main.rand.Next(3) == 0)
						{
							num475++;
						}
						if (Main.rand.Next(3) == 0)
						{
							num475++;
						}
						if (Main.rand.Next(3) == 0)
						{
							num475++;
						}
						for (int num476 = 0; num476 < num475; num476 = num3 + 1)
						{
							int num477 = Main.rand.Next(210, 212);
							int num478 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, num477, 1, 0f, 0f, 0f, 0f, 255);
							Main.npc[num478].velocity.X = (float)Main.rand.Next(-200, 201) * 0.002f;
							Main.npc[num478].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.002f;
							Main.npc[num478].netUpdate = true;
							num3 = num476;
						}
						if (Main.rand.Next(4) == 0)
						{
							int num479 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 42, 1, 0f, 0f, 0f, 0f, 255);
							Main.npc[num479].SetDefaults(-16, -1f);
							Main.npc[num479].velocity.X = (float)Main.rand.Next(-200, 201) * 0.001f;
							Main.npc[num479].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.001f;
							Main.npc[num479].netUpdate = true;
						}
					}
				}
				else if (this.type == 91 || this.type == 92)
				{
					Main.PlaySound(SoundID.Item10, this.position);
					int num3;
					for (int num480 = 0; num480 < 10; num480 = num3 + 1)
					{
						Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 1.2f);
						num3 = num480;
					}
					for (int num481 = 0; num481 < 3; num481 = num3 + 1)
					{
						Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18), 1f);
						num3 = num481;
					}
					if (this.type == 12 && this.damage < 500)
					{
						for (int num482 = 0; num482 < 10; num482 = num3 + 1)
						{
							Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 1.2f);
							num3 = num482;
						}
						for (int num483 = 0; num483 < 3; num483 = num3 + 1)
						{
							Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18), 1f);
							num3 = num483;
						}
					}
					if ((this.type == 91 || (this.type == 92 && this.ai[0] > 0f)) && this.owner == Main.myPlayer)
					{
						float x = this.position.X + (float)Main.rand.Next(-400, 400);
						float y = this.position.Y - (float)Main.rand.Next(600, 900);
						Vector2 vector21 = new Vector2(x, y);
						float num484 = this.position.X + (float)(this.width / 2) - vector21.X;
						float num485 = this.position.Y + (float)(this.height / 2) - vector21.Y;
						int num486 = 22;
						float num487 = (float)Math.Sqrt((double)(num484 * num484 + num485 * num485));
						num487 = (float)num486 / num487;
						num484 *= num487;
						num485 *= num487;
						int num488 = this.damage;
						int num489 = Projectile.NewProjectile(x, y, num484, num485, 92, num488, this.knockBack, this.owner, 0f, 0f);
						if (this.type == 91)
						{
							Main.projectile[num489].ai[1] = this.position.Y;
							Main.projectile[num489].ai[0] = 1f;
						}
						else
						{
							Main.projectile[num489].ai[1] = this.position.Y;
						}
					}
				}
				else if (this.type == 89)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num490 = 0; num490 < 5; num490 = num3 + 1)
					{
						int num491 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 68, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num491].noGravity = true;
						Dust dust = Main.dust[num491];
						dust.velocity *= 1.5f;
						dust = Main.dust[num491];
						dust.scale *= 0.9f;
						num3 = num490;
					}
					if (this.type == 89 && this.owner == Main.myPlayer)
					{
						for (int num492 = 0; num492 < 3; num492 = num3 + 1)
						{
							float num493 = -this.velocity.X * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
							float num494 = -this.velocity.Y * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
							Projectile.NewProjectile(this.position.X + num493, this.position.Y + num494, num493, num494, 90, (int)((double)this.damage * 0.5), 0f, this.owner, 0f, 0f);
							num3 = num492;
						}
					}
				}
				else if (this.type == 177)
				{
					int num3;
					for (int num495 = 0; num495 < 20; num495 = num3 + 1)
					{
						int num496 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 137, 0f, 0f, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Dust dust = Main.dust[num496];
						dust.velocity -= this.oldVelocity * 0.2f;
						if (Main.rand.Next(3) == 0)
						{
							dust = Main.dust[num496];
							dust.scale *= 0.8f;
							dust = Main.dust[num496];
							dust.velocity *= 0.5f;
						}
						else
						{
							Main.dust[num496].noGravity = true;
						}
						num3 = num495;
					}
				}
				else if (this.type == 119 || this.type == 118 || this.type == 128 || this.type == 359)
				{
					int num497 = 10;
					if (this.type == 119 || this.type == 359)
					{
						num497 = 20;
					}
					Main.PlaySound(SoundID.Item27, this.position);
					int num3;
					for (int num498 = 0; num498 < num497; num498 = num3 + 1)
					{
						int num499 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Dust dust = Main.dust[num499];
							dust.velocity *= 2f;
							Main.dust[num499].noGravity = true;
							dust = Main.dust[num499];
							dust.scale *= 1.75f;
						}
						else
						{
							Dust dust = Main.dust[num499];
							dust.scale *= 0.5f;
						}
						num3 = num498;
					}
				}
				else if (this.type == 309)
				{
					int num500 = 10;
					Main.PlaySound(SoundID.Item27, this.position);
					int num3;
					for (int num501 = 0; num501 < num500; num501 = num3 + 1)
					{
						int num502 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 185, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num502];
							dust.velocity *= 2f;
							Main.dust[num502].noGravity = true;
							dust = Main.dust[num502];
							dust.scale *= 1.75f;
						}
						num3 = num501;
					}
				}
				else if (this.type == 308)
				{
					int num503 = 80;
					Main.PlaySound(SoundID.Item27, this.position);
					int num3;
					for (int num504 = 0; num504 < num503; num504 = num3 + 1)
					{
						int num505 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 16f), this.width, this.height - 16, 185, 0f, 0f, 0, default(Color), 1f);
						Dust dust = Main.dust[num505];
						dust.velocity *= 2f;
						Main.dust[num505].noGravity = true;
						dust = Main.dust[num505];
						dust.scale *= 1.15f;
						num3 = num504;
					}
				}
				else if (this.aiStyle == 29 && this.type <= 126)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num506 = this.type - 121 + 86;
					int num3;
					for (int num507 = 0; num507 < 15; num507 = num3 + 1)
					{
						int num508 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num506, this.oldVelocity.X, this.oldVelocity.Y, 50, default(Color), 1.2f);
						Main.dust[num508].noGravity = true;
						Dust dust = Main.dust[num508];
						dust.scale *= 1.25f;
						dust = Main.dust[num508];
						dust.velocity *= 0.5f;
						num3 = num507;
					}
				}
				else if (this.type == 597)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num509 = 0; num509 < 15; num509 = num3 + 1)
					{
						int num510 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 262, this.oldVelocity.X, this.oldVelocity.Y, 50, default(Color), 1.2f);
						Main.dust[num510].noGravity = true;
						Dust dust = Main.dust[num510];
						dust.scale *= 1.25f;
						dust = Main.dust[num510];
						dust.velocity *= 0.5f;
						num3 = num509;
					}
				}
				else if (this.type == 337)
				{
					Main.PlaySound(SoundID.Item27, this.position);
					int num3;
					for (int num511 = 0; num511 < 10; num511 = num3 + 1)
					{
						int num512 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 197, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num512].noGravity = true;
						num3 = num511;
					}
				}
				else if (this.type == 379 || this.type == 377)
				{
					int num3;
					for (int num513 = 0; num513 < 5; num513 = num3 + 1)
					{
						int num514 = Dust.NewDust(this.position, this.width, this.height, 171, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num514].scale = (float)Main.rand.Next(1, 10) * 0.1f;
						Main.dust[num514].noGravity = true;
						Main.dust[num514].fadeIn = 1.5f;
						Dust dust = Main.dust[num514];
						dust.velocity *= 0.75f;
						num3 = num513;
					}
				}
				else if (this.type == 80)
				{
					if (this.ai[0] >= 0f)
					{
						Main.PlaySound(SoundID.Item27, this.position);
						int num3;
						for (int num515 = 0; num515 < 10; num515 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0f, 0f, 0, default(Color), 1f);
							num3 = num515;
						}
					}
					int num516 = (int)this.position.X / 16;
					int num517 = (int)this.position.Y / 16;
					if (Main.tile[num516, num517] == null)
					{
						Main.tile[num516, num517] = new Tile();
					}
					if (Main.tile[num516, num517].type == 127 && Main.tile[num516, num517].active())
					{
						WorldGen.KillTile(num516, num517, false, false, false);
					}
				}
				else if (this.type == 76 || this.type == 77 || this.type == 78)
				{
					int num3;
					for (int num518 = 0; num518 < 5; num518 = num3 + 1)
					{
						int num519 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 80, default(Color), 1.5f);
						Main.dust[num519].noGravity = true;
						num3 = num518;
					}
				}
				else if (this.type == 55)
				{
					int num3;
					for (int num520 = 0; num520 < 5; num520 = num3 + 1)
					{
						int num521 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num521].noGravity = true;
						num3 = num520;
					}
				}
				else if (this.type == 51 || this.type == 267)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num522 = 0; num522 < 5; num522 = num3 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0f, 0f, 0, default(Color), 0.7f);
						num3 = num522;
					}
				}
				else if (this.type == 478)
				{
					if (this.owner == Main.myPlayer)
					{
						Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)this.damage * 0.8), this.knockBack * 0.5f, this.owner, 0f, 0f);
					}
				}
				else if (this.type == 477 || this.type == 479)
				{
					int num3;
					for (int num523 = 0; num523 < 5; num523 = num3 + 1)
					{
						num3 = num523;
					}
					Collision.HitTiles(this.position, this.velocity, this.width, this.height);
				}
				else if (this.type == 2 || this.type == 82)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num524 = 0; num524 < 10; num524 = num3 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
						num3 = num524;
					}
				}
				else if (this.type == 474)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num525 = 0; num525 < 20; num525 = num3 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0f, 0f, 0, default(Color), 0.9f);
						num3 = num525;
					}
				}
				else if (this.type == 172)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num526 = 0; num526 < 20; num526 = num3 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
						num3 = num526;
					}
				}
				else if (this.type == 103)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num527 = 0; num527 < 20; num527 = num3 + 1)
					{
						int num528 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num528];
							dust.scale *= 2.5f;
							Main.dust[num528].noGravity = true;
							dust = Main.dust[num528];
							dust.velocity *= 5f;
						}
						num3 = num527;
					}
				}
				else if (this.type == 278)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num529 = 0; num529 < 20; num529 = num3 + 1)
					{
						int num530 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 169, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num530];
							dust.scale *= 1.5f;
							Main.dust[num530].noGravity = true;
							dust = Main.dust[num530];
							dust.velocity *= 5f;
						}
						num3 = num529;
					}
				}
				else if (this.type == 3 || this.type == 48 || this.type == 54 || this.type == 599)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num531 = 0; num531 < 10; num531 = num3 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 1, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.75f);
						num3 = num531;
					}
				}
				else if (this.type == 330)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num532 = 0; num532 < 10; num532 = num3 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 0, default(Color), 0.75f);
						num3 = num532;
					}
				}
				else if (this.type == 4)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num3;
					for (int num533 = 0; num533 < 10; num533 = num3 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0f, 0f, 150, default(Color), 1.1f);
						num3 = num533;
					}
				}
				else if (this.type == 5)
				{
					Main.PlaySound(SoundID.Item10, this.position);
					int num3;
					for (int num534 = 0; num534 < 60; num534 = num3 + 1)
					{
						int num535 = Main.rand.Next(3);
						if (num535 == 0)
						{
							num535 = 15;
						}
						else if (num535 == 1)
						{
							num535 = 57;
						}
						else
						{
							num535 = 58;
						}
						Dust.NewDust(this.position, this.width, this.height, num535, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.5f);
						num3 = num534;
					}
				}
				else if (this.type == 9 || this.type == 12 || this.type == 503)
				{
					Main.PlaySound(SoundID.Item10, this.position);
					int num536 = 10;
					int num537 = 3;
					if (this.type == 503)
					{
						num536 = 40;
						num537 = 2;
						this.velocity /= 2f;
					}
					int num3;
					for (int num538 = 0; num538 < num536; num538 = num3 + 1)
					{
						Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 1.2f);
						num3 = num538;
					}
					for (int num539 = 0; num539 < num537; num539 = num3 + 1)
					{
						int num540 = Main.rand.Next(16, 18);
						if (this.type == 503)
						{
							num540 = 16;
						}
						Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), num540, 1f);
						num3 = num539;
					}
					if (this.type == 12 && this.damage < 100)
					{
						for (int num541 = 0; num541 < 10; num541 = num3 + 1)
						{
							Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 1.2f);
							num3 = num541;
						}
						for (int num542 = 0; num542 < 3; num542 = num3 + 1)
						{
							Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18), 1f);
							num3 = num542;
						}
					}
				}
				else if (this.type == 281)
				{
					Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num543 = Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 76, 1f);
					Gore gore = Main.gore[num543];
					gore.velocity -= this.velocity * 0.5f;
					num543 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 77, 1f);
					gore = Main.gore[num543];
					gore.velocity -= this.velocity * 0.5f;
					Main.PlaySound(SoundID.Item14, this.position);
					int num3;
					for (int num544 = 0; num544 < 20; num544 = num3 + 1)
					{
						int num545 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num545];
						dust.velocity *= 1.4f;
						num3 = num544;
					}
					for (int num546 = 0; num546 < 10; num546 = num3 + 1)
					{
						int num547 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num547].noGravity = true;
						Dust dust = Main.dust[num547];
						dust.velocity *= 5f;
						num547 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num547];
						dust.velocity *= 3f;
						num3 = num546;
					}
					num543 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore = Main.gore[num543];
					gore.velocity *= 0.4f;
					Gore var_503_124B4_cp_0_cp_0 = Main.gore[num543];
					var_503_124B4_cp_0_cp_0.velocity.X = var_503_124B4_cp_0_cp_0.velocity.X + 1f;
					Gore var_503_124E4_cp_0_cp_0 = Main.gore[num543];
					var_503_124E4_cp_0_cp_0.velocity.Y = var_503_124E4_cp_0_cp_0.velocity.Y + 1f;
					num543 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore = Main.gore[num543];
					gore.velocity *= 0.4f;
					Gore var_503_1257D_cp_0_cp_0 = Main.gore[num543];
					var_503_1257D_cp_0_cp_0.velocity.X = var_503_1257D_cp_0_cp_0.velocity.X - 1f;
					Gore var_503_125AD_cp_0_cp_0 = Main.gore[num543];
					var_503_125AD_cp_0_cp_0.velocity.Y = var_503_125AD_cp_0_cp_0.velocity.Y + 1f;
					num543 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore = Main.gore[num543];
					gore.velocity *= 0.4f;
					Gore var_503_12646_cp_0_cp_0 = Main.gore[num543];
					var_503_12646_cp_0_cp_0.velocity.X = var_503_12646_cp_0_cp_0.velocity.X + 1f;
					Gore var_503_12676_cp_0_cp_0 = Main.gore[num543];
					var_503_12676_cp_0_cp_0.velocity.Y = var_503_12676_cp_0_cp_0.velocity.Y - 1f;
					num543 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore = Main.gore[num543];
					gore.velocity *= 0.4f;
					Gore var_503_1270F_cp_0_cp_0 = Main.gore[num543];
					var_503_1270F_cp_0_cp_0.velocity.X = var_503_1270F_cp_0_cp_0.velocity.X - 1f;
					Gore var_503_1273F_cp_0_cp_0 = Main.gore[num543];
					var_503_1273F_cp_0_cp_0.velocity.Y = var_503_1273F_cp_0_cp_0.velocity.Y - 1f;
					this.position.X = this.position.X + (float)(this.width / 2);
					this.position.Y = this.position.Y + (float)(this.height / 2);
					this.width = 128;
					this.height = 128;
					this.position.X = this.position.X - (float)(this.width / 2);
					this.position.Y = this.position.Y - (float)(this.height / 2);
					this.Damage();
				}
				else if (this.type == 162)
				{
					Main.PlaySound(SoundID.Item14, this.position);
					int num3;
					for (int num548 = 0; num548 < 20; num548 = num3 + 1)
					{
						int num549 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num549];
						dust.velocity *= 1.4f;
						num3 = num548;
					}
					for (int num550 = 0; num550 < 10; num550 = num3 + 1)
					{
						int num551 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num551].noGravity = true;
						Dust dust = Main.dust[num551];
						dust.velocity *= 5f;
						num551 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num551];
						dust.velocity *= 3f;
						num3 = num550;
					}
					int num552 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore = Main.gore[num552];
					gore.velocity *= 0.4f;
					Gore var_503_12A7F_cp_0_cp_0 = Main.gore[num552];
					var_503_12A7F_cp_0_cp_0.velocity.X = var_503_12A7F_cp_0_cp_0.velocity.X + 1f;
					Gore var_503_12AAF_cp_0_cp_0 = Main.gore[num552];
					var_503_12AAF_cp_0_cp_0.velocity.Y = var_503_12AAF_cp_0_cp_0.velocity.Y + 1f;
					num552 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore = Main.gore[num552];
					gore.velocity *= 0.4f;
					Gore var_503_12B48_cp_0_cp_0 = Main.gore[num552];
					var_503_12B48_cp_0_cp_0.velocity.X = var_503_12B48_cp_0_cp_0.velocity.X - 1f;
					Gore var_503_12B78_cp_0_cp_0 = Main.gore[num552];
					var_503_12B78_cp_0_cp_0.velocity.Y = var_503_12B78_cp_0_cp_0.velocity.Y + 1f;
					num552 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore = Main.gore[num552];
					gore.velocity *= 0.4f;
					Gore var_503_12C11_cp_0_cp_0 = Main.gore[num552];
					var_503_12C11_cp_0_cp_0.velocity.X = var_503_12C11_cp_0_cp_0.velocity.X + 1f;
					Gore var_503_12C41_cp_0_cp_0 = Main.gore[num552];
					var_503_12C41_cp_0_cp_0.velocity.Y = var_503_12C41_cp_0_cp_0.velocity.Y - 1f;
					num552 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore = Main.gore[num552];
					gore.velocity *= 0.4f;
					Gore var_503_12CDA_cp_0_cp_0 = Main.gore[num552];
					var_503_12CDA_cp_0_cp_0.velocity.X = var_503_12CDA_cp_0_cp_0.velocity.X - 1f;
					Gore var_503_12D0A_cp_0_cp_0 = Main.gore[num552];
					var_503_12D0A_cp_0_cp_0.velocity.Y = var_503_12D0A_cp_0_cp_0.velocity.Y - 1f;
					this.position.X = this.position.X + (float)(this.width / 2);
					this.position.Y = this.position.Y + (float)(this.height / 2);
					this.width = 128;
					this.height = 128;
					this.position.X = this.position.X - (float)(this.width / 2);
					this.position.Y = this.position.Y - (float)(this.height / 2);
					this.Damage();
				}
				else if (this.type == 240)
				{
					Main.PlaySound(SoundID.Item14, this.position);
					int num3;
					for (int num553 = 0; num553 < 20; num553 = num3 + 1)
					{
						int num554 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num554];
						dust.velocity *= 1.4f;
						num3 = num553;
					}
					for (int num555 = 0; num555 < 10; num555 = num3 + 1)
					{
						int num556 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num556].noGravity = true;
						Dust dust = Main.dust[num556];
						dust.velocity *= 5f;
						num556 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num556];
						dust.velocity *= 3f;
						num3 = num555;
					}
					int num557 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore = Main.gore[num557];
					gore.velocity *= 0.4f;
					Gore var_503_1304A_cp_0_cp_0 = Main.gore[num557];
					var_503_1304A_cp_0_cp_0.velocity.X = var_503_1304A_cp_0_cp_0.velocity.X + 1f;
					Gore var_503_1307A_cp_0_cp_0 = Main.gore[num557];
					var_503_1307A_cp_0_cp_0.velocity.Y = var_503_1307A_cp_0_cp_0.velocity.Y + 1f;
					num557 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore = Main.gore[num557];
					gore.velocity *= 0.4f;
					Gore var_503_13113_cp_0_cp_0 = Main.gore[num557];
					var_503_13113_cp_0_cp_0.velocity.X = var_503_13113_cp_0_cp_0.velocity.X - 1f;
					Gore var_503_13143_cp_0_cp_0 = Main.gore[num557];
					var_503_13143_cp_0_cp_0.velocity.Y = var_503_13143_cp_0_cp_0.velocity.Y + 1f;
					num557 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore = Main.gore[num557];
					gore.velocity *= 0.4f;
					Gore var_503_131DC_cp_0_cp_0 = Main.gore[num557];
					var_503_131DC_cp_0_cp_0.velocity.X = var_503_131DC_cp_0_cp_0.velocity.X + 1f;
					Gore var_503_1320C_cp_0_cp_0 = Main.gore[num557];
					var_503_1320C_cp_0_cp_0.velocity.Y = var_503_1320C_cp_0_cp_0.velocity.Y - 1f;
					num557 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore = Main.gore[num557];
					gore.velocity *= 0.4f;
					Gore var_503_132A5_cp_0_cp_0 = Main.gore[num557];
					var_503_132A5_cp_0_cp_0.velocity.X = var_503_132A5_cp_0_cp_0.velocity.X - 1f;
					Gore var_503_132D5_cp_0_cp_0 = Main.gore[num557];
					var_503_132D5_cp_0_cp_0.velocity.Y = var_503_132D5_cp_0_cp_0.velocity.Y - 1f;
					this.position.X = this.position.X + (float)(this.width / 2);
					this.position.Y = this.position.Y + (float)(this.height / 2);
					this.width = 96;
					this.height = 96;
					this.position.X = this.position.X - (float)(this.width / 2);
					this.position.Y = this.position.Y - (float)(this.height / 2);
					this.Damage();
				}
				else
				{
					int arg_133BA_0 = this.type;
					if (this.type == 283 || this.type == 282)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num558 = 0; num558 < 10; num558 = num3 + 1)
						{
							int num559 = Dust.NewDust(this.position, this.width, this.height, 171, 0f, 0f, 100, default(Color), 1f);
							Main.dust[num559].scale = (float)Main.rand.Next(1, 10) * 0.1f;
							Main.dust[num559].noGravity = true;
							Main.dust[num559].fadeIn = 1.5f;
							Dust dust = Main.dust[num559];
							dust.velocity *= 0.75f;
							num3 = num558;
						}
					}
					else if (this.type == 284)
					{
						int num3;
						for (int num560 = 0; num560 < 10; num560 = num3 + 1)
						{
							int num561 = Main.rand.Next(139, 143);
							int num562 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num561, -this.velocity.X * 0.3f, -this.velocity.Y * 0.3f, 0, default(Color), 1.2f);
							Dust var_503_1357F_cp_0_cp_0 = Main.dust[num562];
							var_503_1357F_cp_0_cp_0.velocity.X = var_503_1357F_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.01f;
							Dust var_503_135BF_cp_0_cp_0 = Main.dust[num562];
							var_503_135BF_cp_0_cp_0.velocity.Y = var_503_135BF_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.01f;
							Dust var_503_135FF_cp_0_cp_0 = Main.dust[num562];
							var_503_135FF_cp_0_cp_0.velocity.X = var_503_135FF_cp_0_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
							Dust var_503_13645_cp_0_cp_0 = Main.dust[num562];
							var_503_13645_cp_0_cp_0.velocity.Y = var_503_13645_cp_0_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
							Dust var_503_1368B_cp_0_cp_0 = Main.dust[num562];
							var_503_1368B_cp_0_cp_0.velocity.X = var_503_1368B_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
							Dust var_503_136CB_cp_0_cp_0 = Main.dust[num562];
							var_503_136CB_cp_0_cp_0.velocity.Y = var_503_136CB_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
							Dust dust = Main.dust[num562];
							dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num3 = num560;
						}
						for (int num563 = 0; num563 < 5; num563 = num3 + 1)
						{
							int num564 = Main.rand.Next(276, 283);
							int num565 = Gore.NewGore(this.position, -this.velocity * 0.3f, num564, 1f);
							Gore var_503_137B7_cp_0_cp_0 = Main.gore[num565];
							var_503_137B7_cp_0_cp_0.velocity.X = var_503_137B7_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.01f;
							Gore var_503_137F7_cp_0_cp_0 = Main.gore[num565];
							var_503_137F7_cp_0_cp_0.velocity.Y = var_503_137F7_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.01f;
							Gore var_503_13837_cp_0_cp_0 = Main.gore[num565];
							var_503_13837_cp_0_cp_0.velocity.X = var_503_13837_cp_0_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
							Gore var_503_1387D_cp_0_cp_0 = Main.gore[num565];
							var_503_1387D_cp_0_cp_0.velocity.Y = var_503_1387D_cp_0_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
							Gore gore = Main.gore[num565];
							gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							Gore var_503_138FB_cp_0_cp_0 = Main.gore[num565];
							var_503_138FB_cp_0_cp_0.velocity.X = var_503_138FB_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
							Gore var_503_1393B_cp_0_cp_0 = Main.gore[num565];
							var_503_1393B_cp_0_cp_0.velocity.Y = var_503_1393B_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
							num3 = num563;
						}
					}
					else if (this.type == 286)
					{
						Main.PlaySound(SoundID.Item14, this.position);
						int num3;
						for (int num566 = 0; num566 < 7; num566 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							num3 = num566;
						}
						for (int num567 = 0; num567 < 3; num567 = num3 + 1)
						{
							int num568 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num568].noGravity = true;
							Dust dust = Main.dust[num568];
							dust.velocity *= 3f;
							num568 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num568];
							dust.velocity *= 2f;
							num3 = num567;
						}
						int num569 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore gore = Main.gore[num569];
						gore.velocity *= 0.3f;
						Gore var_503_13BC0_cp_0_cp_0 = Main.gore[num569];
						var_503_13BC0_cp_0_cp_0.velocity.X = var_503_13BC0_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
						Gore var_503_13C00_cp_0_cp_0 = Main.gore[num569];
						var_503_13C00_cp_0_cp_0.velocity.Y = var_503_13C00_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
						if (this.owner == Main.myPlayer)
						{
							this.localAI[1] = -1f;
							this.maxPenetrate = 0;
							this.position.X = this.position.X + (float)(this.width / 2);
							this.position.Y = this.position.Y + (float)(this.height / 2);
							this.width = 80;
							this.height = 80;
							this.position.X = this.position.X - (float)(this.width / 2);
							this.position.Y = this.position.Y - (float)(this.height / 2);
							this.Damage();
						}
					}
					else if (this.type == 14 || this.type == 20 || this.type == 36 || this.type == 83 || this.type == 84 || this.type == 389 || this.type == 104 || this.type == 279 || this.type == 100 || this.type == 110 || this.type == 180 || this.type == 207 || this.type == 357 || this.type == 242 || this.type == 302 || this.type == 257 || this.type == 259 || this.type == 285 || this.type == 287 || this.type == 576 || this.type == 577)
					{
						Collision.HitTiles(this.position, this.velocity, this.width, this.height);
						Main.PlaySound(SoundID.Item10, this.position);
					}
					else if (this.type == 660)
					{
						Collision.HitTiles(this.position, this.velocity, this.width, this.height);
						Main.PlaySound(SoundID.Item10, this.position);
						int num570 = Main.rand.Next(4, 10);
						int num3;
						for (int num571 = 0; num571 < num570; num571 = num3 + 1)
						{
							int num572 = Dust.NewDust(base.Center, 0, 0, 180, 0f, 0f, 100, default(Color), 1f);
							Dust dust = Main.dust[num572];
							dust.velocity *= 1.6f;
							Dust var_503_13F26_cp_0_cp_0 = Main.dust[num572];
							var_503_13F26_cp_0_cp_0.velocity.Y = var_503_13F26_cp_0_cp_0.velocity.Y - 1f;
							dust = Main.dust[num572];
							dust.velocity += -this.velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
							Main.dust[num572].scale = 2f;
							Main.dust[num572].fadeIn = 0.5f;
							Main.dust[num572].noGravity = true;
							num3 = num571;
						}
					}
					else if (this.type == 712)
					{
						Collision.HitTiles(this.position, this.velocity, this.width, this.height);
						Main.PlaySound(SoundID.Item10, this.position);
						int num573 = Main.rand.Next(6, 12);
						int num3;
						for (int num574 = 0; num574 < num573; num574 = num3 + 1)
						{
							int num575 = Dust.NewDust(base.Center, 0, 0, 15, 0f, 0f, 100, default(Color), 1f);
							Dust dust = Main.dust[num575];
							dust.velocity *= 1.6f;
							Dust var_503_140BE_cp_0_cp_0 = Main.dust[num575];
							var_503_140BE_cp_0_cp_0.velocity.Y = var_503_140BE_cp_0_cp_0.velocity.Y - 1f;
							dust = Main.dust[num575];
							dust.velocity += -this.velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
							Main.dust[num575].scale = 1f;
							Main.dust[num575].fadeIn = 1.5f;
							Main.dust[num575].noGravity = true;
							Main.dust[num575].color = new Color(255, 255, 255, 0) * 0.3f;
							dust = Main.dust[num575];
							dust.velocity *= 0.7f;
							dust = Main.dust[num575];
							dust.position += Main.dust[num575].velocity * 5f;
							num3 = num574;
						}
						for (int num576 = 0; num576 < 3; num576 = num3 + 1)
						{
							Gore gore2 = Gore.NewGoreDirect(this.position, Vector2.Zero, 1008, 1f + Main.rand.NextFloatDirection() * 0.2f);
							Gore gore = gore2;
							gore.velocity *= 4f;
							num3 = num576;
						}
					}
					else if (this.type == 638)
					{
						Collision.HitTiles(this.position, this.velocity, this.width, this.height);
						Main.PlaySound(SoundID.Item10, this.position);
						int num577 = Main.rand.Next(2, 5);
						int num3;
						for (int num578 = 0; num578 < num577; num578 = num3 + 1)
						{
							int num579 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 1f);
							Dust dust = Main.dust[num579];
							dust.velocity *= 1.6f;
							Dust var_503_1435D_cp_0_cp_0 = Main.dust[num579];
							var_503_1435D_cp_0_cp_0.velocity.Y = var_503_1435D_cp_0_cp_0.velocity.Y - 1f;
							dust = Main.dust[num579];
							dust.position -= Vector2.One * 4f;
							Main.dust[num579].position = Vector2.Lerp(Main.dust[num579].position, base.Center, 0.5f);
							Main.dust[num579].noGravity = true;
							num3 = num578;
						}
					}
					else if (this.type == 15 || this.type == 34 || this.type == 321)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num580 = 0; num580 < 20; num580 = num3 + 1)
						{
							int num581 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 2f);
							Main.dust[num581].noGravity = true;
							Dust dust = Main.dust[num581];
							dust.velocity *= 2f;
							num581 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 1f);
							dust = Main.dust[num581];
							dust.velocity *= 2f;
							num3 = num580;
						}
					}
					else if (this.type == 253)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num582 = 0; num582 < 20; num582 = num3 + 1)
						{
							int num583 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 2f);
							Main.dust[num583].noGravity = true;
							Dust dust = Main.dust[num583];
							dust.velocity *= 2f;
							num583 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 1f);
							dust = Main.dust[num583];
							dust.velocity *= 2f;
							num3 = num582;
						}
					}
					else if (this.type == 95 || this.type == 96)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num584 = 0; num584 < 20; num584 = num3 + 1)
						{
							int num585 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 2f * this.scale);
							Main.dust[num585].noGravity = true;
							Dust dust = Main.dust[num585];
							dust.velocity *= 2f;
							num585 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 1f * this.scale);
							dust = Main.dust[num585];
							dust.velocity *= 2f;
							num3 = num584;
						}
					}
					else if (this.type == 79)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num586 = 0; num586 < 20; num586 = num3 + 1)
						{
							int num587 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2f);
							Main.dust[num587].noGravity = true;
							Dust dust = Main.dust[num587];
							dust.velocity *= 4f;
							num3 = num586;
						}
					}
					else if (this.type == 16)
					{
						if (this.type == 16 && this.penetrate == 1)
						{
							this.maxPenetrate = -1;
							this.penetrate = -1;
							int num588 = 60;
							this.position.X = this.position.X - (float)(num588 / 2);
							this.position.Y = this.position.Y - (float)(num588 / 2);
							this.width += num588;
							this.height += num588;
							this.tileCollide = false;
							this.velocity *= 0.01f;
							this.Damage();
							this.scale = 0.01f;
						}
						this.position.X = this.position.X + (float)(this.width / 2);
						this.width = 10;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.height = 10;
						this.position.Y = this.position.Y - (float)(this.height / 2);
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num589 = 0; num589 < 20; num589 = num3 + 1)
						{
							int num590 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 15, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num590].noGravity = true;
							Dust dust = Main.dust[num590];
							dust.velocity *= 2f;
							num590 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 15, 0f, 0f, 100, default(Color), 1f);
							num3 = num589;
						}
					}
					else if (this.type == 17)
					{
						Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num591 = 0; num591 < 5; num591 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0f, 0f, 0, default(Color), 1f);
							num3 = num591;
						}
					}
					else if (this.type == 31 || this.type == 42)
					{
						Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num592 = 0; num592 < 5; num592 = num3 + 1)
						{
							int num593 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32, 0f, 0f, 0, default(Color), 1f);
							Dust dust = Main.dust[num593];
							dust.velocity *= 0.6f;
							num3 = num592;
						}
					}
					else if (this.type >= 411 && this.type <= 414)
					{
						int num594 = 9;
						if (this.type == 412 || this.type == 414)
						{
							num594 = 11;
						}
						if (this.type == 413)
						{
							num594 = 19;
						}
						int num3;
						for (int num595 = 0; num595 < 5; num595 = num3 + 1)
						{
							int num596 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num594, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
							Main.dust[num596].noGravity = true;
							Dust dust = Main.dust[num596];
							dust.velocity -= this.velocity * 0.5f;
							num3 = num595;
						}
					}
					else if (this.type == 109)
					{
						Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num597 = 0; num597 < 5; num597 = num3 + 1)
						{
							int num598 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 51, 0f, 0f, 0, default(Color), 0.6f);
							Dust dust = Main.dust[num598];
							dust.velocity *= 0.6f;
							num3 = num597;
						}
					}
					else if (this.type == 39)
					{
						Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num599 = 0; num599 < 5; num599 = num3 + 1)
						{
							int num600 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 38, 0f, 0f, 0, default(Color), 1f);
							Dust dust = Main.dust[num600];
							dust.velocity *= 0.6f;
							num3 = num599;
						}
					}
					else if (this.type == 71)
					{
						Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num601 = 0; num601 < 5; num601 = num3 + 1)
						{
							int num602 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 53, 0f, 0f, 0, default(Color), 1f);
							Dust dust = Main.dust[num602];
							dust.velocity *= 0.6f;
							num3 = num601;
						}
					}
					else if (this.type == 40)
					{
						Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num603 = 0; num603 < 5; num603 = num3 + 1)
						{
							int num604 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36, 0f, 0f, 0, default(Color), 1f);
							Dust dust = Main.dust[num604];
							dust.velocity *= 0.6f;
							num3 = num603;
						}
					}
					else if (this.type == 21 || this.type == 471 || this.type == 532)
					{
						Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num605 = 0; num605 < 10; num605 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0f, 0f, 0, default(Color), 0.8f);
							num3 = num605;
						}
					}
					else if (this.type == 583)
					{
						Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num606 = 0; num606 < 10; num606 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0f, 0f, 100, new Color(20, 250, 20, 240), 0.8f);
							num3 = num606;
						}
					}
					else if (this.type == 584)
					{
						Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num607 = 0; num607 < 10; num607 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0f, 0f, 100, new Color(250, 20, 120, 240), 0.8f);
							num3 = num607;
						}
					}
					else if (this.type == 24)
					{
						int num3;
						for (int num608 = 0; num608 < 10; num608 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 1, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.75f);
							num3 = num608;
						}
					}
					else if (this.type == 27)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num609 = 0; num609 < 30; num609 = num3 + 1)
						{
							int num610 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, default(Color), 1f);
							Main.dust[num610].noGravity = true;
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, default(Color), 0.5f);
							num3 = num609;
						}
					}
					else if (this.type == 38)
					{
						int num3;
						for (int num611 = 0; num611 < 10; num611 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 42, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 1f);
							num3 = num611;
						}
					}
					else if (this.type == 44 || this.type == 45)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num612 = 0; num612 < 30; num612 = num3 + 1)
						{
							int num613 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, default(Color), 1.7f);
							Main.dust[num613].noGravity = true;
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, default(Color), 1f);
							num3 = num612;
						}
					}
					else if (this.type == 41)
					{
						Main.PlaySound(SoundID.Item14, this.position);
						int num3;
						for (int num614 = 0; num614 < 10; num614 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							num3 = num614;
						}
						for (int num615 = 0; num615 < 5; num615 = num3 + 1)
						{
							int num616 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num616].noGravity = true;
							Dust dust = Main.dust[num616];
							dust.velocity *= 3f;
							num616 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num616];
							dust.velocity *= 2f;
							num3 = num615;
						}
						int num617 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore gore = Main.gore[num617];
						gore.velocity *= 0.4f;
						Gore var_503_15A4F_cp_0_cp_0 = Main.gore[num617];
						var_503_15A4F_cp_0_cp_0.velocity.X = var_503_15A4F_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.1f;
						Gore var_503_15A8F_cp_0_cp_0 = Main.gore[num617];
						var_503_15A8F_cp_0_cp_0.velocity.Y = var_503_15A8F_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.1f;
						num617 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						gore = Main.gore[num617];
						gore.velocity *= 0.4f;
						Gore var_503_15B38_cp_0_cp_0 = Main.gore[num617];
						var_503_15B38_cp_0_cp_0.velocity.X = var_503_15B38_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.1f;
						Gore var_503_15B78_cp_0_cp_0 = Main.gore[num617];
						var_503_15B78_cp_0_cp_0.velocity.Y = var_503_15B78_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.1f;
						if (this.owner == Main.myPlayer)
						{
							this.penetrate = -1;
							this.position.X = this.position.X + (float)(this.width / 2);
							this.position.Y = this.position.Y + (float)(this.height / 2);
							this.width = 64;
							this.height = 64;
							this.position.X = this.position.X - (float)(this.width / 2);
							this.position.Y = this.position.Y - (float)(this.height / 2);
							this.Damage();
						}
					}
					else if (this.type == 514)
					{
						Main.PlaySound(SoundID.Item14, this.position);
						int num3;
						for (int num618 = 0; num618 < 10; num618 = num3 + 1)
						{
							int num619 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.3f);
							Dust dust = Main.dust[num619];
							dust.velocity *= 1.4f;
							num3 = num618;
						}
						for (int num620 = 0; num620 < 6; num620 = num3 + 1)
						{
							int num621 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.1f);
							Main.dust[num621].noGravity = true;
							Dust dust = Main.dust[num621];
							dust.velocity *= 4.6f;
							num621 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.3f);
							dust = Main.dust[num621];
							dust.velocity *= 3.3f;
							if (Main.rand.Next(2) == 0)
							{
								num621 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.1f);
								dust = Main.dust[num621];
								dust.velocity *= 2.7f;
							}
							num3 = num620;
						}
						if (this.owner == Main.myPlayer)
						{
							this.penetrate = -1;
							this.position.X = this.position.X + (float)(this.width / 2);
							this.position.Y = this.position.Y + (float)(this.height / 2);
							this.width = 112;
							this.height = 112;
							this.position.X = this.position.X - (float)(this.width / 2);
							this.position.Y = this.position.Y - (float)(this.height / 2);
							this.ai[0] = 2f;
							this.Damage();
						}
					}
					else if (this.type == 306)
					{
						Main.PlaySound(3, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num622 = 0; num622 < 20; num622 = num3 + 1)
						{
							int num623 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 184, 0f, 0f, 0, default(Color), 1f);
							Dust dust = Main.dust[num623];
							dust.scale *= 1.1f;
							Main.dust[num623].noGravity = true;
							num3 = num622;
						}
						for (int num624 = 0; num624 < 30; num624 = num3 + 1)
						{
							int num625 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 184, 0f, 0f, 0, default(Color), 1f);
							Dust dust = Main.dust[num625];
							dust.velocity *= 2.5f;
							dust = Main.dust[num625];
							dust.scale *= 0.8f;
							Main.dust[num625].noGravity = true;
							num3 = num624;
						}
						if (this.owner == Main.myPlayer)
						{
							int num626 = 2;
							if (Main.rand.Next(10) == 0)
							{
								num626++;
							}
							if (Main.rand.Next(10) == 0)
							{
								num626++;
							}
							if (Main.rand.Next(10) == 0)
							{
								num626++;
							}
							for (int num627 = 0; num627 < num626; num627 = num3 + 1)
							{
								float num628 = (float)Main.rand.Next(-35, 36) * 0.02f;
								float num629 = (float)Main.rand.Next(-35, 36) * 0.02f;
								num628 *= 10f;
								num629 *= 10f;
								Projectile.NewProjectile(this.position.X, this.position.Y, num628, num629, 307, (int)((double)this.damage * 0.7), (float)((int)((double)this.knockBack * 0.35)), Main.myPlayer, 0f, 0f);
								num3 = num627;
							}
						}
					}
					else if (this.type == 469)
					{
						if (this.owner == Main.myPlayer)
						{
							int num630 = 6;
							int num3;
							for (int num631 = 0; num631 < num630; num631 = num3 + 1)
							{
								if (num631 % 2 != 1 || Main.rand.Next(3) == 0)
								{
									Vector2 vector22 = this.position;
									Vector2 value15 = this.oldVelocity;
									value15.Normalize();
									value15 *= 8f;
									float num632 = (float)Main.rand.Next(-35, 36) * 0.01f;
									float num633 = (float)Main.rand.Next(-35, 36) * 0.01f;
									vector22 -= value15 * (float)num631;
									num632 += this.oldVelocity.X / 6f;
									num633 += this.oldVelocity.Y / 6f;
									int num634 = Projectile.NewProjectile(vector22.X, vector22.Y, num632, num633, Main.player[this.owner].beeType(), Main.player[this.owner].beeDamage(this.damage / 3), Main.player[this.owner].beeKB(0f), Main.myPlayer, 0f, 0f);
									Main.projectile[num634].magic = false;
									Main.projectile[num634].ranged = true;
									Main.projectile[num634].penetrate = 2;
								}
								num3 = num631;
							}
						}
					}
					else if (this.type == 183)
					{
						Main.PlaySound(SoundID.Item14, this.position);
						int num3;
						for (int num635 = 0; num635 < 20; num635 = num3 + 1)
						{
							int num636 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num636];
							dust.velocity *= 1f;
							num3 = num635;
						}
						int num637 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore var_503_165DD_cp_0_cp_0 = Main.gore[num637];
						var_503_165DD_cp_0_cp_0.velocity.X = var_503_165DD_cp_0_cp_0.velocity.X + 1f;
						Gore var_503_1660D_cp_0_cp_0 = Main.gore[num637];
						var_503_1660D_cp_0_cp_0.velocity.Y = var_503_1660D_cp_0_cp_0.velocity.Y + 1f;
						Gore gore = Main.gore[num637];
						gore.velocity *= 0.3f;
						num637 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore var_503_166A6_cp_0_cp_0 = Main.gore[num637];
						var_503_166A6_cp_0_cp_0.velocity.X = var_503_166A6_cp_0_cp_0.velocity.X - 1f;
						Gore var_503_166D6_cp_0_cp_0 = Main.gore[num637];
						var_503_166D6_cp_0_cp_0.velocity.Y = var_503_166D6_cp_0_cp_0.velocity.Y + 1f;
						gore = Main.gore[num637];
						gore.velocity *= 0.3f;
						num637 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore var_503_1676F_cp_0_cp_0 = Main.gore[num637];
						var_503_1676F_cp_0_cp_0.velocity.X = var_503_1676F_cp_0_cp_0.velocity.X + 1f;
						Gore var_503_1679F_cp_0_cp_0 = Main.gore[num637];
						var_503_1679F_cp_0_cp_0.velocity.Y = var_503_1679F_cp_0_cp_0.velocity.Y - 1f;
						gore = Main.gore[num637];
						gore.velocity *= 0.3f;
						num637 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore var_503_16838_cp_0_cp_0 = Main.gore[num637];
						var_503_16838_cp_0_cp_0.velocity.X = var_503_16838_cp_0_cp_0.velocity.X - 1f;
						Gore var_503_16868_cp_0_cp_0 = Main.gore[num637];
						var_503_16868_cp_0_cp_0.velocity.Y = var_503_16868_cp_0_cp_0.velocity.Y - 1f;
						gore = Main.gore[num637];
						gore.velocity *= 0.3f;
						if (this.owner == Main.myPlayer)
						{
							int num638 = Main.rand.Next(15, 25);
							for (int num639 = 0; num639 < num638; num639 = num3 + 1)
							{
								float speedX = (float)Main.rand.Next(-35, 36) * 0.02f;
								float speedY = (float)Main.rand.Next(-35, 36) * 0.02f;
								Projectile.NewProjectile(this.position.X, this.position.Y, speedX, speedY, Main.player[this.owner].beeType(), Main.player[this.owner].beeDamage(this.damage), Main.player[this.owner].beeKB(0f), Main.myPlayer, 0f, 0f);
								num3 = num639;
							}
						}
					}
					else if (this.aiStyle == 34)
					{
						if (this.owner != Main.myPlayer)
						{
							this.timeLeft = 60;
						}
						Main.PlaySound(SoundID.Item14, this.position);
						if (this.type == 167)
						{
							int num3;
							for (int num640 = 0; num640 < 400; num640 = num3 + 1)
							{
								float num641 = 16f;
								if (num640 < 300)
								{
									num641 = 12f;
								}
								if (num640 < 200)
								{
									num641 = 8f;
								}
								if (num640 < 100)
								{
									num641 = 4f;
								}
								int num642 = 130;
								int num643 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num642, 0f, 0f, 100, default(Color), 1f);
								float num644 = Main.dust[num643].velocity.X;
								float num645 = Main.dust[num643].velocity.Y;
								if (num644 == 0f && num645 == 0f)
								{
									num644 = 1f;
								}
								float num646 = (float)Math.Sqrt((double)(num644 * num644 + num645 * num645));
								num646 = num641 / num646;
								num644 *= num646;
								num645 *= num646;
								Dust dust = Main.dust[num643];
								dust.velocity *= 0.5f;
								Dust var_503_16B96_cp_0_cp_0 = Main.dust[num643];
								var_503_16B96_cp_0_cp_0.velocity.X = var_503_16B96_cp_0_cp_0.velocity.X + num644;
								Dust var_503_16BC7_cp_0_cp_0 = Main.dust[num643];
								var_503_16BC7_cp_0_cp_0.velocity.Y = var_503_16BC7_cp_0_cp_0.velocity.Y + num645;
								Main.dust[num643].scale = 1.3f;
								Main.dust[num643].noGravity = true;
								num3 = num640;
							}
						}
						if (this.type == 168)
						{
							int num3;
							for (int num647 = 0; num647 < 400; num647 = num3 + 1)
							{
								float num648 = 2f * ((float)num647 / 100f);
								if (num647 > 100)
								{
									num648 = 10f;
								}
								if (num647 > 250)
								{
									num648 = 13f;
								}
								int num649 = 131;
								int num650 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num649, 0f, 0f, 100, default(Color), 1f);
								float num651 = Main.dust[num650].velocity.X;
								float num652 = Main.dust[num650].velocity.Y;
								if (num651 == 0f && num652 == 0f)
								{
									num651 = 1f;
								}
								float num653 = (float)Math.Sqrt((double)(num651 * num651 + num652 * num652));
								num653 = num648 / num653;
								if (num647 <= 200)
								{
									num651 *= num653;
									num652 *= num653;
								}
								else
								{
									num651 = num651 * num653 * 1.25f;
									num652 = num652 * num653 * 0.75f;
								}
								Dust dust = Main.dust[num650];
								dust.velocity *= 0.5f;
								Dust var_503_16E1B_cp_0_cp_0 = Main.dust[num650];
								var_503_16E1B_cp_0_cp_0.velocity.X = var_503_16E1B_cp_0_cp_0.velocity.X + num651;
								Dust var_503_16E4C_cp_0_cp_0 = Main.dust[num650];
								var_503_16E4C_cp_0_cp_0.velocity.Y = var_503_16E4C_cp_0_cp_0.velocity.Y + num652;
								if (num647 > 100)
								{
									Main.dust[num650].scale = 1.3f;
									Main.dust[num650].noGravity = true;
								}
								num3 = num647;
							}
						}
						if (this.type == 169)
						{
							Vector2 vector23 = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2();
							float num654 = (float)Main.rand.Next(5, 9);
							float num655 = (float)Main.rand.Next(12, 17);
							float value16 = (float)Main.rand.Next(3, 7);
							float num656 = 20f;
							int num3;
							float num72;
							for (float num657 = 0f; num657 < num654; num657 = num72 + 1f)
							{
								for (int num658 = 0; num658 < 2; num658 = num3 + 1)
								{
									Vector2 value17 = vector23.RotatedBy((double)(((num658 == 0) ? 1f : -1f) * 6.28318548f / (num654 * 2f)), default(Vector2));
									for (float num659 = 0f; num659 < num656; num659 = num72 + 1f)
									{
										Vector2 value18 = Vector2.Lerp(vector23, value17, num659 / num656);
										float scaleFactor2 = MathHelper.Lerp(num655, value16, num659 / num656);
										int num660 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust = Main.dust[num660];
										dust.velocity *= 0.1f;
										Main.dust[num660].noGravity = true;
										dust = Main.dust[num660];
										dust.velocity += value18 * scaleFactor2;
										num72 = num659;
									}
									num3 = num658;
								}
								vector23 = vector23.RotatedBy((double)(6.28318548f / num654), default(Vector2));
								num72 = num657;
							}
							for (float num661 = 0f; num661 < num654; num661 = num72 + 1f)
							{
								for (int num662 = 0; num662 < 2; num662 = num3 + 1)
								{
									Vector2 value19 = vector23.RotatedBy((double)(((num662 == 0) ? 1f : -1f) * 6.28318548f / (num654 * 2f)), default(Vector2));
									for (float num663 = 0f; num663 < num656; num663 = num72 + 1f)
									{
										Vector2 value20 = Vector2.Lerp(vector23, value19, num663 / num656);
										float scaleFactor3 = MathHelper.Lerp(num655, value16, num663 / num656) / 2f;
										int num664 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust = Main.dust[num664];
										dust.velocity *= 0.1f;
										Main.dust[num664].noGravity = true;
										dust = Main.dust[num664];
										dust.velocity += value20 * scaleFactor3;
										num72 = num663;
									}
									num3 = num662;
								}
								vector23 = vector23.RotatedBy((double)(6.28318548f / num654), default(Vector2));
								num72 = num661;
							}
							for (int num665 = 0; num665 < 100; num665 = num3 + 1)
							{
								float num666 = num655;
								int num667 = 132;
								int num668 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num667, 0f, 0f, 100, default(Color), 1f);
								float num669 = Main.dust[num668].velocity.X;
								float num670 = Main.dust[num668].velocity.Y;
								if (num669 == 0f && num670 == 0f)
								{
									num669 = 1f;
								}
								float num671 = (float)Math.Sqrt((double)(num669 * num669 + num670 * num670));
								num671 = num666 / num671;
								num669 *= num671;
								num670 *= num671;
								Dust dust = Main.dust[num668];
								dust.velocity *= 0.5f;
								Dust var_503_1748E_cp_0_cp_0 = Main.dust[num668];
								var_503_1748E_cp_0_cp_0.velocity.X = var_503_1748E_cp_0_cp_0.velocity.X + num669;
								Dust var_503_174BF_cp_0_cp_0 = Main.dust[num668];
								var_503_174BF_cp_0_cp_0.velocity.Y = var_503_174BF_cp_0_cp_0.velocity.Y + num670;
								Main.dust[num668].scale = 1.3f;
								Main.dust[num668].noGravity = true;
								num3 = num665;
							}
						}
						if (this.type == 170)
						{
							int num3;
							for (int num672 = 0; num672 < 400; num672 = num3 + 1)
							{
								int num673 = 133;
								float num674 = 16f;
								if (num672 > 100)
								{
									num674 = 11f;
								}
								if (num672 > 100)
								{
									num673 = 134;
								}
								if (num672 > 200)
								{
									num674 = 8f;
								}
								if (num672 > 200)
								{
									num673 = 133;
								}
								if (num672 > 300)
								{
									num674 = 5f;
								}
								if (num672 > 300)
								{
									num673 = 134;
								}
								int num675 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num673, 0f, 0f, 100, default(Color), 1f);
								float num676 = Main.dust[num675].velocity.X;
								float num677 = Main.dust[num675].velocity.Y;
								if (num676 == 0f && num677 == 0f)
								{
									num676 = 1f;
								}
								float num678 = (float)Math.Sqrt((double)(num676 * num676 + num677 * num677));
								num678 = num674 / num678;
								if (num672 > 300)
								{
									num676 = num676 * num678 * 0.7f;
									num677 *= num678;
								}
								else if (num672 > 200)
								{
									num676 *= num678;
									num677 = num677 * num678 * 0.7f;
								}
								else if (num672 > 100)
								{
									num676 = num676 * num678 * 0.7f;
									num677 *= num678;
								}
								else
								{
									num676 *= num678;
									num677 = num677 * num678 * 0.7f;
								}
								Dust dust = Main.dust[num675];
								dust.velocity *= 0.5f;
								Dust var_503_177D5_cp_0_cp_0 = Main.dust[num675];
								var_503_177D5_cp_0_cp_0.velocity.X = var_503_177D5_cp_0_cp_0.velocity.X + num676;
								Dust var_503_17806_cp_0_cp_0 = Main.dust[num675];
								var_503_17806_cp_0_cp_0.velocity.Y = var_503_17806_cp_0_cp_0.velocity.Y + num677;
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num675].scale = 1.3f;
									Main.dust[num675].noGravity = true;
								}
								num3 = num672;
							}
						}
						if (this.type == 415)
						{
							Vector2 vector24 = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2();
							float num679 = (float)Main.rand.Next(5, 9);
							float num680 = (float)Main.rand.Next(10, 15) * 0.66f;
							float num681 = (float)Main.rand.Next(4, 7) / 2f;
							int num682 = 30;
							int num683 = 0;
							int num3;
							while ((float)num683 < (float)num682 * num679)
							{
								if (num683 % num682 == 0)
								{
									vector24 = vector24.RotatedBy((double)(6.28318548f / num679), default(Vector2));
								}
								float scaleFactor4 = MathHelper.Lerp(num681, num680, (float)(num683 % num682) / (float)num682);
								int num684 = 130;
								int num685 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num684, 0f, 0f, 100, default(Color), 1f);
								Dust dust = Main.dust[num685];
								dust.velocity *= 0.1f;
								dust = Main.dust[num685];
								dust.velocity += vector24 * scaleFactor4;
								Main.dust[num685].scale = 1.3f;
								Main.dust[num685].noGravity = true;
								num3 = num683;
								num683 = num3 + 1;
							}
							for (int num686 = 0; num686 < 100; num686 = num3 + 1)
							{
								float num687 = num680;
								if (num686 < 30)
								{
									num687 = (num681 + num680) / 2f;
								}
								int num688 = 130;
								int num689 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num688, 0f, 0f, 100, default(Color), 1f);
								float num690 = Main.dust[num689].velocity.X;
								float num691 = Main.dust[num689].velocity.Y;
								if (num690 == 0f && num691 == 0f)
								{
									num690 = 1f;
								}
								float num692 = (float)Math.Sqrt((double)(num690 * num690 + num691 * num691));
								num692 = num687 / num692;
								num690 *= num692;
								num691 *= num692;
								Dust dust = Main.dust[num689];
								dust.velocity *= 0.5f;
								Dust var_503_17BF0_cp_0_cp_0 = Main.dust[num689];
								var_503_17BF0_cp_0_cp_0.velocity.X = var_503_17BF0_cp_0_cp_0.velocity.X + num690;
								Dust var_503_17C21_cp_0_cp_0 = Main.dust[num689];
								var_503_17C21_cp_0_cp_0.velocity.Y = var_503_17C21_cp_0_cp_0.velocity.Y + num691;
								Main.dust[num689].scale = 1.3f;
								Main.dust[num689].noGravity = true;
								num3 = num686;
							}
						}
						if (this.type == 416)
						{
							Vector2 vector25 = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2();
							Vector2 vector26 = vector25;
							float num693 = (float)(Main.rand.Next(3, 6) * 2);
							int num694 = 20;
							float num695 = (Main.rand.Next(2) == 0) ? 1f : -1f;
							bool flag2 = true;
							int num696 = 0;
							while ((float)num696 < (float)num694 * num693)
							{
								if (num696 % num694 == 0)
								{
									vector26 = vector26.RotatedBy((double)(num695 * (6.28318548f / num693)), default(Vector2));
									vector25 = vector26;
									flag2 = !flag2;
								}
								else
								{
									float num697 = 6.28318548f / ((float)num694 * num693);
									vector25 = vector25.RotatedBy((double)(num697 * num695 * 3f), default(Vector2));
								}
								float scaleFactor5 = MathHelper.Lerp(1f, 8f, (float)(num696 % num694) / (float)num694);
								int num698 = 131;
								int num699 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num698, 0f, 0f, 100, default(Color), 1.4f);
								Dust dust = Main.dust[num699];
								dust.velocity *= 0.1f;
								dust = Main.dust[num699];
								dust.velocity += vector25 * scaleFactor5;
								if (flag2)
								{
									Main.dust[num699].scale = 0.9f;
								}
								Main.dust[num699].noGravity = true;
								int num3 = num696;
								num696 = num3 + 1;
							}
						}
						if (this.type == 417)
						{
							float num700 = (float)Main.rand.NextDouble() * 6.28318548f;
							float num701 = (float)Main.rand.NextDouble() * 6.28318548f;
							float num702 = 4f + (float)Main.rand.NextDouble() * 3f;
							float num703 = 4f + (float)Main.rand.NextDouble() * 3f;
							float num704 = num702;
							if (num703 > num704)
							{
								num704 = num703;
							}
							int num3;
							for (int num705 = 0; num705 < 150; num705 = num3 + 1)
							{
								int num706 = 132;
								float scaleFactor6 = num704;
								if (num705 > 50)
								{
									scaleFactor6 = num703;
								}
								if (num705 > 50)
								{
									num706 = 133;
								}
								if (num705 > 100)
								{
									scaleFactor6 = num702;
								}
								if (num705 > 100)
								{
									num706 = 132;
								}
								int num707 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num706, 0f, 0f, 100, default(Color), 1f);
								Vector2 vector27 = Main.dust[num707].velocity;
								vector27.Normalize();
								vector27 *= scaleFactor6;
								if (num705 > 100)
								{
									vector27.X *= 0.5f;
									vector27 = vector27.RotatedBy((double)num700, default(Vector2));
								}
								else if (num705 > 50)
								{
									vector27.Y *= 0.5f;
									vector27 = vector27.RotatedBy((double)num701, default(Vector2));
								}
								Dust dust = Main.dust[num707];
								dust.velocity *= 0.2f;
								dust = Main.dust[num707];
								dust.velocity += vector27;
								if (num705 <= 200)
								{
									Main.dust[num707].scale = 1.3f;
									Main.dust[num707].noGravity = true;
								}
								num3 = num705;
							}
						}
						if (this.type == 418)
						{
							Vector2 vector28 = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2();
							float num708 = (float)Main.rand.Next(5, 12);
							float num709 = (float)Main.rand.Next(9, 14) * 0.66f;
							float num710 = (float)Main.rand.Next(2, 4) * 0.66f;
							float num711 = 15f;
							int num3;
							float num72;
							for (float num712 = 0f; num712 < num708; num712 = num72 + 1f)
							{
								for (int num713 = 0; num713 < 2; num713 = num3 + 1)
								{
									Vector2 value21 = vector28.RotatedBy((double)(((num713 == 0) ? 1f : -1f) * 6.28318548f / (num708 * 2f)), default(Vector2));
									for (float num714 = 0f; num714 < num711; num714 = num72 + 1f)
									{
										Vector2 value22 = Vector2.SmoothStep(vector28, value21, num714 / num711);
										float scaleFactor7 = MathHelper.SmoothStep(num709, num710, num714 / num711);
										int num715 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 134, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust = Main.dust[num715];
										dust.velocity *= 0.1f;
										Main.dust[num715].noGravity = true;
										dust = Main.dust[num715];
										dust.velocity += value22 * scaleFactor7;
										num72 = num714;
									}
									num3 = num713;
								}
								vector28 = vector28.RotatedBy((double)(6.28318548f / num708), default(Vector2));
								num72 = num712;
							}
							for (int num716 = 0; num716 < 120; num716 = num3 + 1)
							{
								float num717 = num709;
								int num718 = 133;
								if (num716 < 80)
								{
									num717 = num710 - 0.5f;
								}
								else
								{
									num718 = 131;
								}
								int num719 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num718, 0f, 0f, 100, default(Color), 1f);
								float num720 = Main.dust[num719].velocity.X;
								float num721 = Main.dust[num719].velocity.Y;
								if (num720 == 0f && num721 == 0f)
								{
									num720 = 1f;
								}
								float num722 = (float)Math.Sqrt((double)(num720 * num720 + num721 * num721));
								num722 = num717 / num722;
								num720 *= num722;
								num721 *= num722;
								Dust dust = Main.dust[num719];
								dust.velocity *= 0.2f;
								Dust var_503_185C6_cp_0_cp_0 = Main.dust[num719];
								var_503_185C6_cp_0_cp_0.velocity.X = var_503_185C6_cp_0_cp_0.velocity.X + num720;
								Dust var_503_185F7_cp_0_cp_0 = Main.dust[num719];
								var_503_185F7_cp_0_cp_0.velocity.Y = var_503_185F7_cp_0_cp_0.velocity.Y + num721;
								Main.dust[num719].scale = 1.3f;
								Main.dust[num719].noGravity = true;
								num3 = num716;
							}
						}
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 192;
						this.height = 192;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.penetrate = -1;
						this.Damage();
					}
					else if (this.type == 312)
					{
						Main.PlaySound(SoundID.Item14, this.position);
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 22;
						this.height = 22;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						int num3;
						for (int num723 = 0; num723 < 30; num723 = num3 + 1)
						{
							int num724 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num724];
							dust.velocity *= 1.4f;
							num3 = num723;
						}
						for (int num725 = 0; num725 < 20; num725 = num3 + 1)
						{
							int num726 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 3.5f);
							Main.dust[num726].noGravity = true;
							Dust dust = Main.dust[num726];
							dust.velocity *= 7f;
							num726 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num726];
							dust.velocity *= 3f;
							num3 = num725;
						}
						for (int num727 = 0; num727 < 2; num727 = num3 + 1)
						{
							float scaleFactor8 = 0.4f;
							if (num727 == 1)
							{
								scaleFactor8 = 0.8f;
							}
							int num728 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							Gore gore = Main.gore[num728];
							gore.velocity *= scaleFactor8;
							Gore var_503_18A64_cp_0_cp_0 = Main.gore[num728];
							var_503_18A64_cp_0_cp_0.velocity.X = var_503_18A64_cp_0_cp_0.velocity.X + 1f;
							Gore var_503_18A94_cp_0_cp_0 = Main.gore[num728];
							var_503_18A94_cp_0_cp_0.velocity.Y = var_503_18A94_cp_0_cp_0.velocity.Y + 1f;
							num728 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore = Main.gore[num728];
							gore.velocity *= scaleFactor8;
							Gore var_503_18B2E_cp_0_cp_0 = Main.gore[num728];
							var_503_18B2E_cp_0_cp_0.velocity.X = var_503_18B2E_cp_0_cp_0.velocity.X - 1f;
							Gore var_503_18B5E_cp_0_cp_0 = Main.gore[num728];
							var_503_18B5E_cp_0_cp_0.velocity.Y = var_503_18B5E_cp_0_cp_0.velocity.Y + 1f;
							num728 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore = Main.gore[num728];
							gore.velocity *= scaleFactor8;
							Gore var_503_18BF8_cp_0_cp_0 = Main.gore[num728];
							var_503_18BF8_cp_0_cp_0.velocity.X = var_503_18BF8_cp_0_cp_0.velocity.X + 1f;
							Gore var_503_18C28_cp_0_cp_0 = Main.gore[num728];
							var_503_18C28_cp_0_cp_0.velocity.Y = var_503_18C28_cp_0_cp_0.velocity.Y - 1f;
							num728 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore = Main.gore[num728];
							gore.velocity *= scaleFactor8;
							Gore var_503_18CC2_cp_0_cp_0 = Main.gore[num728];
							var_503_18CC2_cp_0_cp_0.velocity.X = var_503_18CC2_cp_0_cp_0.velocity.X - 1f;
							Gore var_503_18CF2_cp_0_cp_0 = Main.gore[num728];
							var_503_18CF2_cp_0_cp_0.velocity.Y = var_503_18CF2_cp_0_cp_0.velocity.Y - 1f;
							num3 = num727;
						}
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 128;
						this.height = 128;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.Damage();
					}
					else if (this.type == 133 || this.type == 134 || this.type == 135 || this.type == 136 || this.type == 137 || this.type == 138 || this.type == 303 || this.type == 338 || this.type == 339)
					{
						if (this.type == 30 || this.type == 133 || this.type == 136 || this.type == 139)
						{
							Main.PlaySound(SoundID.Item62, this.position);
						}
						else
						{
							Main.PlaySound(SoundID.Item14, this.position);
						}
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 22;
						this.height = 22;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						int num3;
						for (int num729 = 0; num729 < 30; num729 = num3 + 1)
						{
							int num730 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num730];
							dust.velocity *= 1.4f;
							num3 = num729;
						}
						for (int num731 = 0; num731 < 20; num731 = num3 + 1)
						{
							int num732 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 3.5f);
							Main.dust[num732].noGravity = true;
							Dust dust = Main.dust[num732];
							dust.velocity *= 7f;
							num732 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num732];
							dust.velocity *= 3f;
							num3 = num731;
						}
						for (int num733 = 0; num733 < 2; num733 = num3 + 1)
						{
							float scaleFactor9 = 0.4f;
							if (num733 == 1)
							{
								scaleFactor9 = 0.8f;
							}
							int num734 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							Gore gore = Main.gore[num734];
							gore.velocity *= scaleFactor9;
							Gore var_503_191DA_cp_0_cp_0 = Main.gore[num734];
							var_503_191DA_cp_0_cp_0.velocity.X = var_503_191DA_cp_0_cp_0.velocity.X + 1f;
							Gore var_503_1920A_cp_0_cp_0 = Main.gore[num734];
							var_503_1920A_cp_0_cp_0.velocity.Y = var_503_1920A_cp_0_cp_0.velocity.Y + 1f;
							num734 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore = Main.gore[num734];
							gore.velocity *= scaleFactor9;
							Gore var_503_192A4_cp_0_cp_0 = Main.gore[num734];
							var_503_192A4_cp_0_cp_0.velocity.X = var_503_192A4_cp_0_cp_0.velocity.X - 1f;
							Gore var_503_192D4_cp_0_cp_0 = Main.gore[num734];
							var_503_192D4_cp_0_cp_0.velocity.Y = var_503_192D4_cp_0_cp_0.velocity.Y + 1f;
							num734 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore = Main.gore[num734];
							gore.velocity *= scaleFactor9;
							Gore var_503_1936E_cp_0_cp_0 = Main.gore[num734];
							var_503_1936E_cp_0_cp_0.velocity.X = var_503_1936E_cp_0_cp_0.velocity.X + 1f;
							Gore var_503_1939E_cp_0_cp_0 = Main.gore[num734];
							var_503_1939E_cp_0_cp_0.velocity.Y = var_503_1939E_cp_0_cp_0.velocity.Y - 1f;
							num734 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore = Main.gore[num734];
							gore.velocity *= scaleFactor9;
							Gore var_503_19438_cp_0_cp_0 = Main.gore[num734];
							var_503_19438_cp_0_cp_0.velocity.X = var_503_19438_cp_0_cp_0.velocity.X - 1f;
							Gore var_503_19468_cp_0_cp_0 = Main.gore[num734];
							var_503_19468_cp_0_cp_0.velocity.Y = var_503_19468_cp_0_cp_0.velocity.Y - 1f;
							num3 = num733;
						}
					}
					else if (this.type == 139 || this.type == 140 || this.type == 141 || this.type == 142 || this.type == 143 || this.type == 144 || this.type == 340 || this.type == 341)
					{
						if (this.type == 30 || this.type == 133 || this.type == 136 || this.type == 139)
						{
							Main.PlaySound(SoundID.Item62, this.position);
						}
						else
						{
							Main.PlaySound(SoundID.Item14, this.position);
						}
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 80;
						this.height = 80;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						int num3;
						for (int num735 = 0; num735 < 40; num735 = num3 + 1)
						{
							int num736 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust = Main.dust[num736];
							dust.velocity *= 3f;
							if (Main.rand.Next(2) == 0)
							{
								Main.dust[num736].scale = 0.5f;
								Main.dust[num736].fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
							}
							num3 = num735;
						}
						for (int num737 = 0; num737 < 70; num737 = num3 + 1)
						{
							int num738 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 3f);
							Main.dust[num738].noGravity = true;
							Dust dust = Main.dust[num738];
							dust.velocity *= 5f;
							num738 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
							dust = Main.dust[num738];
							dust.velocity *= 2f;
							num3 = num737;
						}
						for (int num739 = 0; num739 < 3; num739 = num3 + 1)
						{
							float scaleFactor10 = 0.33f;
							if (num739 == 1)
							{
								scaleFactor10 = 0.66f;
							}
							if (num739 == 2)
							{
								scaleFactor10 = 1f;
							}
							int num740 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							Gore gore = Main.gore[num740];
							gore.velocity *= scaleFactor10;
							Gore var_503_19904_cp_0_cp_0 = Main.gore[num740];
							var_503_19904_cp_0_cp_0.velocity.X = var_503_19904_cp_0_cp_0.velocity.X + 1f;
							Gore var_503_19934_cp_0_cp_0 = Main.gore[num740];
							var_503_19934_cp_0_cp_0.velocity.Y = var_503_19934_cp_0_cp_0.velocity.Y + 1f;
							num740 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore = Main.gore[num740];
							gore.velocity *= scaleFactor10;
							Gore var_503_199EE_cp_0_cp_0 = Main.gore[num740];
							var_503_199EE_cp_0_cp_0.velocity.X = var_503_199EE_cp_0_cp_0.velocity.X - 1f;
							Gore var_503_19A1E_cp_0_cp_0 = Main.gore[num740];
							var_503_19A1E_cp_0_cp_0.velocity.Y = var_503_19A1E_cp_0_cp_0.velocity.Y + 1f;
							num740 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore = Main.gore[num740];
							gore.velocity *= scaleFactor10;
							Gore var_503_19AD8_cp_0_cp_0 = Main.gore[num740];
							var_503_19AD8_cp_0_cp_0.velocity.X = var_503_19AD8_cp_0_cp_0.velocity.X + 1f;
							Gore var_503_19B08_cp_0_cp_0 = Main.gore[num740];
							var_503_19B08_cp_0_cp_0.velocity.Y = var_503_19B08_cp_0_cp_0.velocity.Y - 1f;
							num740 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore = Main.gore[num740];
							gore.velocity *= scaleFactor10;
							Gore var_503_19BC2_cp_0_cp_0 = Main.gore[num740];
							var_503_19BC2_cp_0_cp_0.velocity.X = var_503_19BC2_cp_0_cp_0.velocity.X - 1f;
							Gore var_503_19BF2_cp_0_cp_0 = Main.gore[num740];
							var_503_19BF2_cp_0_cp_0.velocity.Y = var_503_19BF2_cp_0_cp_0.velocity.Y - 1f;
							num3 = num739;
						}
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 10;
						this.height = 10;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
					}
					else if (this.type == 246)
					{
						Main.PlaySound(SoundID.Item14, this.position);
						int num3;
						for (int num741 = 0; num741 < 10; num741 = num3 + 1)
						{
							int num742 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num742];
							dust.velocity *= 0.9f;
							num3 = num741;
						}
						for (int num743 = 0; num743 < 5; num743 = num3 + 1)
						{
							int num744 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num744].noGravity = true;
							Dust dust = Main.dust[num744];
							dust.velocity *= 3f;
							num744 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num744];
							dust.velocity *= 2f;
							num3 = num743;
						}
						int num745 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore gore = Main.gore[num745];
						gore.velocity *= 0.3f;
						Gore var_503_19F41_cp_0_cp_0 = Main.gore[num745];
						var_503_19F41_cp_0_cp_0.velocity.X = var_503_19F41_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-1, 2);
						Gore var_503_19F79_cp_0_cp_0 = Main.gore[num745];
						var_503_19F79_cp_0_cp_0.velocity.Y = var_503_19F79_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-1, 2);
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 150;
						this.height = 150;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.penetrate = -1;
						this.maxPenetrate = 0;
						this.Damage();
						if (this.owner == Main.myPlayer)
						{
							int num746 = Main.rand.Next(2, 6);
							for (int num747 = 0; num747 < num746; num747 = num3 + 1)
							{
								float num748 = (float)Main.rand.Next(-100, 101);
								num748 += 0.01f;
								float num749 = (float)Main.rand.Next(-100, 101);
								num748 -= 0.01f;
								float num750 = (float)Math.Sqrt((double)(num748 * num748 + num749 * num749));
								num750 = 8f / num750;
								num748 *= num750;
								num749 *= num750;
								int num751 = Projectile.NewProjectile(base.Center.X - this.oldVelocity.X, base.Center.Y - this.oldVelocity.Y, num748, num749, 249, this.damage, this.knockBack, this.owner, 0f, 0f);
								Main.projectile[num751].maxPenetrate = 0;
								num3 = num747;
							}
						}
					}
					else if (this.type == 249)
					{
						Main.PlaySound(SoundID.Item14, this.position);
						int num3;
						for (int num752 = 0; num752 < 7; num752 = num3 + 1)
						{
							int num753 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num753];
							dust.velocity *= 0.8f;
							num3 = num752;
						}
						for (int num754 = 0; num754 < 2; num754 = num3 + 1)
						{
							int num755 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num755].noGravity = true;
							Dust dust = Main.dust[num755];
							dust.velocity *= 2.5f;
							num755 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num755];
							dust.velocity *= 1.5f;
							num3 = num754;
						}
						int num756 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore gore = Main.gore[num756];
						gore.velocity *= 0.2f;
						Gore var_503_1A442_cp_0_cp_0 = Main.gore[num756];
						var_503_1A442_cp_0_cp_0.velocity.X = var_503_1A442_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-1, 2);
						Gore var_503_1A47A_cp_0_cp_0 = Main.gore[num756];
						var_503_1A47A_cp_0_cp_0.velocity.Y = var_503_1A47A_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-1, 2);
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 100;
						this.height = 100;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						this.penetrate = -1;
						this.Damage();
					}
					else if (this.type == 588)
					{
						Main.PlaySound(SoundID.Item14, this.position);
						this.position = base.Center;
						this.width = (this.height = 22);
						base.Center = this.position;
						int num3;
						for (int num757 = 0; num757 < 8; num757 = num3 + 1)
						{
							int num758 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 219 + Main.rand.Next(5), 0f, 0f, 0, default(Color), 1f);
							Dust dust = Main.dust[num758];
							dust.velocity *= 1.4f;
							Main.dust[num758].fadeIn = 1f;
							Main.dust[num758].noGravity = true;
							num3 = num757;
						}
						for (int num759 = 0; num759 < 15; num759 = num3 + 1)
						{
							int num760 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.6f);
							Main.dust[num760].noGravity = true;
							Dust dust = Main.dust[num760];
							dust.velocity *= 5f;
							num760 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.9f);
							dust = Main.dust[num760];
							dust.velocity *= 3f;
							num3 = num759;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num761 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(276, 283), 1f);
							Gore gore = Main.gore[num761];
							gore.velocity *= 0.4f;
							Gore var_503_1A855_cp_0_cp_0 = Main.gore[num761];
							var_503_1A855_cp_0_cp_0.velocity.X = var_503_1A855_cp_0_cp_0.velocity.X + 1f;
							Gore var_503_1A885_cp_0_cp_0 = Main.gore[num761];
							var_503_1A885_cp_0_cp_0.velocity.Y = var_503_1A885_cp_0_cp_0.velocity.Y + 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num761 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(276, 283), 1f);
							Gore gore = Main.gore[num761];
							gore.velocity *= 0.4f;
							Gore var_503_1A934_cp_0_cp_0 = Main.gore[num761];
							var_503_1A934_cp_0_cp_0.velocity.X = var_503_1A934_cp_0_cp_0.velocity.X - 1f;
							Gore var_503_1A964_cp_0_cp_0 = Main.gore[num761];
							var_503_1A964_cp_0_cp_0.velocity.Y = var_503_1A964_cp_0_cp_0.velocity.Y + 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num761 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(276, 283), 1f);
							Gore gore = Main.gore[num761];
							gore.velocity *= 0.4f;
							Gore var_503_1AA13_cp_0_cp_0 = Main.gore[num761];
							var_503_1AA13_cp_0_cp_0.velocity.X = var_503_1AA13_cp_0_cp_0.velocity.X + 1f;
							Gore var_503_1AA43_cp_0_cp_0 = Main.gore[num761];
							var_503_1AA43_cp_0_cp_0.velocity.Y = var_503_1AA43_cp_0_cp_0.velocity.Y - 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num761 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(276, 283), 1f);
							Gore gore = Main.gore[num761];
							gore.velocity *= 0.4f;
							Gore var_503_1AAF2_cp_0_cp_0 = Main.gore[num761];
							var_503_1AAF2_cp_0_cp_0.velocity.X = var_503_1AAF2_cp_0_cp_0.velocity.X - 1f;
							Gore var_503_1AB22_cp_0_cp_0 = Main.gore[num761];
							var_503_1AB22_cp_0_cp_0.velocity.Y = var_503_1AB22_cp_0_cp_0.velocity.Y - 1f;
						}
					}
					else if (this.type == 28 || this.type == 30 || this.type == 37 || this.type == 75 || this.type == 102 || this.type == 164 || this.type == 397 || this.type == 517 || this.type == 516 || this.type == 519)
					{
						Main.PlaySound(SoundID.Item14, this.position);
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 22;
						this.height = 22;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
						int num3;
						for (int num762 = 0; num762 < 20; num762 = num3 + 1)
						{
							int num763 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num763];
							dust.velocity *= 1.4f;
							num3 = num762;
						}
						for (int num764 = 0; num764 < 10; num764 = num3 + 1)
						{
							int num765 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num765].noGravity = true;
							Dust dust = Main.dust[num765];
							dust.velocity *= 5f;
							num765 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num765];
							dust.velocity *= 3f;
							num3 = num764;
						}
						int num766 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore gore = Main.gore[num766];
						gore.velocity *= 0.4f;
						Gore var_503_1AEBC_cp_0_cp_0 = Main.gore[num766];
						var_503_1AEBC_cp_0_cp_0.velocity.X = var_503_1AEBC_cp_0_cp_0.velocity.X + 1f;
						Gore var_503_1AEEC_cp_0_cp_0 = Main.gore[num766];
						var_503_1AEEC_cp_0_cp_0.velocity.Y = var_503_1AEEC_cp_0_cp_0.velocity.Y + 1f;
						num766 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						gore = Main.gore[num766];
						gore.velocity *= 0.4f;
						Gore var_503_1AF85_cp_0_cp_0 = Main.gore[num766];
						var_503_1AF85_cp_0_cp_0.velocity.X = var_503_1AF85_cp_0_cp_0.velocity.X - 1f;
						Gore var_503_1AFB5_cp_0_cp_0 = Main.gore[num766];
						var_503_1AFB5_cp_0_cp_0.velocity.Y = var_503_1AFB5_cp_0_cp_0.velocity.Y + 1f;
						num766 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						gore = Main.gore[num766];
						gore.velocity *= 0.4f;
						Gore var_503_1B04E_cp_0_cp_0 = Main.gore[num766];
						var_503_1B04E_cp_0_cp_0.velocity.X = var_503_1B04E_cp_0_cp_0.velocity.X + 1f;
						Gore var_503_1B07E_cp_0_cp_0 = Main.gore[num766];
						var_503_1B07E_cp_0_cp_0.velocity.Y = var_503_1B07E_cp_0_cp_0.velocity.Y - 1f;
						num766 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						gore = Main.gore[num766];
						gore.velocity *= 0.4f;
						Gore var_503_1B117_cp_0_cp_0 = Main.gore[num766];
						var_503_1B117_cp_0_cp_0.velocity.X = var_503_1B117_cp_0_cp_0.velocity.X - 1f;
						Gore var_503_1B147_cp_0_cp_0 = Main.gore[num766];
						var_503_1B147_cp_0_cp_0.velocity.Y = var_503_1B147_cp_0_cp_0.velocity.Y - 1f;
						if (this.type == 102)
						{
							this.position.X = this.position.X + (float)(this.width / 2);
							this.position.Y = this.position.Y + (float)(this.height / 2);
							this.width = 128;
							this.height = 128;
							this.position.X = this.position.X - (float)(this.width / 2);
							this.position.Y = this.position.Y - (float)(this.height / 2);
							this.damage = 40;
							this.Damage();
						}
					}
					else if (this.type == 29 || this.type == 108 || this.type == 470 || this.type == 637)
					{
						Main.PlaySound(SoundID.Item14, this.position);
						if (this.type == 29)
						{
							this.position.X = this.position.X + (float)(this.width / 2);
							this.position.Y = this.position.Y + (float)(this.height / 2);
							this.width = 200;
							this.height = 200;
							this.position.X = this.position.X - (float)(this.width / 2);
							this.position.Y = this.position.Y - (float)(this.height / 2);
						}
						int num3;
						for (int num767 = 0; num767 < 50; num767 = num3 + 1)
						{
							int num768 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust = Main.dust[num768];
							dust.velocity *= 1.4f;
							num3 = num767;
						}
						for (int num769 = 0; num769 < 80; num769 = num3 + 1)
						{
							int num770 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 3f);
							Main.dust[num770].noGravity = true;
							Dust dust = Main.dust[num770];
							dust.velocity *= 5f;
							num770 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
							dust = Main.dust[num770];
							dust.velocity *= 3f;
							num3 = num769;
						}
						for (int num771 = 0; num771 < 2; num771 = num3 + 1)
						{
							int num772 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num772].scale = 1.5f;
							Gore var_503_1B5A0_cp_0_cp_0 = Main.gore[num772];
							var_503_1B5A0_cp_0_cp_0.velocity.X = var_503_1B5A0_cp_0_cp_0.velocity.X + 1.5f;
							Gore var_503_1B5D0_cp_0_cp_0 = Main.gore[num772];
							var_503_1B5D0_cp_0_cp_0.velocity.Y = var_503_1B5D0_cp_0_cp_0.velocity.Y + 1.5f;
							num772 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num772].scale = 1.5f;
							Gore var_503_1B679_cp_0_cp_0 = Main.gore[num772];
							var_503_1B679_cp_0_cp_0.velocity.X = var_503_1B679_cp_0_cp_0.velocity.X - 1.5f;
							Gore var_503_1B6A9_cp_0_cp_0 = Main.gore[num772];
							var_503_1B6A9_cp_0_cp_0.velocity.Y = var_503_1B6A9_cp_0_cp_0.velocity.Y + 1.5f;
							num772 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num772].scale = 1.5f;
							Gore var_503_1B752_cp_0_cp_0 = Main.gore[num772];
							var_503_1B752_cp_0_cp_0.velocity.X = var_503_1B752_cp_0_cp_0.velocity.X + 1.5f;
							Gore var_503_1B782_cp_0_cp_0 = Main.gore[num772];
							var_503_1B782_cp_0_cp_0.velocity.Y = var_503_1B782_cp_0_cp_0.velocity.Y - 1.5f;
							num772 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num772].scale = 1.5f;
							Gore var_503_1B82B_cp_0_cp_0 = Main.gore[num772];
							var_503_1B82B_cp_0_cp_0.velocity.X = var_503_1B82B_cp_0_cp_0.velocity.X - 1.5f;
							Gore var_503_1B85B_cp_0_cp_0 = Main.gore[num772];
							var_503_1B85B_cp_0_cp_0.velocity.Y = var_503_1B85B_cp_0_cp_0.velocity.Y - 1.5f;
							num3 = num771;
						}
						this.position.X = this.position.X + (float)(this.width / 2);
						this.position.Y = this.position.Y + (float)(this.height / 2);
						this.width = 10;
						this.height = 10;
						this.position.X = this.position.X - (float)(this.width / 2);
						this.position.Y = this.position.Y - (float)(this.height / 2);
					}
					else if (this.type == 69)
					{
						Main.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num773 = 0; num773 < 5; num773 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0f, 0f, 0, default(Color), 1f);
							num3 = num773;
						}
						for (int num774 = 0; num774 < 30; num774 = num3 + 1)
						{
							int num775 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 33, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num775].alpha = 100;
							Dust var_503_1BA70_cp_0_cp_0 = Main.dust[num775];
							var_503_1BA70_cp_0_cp_0.velocity.X = var_503_1BA70_cp_0_cp_0.velocity.X * 1.5f;
							Dust dust = Main.dust[num775];
							dust.velocity *= 3f;
							num3 = num774;
						}
					}
					else if (this.type == 70)
					{
						Main.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num776 = 0; num776 < 5; num776 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0f, 0f, 0, default(Color), 1f);
							num3 = num776;
						}
						for (int num777 = 0; num777 < 30; num777 = num3 + 1)
						{
							int num778 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 52, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num778].alpha = 100;
							Dust var_503_1BBF8_cp_0_cp_0 = Main.dust[num778];
							var_503_1BBF8_cp_0_cp_0.velocity.X = var_503_1BBF8_cp_0_cp_0.velocity.X * 1.5f;
							Dust dust = Main.dust[num778];
							dust.velocity *= 3f;
							num3 = num777;
						}
					}
					else if (this.type == 621)
					{
						Main.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num3;
						for (int num779 = 0; num779 < 5; num779 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0f, 0f, 0, default(Color), 1f);
							num3 = num779;
						}
						for (int num780 = 0; num780 < 30; num780 = num3 + 1)
						{
							int num781 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 266, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num781].alpha = 100;
							Dust var_503_1BD86_cp_0_cp_0 = Main.dust[num781];
							var_503_1BD86_cp_0_cp_0.velocity.X = var_503_1BD86_cp_0_cp_0.velocity.X * 1.5f;
							Dust dust = Main.dust[num781];
							dust.velocity *= 3f;
							num3 = num780;
						}
					}
					else if (this.type == 114 || this.type == 115)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num782 = 4; num782 < 31; num782 = num3 + 1)
						{
							float num783 = this.oldVelocity.X * (30f / (float)num782);
							float num784 = this.oldVelocity.Y * (30f / (float)num782);
							int num785 = Dust.NewDust(new Vector2(this.position.X - num783, this.position.Y - num784), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.4f);
							Main.dust[num785].noGravity = true;
							Dust dust = Main.dust[num785];
							dust.velocity *= 0.5f;
							num785 = Dust.NewDust(new Vector2(this.position.X - num783, this.position.Y - num784), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 0.9f);
							dust = Main.dust[num785];
							dust.velocity *= 0.5f;
							num3 = num782;
						}
					}
					else if (this.type == 116)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num786 = 4; num786 < 31; num786 = num3 + 1)
						{
							float num787 = this.oldVelocity.X * (30f / (float)num786);
							float num788 = this.oldVelocity.Y * (30f / (float)num786);
							int num789 = Dust.NewDust(new Vector2(this.position.X - num787, this.position.Y - num788), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num789].noGravity = true;
							num789 = Dust.NewDust(new Vector2(this.position.X - num787, this.position.Y - num788), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.4f);
							Main.dust[num789].noGravity = true;
							num3 = num786;
						}
					}
					else if (this.type == 173)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num790 = 4; num790 < 24; num790 = num3 + 1)
						{
							float num791 = this.oldVelocity.X * (30f / (float)num790);
							float num792 = this.oldVelocity.Y * (30f / (float)num790);
							int num793 = Main.rand.Next(3);
							if (num793 == 0)
							{
								num793 = 15;
							}
							else if (num793 == 1)
							{
								num793 = 57;
							}
							else
							{
								num793 = 58;
							}
							int num794 = Dust.NewDust(new Vector2(this.position.X - num791, this.position.Y - num792), 8, 8, num793, this.oldVelocity.X * 0.2f, this.oldVelocity.Y * 0.2f, 100, default(Color), 1.8f);
							Dust dust = Main.dust[num794];
							dust.velocity *= 1.5f;
							Main.dust[num794].noGravity = true;
							num3 = num790;
						}
					}
					else if (this.type == 132)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num795 = 4; num795 < 31; num795 = num3 + 1)
						{
							float num796 = this.oldVelocity.X * (30f / (float)num795);
							float num797 = this.oldVelocity.Y * (30f / (float)num795);
							int num798 = Dust.NewDust(new Vector2(this.oldPosition.X - num796, this.oldPosition.Y - num797), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num798].noGravity = true;
							Dust dust = Main.dust[num798];
							dust.velocity *= 0.5f;
							num798 = Dust.NewDust(new Vector2(this.oldPosition.X - num796, this.oldPosition.Y - num797), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.4f);
							dust = Main.dust[num798];
							dust.velocity *= 0.05f;
							num3 = num795;
						}
					}
					else if (this.type == 156)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num799 = 4; num799 < 31; num799 = num3 + 1)
						{
							float num800 = this.oldVelocity.X * (30f / (float)num799);
							float num801 = this.oldVelocity.Y * (30f / (float)num799);
							int num802 = Dust.NewDust(new Vector2(this.oldPosition.X - num800, this.oldPosition.Y - num801), 8, 8, 73, this.oldVelocity.X, this.oldVelocity.Y, 255, default(Color), 1.8f);
							Main.dust[num802].noGravity = true;
							Dust dust = Main.dust[num802];
							dust.velocity *= 0.5f;
							num802 = Dust.NewDust(new Vector2(this.oldPosition.X - num800, this.oldPosition.Y - num801), 8, 8, 73, this.oldVelocity.X, this.oldVelocity.Y, 255, default(Color), 1.4f);
							dust = Main.dust[num802];
							dust.velocity *= 0.05f;
							Main.dust[num802].noGravity = true;
							num3 = num799;
						}
					}
					else if (this.type == 157)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						int num3;
						for (int num803 = 4; num803 < 31; num803 = num3 + 1)
						{
							int num804 = Dust.NewDust(this.position, this.width, this.height, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num804].noGravity = true;
							Dust dust = Main.dust[num804];
							dust.velocity *= 0.5f;
							num3 = num803;
						}
					}
					else if (this.type == 370)
					{
						Main.PlaySound(SoundID.Item4, this.position);
						int num3;
						for (int num805 = 0; num805 < 5; num805 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0f, 0f, 0, default(Color), 1f);
							num3 = num805;
						}
						for (int num806 = 0; num806 < 30; num806 = num3 + 1)
						{
							Vector2 value23 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
							value23.Normalize();
							int num807 = Gore.NewGore(base.Center + value23 * 10f, value23 * (float)Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, 331, (float)Main.rand.Next(40, 141) * 0.01f);
							Main.gore[num807].sticky = false;
							num3 = num806;
						}
					}
					else if (this.type == 371)
					{
						Main.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						Main.PlaySound(SoundID.Item16, this.position);
						int num3;
						for (int num808 = 0; num808 < 5; num808 = num3 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0f, 0f, 0, default(Color), 1f);
							num3 = num808;
						}
						for (int num809 = 0; num809 < 30; num809 = num3 + 1)
						{
							Vector2 value24 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
							value24.Normalize();
							value24 *= 0.4f;
							int num810 = Gore.NewGore(base.Center + value24 * 10f, value24 * (float)Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, Main.rand.Next(435, 438), (float)Main.rand.Next(20, 100) * 0.01f);
							Main.gore[num810].sticky = false;
							num3 = num809;
						}
					}
				}
			}
			if (this.owner == Main.myPlayer && (this.type == 370 || this.type == 371))
			{
				float num811 = 80f;
				int num812 = 119;
				if (this.type == 371)
				{
					num812 = 120;
				}
				int num3;
				for (int num813 = 0; num813 < 255; num813 = num3 + 1)
				{
					Player player2 = Main.player[num813];
					if (player2.active && !player2.dead && Vector2.Distance(base.Center, player2.Center) < num811)
					{
						player2.AddBuff(num812, 1800, false);
					}
					num3 = num813;
				}
				for (int num814 = 0; num814 < 200; num814 = num3 + 1)
				{
					NPC nPC = Main.npc[num814];
					if (nPC.active && nPC.life > 0 && Vector2.Distance(base.Center, nPC.Center) < num811)
					{
						nPC.AddBuff(num812, 1800, false);
					}
					num3 = num814;
				}
			}
			if (this.owner == Main.myPlayer)
			{
				if (this.type == 28 || this.type == 29 || this.type == 37 || this.type == 108 || this.type == 136 || this.type == 137 || this.type == 138 || this.type == 142 || this.type == 143 || this.type == 144 || this.type == 339 || this.type == 341 || this.type == 470 || this.type == 516 || this.type == 519 || this.type == 637)
				{
					int num815 = 3;
					if (this.type == 28 || this.type == 37 || this.type == 516 || this.type == 519)
					{
						num815 = 4;
					}
					if (this.type == 29 || this.type == 470 || this.type == 637)
					{
						num815 = 7;
					}
					if (this.type == 142 || this.type == 143 || this.type == 144 || this.type == 341)
					{
						num815 = 5;
					}
					if (this.type == 108)
					{
						num815 = 10;
					}
					int num816 = (int)(this.position.X / 16f - (float)num815);
					int num817 = (int)(this.position.X / 16f + (float)num815);
					int num818 = (int)(this.position.Y / 16f - (float)num815);
					int num819 = (int)(this.position.Y / 16f + (float)num815);
					if (num816 < 0)
					{
						num816 = 0;
					}
					if (num817 > Main.maxTilesX)
					{
						num817 = Main.maxTilesX;
					}
					if (num818 < 0)
					{
						num818 = 0;
					}
					if (num819 > Main.maxTilesY)
					{
						num819 = Main.maxTilesY;
					}
					bool flag3 = false;
					int num3;
					for (int num820 = num816; num820 <= num817; num820 = num3 + 1)
					{
						for (int num821 = num818; num821 <= num819; num821 = num3 + 1)
						{
							float num822 = Math.Abs((float)num820 - this.position.X / 16f);
							float num823 = Math.Abs((float)num821 - this.position.Y / 16f);
							double num824 = Math.Sqrt((double)(num822 * num822 + num823 * num823));
							if (num824 < (double)num815 && Main.tile[num820, num821] != null && Main.tile[num820, num821].wall == 0)
							{
								flag3 = true;
								break;
							}
							num3 = num821;
						}
						num3 = num820;
					}
					AchievementsHelper.CurrentlyMining = true;
					for (int num825 = num816; num825 <= num817; num825 = num3 + 1)
					{
						for (int num826 = num818; num826 <= num819; num826 = num3 + 1)
						{
							float num827 = Math.Abs((float)num825 - this.position.X / 16f);
							float num828 = Math.Abs((float)num826 - this.position.Y / 16f);
							double num829 = Math.Sqrt((double)(num827 * num827 + num828 * num828));
							if (num829 < (double)num815)
							{
								bool flag4 = true;
								if (Main.tile[num825, num826] != null && Main.tile[num825, num826].active())
								{
									flag4 = true;
									if (Main.tileDungeon[(int)Main.tile[num825, num826].type] || Main.tile[num825, num826].type == 88 || TileID.Sets.BasicChest[(int)Main.tile[num825, num826].type] || Main.tile[num825, num826].type == 26 || Main.tile[num825, num826].type == 107 || Main.tile[num825, num826].type == 108 || Main.tile[num825, num826].type == 111 || Main.tile[num825, num826].type == 226 || Main.tile[num825, num826].type == 237 || Main.tile[num825, num826].type == 221 || Main.tile[num825, num826].type == 222 || Main.tile[num825, num826].type == 223 || Main.tile[num825, num826].type == 211 || Main.tile[num825, num826].type == 404)
									{
										flag4 = false;
									}
									if (!Main.hardMode && Main.tile[num825, num826].type == 58)
									{
										flag4 = false;
									}
									if (flag4)
									{
										WorldGen.KillTile(num825, num826, false, false, false);
										if (!Main.tile[num825, num826].active() && Main.netMode != 0)
										{
											NetMessage.SendData(17, -1, -1, null, 0, (float)num825, (float)num826, 0f, 0, 0, 0);
										}
									}
								}
								if (flag4)
								{
									for (int num830 = num825 - 1; num830 <= num825 + 1; num830 = num3 + 1)
									{
										for (int num831 = num826 - 1; num831 <= num826 + 1; num831 = num3 + 1)
										{
											if (Main.tile[num830, num831] != null && Main.tile[num830, num831].wall > 0 && flag3)
											{
												WorldGen.KillWall(num830, num831, false);
												if (Main.tile[num830, num831].wall == 0 && Main.netMode != 0)
												{
													NetMessage.SendData(17, -1, -1, null, 2, (float)num830, (float)num831, 0f, 0, 0, 0);
												}
											}
											num3 = num831;
										}
										num3 = num830;
									}
								}
							}
							num3 = num826;
						}
						num3 = num825;
					}
					AchievementsHelper.CurrentlyMining = false;
				}
				if (Main.netMode != 0)
				{
					NetMessage.SendData(29, -1, -1, null, this.identity, (float)this.owner, 0f, 0f, 0, 0, 0);
				}
				if (!this.noDropItem)
				{
					int num832 = -1;
					if (this.aiStyle == 10)
					{
						int num833 = (int)(this.position.X + (float)(this.width / 2)) / 16;
						int num834 = (int)(this.position.Y + (float)(this.width / 2)) / 16;
						int num835 = 0;
						int num836 = 2;
						if (this.type == 109)
						{
							num835 = 147;
							num836 = 0;
						}
						if (this.type == 31)
						{
							num835 = 53;
							num836 = 0;
						}
						if (this.type == 42)
						{
							num835 = 53;
							num836 = 0;
						}
						if (this.type == 56)
						{
							num835 = 112;
							num836 = 0;
						}
						if (this.type == 65)
						{
							num835 = 112;
							num836 = 0;
						}
						if (this.type == 67)
						{
							num835 = 116;
							num836 = 0;
						}
						if (this.type == 68)
						{
							num835 = 116;
							num836 = 0;
						}
						if (this.type == 71)
						{
							num835 = 123;
							num836 = 0;
						}
						if (this.type == 39)
						{
							num835 = 59;
							num836 = 176;
						}
						if (this.type == 40)
						{
							num835 = 57;
							num836 = 172;
						}
						if (this.type == 179)
						{
							num835 = 224;
							num836 = 0;
						}
						if (this.type == 241)
						{
							num835 = 234;
							num836 = 0;
						}
						if (this.type == 354)
						{
							num835 = 234;
							num836 = 0;
						}
						if (this.type == 411)
						{
							num835 = 330;
							num836 = 71;
						}
						if (this.type == 412)
						{
							num835 = 331;
							num836 = 72;
						}
						if (this.type == 413)
						{
							num835 = 332;
							num836 = 73;
						}
						if (this.type == 414)
						{
							num835 = 333;
							num836 = 74;
						}
						if (this.type == 109)
						{
							int num837 = (int)Player.FindClosest(this.position, this.width, this.height);
							if ((double)(base.Center - Main.player[num837].Center).Length() > (double)Main.LogicCheckScreenWidth * 0.75)
							{
								num835 = -1;
								num836 = 593;
							}
						}
						if (Main.tile[num833, num834].halfBrick() && this.velocity.Y > 0f && Math.Abs(this.velocity.Y) > Math.Abs(this.velocity.X))
						{
							num834--;
						}
						if (!Main.tile[num833, num834].active() && num835 >= 0)
						{
							bool flag5 = false;
							if (num834 < Main.maxTilesY - 2 && Main.tile[num833, num834 + 1] != null && Main.tile[num833, num834 + 1].active() && Main.tile[num833, num834 + 1].type == 314)
							{
								flag5 = true;
							}
							if (!flag5)
							{
								WorldGen.PlaceTile(num833, num834, num835, false, true, -1, 0);
							}
							if (!flag5 && Main.tile[num833, num834].active() && (int)Main.tile[num833, num834].type == num835)
							{
								if (Main.tile[num833, num834 + 1].halfBrick() || Main.tile[num833, num834 + 1].slope() != 0)
								{
									WorldGen.SlopeTile(num833, num834 + 1, 0);
									if (Main.netMode == 2)
									{
										NetMessage.SendData(17, -1, -1, null, 14, (float)num833, (float)(num834 + 1), 0f, 0, 0, 0);
									}
								}
								if (Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, null, 1, (float)num833, (float)num834, (float)num835, 0, 0, 0);
								}
							}
							else if (num836 > 0)
							{
								num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num836, 1, false, 0, false, false);
							}
						}
						else if (num836 > 0)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num836, 1, false, 0, false, false);
						}
					}
					if (this.type == 1 && Main.rand.Next(3) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 40, 1, false, 0, false, false);
					}
					if (this.type == 474 && Main.rand.Next(3) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3003, 1, false, 0, false, false);
					}
					if (this.type == 103 && Main.rand.Next(6) == 0)
					{
						if (Main.rand.Next(3) == 0)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 545, 1, false, 0, false, false);
						}
						else
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 40, 1, false, 0, false, false);
						}
					}
					if (this.type == 2 && Main.rand.Next(3) == 0)
					{
						if (Main.rand.Next(3) == 0)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 41, 1, false, 0, false, false);
						}
						else
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 40, 1, false, 0, false, false);
						}
					}
					if (this.type == 172 && Main.rand.Next(3) == 0)
					{
						if (Main.rand.Next(3) == 0)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 988, 1, false, 0, false, false);
						}
						else
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 40, 1, false, 0, false, false);
						}
					}
					if (this.type == 171)
					{
						if (this.ai[1] == 0f)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 985, 1, false, 0, false, false);
							Main.item[num832].noGrabDelay = 0;
						}
						else if (this.ai[1] < 10f)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 965, (int)(10f - this.ai[1]), false, 0, false, false);
							Main.item[num832].noGrabDelay = 0;
						}
					}
					if (this.type == 475)
					{
						if (this.ai[1] == 0f)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3005, 1, false, 0, false, false);
							Main.item[num832].noGrabDelay = 0;
						}
						else if (this.ai[1] < 10f)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2996, (int)(10f - this.ai[1]), false, 0, false, false);
							Main.item[num832].noGrabDelay = 0;
						}
					}
					if (this.type == 505)
					{
						if (this.ai[1] == 0f)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3079, 1, false, 0, false, false);
							Main.item[num832].noGrabDelay = 0;
						}
						else if (this.ai[1] < 10f)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3077, (int)(10f - this.ai[1]), false, 0, false, false);
							Main.item[num832].noGrabDelay = 0;
						}
					}
					if (this.type == 506)
					{
						if (this.ai[1] == 0f)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3080, 1, false, 0, false, false);
							Main.item[num832].noGrabDelay = 0;
						}
						else if (this.ai[1] < 10f)
						{
							num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3078, (int)(10f - this.ai[1]), false, 0, false, false);
							Main.item[num832].noGrabDelay = 0;
						}
					}
					if (this.type == 91 && Main.rand.Next(6) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 516, 1, false, 0, false, false);
					}
					if (this.type == 50 && Main.rand.Next(3) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 282, 1, false, 0, false, false);
					}
					if (this.type == 515 && Main.rand.Next(3) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3112, 1, false, 0, false, false);
					}
					if (this.type == 53 && Main.rand.Next(3) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 286, 1, false, 0, false, false);
					}
					if (this.type == 48 && Main.rand.Next(2) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 279, 1, false, 0, false, false);
					}
					if (this.type == 54 && Main.rand.Next(2) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 287, 1, false, 0, false, false);
					}
					if (this.type == 3 && Main.rand.Next(2) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 42, 1, false, 0, false, false);
					}
					if (this.type == 4 && Main.rand.Next(4) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 47, 1, false, 0, false, false);
					}
					if (this.type == 12 && this.damage > 500)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 75, 1, false, 0, false, false);
					}
					if (this.type == 155)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 859, 1, false, 0, false, false);
					}
					if (this.type == 598 && Main.rand.Next(4) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3378, 1, false, 0, false, false);
					}
					if (this.type == 599 && Main.rand.Next(4) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3379, 1, false, 0, false, false);
					}
					if (this.type == 21 && Main.rand.Next(2) == 0)
					{
						num832 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 154, 1, false, 0, false, false);
					}
					if (Main.netMode == 1 && num832 >= 0)
					{
						NetMessage.SendData(21, -1, -1, null, num832, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (this.type == 69 || this.type == 70 || this.type == 621)
				{
					int i2 = (int)(this.position.X + (float)(this.width / 2)) / 16;
					int j2 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
					if (this.type == 69)
					{
						WorldGen.Convert(i2, j2, 2, 4);
					}
					if (this.type == 70)
					{
						WorldGen.Convert(i2, j2, 1, 4);
					}
					if (this.type == 621)
					{
						WorldGen.Convert(i2, j2, 4, 4);
					}
				}
				if (this.type == 378)
				{
					int num838 = Main.rand.Next(2, 4);
					if (Main.rand.Next(5) == 0)
					{
						num838++;
					}
					int num3;
					for (int num839 = 0; num839 < num838; num839 = num3 + 1)
					{
						float num840 = this.velocity.X;
						float num841 = this.velocity.Y;
						num840 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						num841 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						Projectile.NewProjectile(base.Center.X, base.Center.Y, num840, num841, 379, this.damage, this.knockBack, this.owner, 0f, 0f);
						num3 = num839;
					}
				}
			}
			this.active = false;
		}

		// Token: 0x060001B6 RID: 438 RVA: 0x0003CA58 File Offset: 0x0003AC58
		public static int NewProjectile(Vector2 position, Vector2 velocity, int Type, int Damage, float KnockBack, int Owner = 255, float ai0 = 0f, float ai1 = 0f)
		{
			return Projectile.NewProjectile(position.X, position.Y, velocity.X, velocity.Y, Type, Damage, KnockBack, Owner, ai0, ai1);
		}

		// Token: 0x060001B7 RID: 439 RVA: 0x0003CA8C File Offset: 0x0003AC8C
		public static int NewProjectile(float X, float Y, float SpeedX, float SpeedY, int Type, int Damage, float KnockBack, int Owner = 255, float ai0 = 0f, float ai1 = 0f)
		{
			int num = 1000;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active)
				{
					num = i;
					break;
				}
			}
			if (num == 1000)
			{
				return num;
			}
			Projectile projectile = Main.projectile[num];
			projectile.SetDefaults(Type);
			projectile.position.X = X - (float)projectile.width * 0.5f;
			projectile.position.Y = Y - (float)projectile.height * 0.5f;
			projectile.owner = Owner;
			projectile.velocity.X = SpeedX;
			projectile.velocity.Y = SpeedY;
			projectile.damage = Damage;
			projectile.knockBack = KnockBack;
			projectile.identity = num;
			projectile.gfxOffY = 0f;
			projectile.stepSpeed = 1f;
			projectile.wet = Collision.WetCollision(projectile.position, projectile.width, projectile.height);
			if (projectile.ignoreWater)
			{
				projectile.wet = false;
			}
			projectile.honeyWet = Collision.honey;
			Main.projectileIdentity[Owner, num] = num;
			if (projectile.aiStyle == 1)
			{
				while (projectile.velocity.X >= 16f || projectile.velocity.X <= -16f || projectile.velocity.Y >= 16f || projectile.velocity.Y < -16f)
				{
					Projectile expr_11E_cp_0_cp_0 = projectile;
					expr_11E_cp_0_cp_0.velocity.X = expr_11E_cp_0_cp_0.velocity.X * 0.97f;
					Projectile expr_132_cp_0_cp_0 = projectile;
					expr_132_cp_0_cp_0.velocity.Y = expr_132_cp_0_cp_0.velocity.Y * 0.97f;
				}
			}
			if (Owner == Main.myPlayer)
			{
				if (Type == 206)
				{
					projectile.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0005f;
					projectile.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0005f;
				}
				else if (Type == 335)
				{
					projectile.ai[1] = (float)Main.rand.Next(4);
				}
				else if (Type == 358)
				{
					projectile.ai[1] = (float)Main.rand.Next(10, 31) * 0.1f;
				}
				else if (Type == 406)
				{
					projectile.ai[1] = (float)Main.rand.Next(10, 21) * 0.1f;
				}
				else
				{
					projectile.ai[0] = ai0;
					projectile.ai[1] = ai1;
				}
			}
			if (Type == 434)
			{
				projectile.ai[0] = projectile.position.X;
				projectile.ai[1] = projectile.position.Y;
			}
			if (Type > 0 && Type < 714)
			{
				if (ProjectileID.Sets.NeedsUUID[Type])
				{
					projectile.projUUID = projectile.identity;
				}
				if (ProjectileID.Sets.StardustDragon[Type])
				{
					int num2 = Main.projectile[(int)projectile.ai[0]].projUUID;
					if (num2 >= 0)
					{
						projectile.ai[0] = (float)num2;
					}
				}
			}
			if (Main.netMode != 0 && Owner == Main.myPlayer)
			{
				NetMessage.SendData(27, -1, -1, null, num, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Owner == Main.myPlayer)
			{
				if (Type == 28)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 516)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 519)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 29)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 470)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 637)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 30)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 517)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 37)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 75)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 133)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 136)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 139)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 142)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 397)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 419)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 420)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 421)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 422)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 588)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 443)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 681)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 684)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 706)
				{
					projectile.timeLeft = 120;
				}
				if (Type == 680 && Main.player[projectile.owner].setSquireT2)
				{
					projectile.penetrate = 7;
				}
			}
			if (Type == 249)
			{
				projectile.frame = Main.rand.Next(5);
			}
			return num;
		}

		// Token: 0x060001CE RID: 462 RVA: 0x0004AC74 File Offset: 0x00048E74
		public void ProjectileFixDesperation()
		{
			if (this.owner < 0 || this.owner >= 1000)
			{
				return;
			}
			int num = this.type;
			if (num <= 632)
			{
				if (num != 461 && num != 632)
				{
					return;
				}
			}
			else if (num != 642 && num != 644)
			{
				return;
			}
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].owner == this.owner && (float)Main.projectile[i].identity == this.ai[1] && Main.projectile[i].active)
				{
					this.ai[1] = (float)i;
					return;
				}
			}
		}

		// Token: 0x060001C4 RID: 452 RVA: 0x000434A8 File Offset: 0x000416A8
		public void ProjLight()
		{
			if (this.light > 0f)
			{
				float num = this.light;
				float num2 = this.light;
				float num3 = this.light;
				if (this.type == 446)
				{
					num *= 0f;
					num3 *= 0.8f;
				}
				else if (this.type == 493 || this.type == 494)
				{
					num2 *= 0.3f;
				}
				else if (this.type == 332)
				{
					num3 *= 0.1f;
					num2 *= 0.6f;
				}
				else if (this.type == 259)
				{
					num3 *= 0.1f;
				}
				else if (this.type == 329)
				{
					num3 *= 0.1f;
					num2 *= 0.9f;
				}
				else if (this.type == 2 || this.type == 82)
				{
					num2 *= 0.75f;
					num3 *= 0.55f;
				}
				else if (this.type == 172)
				{
					num2 *= 0.55f;
					num *= 0.35f;
				}
				else if (this.type == 308)
				{
					num2 *= 0.7f;
					num *= 0.1f;
				}
				else if (this.type == 304)
				{
					num2 *= 0.2f;
					num3 *= 0.1f;
				}
				else if (this.type == 263)
				{
					num2 *= 0.7f;
					num *= 0.1f;
				}
				else if (this.type == 274)
				{
					num2 *= 0.1f;
					num *= 0.7f;
				}
				else if (this.type == 254)
				{
					num *= 0.1f;
				}
				else if (this.type == 94)
				{
					num *= 0.5f;
					num2 *= 0f;
				}
				else if (this.type == 95 || this.type == 96 || this.type == 103 || this.type == 104)
				{
					num *= 0.35f;
					num2 *= 1f;
					num3 *= 0f;
				}
				else if (this.type == 4)
				{
					num2 *= 0.1f;
					num *= 0.5f;
				}
				else if (this.type == 257)
				{
					num2 *= 0.9f;
					num *= 0.1f;
				}
				else if (this.type == 9)
				{
					num2 *= 0.1f;
					num3 *= 0.6f;
				}
				else if (this.type == 488)
				{
					num = 0.3f;
					num3 = 0.25f;
					num2 = 0f;
				}
				else if (this.type == 92)
				{
					num2 *= 0.6f;
					num *= 0.8f;
				}
				else if (this.type == 93)
				{
					num2 *= 1f;
					num *= 1f;
					num3 *= 0.01f;
				}
				else if (this.type == 12)
				{
					num *= 0.9f;
					num2 *= 0.8f;
					num3 *= 0.1f;
				}
				else if (this.type == 14 || this.type == 110 || this.type == 180 || this.type == 242 || this.type == 302)
				{
					num2 *= 0.7f;
					num3 *= 0.1f;
				}
				else if (this.type == 15)
				{
					num2 *= 0.4f;
					num3 *= 0.1f;
					num = 1f;
				}
				else if (this.type == 16)
				{
					num *= 0.1f;
					num2 *= 0.4f;
					num3 = 1f;
				}
				else if (this.type == 18)
				{
					num2 *= 0.1f;
					num *= 0.6f;
				}
				else if (this.type == 19)
				{
					num2 *= 0.5f;
					num3 *= 0.1f;
				}
				else if (this.type == 20)
				{
					num *= 0.1f;
					num3 *= 0.3f;
				}
				else if (this.type == 22)
				{
					num = 0f;
					num2 = 0f;
				}
				else if (this.type == 27)
				{
					num *= 0f;
					num2 *= 0.3f;
					num3 = 1f;
				}
				else if (this.type == 34)
				{
					num2 *= 0.1f;
					num3 *= 0.1f;
				}
				else if (this.type == 36)
				{
					num = 0.8f;
					num2 *= 0.2f;
					num3 *= 0.6f;
				}
				else if (this.type == 41)
				{
					num2 *= 0.8f;
					num3 *= 0.6f;
				}
				else if (this.type == 44 || this.type == 45)
				{
					num3 = 1f;
					num *= 0.6f;
					num2 *= 0.1f;
				}
				else if (this.type == 50)
				{
					num *= 0.7f;
					num3 *= 0.8f;
				}
				else if (this.type == 515)
				{
					num2 *= 0.6f;
					num3 *= 0.85f;
				}
				else if (this.type == 53)
				{
					num *= 0.7f;
					num2 *= 0.8f;
				}
				else if (this.type == 473)
				{
					num *= 1.05f;
					num2 *= 0.95f;
					num3 *= 0.55f;
				}
				else if (this.type == 72)
				{
					num *= 0.45f;
					num2 *= 0.75f;
					num3 = 1f;
				}
				else if (this.type == 86)
				{
					num *= 1f;
					num2 *= 0.45f;
					num3 = 0.75f;
				}
				else if (this.type == 87)
				{
					num *= 0.45f;
					num2 = 1f;
					num3 *= 0.75f;
				}
				else if (this.type == 73)
				{
					num *= 0.4f;
					num2 *= 0.6f;
					num3 *= 1f;
				}
				else if (this.type == 74)
				{
					num *= 1f;
					num2 *= 0.4f;
					num3 *= 0.6f;
				}
				else if (this.type == 284)
				{
					num *= 1f;
					num2 *= 0.1f;
					num3 *= 0.8f;
				}
				else if (this.type == 285)
				{
					num *= 0.1f;
					num2 *= 0.5f;
					num3 *= 1f;
				}
				else if (this.type == 286)
				{
					num *= 1f;
					num2 *= 0.5f;
					num3 *= 0.1f;
				}
				else if (this.type == 287)
				{
					num *= 0.9f;
					num2 *= 1f;
					num3 *= 0.4f;
				}
				else if (this.type == 283)
				{
					num *= 0.8f;
					num2 *= 0.1f;
				}
				else if (this.type == 76 || this.type == 77 || this.type == 78)
				{
					num *= 1f;
					num2 *= 0.3f;
					num3 *= 0.6f;
				}
				else if (this.type == 79)
				{
					num = (float)Main.DiscoR / 255f;
					num2 = (float)Main.DiscoG / 255f;
					num3 = (float)Main.DiscoB / 255f;
				}
				else if (this.type == 80)
				{
					num *= 0f;
					num2 *= 0.8f;
					num3 *= 1f;
				}
				else if (this.type == 83 || this.type == 88)
				{
					num *= 0.7f;
					num2 *= 0f;
					num3 *= 1f;
				}
				else if (this.type == 100)
				{
					num *= 1f;
					num2 *= 0.5f;
					num3 *= 0f;
				}
				else if (this.type == 84 || this.type == 389)
				{
					num *= 0.8f;
					num2 *= 0f;
					num3 *= 0.5f;
				}
				else if (this.type == 89 || this.type == 90)
				{
					num2 *= 0.2f;
					num3 *= 1f;
					num *= 0.05f;
				}
				else if (this.type == 106)
				{
					num *= 0f;
					num2 *= 0.5f;
					num3 *= 1f;
				}
				else if (this.type == 113)
				{
					num *= 0.25f;
					num2 *= 0.75f;
					num3 *= 1f;
				}
				else if (this.type == 114 || this.type == 115)
				{
					num *= 0.5f;
					num2 *= 0.05f;
					num3 *= 1f;
				}
				else if (this.type == 116)
				{
					num3 *= 0.25f;
				}
				else if (this.type == 131)
				{
					num *= 0.1f;
					num2 *= 0.4f;
				}
				else if (this.type == 132 || this.type == 157)
				{
					num *= 0.2f;
					num3 *= 0.6f;
				}
				else if (this.type == 156)
				{
					num *= 1f;
					num3 *= 0.6f;
					num2 = 0f;
				}
				else if (this.type == 173)
				{
					num *= 0.3f;
					num3 *= 1f;
					num2 = 0.4f;
				}
				else if (this.type == 207)
				{
					num *= 0.4f;
					num3 *= 0.4f;
				}
				else if (this.type == 253)
				{
					num = 0f;
					num2 *= 0.4f;
				}
				else if (this.type == 211)
				{
					num *= 0.5f;
					num2 *= 0.9f;
					num3 *= 1f;
					if (this.localAI[0] == 0f)
					{
						this.light = 1.5f;
					}
					else
					{
						this.light = 1f;
					}
				}
				else if (this.type == 209)
				{
					float num4 = (255f - (float)this.alpha) / 255f;
					num *= 0.3f;
					num2 *= 0.4f;
					num3 *= 1.75f;
					num3 *= num4;
					num *= num4;
					num2 *= num4;
				}
				else if (this.type == 226 || (this.type == 227 | this.type == 229))
				{
					num *= 0.25f;
					num2 *= 1f;
					num3 *= 0.5f;
				}
				else if (this.type == 251)
				{
					num = (float)Main.DiscoR / 255f;
					num2 = (float)Main.DiscoG / 255f;
					num3 = (float)Main.DiscoB / 255f;
					num = (num + 1f) / 2f;
					num2 = (num2 + 1f) / 2f;
					num3 = (num3 + 1f) / 2f;
					num *= this.light;
					num2 *= this.light;
					num3 *= this.light;
				}
				else if (this.type == 278 || this.type == 279)
				{
					num *= 1f;
					num2 *= 1f;
					num3 *= 0f;
				}
				Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), num, num2, num3);
			}
		}

		// Token: 0x060001AB RID: 427 RVA: 0x00030164 File Offset: 0x0002E364
		public static void ResetImmunity()
		{
			for (int i = 0; i < 714; i++)
			{
				for (int j = 0; j < 200; j++)
				{
					Projectile.perIDStaticNPCImmunity[i][j] = 0u;
				}
			}
		}

		// Token: 0x060001B4 RID: 436 RVA: 0x000302A4 File Offset: 0x0002E4A4
		public void SetDefaults(int Type)
		{
			this.ownerHitCheckDistance = 1000f;
			this.counterweight = false;
			this.sentry = false;
			this.arrow = false;
			this.bobber = false;
			this.numHits = 0;
			this.netImportant = false;
			this.manualDirectionChange = false;
			this.localNPCHitCooldown = -2;
			this.idStaticNPCHitCooldown = -1;
			this.usesLocalNPCImmunity = false;
			this.usesIDStaticNPCImmunity = false;
			int num = 10;
			if (Type >= 0)
			{
				num = ProjectileID.Sets.TrailCacheLength[Type];
			}
			if (num != this.oldPos.Length)
			{
				Array.Resize<Vector2>(ref this.oldPos, num);
				Array.Resize<float>(ref this.oldRot, num);
				Array.Resize<int>(ref this.oldSpriteDirection, num);
			}
			for (int i = 0; i < this.oldPos.Length; i++)
			{
				this.oldPos[i].X = 0f;
				this.oldPos[i].Y = 0f;
				this.oldRot[i] = 0f;
				this.oldSpriteDirection[i] = 0;
			}
			for (int j = 0; j < Projectile.maxAI; j++)
			{
				this.ai[j] = 0f;
				this.localAI[j] = 0f;
			}
			for (int k = 0; k < 255; k++)
			{
				this.playerImmune[k] = 0;
			}
			for (int l = 0; l < 200; l++)
			{
				this.localNPCImmunity[l] = 0;
			}
			this.noDropItem = false;
			this.minion = false;
			this.minionSlots = 0f;
			this.soundDelay = 0;
			this.spriteDirection = 1;
			this.melee = false;
			this.ranged = false;
			this.thrown = false;
			this.magic = false;
			this.ownerHitCheck = false;
			this.hide = false;
			this.lavaWet = false;
			this.wetCount = 0;
			this.wet = false;
			this.ignoreWater = false;
			this.hostile = false;
			this.netUpdate = false;
			this.netUpdate2 = false;
			this.netSpam = 0;
			this.numUpdates = 0;
			this.extraUpdates = 0;
			this.identity = 0;
			this.restrikeDelay = 0;
			this.light = 0f;
			this.penetrate = 1;
			this.tileCollide = true;
			this.position = Vector2.Zero;
			this.velocity = Vector2.Zero;
			this.aiStyle = 0;
			this.alpha = 0;
			this.glowMask = -1;
			this.type = Type;
			this.active = true;
			this.rotation = 0f;
			this.scale = 1f;
			this.owner = 255;
			this.timeLeft = 3600;
			this.friendly = false;
			this.damage = 0;
			this.knockBack = 0f;
			this.miscText = "";
			this.coldDamage = false;
			this.noEnchantments = false;
			this.trap = false;
			this.npcProj = false;
			this.projUUID = -1;
			this.frame = 0;
			this.frameCounter = 0;
			if (this.type == 1)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 2)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 1f;
				this.ranged = true;
			}
			else if (this.type == 3)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 4;
				this.thrown = true;
			}
			else if (this.type == 4)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 0.35f;
				this.penetrate = 5;
				this.ranged = true;
			}
			else if (this.type == 5)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 0.4f;
				this.penetrate = -1;
				this.timeLeft = 120;
				this.alpha = 100;
				this.ignoreWater = true;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 6)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.light = 0.4f;
			}
			else if (this.type == 7 || this.type == 8)
			{
				this.width = 28;
				this.height = 28;
				this.aiStyle = 4;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.alpha = 255;
				this.ignoreWater = true;
				this.magic = true;
			}
			else if (this.type == 9)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 5;
				this.friendly = true;
				this.penetrate = 2;
				this.alpha = 50;
				this.scale = 0.8f;
				this.tileCollide = false;
				this.melee = true;
			}
			else if (this.type == 10)
			{
				this.width = 64;
				this.height = 64;
				this.aiStyle = 6;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.alpha = 255;
				this.ignoreWater = true;
			}
			else if (this.type == 11)
			{
				this.width = 48;
				this.height = 48;
				this.aiStyle = 6;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.alpha = 255;
				this.ignoreWater = true;
			}
			else if (this.type == 12)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 5;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 50;
				this.light = 1f;
			}
			else if (this.type == 13)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 14)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 15)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.friendly = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.magic = true;
			}
			else if (this.type == 16)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 9;
				this.friendly = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.magic = true;
			}
			else if (this.type == 17)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.ignoreWater = true;
			}
			else if (this.type == 18)
			{
				this.netImportant = true;
				this.width = 32;
				this.height = 32;
				this.aiStyle = 11;
				this.friendly = true;
				this.light = 0.9f;
				this.alpha = 150;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.ignoreWater = true;
				this.scale = 0.8f;
			}
			else if (this.type == 19)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.light = 1f;
				this.melee = true;
			}
			else if (this.type == 20)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.4f;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 21)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 2;
				this.scale = 1.2f;
				this.friendly = true;
				this.thrown = true;
			}
			else if (this.type == 22)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 12;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.ignoreWater = true;
				this.magic = true;
			}
			else if (this.type == 23)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 13;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.ranged = true;
			}
			else if (this.type == 24)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 14;
				this.friendly = true;
				this.penetrate = 6;
				this.thrown = true;
			}
			else if (this.type == 25)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 0.8f;
			}
			else if (this.type == 26)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 0.8f;
			}
			else if (this.type == 27)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.friendly = true;
				this.alpha = 255;
				this.timeLeft /= 2;
				this.penetrate = 10;
				this.magic = true;
			}
			else if (this.type == 28)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
			}
			else if (this.type == 29)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
			}
			else if (this.type == 30)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.thrown = true;
			}
			else if (this.type == 31)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 32)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 33)
			{
				this.width = 38;
				this.height = 38;
				this.aiStyle = 3;
				this.friendly = true;
				this.scale = 0.9f;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 34)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 9;
				this.friendly = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.penetrate = 1;
				this.magic = true;
			}
			else if (this.type == 35)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 0.8f;
			}
			else if (this.type == 36)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 2;
				this.light = 0.6f;
				this.alpha = 255;
				this.scale = 1.4f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 37)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
			}
			else if (this.type == 38)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 0;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 1;
				this.tileCollide = true;
			}
			else if (this.type == 39)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 40)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 41)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
				this.light = 0.3f;
			}
			else if (this.type == 42)
			{
				this.knockBack = 8f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 43)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
			}
			else if (this.type == 44)
			{
				this.width = 48;
				this.height = 48;
				this.alpha = 100;
				this.light = 0.2f;
				this.aiStyle = 18;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = true;
				this.scale = 0.9f;
			}
			else if (this.type == 45)
			{
				this.width = 48;
				this.height = 48;
				this.alpha = 100;
				this.light = 0.2f;
				this.aiStyle = 18;
				this.friendly = true;
				this.penetrate = 5;
				this.tileCollide = true;
				this.scale = 0.9f;
				this.magic = true;
			}
			else if (this.type == 46)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 47)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 48)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 2;
				this.thrown = true;
			}
			else if (this.type == 49)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.2f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 50)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 14;
				this.penetrate = -1;
				this.alpha = 75;
				this.light = 1f;
				this.timeLeft *= 5;
			}
			else if (this.type == 51)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 1;
				this.friendly = true;
			}
			else if (this.type == 52)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 53)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 14;
				this.penetrate = -1;
				this.alpha = 75;
				this.light = 1f;
				this.timeLeft *= 5;
				this.tileCollide = false;
			}
			else if (this.type == 54)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 2;
				this.thrown = true;
			}
			else if (this.type == 55)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 0;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 1;
				this.tileCollide = true;
			}
			else if (this.type == 56)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 57)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 58)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.08f;
			}
			else if (this.type == 59)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.9f;
			}
			else if (this.type == 60)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.9f;
			}
			else if (this.type == 61)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.16f;
			}
			else if (this.type == 62)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.9f;
			}
			else if (this.type == 63)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 64)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.25f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 65)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.penetrate = -1;
				this.extraUpdates = 1;
			}
			else if (this.type == 66)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.27f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 67)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 68)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.penetrate = -1;
				this.extraUpdates = 1;
			}
			else if (this.type == 69)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 70)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 621)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 71)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 72)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 11;
				this.friendly = true;
				this.light = 0.9f;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.ignoreWater = true;
				this.scale = 0.8f;
			}
			else if (this.type == 73 || this.type == 74)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
				this.light = 0.4f;
			}
			else if (this.type == 75)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 76 || this.type == 77 || this.type == 78)
			{
				if (this.type == 76)
				{
					this.width = 10;
					this.height = 22;
				}
				else if (this.type == 77)
				{
					this.width = 18;
					this.height = 24;
				}
				else
				{
					this.width = 22;
					this.height = 24;
				}
				this.aiStyle = 21;
				this.friendly = true;
				this.ranged = true;
				this.alpha = 100;
				this.light = 0.3f;
				this.penetrate = -1;
				this.timeLeft = 180;
				this.magic = true;
			}
			else if (this.type == 79)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 9;
				this.friendly = true;
				this.light = 0.8f;
				this.alpha = 255;
				this.magic = true;
			}
			else if (this.type == 80)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 22;
				this.friendly = true;
				this.magic = true;
				this.tileCollide = false;
				this.light = 0.5f;
				this.coldDamage = true;
			}
			else if (this.type == 81)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.hostile = true;
				this.ranged = true;
			}
			else if (this.type == 82)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.hostile = true;
				this.ranged = true;
			}
			else if (this.type == 83)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.7f;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 84)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 85)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 23;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = 3;
				this.extraUpdates = 2;
				this.ranged = true;
			}
			else if (this.type == 86)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 11;
				this.friendly = true;
				this.light = 0.9f;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.ignoreWater = true;
				this.scale = 0.8f;
			}
			else if (this.type == 87)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 11;
				this.friendly = true;
				this.light = 0.9f;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.ignoreWater = true;
				this.scale = 0.8f;
			}
			else if (this.type == 88)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 4;
				this.scale = 1.4f;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 89)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 90)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 24;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 50;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.tileCollide = false;
			}
			else if (this.type == 91)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 92)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 5;
				this.friendly = true;
				this.penetrate = 2;
				this.alpha = 50;
				this.scale = 0.8f;
				this.tileCollide = false;
				this.ranged = true;
			}
			else if (this.type == 93)
			{
				this.light = 0.15f;
				this.width = 12;
				this.height = 12;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 2;
				this.magic = true;
			}
			else if (this.type == 94)
			{
				this.ignoreWater = true;
				this.width = 8;
				this.height = 8;
				this.aiStyle = 24;
				this.friendly = true;
				this.light = 0.5f;
				this.alpha = 50;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.magic = true;
				this.tileCollide = true;
				this.penetrate = 1;
			}
			else if (this.type == 95)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.friendly = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.magic = true;
				this.penetrate = 2;
			}
			else if (this.type == 96)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.hostile = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.magic = true;
				this.penetrate = -1;
				this.scale = 0.9f;
				this.scale = 1.3f;
			}
			else if (this.type == 97)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 98)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.trap = true;
			}
			else if (this.type == 99)
			{
				this.width = 31;
				this.height = 31;
				this.aiStyle = 25;
				this.friendly = true;
				this.hostile = true;
				this.ranged = true;
				this.penetrate = -1;
				this.trap = true;
			}
			else if (this.type == 100)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.8f;
				this.timeLeft = 2700;
				this.magic = true;
			}
			else if (this.type == 101)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 23;
				this.hostile = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 3;
				this.magic = true;
			}
			else if (this.type == 102)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.hostile = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 103)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 1f;
				this.ranged = true;
			}
			else if (this.type == 104)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 105)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.3f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 106)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.light = 0.4f;
			}
			else if (this.type == 107)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.1f;
			}
			else if (this.type == 108)
			{
				this.width = 260;
				this.height = 260;
				this.aiStyle = 16;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.alpha = 255;
				this.timeLeft = 2;
				this.trap = true;
			}
			else if (this.type == 109)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.hostile = true;
				this.scale = 0.9f;
				this.penetrate = -1;
				this.coldDamage = true;
				this.thrown = true;
			}
			else if (this.type == 110)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 111)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 112)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 113)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.light = 0.4f;
				this.coldDamage = true;
			}
			else if (this.type == 114)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.magic = true;
				this.penetrate = 3;
				this.light = 0.5f;
				this.alpha = 255;
				this.friendly = true;
			}
			else if (this.type == 115)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.hostile = true;
				this.magic = true;
				this.penetrate = -1;
				this.light = 0.5f;
				this.alpha = 255;
			}
			else if (this.type == 116)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.melee = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.friendly = true;
			}
			else if (this.type == 117)
			{
				this.arrow = true;
				this.extraUpdates = 2;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 118)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 28;
				this.alpha = 255;
				this.melee = true;
				this.penetrate = 1;
				this.friendly = true;
				this.coldDamage = true;
			}
			else if (this.type == 119)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.alpha = 255;
				this.melee = true;
				this.penetrate = 2;
				this.friendly = true;
			}
			else if (this.type == 120)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.coldDamage = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 121)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 122)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 123)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 124)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 2;
				this.friendly = true;
			}
			else if (this.type == 125)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 2;
				this.friendly = true;
			}
			else if (this.type == 126)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 2;
				this.friendly = true;
			}
			else if (this.type == 127)
			{
				this.netImportant = true;
				this.width = 22;
				this.height = 22;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 128)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.coldDamage = true;
			}
			else if (this.type == 129)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.tileCollide = false;
			}
			else if (this.type == 130)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.2f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 131)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 30;
				this.friendly = true;
				this.penetrate = 1;
				this.tileCollide = false;
				this.melee = true;
				this.light = 0.5f;
			}
			else if (this.type == 132)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.melee = true;
				this.penetrate = 3;
				this.light = 0.5f;
				this.alpha = 255;
				this.friendly = true;
			}
			else if (this.type == 133)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 134)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 135)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 136)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 137)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 138)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 139)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 140)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 141)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 142)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 143)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 144)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 145)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 31;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 146)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 31;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 147)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 31;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 148)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 31;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 149)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 31;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 150 || this.type == 151 || this.type == 152)
			{
				this.width = 28;
				this.height = 28;
				this.aiStyle = 4;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.alpha = 255;
				this.ignoreWater = true;
				this.magic = true;
			}
			else if (this.type == 153)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 154)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 0.8f;
			}
			else if (this.type == 155)
			{
				this.netImportant = true;
				this.width = 44;
				this.height = 44;
				this.aiStyle = 32;
				this.friendly = true;
			}
			else if (this.type == 156)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.melee = true;
				this.light = 0.5f;
				this.alpha = 255;
				this.friendly = true;
			}
			else if (this.type == 157)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 27;
				this.melee = true;
				this.light = 0.5f;
				this.alpha = 255;
				this.friendly = true;
				this.scale = 1.2f;
			}
			else if (this.type == 158)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 159)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 160)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 161)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 162)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 4;
				this.alpha = 255;
			}
			else if (this.type == 163)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 33;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 36000;
			}
			else if (this.type == 164)
			{
				this.width = 128;
				this.height = 128;
				this.aiStyle = 16;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.alpha = 255;
				this.timeLeft = 2;
			}
			else if (this.type == 165)
			{
				this.netImportant = true;
				this.width = 12;
				this.height = 12;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 166)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.ranged = true;
				this.coldDamage = true;
			}
			else if (this.type == 167 || this.type == 168 || this.type == 169 || this.type == 170)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 34;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 45;
			}
			else if (this.type == 171 || this.type == 505 || this.type == 506)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 35;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft = 400;
			}
			else if (this.type == 172)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 1f;
				this.ranged = true;
				this.coldDamage = true;
			}
			else if (this.type == 173)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.melee = true;
				this.penetrate = 1;
				this.light = 0.2f;
				this.alpha = 255;
				this.friendly = true;
			}
			else if (this.type == 174)
			{
				this.alpha = 255;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.coldDamage = true;
			}
			else if (this.type == 175)
			{
				this.width = 34;
				this.height = 34;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 176)
			{
				this.alpha = 255;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 177)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 28;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.coldDamage = true;
			}
			else if (this.type == 178)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.timeLeft = 2;
			}
			else if (this.type == 179)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 180)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 181)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 36;
				this.friendly = true;
				this.penetrate = 3;
				this.alpha = 255;
				this.timeLeft = 600;
				this.extraUpdates = 3;
			}
			else if (this.type == 182)
			{
				this.light = 0.15f;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = 10;
				this.melee = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 183)
			{
				this.width = 14;
				this.height = 22;
				this.aiStyle = 14;
				this.penetrate = 1;
				this.ranged = true;
				this.timeLeft = 180;
				this.thrown = true;
				this.friendly = true;
			}
			else if (this.type == 184)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.trap = true;
			}
			else if (this.type == 185)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 14;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 900;
				this.trap = true;
			}
			else if (this.type == 186)
			{
				this.width = 10;
				this.height = 14;
				this.aiStyle = 37;
				this.friendly = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 300;
				this.trap = true;
			}
			else if (this.type == 187)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 38;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 60;
				this.trap = true;
			}
			else if (this.type == 188)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 23;
				this.friendly = true;
				this.hostile = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.trap = true;
			}
			else if (this.type == 189)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 36;
				this.friendly = true;
				this.penetrate = 4;
				this.alpha = 255;
				this.timeLeft = 600;
				this.magic = true;
				this.extraUpdates = 3;
			}
			else if (this.type == 190)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 39;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.ranged = true;
			}
			else if (this.type >= 191 && this.type <= 194)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 26;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				if (this.type == 192)
				{
					this.scale = 1.025f;
				}
				if (this.type == 193)
				{
					this.scale = 1.05f;
				}
				if (this.type == 194)
				{
					this.scale = 1.075f;
				}
			}
			else if (this.type == 195)
			{
				this.tileCollide = false;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
			}
			else if (this.type == 196)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 14;
				this.penetrate = -1;
				this.scale = 0.8f;
			}
			else if (this.type == 197)
			{
				this.netImportant = true;
				this.width = 42;
				this.height = 42;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 198)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 199)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 200)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 201)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
			}
			else if (this.type == 202)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
			}
			else if (this.type == 203)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
			}
			else if (this.type == 204)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
			}
			else if (this.type == 205)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
			}
			else if (this.type == 206)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 40;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 207)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 208)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 36;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 209)
			{
				this.width = 12;
				this.height = 32;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.light = 0.5f;
			}
			else if (this.type == 210)
			{
				this.netImportant = true;
				this.width = 14;
				this.height = 30;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 211)
			{
				this.netImportant = true;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.light = 1f;
				this.ignoreWater = true;
			}
			else if (this.type == 212)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.12f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 213)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.92f;
			}
			else if (this.type == 214)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 215)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.27f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 216)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.93f;
			}
			else if (this.type == 217)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.12f;
			}
			else if (this.type == 218)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.28f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 219)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.95f;
			}
			else if (this.type == 220)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.2f;
			}
			else if (this.type == 221)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 41;
				this.friendly = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 120;
				this.penetrate = -1;
				this.scale = 1f + (float)Main.rand.Next(30) * 0.01f;
				this.extraUpdates = 2;
			}
			else if (this.type == 222)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.3f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 223)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1f;
			}
			else if (this.type == 224)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.1f;
			}
			else if (this.type == 225)
			{
				this.arrow = true;
				this.penetrate = 2;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 226)
			{
				this.netImportant = true;
				this.width = 22;
				this.height = 42;
				this.aiStyle = 42;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.light = 0.4f;
				this.ignoreWater = true;
			}
			else if (this.type == 227)
			{
				this.netImportant = true;
				this.tileCollide = false;
				this.light = 0.1f;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 43;
				this.friendly = true;
				this.penetrate = 1;
				this.timeLeft = 180;
			}
			else if (this.type == 228)
			{
				this.tileCollide = false;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 44;
				this.friendly = true;
				this.scale = 1.1f;
				this.penetrate = -1;
			}
			else if (this.type == 229)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 44;
				this.friendly = true;
				this.penetrate = -1;
				this.light = 0.2f;
			}
			else if (this.type >= 230 && this.type <= 235)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 236)
			{
				this.netImportant = true;
				this.width = 34;
				this.height = 34;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 237)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 45;
				this.penetrate = -1;
			}
			else if (this.type == 238)
			{
				this.tileCollide = false;
				this.ignoreWater = true;
				this.width = 54;
				this.height = 28;
				this.aiStyle = 45;
				this.penetrate = -1;
			}
			else if (this.type == 239)
			{
				this.ignoreWater = true;
				this.width = 4;
				this.height = 40;
				this.aiStyle = 45;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft = 300;
				this.scale = 1.1f;
				this.magic = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 240)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 2;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 255;
			}
			else if (this.type == 241)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 242)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 7;
				this.scale = 1.18f;
				this.timeLeft = 600;
				this.ranged = true;
				this.ignoreWater = true;
			}
			else if (this.type == 243)
			{
				this.width = 28;
				this.height = 28;
				this.aiStyle = 45;
				this.penetrate = -1;
			}
			else if (this.type == 244)
			{
				this.tileCollide = false;
				this.ignoreWater = true;
				this.width = 54;
				this.height = 28;
				this.aiStyle = 45;
				this.penetrate = -1;
			}
			else if (this.type == 245)
			{
				this.ignoreWater = true;
				this.width = 4;
				this.height = 40;
				this.aiStyle = 45;
				this.friendly = true;
				this.penetrate = 2;
				this.timeLeft = 300;
				this.scale = 1.1f;
				this.magic = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 246)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.alpha = 255;
				this.extraUpdates = 1;
			}
			else if (this.type == 247)
			{
				this.width = 34;
				this.height = 34;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 248)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 1;
				this.friendly = true;
				this.melee = true;
			}
			else if (this.type == 249)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 2;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 250)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 46;
				this.penetrate = -1;
				this.magic = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.scale = 1.25f;
			}
			else if (this.type == 251)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 46;
				this.friendly = true;
				this.penetrate = -1;
				this.magic = true;
				this.alpha = 255;
				this.light = 0.3f;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.scale = 1.25f;
			}
			else if (this.type == 252)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.1f;
			}
			else if (this.type == 253)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.friendly = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.magic = true;
			}
			else if (this.type == 254)
			{
				this.width = 38;
				this.height = 38;
				this.aiStyle = 47;
				this.magic = true;
				this.timeLeft = 660;
				this.light = 0.5f;
			}
			else if (this.type == 255)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 48;
				this.friendly = true;
				this.magic = true;
				this.extraUpdates = 100;
				this.timeLeft = 100;
			}
			else if (this.type == 256)
			{
				this.netImportant = true;
				this.tileCollide = false;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.scale = 1f;
				this.timeLeft *= 10;
			}
			else if (this.type == 257)
			{
				this.ignoreWater = true;
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.light = 0.75f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.magic = true;
				this.coldDamage = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 258)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 100;
				this.timeLeft = 300;
			}
			else if (this.type == 259)
			{
				this.ignoreWater = true;
				this.tileCollide = false;
				this.width = 8;
				this.height = 8;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.light = 0.3f;
				this.scale = 1.1f;
				this.magic = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 260)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 48;
				this.friendly = true;
				this.magic = true;
				this.extraUpdates = 100;
				this.timeLeft = 200;
				this.penetrate = -1;
			}
			else if (this.type == 261)
			{
				this.width = 32;
				this.height = 34;
				this.aiStyle = 14;
				this.friendly = true;
				this.penetrate = 6;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 262)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 13;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.melee = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 263)
			{
				this.width = 34;
				this.height = 34;
				this.alpha = 100;
				this.light = 0.5f;
				this.aiStyle = 18;
				this.friendly = true;
				this.penetrate = 5;
				this.tileCollide = true;
				this.scale = 1f;
				this.melee = true;
				this.timeLeft = 180;
				this.coldDamage = true;
			}
			else if (this.type == 264)
			{
				this.ignoreWater = true;
				this.width = 4;
				this.height = 40;
				this.aiStyle = 45;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 120;
				this.scale = 1.1f;
				this.extraUpdates = 1;
			}
			else if (this.type == 265)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.magic = true;
				this.penetrate = 4;
			}
			else if (this.type == 266)
			{
				this.netImportant = true;
				this.alpha = 75;
				this.width = 24;
				this.height = 16;
				this.aiStyle = 26;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
			}
			else if (this.type == 267)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 268)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 32;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 269)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 270)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.magic = true;
				this.penetrate = 3;
			}
			else if (this.type == 271)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 13;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.melee = true;
				this.scale = 1.2f;
			}
			else if (this.type == 272)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 3;
				this.friendly = true;
				this.scale = 0.9f;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 273)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 13;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.melee = true;
			}
			else if (this.type == 274)
			{
				this.width = 42;
				this.height = 42;
				this.alpha = 100;
				this.light = 0.5f;
				this.aiStyle = 18;
				this.friendly = true;
				this.penetrate = 5;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.melee = true;
				this.timeLeft = 180;
			}
			else if (this.type == 275)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.hostile = true;
			}
			else if (this.type == 276)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.hostile = true;
			}
			else if (this.type == 277)
			{
				this.alpha = 255;
				this.width = 38;
				this.height = 38;
				this.aiStyle = 14;
				this.hostile = true;
			}
			else if (this.type == 278)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 1f;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 279)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.25f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 280)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 12;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = 5;
				this.extraUpdates = 2;
				this.ignoreWater = true;
				this.magic = true;
			}
			else if (this.type == 281)
			{
				this.width = 28;
				this.height = 28;
				this.aiStyle = 49;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
			}
			else if (this.type == 282)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 283)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.25f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 284)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.3f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 285)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.3f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 286)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.3f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 287)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.3f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 288)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 12;
				this.hostile = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.ignoreWater = true;
				this.magic = true;
			}
			else if (this.type == 289)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.timeLeft = 2;
			}
			else if (this.type == 290)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 48;
				this.hostile = true;
				this.magic = true;
				this.extraUpdates = 100;
				this.timeLeft = 100;
				this.penetrate = -1;
			}
			else if (this.type == 291)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 50;
				this.hostile = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 292)
			{
				this.width = 130;
				this.height = 130;
				this.aiStyle = 50;
				this.hostile = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 293)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 51;
				this.hostile = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.extraUpdates = 1;
			}
			else if (this.type == 294)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 48;
				this.friendly = true;
				this.magic = true;
				this.extraUpdates = 100;
				this.timeLeft = 300;
				this.penetrate = -1;
			}
			else if (this.type == 295)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 50;
				this.friendly = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = true;
			}
			else if (this.type == 296)
			{
				this.width = 150;
				this.height = 150;
				this.aiStyle = 50;
				this.friendly = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 297)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 51;
				this.friendly = true;
				this.alpha = 255;
				this.magic = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 298)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 52;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.extraUpdates = 3;
			}
			else if (this.type == 299)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.hostile = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.magic = true;
				this.ignoreWater = true;
				this.tileCollide = false;
			}
			else if (this.type == 300)
			{
				this.width = 38;
				this.height = 38;
				this.aiStyle = 2;
				this.hostile = true;
				this.penetrate = -1;
				this.ignoreWater = true;
				this.tileCollide = false;
			}
			else if (this.type == 301)
			{
				this.width = 38;
				this.height = 38;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.extraUpdates = 2;
			}
			else if (this.type == 302)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.light = 0.3f;
				this.alpha = 255;
				this.extraUpdates = 7;
				this.scale = 1.18f;
				this.timeLeft = 300;
				this.ranged = true;
				this.ignoreWater = true;
			}
			else if (this.type == 303)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.hostile = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 304)
			{
				this.alpha = 255;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
				this.melee = true;
				this.light = 0.2f;
				this.ignoreWater = true;
				this.extraUpdates = 0;
			}
			else if (this.type == 305)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 52;
				this.alpha = 255;
				this.tileCollide = false;
				this.extraUpdates = 10;
			}
			else if (this.type == 306)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
				this.melee = true;
				this.ignoreWater = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 307)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 36;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.melee = true;
				this.extraUpdates = 3;
			}
			else if (this.type == 308)
			{
				this.width = 80;
				this.height = 74;
				this.aiStyle = 53;
				this.timeLeft = Projectile.SentryLifeTime;
				this.light = 0.25f;
				this.ignoreWater = true;
				this.coldDamage = true;
				this.sentry = true;
			}
			else if (this.type == 309)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.alpha = 255;
				this.penetrate = 1;
				this.friendly = true;
				this.extraUpdates = 3;
				this.coldDamage = true;
			}
			else if (this.type == 310)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 33;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 36000;
			}
			else if (this.type == 311)
			{
				this.width = 10;
				this.height = 12;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 3;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 312)
			{
				this.alpha = 255;
				this.width = 32;
				this.height = 32;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 300;
			}
			else if (this.type == 313)
			{
				this.netImportant = true;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 314)
			{
				this.netImportant = true;
				this.width = 24;
				this.height = 40;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 315)
			{
				this.netImportant = true;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 316)
			{
				this.alpha = 255;
				this.width = 16;
				this.height = 16;
				this.aiStyle = 36;
				this.friendly = true;
				this.penetrate = 1;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 317)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 54;
				this.penetrate = 1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
			}
			else if (this.type == 318)
			{
				this.width = 12;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.thrown = true;
			}
			else if (this.type == 319)
			{
				this.netImportant = true;
				this.width = 36;
				this.height = 30;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 320)
			{
				this.width = 34;
				this.height = 34;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 321)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 55;
				this.friendly = true;
				this.melee = true;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 322)
			{
				this.netImportant = true;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 323)
			{
				this.penetrate = 10;
				this.extraUpdates = 3;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.ranged = true;
				this.scale = 0.8f;
			}
			else if (this.type == 324)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 38;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 325)
			{
				this.alpha = 255;
				this.penetrate = -1;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.hostile = true;
				this.tileCollide = false;
			}
			else if (this.type >= 326 && this.type <= 328)
			{
				if (this.type == 326)
				{
					this.width = 14;
					this.height = 16;
				}
				else if (this.type == 327)
				{
					this.width = 12;
					this.height = 14;
				}
				else
				{
					this.width = 6;
					this.height = 12;
				}
				this.aiStyle = 14;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 360;
			}
			else if (this.type == 329)
			{
				this.width = 80;
				this.height = 80;
				this.light = 0.25f;
				this.aiStyle = 56;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft = 420;
			}
			else if (this.type == 330)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 6;
				this.thrown = true;
			}
			else if (this.type == 331)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 332)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
				this.light = 0.5f;
			}
			else if (this.type == 333)
			{
				this.width = 38;
				this.height = 38;
				this.aiStyle = 3;
				this.friendly = true;
				this.scale = 0.9f;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 334)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 335)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
				this.melee = true;
			}
			else if (this.type == 336)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.magic = true;
				this.scale = 0.8f;
				this.extraUpdates = 1;
			}
			else if (this.type == 337)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.magic = true;
				this.tileCollide = false;
				this.coldDamage = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 338 || this.type == 339 || this.type == 340 || this.type == 341)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.penetrate = -1;
				this.friendly = true;
				this.ranged = true;
				this.scale = 0.9f;
			}
			else if (this.type == 342)
			{
				this.width = 22;
				this.height = 2;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.coldDamage = true;
			}
			else if (this.type == 343)
			{
				this.alpha = 255;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 57;
				this.friendly = true;
				this.melee = true;
				this.scale = 1.1f;
				this.penetrate = 3;
				this.coldDamage = true;
			}
			else if (this.type == 344)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 1;
				this.friendly = true;
				this.scale = 0.9f;
				this.alpha = 255;
				this.melee = true;
				this.coldDamage = true;
				this.tileCollide = false;
			}
			else if (this.type == 345)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.scale = 0.8f;
			}
			else if (this.type == 346)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 14;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 300;
			}
			else if (this.type == 347)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 2;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 348)
			{
				this.aiStyle = 1;
				this.width = 48;
				this.height = 48;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.coldDamage = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 349)
			{
				this.aiStyle = 1;
				this.width = 12;
				this.height = 12;
				this.hostile = true;
				this.penetrate = -1;
				this.coldDamage = true;
			}
			else if (this.type == 350)
			{
				this.alpha = 255;
				this.penetrate = -1;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.hostile = true;
				this.tileCollide = false;
				this.timeLeft /= 2;
			}
			else if (this.type == 351)
			{
				this.alpha = 255;
				this.penetrate = -1;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 58;
				this.hostile = true;
				this.tileCollide = false;
			}
			else if (this.type == 352)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 14;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft /= 3;
			}
			else if (this.type == 353)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 28;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 354)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.penetrate = -1;
				this.extraUpdates = 1;
			}
			else if (this.type == 355)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.magic = true;
				this.penetrate = 7;
			}
			else if (this.type == 356)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 59;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.extraUpdates = 3;
			}
			else if (this.type == 357)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 6;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 358)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 60;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.ignoreWater = true;
			}
			else if (this.type == 359)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 2;
				this.friendly = true;
				this.coldDamage = true;
			}
			else if ((this.type >= 360 && this.type <= 366) || this.type == 381 || this.type == 382)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 61;
				this.penetrate = -1;
				this.bobber = true;
			}
			else if (this.type == 367)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 368)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 369)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 370)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 371)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 372)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 373)
			{
				this.netImportant = true;
				this.width = 24;
				this.height = 26;
				this.aiStyle = 62;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 374)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 0;
				this.friendly = true;
				this.penetrate = 1;
				this.aiStyle = 1;
				this.tileCollide = true;
				this.scale *= 0.9f;
			}
			else if (this.type == 375)
			{
				this.netImportant = true;
				this.width = 34;
				this.height = 26;
				this.aiStyle = 62;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 376)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 0;
				this.friendly = true;
				this.penetrate = -1;
				this.aiStyle = 1;
				this.tileCollide = true;
				this.timeLeft = 100;
				this.alpha = 255;
				this.extraUpdates = 1;
			}
			else if (this.type == 377)
			{
				this.width = 66;
				this.height = 50;
				this.aiStyle = 53;
				this.timeLeft = Projectile.SentryLifeTime;
				this.ignoreWater = true;
				this.sentry = true;
			}
			else if (this.type == 378)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 14;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft = 60;
				this.scale = 0.9f;
			}
			else if (this.type == 379)
			{
				this.width = 14;
				this.height = 10;
				this.aiStyle = 63;
				this.friendly = true;
				this.timeLeft = 300;
				this.penetrate = 1;
			}
			else if (this.type == 380)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 383)
			{
				this.width = 34;
				this.height = 34;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 384)
			{
				this.width = 150;
				this.height = 42;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 64;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.alpha = 255;
				this.timeLeft = 540;
			}
			else if (this.type == 385)
			{
				this.width = 30;
				this.height = 30;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 65;
				this.alpha = 255;
				this.timeLeft = 300;
			}
			else if (this.type == 386)
			{
				this.width = 150;
				this.height = 42;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 64;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.alpha = 255;
				this.timeLeft = 840;
			}
			else if (this.type == 387)
			{
				this.netImportant = true;
				this.width = 40;
				this.height = 20;
				this.aiStyle = 66;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 0.5f;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.friendly = true;
			}
			else if (this.type == 388)
			{
				this.netImportant = true;
				this.width = 40;
				this.height = 20;
				this.aiStyle = 66;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 0.5f;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.friendly = true;
			}
			else if (this.type == 389)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.2f;
				this.timeLeft = 600;
			}
			else if (this.type == 390 || this.type == 391 || this.type == 392)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 26;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 0.75f;
				int arg_7510_0 = this.type;
				if (this.type == 392)
				{
				}
			}
			else if (this.type == 393 || this.type == 394 || this.type == 395)
			{
				this.width = 20;
				this.height = 30;
				this.aiStyle = 67;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				int arg_759F_0 = this.type;
				if (this.type == 395)
				{
				}
			}
			else if (this.type == 396)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
				this.alpha = 100;
			}
			else if (this.type == 397)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.thrown = true;
				this.tileCollide = false;
			}
			else if (this.type == 398)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 38;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 399)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 68;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.thrown = true;
				this.noEnchantments = true;
			}
			else if (this.type >= 400 && this.type <= 402)
			{
				if (this.type == 400)
				{
					this.width = 14;
					this.height = 16;
				}
				else if (this.type == 401)
				{
					this.width = 12;
					this.height = 14;
				}
				else
				{
					this.width = 6;
					this.height = 12;
				}
				this.penetrate = 3;
				this.aiStyle = 14;
				this.friendly = true;
				this.timeLeft = 360;
				this.ranged = true;
				this.noEnchantments = true;
			}
			else if (this.type == 403)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 404)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 69;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.melee = true;
			}
			else if (this.type == 405)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 70;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 90;
				this.melee = true;
				this.noEnchantments = true;
			}
			else if (this.type == 406)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 60;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.ignoreWater = true;
			}
			else if (this.type == 407)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 40;
				this.aiStyle = 62;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.friendly = true;
				this.minionSlots = 1f;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 408)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.ignoreWater = true;
			}
			else if (this.type == 409)
			{
				this.width = 30;
				this.height = 30;
				this.penetrate = -1;
				this.aiStyle = 71;
				this.alpha = 255;
				this.timeLeft = 360;
				this.friendly = true;
				this.tileCollide = true;
				this.extraUpdates = 2;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 410)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 72;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 50;
				this.magic = true;
				this.ignoreWater = true;
			}
			else
			{
				if (this.type >= 411 && this.type <= 414)
				{
					switch (this.type)
					{
						case 411:
						case 412:
						case 413:
						case 414:
							IL_7A81:
							this.width = 10;
							this.height = 10;
							this.aiStyle = 10;
							goto IL_C736;
					}
					//goto IL_7A81;
				}
				if (this.type == 415 || this.type == 416 || this.type == 417 || this.type == 418)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 34;
					this.friendly = true;
					this.ranged = true;
					this.timeLeft = 45;
				}
				else if (this.type >= 419 && this.type <= 422)
				{
					this.width = 4;
					this.height = 4;
					this.aiStyle = 73;
					this.friendly = true;
				}
				else if (this.type == 423)
				{
					this.netImportant = true;
					this.width = 28;
					this.height = 28;
					this.aiStyle = 62;
					this.penetrate = -1;
					this.timeLeft *= 5;
					this.minion = true;
					this.friendly = true;
					this.minionSlots = 1f;
					this.ignoreWater = true;
				}
				else if (this.type >= 424 && this.type <= 426)
				{
					this.width = 24;
					this.height = 24;
					this.aiStyle = 1;
					this.friendly = true;
					this.magic = true;
					this.tileCollide = false;
					this.extraUpdates = 2;
				}
				else if (this.type == 427)
				{
					this.width = 22;
					this.height = 56;
					this.aiStyle = 20;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ownerHitCheck = true;
					this.melee = true;
					this.glowMask = 2;
				}
				else if (this.type == 428)
				{
					this.width = 26;
					this.height = 54;
					this.aiStyle = 20;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ownerHitCheck = true;
					this.melee = true;
					this.glowMask = 3;
				}
				else if (this.type == 429)
				{
					this.width = 18;
					this.height = 56;
					this.aiStyle = 20;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ownerHitCheck = true;
					this.melee = true;
					this.glowMask = 7;
				}
				else if (this.type == 430)
				{
					this.width = 30;
					this.height = 54;
					this.aiStyle = 20;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ownerHitCheck = true;
					this.melee = true;
					this.glowMask = 8;
				}
				else if (this.type == 431)
				{
					this.width = 28;
					this.height = 64;
					this.aiStyle = 20;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ownerHitCheck = true;
					this.melee = true;
				}
				else if (this.type == 432)
				{
					this.width = 30;
					this.height = 54;
					this.aiStyle = 20;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ownerHitCheck = true;
					this.melee = true;
				}
				else if (this.type == 610)
				{
					this.width = 28;
					this.height = 64;
					this.aiStyle = 20;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ownerHitCheck = true;
					this.melee = true;
					this.glowMask = 179;
				}
				else if (this.type == 609)
				{
					this.width = 30;
					this.height = 54;
					this.aiStyle = 20;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ownerHitCheck = true;
					this.melee = true;
					this.glowMask = 180;
				}
				else if (this.type == 433)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 48;
					this.friendly = true;
					this.extraUpdates = 100;
					this.timeLeft = 100;
					this.ignoreWater = true;
				}
				else if (this.type == 434)
				{
					this.width = 1;
					this.height = 1;
					this.aiStyle = 74;
					this.friendly = true;
					this.extraUpdates = 100;
					this.penetrate = -1;
				}
				else if (this.type == 435)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.hostile = true;
					this.ignoreWater = true;
				}
				else if (this.type == 436)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.hostile = true;
					this.ignoreWater = true;
				}
				else if (this.type == 437)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.hostile = true;
					this.extraUpdates = 2;
					this.ignoreWater = true;
				}
				else if (this.type == 438)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 1;
					this.hostile = true;
					this.alpha = 255;
					this.extraUpdates = 3;
					this.ignoreWater = true;
				}
				else if (this.type == 439)
				{
					this.width = 22;
					this.height = 22;
					this.aiStyle = 75;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.magic = true;
					this.ignoreWater = true;
				}
				else if (this.type == 440)
				{
					this.width = 5;
					this.height = 5;
					this.aiStyle = 1;
					this.friendly = true;
					this.alpha = 255;
					this.extraUpdates = 2;
					this.scale = 1f;
					this.timeLeft = 600;
					this.magic = true;
					this.ignoreWater = true;
				}
				else if (this.type == 441)
				{
					this.width = 1;
					this.height = 1;
					this.aiStyle = 76;
					this.ignoreWater = true;
					this.tileCollide = false;
				}
				else if (this.type == 442)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 1;
					this.friendly = true;
					this.alpha = 255;
					this.scale = 1f;
					this.timeLeft = 600;
					this.ranged = true;
				}
				else if (this.type == 443)
				{
					this.width = 80;
					this.height = 80;
					this.aiStyle = 77;
					this.friendly = true;
					this.alpha = 255;
					this.scale = 1f;
					this.ranged = true;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.penetrate = -1;
				}
				else if (this.type == 444)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 78;
					this.friendly = true;
					this.alpha = 255;
					this.scale = 1f;
					this.ranged = true;
					this.ignoreWater = true;
					this.extraUpdates = 1;
				}
				else if (this.type == 445)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 75;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.melee = true;
					this.ignoreWater = true;
					this.ownerHitCheck = true;
				}
				else if (this.type == 446)
				{
					this.netImportant = true;
					this.width = 14;
					this.height = 14;
					this.aiStyle = 7;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.timeLeft *= 10;
					this.light = 0.7f;
				}
				else if (this.type == 447)
				{
					this.width = 30;
					this.height = 30;
					this.aiStyle = 79;
					this.hostile = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.timeLeft = 240;
				}
				else if (this.type == 448)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 80;
					this.hostile = true;
					this.penetrate = -1;
					this.tileCollide = false;
				}
				else if (this.type == 449)
				{
					this.width = 5;
					this.height = 5;
					this.aiStyle = 1;
					this.hostile = true;
					this.alpha = 255;
					this.extraUpdates = 1;
					this.scale = 1f;
					this.timeLeft = 600;
					this.ignoreWater = true;
				}
				else if (this.type == 450)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 14;
					this.hostile = true;
					this.penetrate = -1;
					this.timeLeft = 360;
				}
				else if (this.type == 451)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 81;
					this.melee = true;
					this.penetrate = 3;
					this.light = 0.2f;
					this.alpha = 255;
					this.friendly = true;
				}
				else if (this.type == 452)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 82;
					this.hostile = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.timeLeft = 600;
				}
				else if (this.type == 453)
				{
					this.width = 1;
					this.height = 1;
					this.aiStyle = 76;
					this.ignoreWater = true;
					this.tileCollide = false;
				}
				else if (this.type == 454)
				{
					this.width = 46;
					this.height = 46;
					this.aiStyle = 83;
					this.hostile = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.timeLeft = 600;
					this.tileCollide = false;
				}
				else if (this.type == 455)
				{
					this.width = 36;
					this.height = 36;
					this.aiStyle = 84;
					this.hostile = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.timeLeft = 600;
					this.tileCollide = false;
				}
				else if (this.type == 456)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 85;
					this.hostile = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.timeLeft = 600;
					this.tileCollide = false;
				}
				else if (this.type == 459)
				{
					this.width = 22;
					this.height = 22;
					this.aiStyle = 1;
					this.friendly = true;
					this.magic = true;
					this.alpha = 255;
					this.scale = 1f;
					this.ignoreWater = true;
					this.extraUpdates = 1;
				}
				else if (this.type == 460)
				{
					this.width = 14;
					this.height = 18;
					this.aiStyle = 75;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.magic = true;
					this.ignoreWater = true;
				}
				else if (this.type == 461)
				{
					this.width = 18;
					this.height = 18;
					this.aiStyle = 84;
					this.friendly = true;
					this.magic = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.tileCollide = false;
					this.hide = true;
				}
				else if (this.type == 462)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 1;
					this.hostile = true;
					this.alpha = 255;
					this.extraUpdates = 3;
					this.ignoreWater = true;
					this.tileCollide = false;
				}
				else if (this.type == 463)
				{
					this.width = 48;
					this.height = 48;
					this.aiStyle = 6;
					this.friendly = true;
					this.tileCollide = false;
					this.penetrate = -1;
					this.alpha = 255;
					this.ignoreWater = true;
				}
				else if (this.type == 464)
				{
					this.width = 60;
					this.height = 60;
					this.aiStyle = 86;
					this.hostile = true;
					this.tileCollide = false;
					this.penetrate = -1;
					this.alpha = 255;
					this.ignoreWater = true;
				}
				else if (this.type == 467)
				{
					this.width = 40;
					this.height = 40;
					this.aiStyle = 1;
					this.hostile = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.extraUpdates = 1;
				}
				else if (this.type == 468)
				{
					this.width = 40;
					this.height = 40;
					this.aiStyle = 1;
					this.hostile = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.extraUpdates = 1;
				}
				else if (this.type == 465)
				{
					this.width = 80;
					this.height = 80;
					this.aiStyle = 88;
					this.hostile = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.tileCollide = false;
				}
				else if (this.type == 466)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 88;
					this.hostile = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.tileCollide = true;
					this.extraUpdates = 4;
					this.timeLeft = 120 * (this.extraUpdates + 1);
				}
				else if (this.type == 491)
				{
					this.width = 26;
					this.height = 26;
					this.aiStyle = 9;
					this.friendly = true;
					this.melee = true;
					this.penetrate = -1;
				}
				else if (this.type == 500)
				{
					this.width = 20;
					this.height = 20;
					this.aiStyle = 67;
					this.penetrate = -1;
					this.netImportant = true;
					this.timeLeft *= 5;
					this.friendly = true;
					this.ignoreWater = true;
					this.scale = 0.8f;
				}
				else if (this.type == 499)
				{
					this.netImportant = true;
					this.width = 34;
					this.height = 34;
					this.aiStyle = 26;
					this.friendly = true;
					this.penetrate = -1;
					this.timeLeft *= 5;
				}
				else if (this.type == 469)
				{
					this.alpha = 255;
					this.arrow = true;
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.ranged = true;
				}
				else if (this.type == 470)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 16;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
				}
				else if (this.type == 471)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 2;
					this.scale = 1.2f;
					this.hostile = true;
					this.ranged = true;
				}
				else if (this.type == 472)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 0;
					this.hostile = true;
					this.penetrate = -1;
					this.aiStyle = 1;
					this.tileCollide = true;
					this.timeLeft = 50;
				}
				else if (this.type == 474)
				{
					this.arrow = true;
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.ranged = true;
				}
				else if (this.type == 473)
				{
					this.netImportant = true;
					this.width = 8;
					this.height = 8;
					this.aiStyle = 14;
					this.penetrate = -1;
					this.alpha = 75;
					this.light = 1f;
					this.timeLeft *= 2;
				}
				else if (this.type == 475)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 35;
					this.penetrate = -1;
					this.tileCollide = false;
					this.timeLeft = 400;
				}
				else if (this.type == 476)
				{
					this.width = 200;
					this.height = 200;
					this.aiStyle = -1;
					this.friendly = true;
					this.tileCollide = false;
					this.penetrate = -1;
					this.alpha = 255;
					this.ignoreWater = true;
					this.timeLeft = 3;
				}
				else if (this.type == 477)
				{
					this.alpha = 255;
					this.width = 14;
					this.height = 14;
					this.aiStyle = 1;
					this.friendly = true;
					this.penetrate = 7;
					this.extraUpdates = 1;
					this.ranged = true;
				}
				else if (this.type == 478)
				{
					this.alpha = 255;
					this.width = 14;
					this.height = 14;
					this.aiStyle = 1;
					this.friendly = true;
					this.timeLeft = 300;
					this.ranged = true;
				}
				else if (this.type == 479)
				{
					this.alpha = 255;
					this.width = 14;
					this.height = 14;
					this.aiStyle = 1;
					this.friendly = true;
					this.ranged = true;
				}
				else if (this.type == 480)
				{
					this.alpha = 255;
					this.width = 12;
					this.height = 12;
					this.penetrate = 3;
					this.aiStyle = 14;
					this.friendly = true;
					this.timeLeft = 120;
					this.ranged = true;
					this.noEnchantments = true;
				}
				else if (this.type == 481)
				{
					this.width = 22;
					this.height = 22;
					this.aiStyle = 13;
					this.friendly = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.melee = true;
					this.extraUpdates = 0;
				}
				else if (this.type == 482)
				{
					this.width = 16;
					this.height = 200;
					this.aiStyle = 87;
					this.friendly = true;
					this.tileCollide = false;
					this.penetrate = 20;
					this.alpha = 255;
					this.ignoreWater = true;
					this.timeLeft = 2700;
				}
				else if (this.type == 483)
				{
					this.arrow = true;
					this.width = 14;
					this.height = 14;
					this.aiStyle = 14;
					this.friendly = true;
					this.melee = true;
				}
				else if (this.type == 484)
				{
					this.arrow = true;
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.melee = true;
					this.extraUpdates = 1;
				}
				else if (this.type == 485)
				{
					this.arrow = true;
					this.width = 24;
					this.height = 24;
					this.aiStyle = 1;
					this.friendly = true;
					this.ranged = true;
					this.penetrate = -1;
				}
				else if (this.type >= 486 && this.type <= 489)
				{
					if (this.type == 486)
					{
						this.width = 12;
						this.height = 12;
					}
					else if (this.type == 487)
					{
						this.width = 22;
						this.height = 22;
					}
					else if (this.type == 488)
					{
						this.width = 12;
						this.height = 12;
						this.light = 0.3f;
					}
					else if (this.type == 489)
					{
						this.width = 20;
						this.height = 16;
					}
					this.aiStyle = 7;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.timeLeft *= 10;
				}
				else if (this.type == 492)
				{
					this.netImportant = true;
					this.width = 18;
					this.height = 32;
					this.aiStyle = 90;
					this.friendly = true;
					this.penetrate = -1;
					this.timeLeft *= 5;
				}
				else if (this.type == 490)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 89;
					this.hostile = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.timeLeft = 600;
					this.netImportant = true;
				}
				else if (this.type == 493 || this.type == 494)
				{
					this.width = 32;
					this.height = 32;
					this.aiStyle = 4;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.alpha = 255;
					this.ignoreWater = true;
					this.magic = true;
					this.light = 0.2f;
				}
				else if (this.type == 495)
				{
					this.arrow = true;
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.ranged = true;
					this.penetrate = 3;
				}
				else if (this.type == 496)
				{
					this.alpha = 255;
					this.width = 40;
					this.height = 40;
					this.aiStyle = 91;
					this.friendly = true;
					this.magic = true;
					this.MaxUpdates = 3;
					this.penetrate = 3;
				}
				else if (this.type == 497)
				{
					this.width = 30;
					this.height = 30;
					this.aiStyle = 2;
					this.friendly = true;
					this.penetrate = 3;
					this.melee = true;
				}
				else if (this.type == 498)
				{
					this.width = 6;
					this.height = 6;
					this.aiStyle = 1;
					this.hostile = true;
					this.penetrate = -1;
					this.timeLeft = 180;
				}
				else if (this.type == 501)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 2;
					this.scale = 1.1f;
					this.hostile = true;
					this.ranged = true;
				}
				else if (this.type == 502)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 8;
					this.friendly = true;
					this.melee = true;
					this.penetrate = 5;
				}
				else if (this.type == 503)
				{
					this.width = 24;
					this.height = 24;
					this.aiStyle = 5;
					this.friendly = true;
					this.penetrate = 2;
					this.alpha = 255;
					this.tileCollide = false;
					this.melee = true;
					this.extraUpdates = 1;
				}
				else if (this.type == 504)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 2;
					this.friendly = true;
					this.magic = true;
					this.alpha = 255;
					this.penetrate = 2;
				}
				else if (this.type == 507)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 1;
					this.friendly = true;
					this.melee = true;
					this.penetrate = 3;
				}
				else if (this.type == 508)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 1;
					this.hostile = true;
					this.penetrate = -1;
				}
				else if (this.type == 509)
				{
					this.width = 22;
					this.height = 22;
					this.aiStyle = 20;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ownerHitCheck = true;
					this.melee = true;
					this.scale = 1.2f;
				}
				else if (this.type == 510)
				{
					this.width = 18;
					this.height = 18;
					this.aiStyle = 2;
					this.friendly = true;
					this.penetrate = 1;
					this.magic = true;
				}
				else if (this.type == 511)
				{
					this.width = 32;
					this.height = 32;
					this.aiStyle = 92;
					this.friendly = true;
					this.penetrate = -1;
					this.scale = 1.1f;
					this.magic = true;
				}
				else if (this.type == 512)
				{
					this.width = 40;
					this.height = 38;
					this.aiStyle = 92;
					this.friendly = true;
					this.penetrate = -1;
					this.scale = 1.1f;
					this.magic = true;
				}
				else if (this.type == 513)
				{
					this.width = 30;
					this.height = 28;
					this.aiStyle = 92;
					this.friendly = true;
					this.penetrate = -1;
					this.scale = 1.1f;
					this.magic = true;
				}
				else if (this.type == 514)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 93;
					this.friendly = true;
					this.penetrate = 3;
					this.alpha = 255;
					this.ranged = true;
				}
				else if (this.type == 515)
				{
					this.netImportant = true;
					this.width = 6;
					this.height = 6;
					this.aiStyle = 14;
					this.penetrate = -1;
					this.alpha = 75;
					this.light = 1f;
					this.timeLeft *= 5;
				}
				else if (this.type == 516)
				{
					this.width = 22;
					this.height = 22;
					this.aiStyle = 16;
					this.friendly = true;
					this.penetrate = -1;
				}
				else if (this.type == 517)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 16;
					this.friendly = true;
					this.penetrate = -1;
					this.thrown = true;
				}
				else if (this.type == 518)
				{
					this.width = 32;
					this.height = 32;
					this.aiStyle = 94;
					this.friendly = true;
					this.alpha = 255;
					this.tileCollide = false;
					this.ignoreWater = true;
				}
				else if (this.type == 519)
				{
					this.width = 24;
					this.height = 24;
					this.aiStyle = 16;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
				}
				else if (this.type == 520)
				{
					this.width = 22;
					this.height = 22;
					this.aiStyle = 2;
					this.friendly = true;
					this.penetrate = 3;
					this.thrown = true;
				}
				else if (this.type == 521)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 29;
					this.alpha = 255;
					this.magic = true;
					this.penetrate = 1;
					this.friendly = true;
				}
				else if (this.type == 522)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 29;
					this.alpha = 255;
					this.magic = true;
					this.penetrate = 1;
					this.friendly = true;
				}
				else if (this.type == 523)
				{
					this.width = 32;
					this.height = 32;
					this.aiStyle = 95;
					this.alpha = 255;
					this.ranged = true;
					this.penetrate = 1;
					this.friendly = true;
				}
				else if (this.type == 524)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 96;
					this.friendly = true;
					this.alpha = 255;
					this.penetrate = -1;
					this.ignoreWater = true;
					this.melee = true;
					this.extraUpdates = 5;
				}
				else if (this.type == 525)
				{
					this.width = 30;
					this.height = 24;
					this.aiStyle = 97;
					this.tileCollide = false;
					this.timeLeft = 10800;
				}
				else if (this.type == 526)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 98;
					this.tileCollide = false;
					this.timeLeft = 120;
					this.alpha = 255;
				}
				else if (this.type >= 527 && this.type <= 531)
				{
					this.knockBack = 12f;
					this.width = 24;
					this.height = 24;
					this.aiStyle = 17;
					this.penetrate = -1;
				}
				else if (this.type == 532)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 1;
					this.scale = 1f;
					this.friendly = true;
					this.thrown = true;
					this.penetrate = 3;
					this.extraUpdates = 1;
				}
				else if (this.type == 533)
				{
					this.netImportant = true;
					this.width = 20;
					this.height = 20;
					this.aiStyle = 66;
					this.penetrate = -1;
					this.timeLeft *= 5;
					this.minion = true;
					this.minionSlots = 1f;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.friendly = true;
				}
				else if (this.type == 534)
				{
					this.extraUpdates = 0;
					this.width = 16;
					this.height = 16;
					this.aiStyle = 99;
					this.friendly = true;
					this.penetrate = -1;
					this.melee = true;
					this.scale = 1f;
				}
				else if (this.type >= 541 && this.type <= 555)
				{
					this.extraUpdates = 0;
					this.width = 16;
					this.height = 16;
					this.aiStyle = 99;
					this.friendly = true;
					this.penetrate = -1;
					this.melee = true;
					this.scale = 1f;
					if (this.type == 547)
					{
						this.scale = 1.1f;
					}
					if (this.type == 554)
					{
						this.scale = 1.2f;
					}
					if (this.type == 555)
					{
						this.scale = 1.15f;
					}
					if (this.type == 551 || this.type == 550)
					{
						this.scale = 1.1f;
					}
				}
				else if (this.type >= 562 && this.type <= 564)
				{
					this.extraUpdates = 0;
					this.width = 16;
					this.height = 16;
					this.aiStyle = 99;
					this.friendly = true;
					this.penetrate = -1;
					this.melee = true;
					this.scale = 1f;
					if (this.type == 563)
					{
						this.scale = 1.05f;
					}
					if (this.type == 564)
					{
						this.scale = 1.075f;
					}
				}
				else if (this.type == 603)
				{
					this.extraUpdates = 0;
					this.width = 16;
					this.height = 16;
					this.aiStyle = 99;
					this.friendly = true;
					this.penetrate = -1;
					this.melee = true;
					this.scale = 1.15f;
				}
				else if (this.type == 604)
				{
					this.extraUpdates = 0;
					this.width = 14;
					this.height = 14;
					this.aiStyle = 115;
					this.friendly = true;
					this.penetrate = -1;
					this.melee = true;
					this.scale = 1.2f;
				}
				else if (this.type >= 556 && this.type <= 561)
				{
					this.extraUpdates = 0;
					this.width = 10;
					this.height = 10;
					this.aiStyle = 99;
					this.friendly = true;
					this.penetrate = -1;
					this.melee = true;
					this.scale = 1f;
					this.counterweight = true;
				}
				else if (this.type == 535)
				{
					this.width = 18;
					this.height = 18;
					this.aiStyle = 100;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.magic = true;
					this.ignoreWater = true;
				}
				else if (this.type == 536)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 101;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.magic = true;
					this.ignoreWater = true;
				}
				else if (this.type == 537)
				{
					this.width = 22;
					this.height = 22;
					this.aiStyle = 84;
					this.hostile = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.timeLeft = 240;
					this.tileCollide = false;
				}
				else if (this.type == 538)
				{
					this.width = 12;
					this.height = 12;
					this.aiStyle = 14;
					this.hostile = true;
					this.penetrate = -1;
					this.timeLeft = 120;
					this.extraUpdates = 1;
					this.alpha = 255;
				}
				else if (this.type == 539)
				{
					this.width = 18;
					this.height = 30;
					this.aiStyle = 102;
					this.hostile = true;
					this.penetrate = -1;
					this.timeLeft = 600;
				}
				else if (this.type == 540)
				{
					this.width = 20;
					this.height = 20;
					this.aiStyle = 103;
					this.hostile = true;
					this.penetrate = -1;
					this.timeLeft = 300;
					this.alpha = 255;
				}
				else if (this.type == 565)
				{
					this.width = 28;
					this.height = 28;
					this.aiStyle = 104;
					this.penetrate = -1;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.alpha = 255;
					this.scale = 0.8f;
				}
				else if (this.type == 566)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 36;
					this.friendly = true;
					this.penetrate = 4;
					this.alpha = 255;
					this.timeLeft = 660;
					this.extraUpdates = 3;
				}
				else if (this.type == 567 || this.type == 568)
				{
					if (this.type == 567)
					{
						this.width = 14;
						this.height = 14;
					}
					else
					{
						this.width = 16;
						this.height = 16;
					}
					this.aiStyle = 105;
					this.friendly = true;
					this.penetrate = 1;
					this.alpha = 255;
					this.timeLeft = 3600;
					this.tileCollide = false;
					this.ignoreWater = true;
				}
				else if (this.type >= 569 && this.type <= 571)
				{
					this.width = 32;
					this.height = 32;
					this.aiStyle = 106;
					this.friendly = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.timeLeft = 3600;
					this.tileCollide = false;
					this.ignoreWater = true;
				}
				else if (this.type == 575)
				{
					this.width = 24;
					this.height = 24;
					this.aiStyle = 107;
					this.hostile = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.timeLeft = 420;
					this.alpha = 255;
				}
				else if (this.type == 573)
				{
					this.width = 18;
					this.height = 30;
					this.aiStyle = 102;
					this.hostile = true;
					this.penetrate = -1;
					this.timeLeft = 600;
				}
				else if (this.type == 574)
				{
					this.width = 18;
					this.height = 18;
					this.aiStyle = 102;
					this.hostile = true;
					this.timeLeft = 600;
					this.tileCollide = false;
				}
				else if (this.type == 572)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.alpha = 255;
					this.penetrate = -1;
					this.friendly = false;
					this.hostile = true;
				}
				else if (this.type == 576)
				{
					this.width = 4;
					this.height = 4;
					this.aiStyle = 1;
					this.hostile = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.extraUpdates = 2;
					this.scale = 1.2f;
					this.timeLeft = 600;
				}
				else if (this.type == 577)
				{
					this.width = 4;
					this.height = 4;
					this.aiStyle = 1;
					this.hostile = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.extraUpdates = 2;
					this.scale = 1.2f;
					this.timeLeft = 600;
				}
				else if (this.type == 578 || this.type == 579)
				{
					this.width = 32;
					this.height = 32;
					this.aiStyle = 108;
					this.friendly = true;
					this.alpha = 255;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.hostile = true;
					this.hide = true;
				}
				else if (this.type == 580)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 88;
					this.hostile = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.tileCollide = true;
					this.extraUpdates = 4;
					this.timeLeft = 600;
				}
				else if (this.type == 581)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.alpha = 255;
					this.penetrate = -1;
					this.friendly = false;
					this.hostile = true;
				}
				else if (this.type == 582)
				{
					this.width = 20;
					this.height = 20;
					this.aiStyle = 109;
					this.friendly = true;
					this.penetrate = -1;
					this.MaxUpdates = 2;
				}
				else if (this.type == 583)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 2;
					this.friendly = true;
					this.scale = 0.8f;
				}
				else if (this.type == 589)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 2;
					this.friendly = true;
				}
				else if (this.type == 584)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 110;
					this.friendly = true;
					this.scale = 0.8f;
					this.penetrate = 3;
				}
				else if (this.type == 585)
				{
					this.width = 26;
					this.height = 26;
					this.aiStyle = 1;
					this.alpha = 255;
					this.friendly = true;
					this.penetrate = 3;
				}
				else if (this.type == 586)
				{
					this.width = 26;
					this.height = 26;
					this.aiStyle = 111;
					this.alpha = 255;
					this.friendly = true;
					this.penetrate = -1;
				}
				else if (this.type == 587)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.alpha = 255;
					this.friendly = true;
					this.ranged = true;
				}
				else if (this.type == 588)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 16;
					this.friendly = true;
					this.penetrate = -1;
					this.thrown = true;
				}
				else if (this.type == 590)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 112;
					this.friendly = true;
					this.penetrate = 1;
					this.alpha = 255;
					this.timeLeft = 900;
					this.tileCollide = false;
					this.ignoreWater = true;
				}
				else if (this.type == 591)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 101;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ignoreWater = true;
				}
				else if (this.type == 592)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 1;
					this.hostile = true;
					this.alpha = 255;
					this.extraUpdates = 3;
					this.ignoreWater = true;
				}
				else if (this.type == 593)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 1;
					this.hostile = true;
					this.alpha = 255;
					this.extraUpdates = 1;
					this.ignoreWater = true;
				}
				else if (this.type == 594)
				{
					this.width = 40;
					this.height = 40;
					this.aiStyle = 1;
					this.alpha = 255;
					this.extraUpdates = 2;
				}
				else if (this.type == 595)
				{
					this.width = 68;
					this.height = 64;
					this.aiStyle = 75;
					this.friendly = true;
					this.tileCollide = false;
					this.melee = true;
					this.penetrate = -1;
					this.ownerHitCheck = true;
				}
				else if (this.type == 596)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 107;
					this.hostile = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.timeLeft = 180;
					this.tileCollide = false;
				}
				else if (this.type == 597)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 29;
					this.alpha = 255;
					this.magic = true;
					this.penetrate = 2;
					this.friendly = true;
				}
				else if (this.type == 598)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 113;
					this.friendly = true;
					this.melee = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.hide = true;
				}
				else if (this.type == 599)
				{
					this.width = 22;
					this.height = 22;
					this.aiStyle = 2;
					this.friendly = true;
					this.penetrate = 6;
					this.thrown = true;
				}
				else if (this.type == 600)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 75;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ignoreWater = true;
				}
				else if (this.type == 601)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.alpha = 255;
					this.friendly = true;
					this.extraUpdates = 30;
				}
				else if (this.type == 602)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 114;
					this.alpha = 255;
					this.friendly = true;
					this.tileCollide = false;
					this.netImportant = true;
				}
				else if (this.type == 605)
				{
					this.alpha = 255;
					this.width = 6;
					this.height = 6;
					this.aiStyle = 1;
					this.hostile = true;
					this.penetrate = -1;
				}
				else if (this.type == 606)
				{
					this.width = 5;
					this.height = 5;
					this.aiStyle = 1;
					this.friendly = true;
					this.alpha = 255;
					this.extraUpdates = 2;
					this.scale = 1f;
					this.timeLeft = 600;
					this.ignoreWater = true;
				}
				else if (this.type == 607)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 116;
					this.friendly = true;
					this.alpha = 255;
					this.timeLeft = 600;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.penetrate = -1;
				}
				else if (this.type == 608)
				{
					this.width = 160;
					this.height = 160;
					this.aiStyle = 117;
					this.friendly = true;
					this.alpha = 255;
					this.timeLeft = 3;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.penetrate = -1;
					this.hide = true;
				}
				else if (this.type == 611)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 75;
					this.friendly = true;
					this.melee = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.hide = true;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.usesLocalNPCImmunity = true;
				}
				else if (this.type == 612)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 117;
					this.friendly = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.timeLeft = 60;
					this.tileCollide = false;
					this.penetrate = -1;
					this.usesLocalNPCImmunity = true;
				}
				else if (this.type == 613)
				{
					this.netImportant = true;
					this.width = 24;
					this.height = 24;
					this.aiStyle = 62;
					this.penetrate = -1;
					this.timeLeft *= 5;
					this.minion = true;
					this.friendly = true;
					this.minionSlots = 1f;
					this.ignoreWater = true;
				}
				else if (this.type == 614)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 113;
					this.friendly = true;
					this.penetrate = -1;
					this.alpha = 255;
				}
				else if (this.type == 615)
				{
					this.width = 22;
					this.height = 22;
					this.aiStyle = 75;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ranged = true;
					this.ignoreWater = true;
				}
				else if (this.type == 616)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 1;
					this.friendly = true;
					this.penetrate = 1;
					this.alpha = 255;
					this.ranged = true;
					this.extraUpdates = 2;
					this.timeLeft = 90 * this.MaxUpdates;
				}
				else if (this.type == 617)
				{
					this.width = 32;
					this.height = 32;
					this.aiStyle = 118;
					this.friendly = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.hide = true;
					this.magic = true;
					this.penetrate = 3;
					this.usesLocalNPCImmunity = true;
				}
				else if (this.type == 618)
				{
					this.tileCollide = false;
					this.width = 18;
					this.height = 30;
					this.aiStyle = 119;
					this.penetrate = -1;
					this.timeLeft = 420;
					this.magic = true;
					this.friendly = true;
					this.usesLocalNPCImmunity = true;
				}
				else if (this.type == 619)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 29;
					this.alpha = 255;
					this.magic = true;
					this.penetrate = 1;
					this.friendly = true;
				}
				else if (this.type == 620)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 29;
					this.alpha = 255;
					this.magic = true;
					this.penetrate = 1;
					this.friendly = true;
				}
				else if (this.type == 622)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.alpha = 255;
					this.extraUpdates = 2;
				}
				else if (this.type == 623)
				{
					this.netImportant = true;
					this.width = 50;
					this.height = 80;
					this.aiStyle = 120;
					this.penetrate = -1;
					this.timeLeft *= 5;
					this.minion = true;
					this.friendly = true;
					this.minionSlots = 0f;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.netImportant = true;
				}
				else if (this.type == 624)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 117;
					this.friendly = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.timeLeft = 60;
					this.tileCollide = false;
					this.penetrate = -1;
				}
				else if (this.type >= 625 && this.type <= 628)
				{
					if (this.type == 625 || this.type == 628)
					{
						this.netImportant = true;
					}
					if (this.type == 626 || this.type == 627)
					{
						this.minionSlots = 0.5f;
					}
					this.width = 24;
					this.height = 24;
					this.aiStyle = 121;
					this.penetrate = -1;
					this.timeLeft *= 5;
					this.minion = true;
					this.friendly = true;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.alpha = 255;
					this.hide = true;
					this.netImportant = true;
				}
				else if (this.type == 629)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 122;
					this.hostile = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.timeLeft = 3600;
					this.tileCollide = false;
					this.penetrate = -1;
					this.extraUpdates = 2;
				}
				else if (this.type == 630 || this.type == 705)
				{
					this.width = 22;
					this.height = 22;
					this.aiStyle = 75;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.hide = true;
					this.ranged = true;
					this.ignoreWater = true;
				}
				else if (this.type == 631)
				{
					this.arrow = true;
					this.width = 10;
					this.height = 10;
					this.aiStyle = 122;
					this.friendly = true;
					this.ranged = true;
					this.tileCollide = false;
					this.alpha = 255;
					this.ignoreWater = true;
					this.extraUpdates = 1;
				}
				else if (this.type == 633)
				{
					this.width = 14;
					this.height = 18;
					this.aiStyle = 75;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.magic = true;
					this.ignoreWater = true;
				}
				else if (this.type == 632)
				{
					this.width = 18;
					this.height = 18;
					this.aiStyle = 84;
					this.friendly = true;
					this.magic = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.tileCollide = false;
				}
				else if (this.type == 634)
				{
					this.width = 40;
					this.height = 40;
					this.aiStyle = 1;
					this.friendly = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.extraUpdates = 2;
					this.magic = true;
				}
				else if (this.type == 635)
				{
					this.width = 40;
					this.height = 40;
					this.aiStyle = 1;
					this.friendly = true;
					this.alpha = 255;
					this.friendly = true;
					this.extraUpdates = 3;
					this.magic = true;
				}
				else if (this.type == 636)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 113;
					this.friendly = true;
					this.melee = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.hide = true;
					this.MaxUpdates = 2;
				}
				else if (this.type == 637)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 16;
					this.friendly = true;
					this.penetrate = -1;
				}
				else if (this.type == 638)
				{
					this.width = 4;
					this.height = 4;
					this.aiStyle = 1;
					this.friendly = true;
					this.alpha = 255;
					this.extraUpdates = 5;
					this.timeLeft = 600;
					this.ranged = true;
					this.ignoreWater = true;
					this.usesLocalNPCImmunity = true;
					this.penetrate = -1;
				}
				else if (this.type == 639)
				{
					this.arrow = true;
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.ranged = true;
					this.MaxUpdates = 2;
					this.timeLeft = this.MaxUpdates * 45;
					this.ignoreWater = true;
					this.usesLocalNPCImmunity = true;
					this.alpha = 255;
					this.penetrate = 4;
				}
				else if (this.type == 640)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.ranged = true;
					this.MaxUpdates = 3;
					this.timeLeft = 90;
					this.ignoreWater = true;
					this.usesLocalNPCImmunity = true;
					this.alpha = 255;
					this.penetrate = 4;
				}
				else if (this.type == 642)
				{
					this.width = 18;
					this.height = 18;
					this.aiStyle = 84;
					this.friendly = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.tileCollide = false;
					this.usesLocalNPCImmunity = true;
				}
				else if (this.type == 641)
				{
					this.width = 32;
					this.height = 32;
					this.aiStyle = 123;
					this.timeLeft = Projectile.SentryLifeTime;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.alpha = 255;
					this.hide = true;
					this.sentry = true;
				}
				else if (this.type == 643)
				{
					this.width = 32;
					this.height = 32;
					this.aiStyle = 123;
					this.timeLeft = Projectile.SentryLifeTime;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.alpha = 255;
					this.sentry = true;
				}
				else if (this.type == 644)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 112;
					this.penetrate = 1;
					this.timeLeft = 900;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.alpha = 255;
				}
				else if (this.type == 645)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.magic = true;
					this.tileCollide = false;
					this.extraUpdates = 5;
					this.penetrate = -1;
					this.usesLocalNPCImmunity = true;
				}
				else if (this.type >= 646 && this.type <= 649)
				{
					this.width = 18;
					this.height = 18;
					this.aiStyle = 7;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.timeLeft *= 10;
				}
				else if (this.type == 650)
				{
					this.width = 20;
					this.height = 20;
					this.aiStyle = 124;
					this.penetrate = -1;
					this.netImportant = true;
					this.timeLeft *= 5;
					this.friendly = true;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.manualDirectionChange = true;
				}
				else if (this.type == 651)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 125;
					this.friendly = true;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.penetrate = -1;
				}
				else if (this.type == 652)
				{
					this.width = 18;
					this.height = 18;
					this.aiStyle = 7;
					this.friendly = true;
					this.penetrate = -1;
					this.tileCollide = false;
					this.timeLeft *= 10;
				}
				else if (this.type == 653)
				{
					this.width = 30;
					this.height = 30;
					this.aiStyle = 67;
					this.penetrate = -1;
					this.netImportant = true;
					this.timeLeft *= 5;
					this.friendly = true;
					this.ignoreWater = true;
					this.scale = 0.8f;
				}
				else if (this.type == 654)
				{
					this.width = 30;
					this.height = 30;
					this.aiStyle = 126;
					this.alpha = 255;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.timeLeft = 120;
					this.friendly = true;
					this.hostile = true;
					this.penetrate = -1;
					this.trap = true;
				}
				else if (this.type == 655)
				{
					this.width = 31;
					this.height = 31;
					this.aiStyle = 25;
					this.friendly = true;
					this.hostile = true;
					this.penetrate = -1;
					this.trap = true;
				}
				else if (this.type == 656)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 127;
					this.friendly = true;
					this.magic = true;
					this.tileCollide = false;
					this.penetrate = -1;
					this.usesLocalNPCImmunity = true;
					this.timeLeft = 1200;
				}
				else if (this.type == 657)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 127;
					this.hostile = true;
					this.tileCollide = false;
					this.penetrate = -1;
					this.timeLeft = 1200;
				}
				else if (this.type == 658)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 128;
					this.penetrate = 1;
					this.timeLeft = 900;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.alpha = 255;
					this.hostile = true;
				}
				else if (this.type == 659)
				{
					this.width = 8;
					this.height = 8;
					this.aiStyle = 129;
					this.friendly = true;
					this.magic = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.timeLeft = 180;
					this.tileCollide = false;
					this.penetrate = -1;
				}
				else if (this.type == 660)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.alpha = 255;
					this.timeLeft = 600;
					this.magic = true;
					this.ignoreWater = true;
				}
				else if (this.type == 661)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.alpha = 255;
					this.timeLeft = 40;
					this.extraUpdates = 1;
					this.ranged = true;
					this.ignoreWater = true;
					this.usesLocalNPCImmunity = true;
				}
				else if (this.type == 662 || this.type == 685)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 1;
					this.hostile = true;
					this.penetrate = -1;
				}
				else if (this.type == 663 || this.type == 665 || this.type == 667)
				{
					this.width = 30;
					this.height = 54;
					this.aiStyle = 130;
					this.timeLeft = Projectile.SentryLifeTime;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.manualDirectionChange = true;
					int num2 = this.type;
					if (num2 != 665)
					{
						if (num2 == 667)
						{
							this.height = 60;
							this.width = 28;
						}
					}
					else
					{
						this.height = 58;
						this.width = 28;
					}
					this.sentry = true;
				}
				else if (this.type == 664 || this.type == 666 || this.type == 668)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 131;
					this.friendly = true;
					this.alpha = 255;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = -1;
				}
				else if (this.type == 669)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 68;
					this.friendly = true;
					this.penetrate = 1;
					this.alpha = 255;
					this.thrown = true;
					this.noEnchantments = true;
				}
				else if (this.type == 670)
				{
					this.width = 30;
					this.height = 30;
					this.aiStyle = 126;
					this.alpha = 255;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.timeLeft = 120;
					this.hostile = true;
					this.penetrate = -1;
				}
				else if (this.type == 671)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.alpha = 255;
					this.penetrate = -1;
					this.friendly = false;
					this.hostile = true;
				}
				else if (this.type == 672)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 132;
					this.alpha = 255;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.timeLeft = 900;
					this.hostile = true;
					this.penetrate = -1;
				}
				else if (this.type == 674 || this.type == 673)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 133;
					this.alpha = 255;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.timeLeft = 900;
					this.hostile = true;
					this.penetrate = -1;
					this.hide = true;
				}
				else if (this.type == 675)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.alpha = 255;
					this.penetrate = -1;
					this.friendly = false;
					this.hostile = true;
				}
				else if (this.type == 676)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.alpha = 255;
					this.penetrate = -1;
					this.friendly = false;
					this.hostile = true;
				}
				else if (this.type == 677 || this.type == 678 || this.type == 679)
				{
					this.width = 26;
					this.height = 54;
					this.aiStyle = 134;
					this.timeLeft = Projectile.SentryLifeTime;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.manualDirectionChange = true;
					this.sentry = true;
				}
				else if (this.type == 680)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 1;
					this.friendly = true;
					this.penetrate = 4;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = -1;
				}
				else if (this.type == 681)
				{
					this.width = 14;
					this.height = 14;
					this.aiStyle = 16;
					this.hostile = true;
					this.penetrate = -1;
					this.thrown = true;
				}
				else if (this.type == 682)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.hostile = true;
					this.ignoreWater = true;
					this.timeLeft = 30;
					this.scale = 1.2f;
				}
				else if (this.type == 683)
				{
					this.width = 30;
					this.height = 30;
					this.aiStyle = 135;
					this.alpha = 255;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.timeLeft = 120;
					this.hostile = true;
					this.penetrate = -1;
				}
				else if (this.type == 684)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 1;
					this.melee = true;
					this.penetrate = 5;
					this.alpha = 255;
					this.friendly = true;
					this.tileCollide = false;
				}
				else if (this.type == 686)
				{
					this.width = 30;
					this.height = 30;
					this.aiStyle = 1;
					this.alpha = 255;
					this.penetrate = -1;
					this.friendly = false;
					this.hostile = true;
				}
				else if (this.type == 687)
				{
					this.width = 30;
					this.height = 30;
					this.aiStyle = 136;
					this.alpha = 255;
					this.penetrate = -1;
					this.friendly = false;
					this.hostile = true;
				}
				else if (this.type == 688 || this.type == 689 || this.type == 690)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 137;
					this.friendly = true;
					this.usesLocalNPCImmunity = true;
					this.timeLeft = Projectile.SentryLifeTime;
					this.localNPCHitCooldown = 3;
					this.tileCollide = false;
					this.penetrate = -1;
					this.sentry = true;
				}
				else if (this.type == 691 || this.type == 692 || this.type == 693)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 138;
					this.friendly = true;
					this.timeLeft = Projectile.SentryLifeTime;
					this.tileCollide = false;
					this.penetrate = -1;
					this.hide = true;
					this.sentry = true;
				}
				else if (this.type == 694 || this.type == 695 || this.type == 696)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 139;
					this.friendly = true;
					this.tileCollide = false;
					this.penetrate = -1;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = 30;
					this.alpha = 255;
					this.width = 96;
					this.height = 96;
				}
				else if (this.type == 697)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 140;
					this.friendly = true;
					this.melee = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.hide = true;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = 12;
					this.ownerHitCheck = true;
				}
				else if (this.type == 698)
				{
					this.width = 50;
					this.height = 200;
					this.aiStyle = 141;
					this.alpha = 255;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.timeLeft = 120;
					this.friendly = true;
					this.penetrate = -1;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = -1;
					this.melee = true;
				}
				else if (this.type == 699)
				{
					this.width = 24;
					this.height = 24;
					this.aiStyle = 142;
					this.friendly = true;
					this.melee = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.hide = true;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.usesIDStaticNPCImmunity = true;
					this.idStaticNPCHitCooldown = 36;
					this.ownerHitCheck = true;
				}
				else if (this.type == 700)
				{
					this.width = 40;
					this.height = 40;
					this.aiStyle = 143;
					this.alpha = 255;
					this.penetrate = -1;
					this.friendly = true;
					this.melee = true;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = -1;
					this.ignoreWater = true;
					this.tileCollide = false;
				}
				else if (this.type == 703 || this.type == 701 || this.type == 702)
				{
					this.width = 20;
					this.height = 20;
					this.aiStyle = 144;
					this.penetrate = -1;
					this.netImportant = true;
					this.timeLeft *= 5;
					this.scale = 0.85f;
					this.friendly = true;
					this.ignoreWater = true;
					this.tileCollide = false;
					this.manualDirectionChange = true;
				}
				else if (this.type == 704)
				{
					this.width = 60;
					this.height = 210;
					this.aiStyle = 145;
					this.friendly = true;
					this.magic = true;
					this.tileCollide = false;
					this.penetrate = -1;
					this.usesLocalNPCImmunity = true;
					this.timeLeft = 600;
					this.localNPCHitCooldown = -1;
					this.ignoreWater = true;
				}
				else if (this.type == 706)
				{
					this.width = 66;
					this.height = 66;
					this.aiStyle = 1;
					this.friendly = true;
					this.alpha = 255;
					this.timeLeft = 300;
					this.ranged = true;
					this.usesLocalNPCImmunity = true;
					this.penetrate = -1;
					this.localNPCHitCooldown = 10;
				}
				else if (this.type == 707)
				{
					this.width = 16;
					this.height = 16;
					this.aiStyle = 140;
					this.friendly = true;
					this.melee = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.hide = true;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = 6;
					this.ownerHitCheck = true;
				}
				else if (this.type == 708)
				{
					this.width = 24;
					this.height = 24;
					this.aiStyle = 142;
					this.friendly = true;
					this.melee = true;
					this.penetrate = -1;
					this.alpha = 255;
					this.hide = true;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = 6;
					this.ownerHitCheck = true;
				}
				else if (this.type == 709)
				{
					this.width = 12;
					this.height = 12;
					this.aiStyle = 1;
					this.friendly = true;
					this.melee = true;
					this.alpha = 255;
					this.ignoreWater = true;
					this.extraUpdates = 1;
					this.noEnchantments = true;
					this.scale = 0.6f;
				}
				else if (this.type == 710)
				{
					this.arrow = true;
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.ranged = true;
					this.ignoreWater = true;
					this.extraUpdates = 1;
					this.timeLeft = this.extraUpdates * 60 * 5;
					this.usesLocalNPCImmunity = true;
					this.alpha = 255;
					this.localNPCHitCooldown = -1;
				}
				else if (this.type == 711)
				{
					this.width = 30;
					this.height = 30;
					this.aiStyle = 1;
					this.alpha = 255;
					this.friendly = true;
					this.magic = true;
					this.extraUpdates = 1;
					this.scale = 0.7f;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = -1;
				}
				else if (this.type == 712)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 1;
					this.friendly = true;
					this.alpha = 255;
					this.timeLeft = 600;
					this.magic = true;
					this.extraUpdates = 1;
				}
				else if (this.type == 713)
				{
					this.width = 10;
					this.height = 10;
					this.aiStyle = 146;
					this.alpha = 255;
					this.tileCollide = false;
					this.ignoreWater = true;
					this.timeLeft = 900;
					this.hostile = true;
					this.penetrate = -1;
				}
				else
				{
					this.active = false;
				}
			}
			IL_C736:
			this.width = (int)((float)this.width * this.scale);
			this.height = (int)((float)this.height * this.scale);
			this.maxPenetrate = this.penetrate;
		}

		// Token: 0x060001B8 RID: 440 RVA: 0x0003CFB8 File Offset: 0x0003B1B8
		public void StatusNPC(int i)
		{
			if (this.melee && Main.player[this.owner].meleeEnchant > 0 && !this.noEnchantments)
			{
				byte expr_3E = Main.player[this.owner].meleeEnchant;
				if (expr_3E == 1)
				{
					Main.npc[i].AddBuff(70, 60 * Main.rand.Next(5, 10), false);
				}
				if (expr_3E == 2)
				{
					Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
				}
				if (expr_3E == 3)
				{
					Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
				}
				if (expr_3E == 5)
				{
					Main.npc[i].AddBuff(69, 60 * Main.rand.Next(10, 20), false);
				}
				if (expr_3E == 6)
				{
					Main.npc[i].AddBuff(31, 60 * Main.rand.Next(1, 4), false);
				}
				if (expr_3E == 8)
				{
					Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 10), false);
				}
				if (expr_3E == 4)
				{
					Main.npc[i].AddBuff(72, 120, false);
				}
			}
			if (this.type == 195)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(70, 60 * Main.rand.Next(10, 21), false);
				}
				else
				{
					Main.npc[i].AddBuff(20, 60 * Main.rand.Next(10, 21), false);
				}
			}
			if (this.type == 664 && Main.rand.Next(3) == 0)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 6), false);
			}
			if (this.type == 666 && Main.rand.Next(2) == 0)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 9), false);
			}
			if (this.type == 668 && Main.rand.Next(3) != 0)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(6, 9), false);
			}
			if (this.type == 567 || this.type == 568)
			{
				Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 11), false);
			}
			if (this.type == 598)
			{
				Main.npc[i].AddBuff(169, 900, false);
			}
			if (this.type == 636)
			{
				Main.npc[i].AddBuff(189, 300, false);
			}
			if (this.type == 611)
			{
				Main.npc[i].AddBuff(189, 300, false);
			}
			if (this.type == 612)
			{
				Main.npc[i].AddBuff(189, 300, false);
			}
			if (this.type == 711)
			{
				Main.npc[i].AddBuff(203, 600, false);
			}
			if (this.type == 706)
			{
				Main.npc[i].AddBuff(24, 480, false);
			}
			if (this.type == 614)
			{
				Main.npc[i].AddBuff(183, 900, false);
			}
			if (this.type == 585)
			{
				Main.npc[i].AddBuff(153, 60 * Main.rand.Next(5, 11), false);
			}
			if (this.type == 583)
			{
				Main.npc[i].AddBuff(20, 60 * Main.rand.Next(3, 6), false);
			}
			if (this.type == 524)
			{
				Main.npc[i].AddBuff(69, 60 * Main.rand.Next(3, 8), false);
			}
			if (this.type == 504 && Main.rand.Next(3) == 0)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(24, Main.rand.Next(60, 180), false);
				}
				else
				{
					Main.npc[i].AddBuff(24, Main.rand.Next(30, 120), false);
				}
			}
			if ((this.type == 694 || this.type == 695 || this.type == 696) && Main.player[this.owner].setHuntressT2 && Main.rand.Next(2) == 0)
			{
				Main.npc[i].AddBuff(204, Main.rand.Next(8, 18) * 30, false);
			}
			if (this.type == 545 && Main.rand.Next(3) == 0)
			{
				Main.npc[i].AddBuff(24, Main.rand.Next(60, 240), false);
			}
			if (this.type == 553)
			{
				Main.npc[i].AddBuff(24, Main.rand.Next(180, 480), false);
			}
			if (this.type == 552 && Main.rand.Next(3) != 0)
			{
				Main.npc[i].AddBuff(44, Main.rand.Next(120, 320), false);
			}
			if (this.type == 495)
			{
				Main.npc[i].AddBuff(153, Main.rand.Next(120, 300), false);
			}
			if (this.type == 497)
			{
				Main.npc[i].AddBuff(153, Main.rand.Next(60, 180), false);
			}
			if (this.type == 496)
			{
				Main.npc[i].AddBuff(153, Main.rand.Next(240, 480), false);
			}
			if (this.type == 476)
			{
				Main.npc[i].AddBuff(151, 30, false);
			}
			if (this.type == 523)
			{
				Main.npc[i].AddBuff(20, 60 * Main.rand.Next(10, 30), false);
			}
			if (this.type == 478 || this.type == 480)
			{
				Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
			}
			if (this.type == 479)
			{
				Main.npc[i].AddBuff(69, 60 * Main.rand.Next(7, 15), false);
			}
			if (this.type == 379)
			{
				Main.npc[i].AddBuff(70, 60 * Main.rand.Next(4, 7), false);
			}
			if (this.type >= 390 && this.type <= 392)
			{
				Main.npc[i].AddBuff(70, 60 * Main.rand.Next(2, 5), false);
			}
			if (this.type == 374)
			{
				Main.npc[i].AddBuff(20, 60 * Main.rand.Next(4, 7), false);
			}
			if (this.type == 376)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
			}
			if (this.type >= 399 && this.type <= 402)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
			}
			if (this.type == 295 || this.type == 296)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(8, 16), false);
			}
			if ((this.melee || this.ranged) && Main.player[this.owner].frostBurn && !this.noEnchantments)
			{
				Main.npc[i].AddBuff(44, 60 * Main.rand.Next(5, 15), false);
			}
			if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments)
			{
				if (Main.rand.Next(7) == 0)
				{
					Main.npc[i].AddBuff(24, 360, false);
				}
				else if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(24, 120, false);
				}
				else
				{
					Main.npc[i].AddBuff(24, 60, false);
				}
			}
			if (this.type == 287)
			{
				Main.npc[i].AddBuff(72, 120, false);
			}
			if (this.type == 285)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(31, 180, false);
				}
				else
				{
					Main.npc[i].AddBuff(31, 60, false);
				}
			}
			if (this.type == 2 && Main.rand.Next(3) == 0)
			{
				Main.npc[i].AddBuff(24, 180, false);
			}
			if (this.type == 172)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(44, 180, false);
				}
			}
			else if (this.type == 15)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(24, 300, false);
				}
			}
			else if (this.type == 253)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(44, 480, false);
				}
			}
			else if (this.type == 19)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.npc[i].AddBuff(24, 180, false);
				}
			}
			else if (this.type == 33)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.npc[i].AddBuff(20, 420, false);
				}
			}
			else if (this.type == 34)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(24, Main.rand.Next(240, 480), false);
				}
			}
			else if (this.type == 35)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.npc[i].AddBuff(24, 180, false);
				}
			}
			else if (this.type == 54)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(20, 600, false);
				}
			}
			else if (this.type == 267)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(20, 3600, false);
				}
				else
				{
					Main.npc[i].AddBuff(20, 1800, false);
				}
			}
			else if (this.type == 63)
			{
				if (Main.rand.Next(5) != 0)
				{
					Main.npc[i].AddBuff(31, 60 * Main.rand.Next(2, 5), false);
				}
			}
			else if (this.type == 85 || this.type == 188)
			{
				Main.npc[i].AddBuff(24, 1200, false);
			}
			else if (this.type == 95 || this.type == 103 || this.type == 104)
			{
				Main.npc[i].AddBuff(39, 420, false);
			}
			else if (this.type == 278 || this.type == 279 || this.type == 280)
			{
				Main.npc[i].AddBuff(69, 600, false);
			}
			else if (this.type == 282 || this.type == 283)
			{
				Main.npc[i].AddBuff(70, 600, false);
			}
			if (this.type == 163 || this.type == 310)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(24, 600, false);
					return;
				}
				Main.npc[i].AddBuff(24, 300, false);
				return;
			}
			else
			{
				if (this.type == 98)
				{
					Main.npc[i].AddBuff(20, 600, false);
					return;
				}
				if (this.type == 184)
				{
					Main.npc[i].AddBuff(20, 900, false);
					return;
				}
				if (this.type == 265)
				{
					Main.npc[i].AddBuff(20, 1800, false);
					return;
				}
				if (this.type == 355)
				{
					Main.npc[i].AddBuff(70, 1800, false);
				}
				return;
			}
		}

		// Token: 0x060001BD RID: 445 RVA: 0x0003E754 File Offset: 0x0003C954
		public void StatusPlayer(int i)
		{
			if (this.type == 472)
			{
				Main.player[i].AddBuff(149, Main.rand.Next(30, 150), true);
			}
			if (this.type == 467)
			{
				Main.player[i].AddBuff(24, Main.rand.Next(30, 150), true);
			}
			if (this.type == 581)
			{
				if (Main.expertMode)
				{
					Main.player[i].AddBuff(164, Main.rand.Next(300, 540), true);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(164, Main.rand.Next(360, 720), true);
				}
			}
			if (this.type == 687)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(7, 11), true);
			}
			if (this.type == 258 && Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(5, 8), true);
			}
			if (this.type == 572 && Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(120, 240), true);
			}
			if (this.type == 276)
			{
				if (Main.expertMode)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(120, 540), true);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(180, 420), true);
				}
			}
			if (this.type == 436 && Main.rand.Next(5) >= 2)
			{
				Main.player[i].AddBuff(31, 300, true);
			}
			if (this.type == 435 && Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(144, 300, true);
			}
			if (this.type == 682)
			{
				Main.player[i].AddBuff(196, 300, true);
			}
			if (this.type == 437)
			{
				Main.player[i].AddBuff(144, 60 * Main.rand.Next(4, 9), true);
			}
			if (this.type == 348)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(46, 600, true);
				}
				else
				{
					Main.player[i].AddBuff(46, 300, true);
				}
				if (Main.rand.Next(3) != 0)
				{
					if (Main.rand.Next(16) == 0)
					{
						Main.player[i].AddBuff(47, 60, true);
					}
					else if (Main.rand.Next(12) == 0)
					{
						Main.player[i].AddBuff(47, 40, true);
					}
					else if (Main.rand.Next(8) == 0)
					{
						Main.player[i].AddBuff(47, 20, true);
					}
				}
			}
			if (this.type == 349)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(46, 600, true);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(46, 300, true);
				}
			}
			if (this.type >= 399 && this.type <= 402)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
			}
			if (this.type == 55)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(20, 600, true);
				}
				else if (Main.expertMode)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(60, 300), true);
				}
			}
			if (this.type == 44 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(22, 900, true);
			}
			if (this.type == 293)
			{
				Main.player[i].AddBuff(80, 60 * Main.rand.Next(2, 7), true);
			}
			if (this.type == 82 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 420, true);
			}
			if (this.type == 285)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(31, 180, true);
				}
				else
				{
					Main.player[i].AddBuff(31, 60, true);
				}
			}
			if (this.type == 96 || this.type == 101)
			{
				if (Main.rand.Next(6) == 0)
				{
					Main.player[i].AddBuff(39, 480, true);
				}
				else if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(39, 300, true);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(39, 180, true);
				}
			}
			else if (this.type == 288)
			{
				Main.player[i].AddBuff(69, 900, true);
			}
			else if (this.type == 253 && Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(44, 600, true);
			}
			if (this.type == 291 || this.type == 292)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16), true);
			}
			if (this.type == 98)
			{
				Main.player[i].AddBuff(20, 600, true);
			}
			if (this.type == 184)
			{
				Main.player[i].AddBuff(20, 900, true);
			}
			if (this.type == 290)
			{
				Main.player[i].AddBuff(32, 60 * Main.rand.Next(5, 16), true);
			}
			if (this.type == 174)
			{
				Main.player[i].AddBuff(46, 1200, true);
				if (!Main.player[i].frozen && Main.rand.Next(20) == 0)
				{
					Main.player[i].AddBuff(47, 90, true);
				}
				else if (!Main.player[i].frozen && Main.expertMode && Main.rand.Next(20) == 0)
				{
					Main.player[i].AddBuff(47, 60, true);
				}
			}
			if (this.type == 257)
			{
				Main.player[i].AddBuff(46, 2700, true);
				if (!Main.player[i].frozen && Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(47, 60, true);
				}
			}
			if (this.type == 177)
			{
				Main.player[i].AddBuff(46, 1500, true);
				if (!Main.player[i].frozen && Main.rand.Next(10) == 0)
				{
					Main.player[i].AddBuff(47, Main.rand.Next(30, 120), true);
				}
			}
			if (this.type == 176)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(20, 1200, true);
					return;
				}
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, 300, true);
				}
			}
		}

		// Token: 0x060001B9 RID: 441 RVA: 0x0003DCAC File Offset: 0x0003BEAC
		public void StatusPvP(int i)
		{
			if (this.melee && Main.player[this.owner].meleeEnchant > 0 && !this.noEnchantments)
			{
				byte expr_3E = Main.player[this.owner].meleeEnchant;
				if (expr_3E == 1)
				{
					Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), true);
				}
				if (expr_3E == 2)
				{
					Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), true);
				}
				if (expr_3E == 3)
				{
					Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), true);
				}
				if (expr_3E == 5)
				{
					Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), true);
				}
				if (expr_3E == 6)
				{
					Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), true);
				}
				if (expr_3E == 8)
				{
					Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), true);
				}
			}
			if (this.type == 295 || this.type == 296)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16), true);
			}
			if (this.type == 478 || this.type == 480)
			{
				Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), true);
			}
			if ((this.melee || this.ranged) && Main.player[this.owner].frostBurn && !this.noEnchantments)
			{
				Main.player[i].AddBuff(44, 60 * Main.rand.Next(1, 8), false);
			}
			if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 360, true);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 240, true);
				}
				else
				{
					Main.player[i].AddBuff(24, 120, true);
				}
			}
			if (this.type == 2 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 180, false);
			}
			if (this.type == 172)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(44, 240, false);
				}
			}
			else if (this.type == 15)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 300, false);
				}
			}
			else if (this.type == 253)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(44, 480, false);
				}
			}
			else if (this.type == 19)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(24, 180, false);
				}
			}
			else if (this.type == 33)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(20, 420, false);
				}
			}
			else if (this.type == 34)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 240, false);
				}
			}
			else if (this.type == 35)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 180, false);
				}
			}
			else if (this.type == 54)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, 600, false);
				}
			}
			else if (this.type == 267)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(20, 3600, true);
				}
				else
				{
					Main.player[i].AddBuff(20, 1800, true);
				}
			}
			else if (this.type == 63)
			{
				if (Main.rand.Next(3) != 0)
				{
					Main.player[i].AddBuff(31, 120, true);
				}
			}
			else if (this.type == 85 || this.type == 188)
			{
				Main.player[i].AddBuff(24, 1200, false);
			}
			else if (this.type == 95 || this.type == 103 || this.type == 104)
			{
				Main.player[i].AddBuff(39, 420, true);
			}
			else if (this.type == 278 || this.type == 279 || this.type == 280)
			{
				Main.player[i].AddBuff(69, 900, true);
			}
			else if (this.type == 282 || this.type == 283)
			{
				Main.player[i].AddBuff(70, 600, true);
			}
			if (this.type == 163 || this.type == 310)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(24, 600, true);
					return;
				}
				Main.player[i].AddBuff(24, 300, true);
				return;
			}
			else
			{
				if (this.type == 265)
				{
					Main.player[i].AddBuff(20, 1200, true);
					return;
				}
				if (this.type == 355)
				{
					Main.player[i].AddBuff(70, 1800, true);
				}
				return;
			}
		}

		// Token: 0x060001C0 RID: 448 RVA: 0x000426C4 File Offset: 0x000408C4
		private void SummonMonkGhast()
		{
			if (this.localAI[0] > 0f)
			{
				return;
			}
			this.localAI[0] = 1000f;
			List<NPC> list = new List<NPC>();
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this, false) && base.Distance(nPC.Center) < 800f)
				{
					list.Add(nPC);
				}
			}
			Vector2 center = base.Center;
			Vector2 value = Vector2.Zero;
			if (list.Count > 0)
			{
				NPC expr_94 = list[Main.rand.Next(list.Count)];
				center = expr_94.Center;
				value = expr_94.velocity;
			}
			int num = Main.rand.Next(2) * 2 - 1;
			Vector2 vector = new Vector2((float)num * (4f + (float)Main.rand.Next(3)), 0f);
			Vector2 vector2 = center + new Vector2((float)(-(float)num * 120), 0f);
			vector += (center + value * 15f - vector2).SafeNormalize(Vector2.Zero) * 2f;
			Projectile.NewProjectile(vector2, vector, 700, this.damage, 0f, this.owner, 0f, 0f);
		}

		// Token: 0x060001EC RID: 492 RVA: 0x000BF2CC File Offset: 0x000BD4CC
		public override string ToString()
		{
			return string.Concat(new object[]
			{
				"type:",
				this.type,
				"name:",
				this.Name,
				", active:",
				this.active.ToString(),
				", whoAmI:",
				this.whoAmI,
				", identity:",
				this.identity,
				", ai0:",
				this.ai[0],
				" , uuid:",
				this.projUUID
			});
		}

		// Token: 0x060001AE RID: 430 RVA: 0x000301D4 File Offset: 0x0002E3D4
		public bool TurretShouldPersist()
		{
			int num = this.type;
			switch (num)
			{
				case 663:
				case 665:
				case 667:
					break;
				case 664:
				case 666:
					return false;
				default:
					if (num - 677 > 2 && num - 688 > 5)
					{
						return false;
					}
					break;
			}
			return DD2Event.Ongoing;
		}

		// Token: 0x060001C6 RID: 454 RVA: 0x0004403C File Offset: 0x0004223C
		public void Update(int i)
		{
			if (!this.active)
			{
				return;
			}
			this.numUpdates = this.extraUpdates;
			while (this.numUpdates >= 0)
			{
				this.numUpdates--;
				if (this.type == 640 && this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else
				{
					if (this.position.X <= Main.leftWorld || this.position.X + (float)this.width >= Main.rightWorld || this.position.Y <= Main.topWorld || this.position.Y + (float)this.height >= Main.bottomWorld)
					{
						this.active = false;
						return;
					}
					if (this.type != 344 && !this.npcProj)
					{
						if (Main.player[this.owner].frostBurn && (this.melee || this.ranged) && this.friendly && !this.hostile && !this.noEnchantments && Main.rand.Next(2 * (1 + this.extraUpdates)) == 0)
						{
							int num = Dust.NewDust(this.position, this.width, this.height, 135, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2f);
							Main.dust[num].noGravity = true;
							Main.dust[num].velocity *= 0.7f;
							Dust expr_1D4_cp_0_cp_0 = Main.dust[num];
							expr_1D4_cp_0_cp_0.velocity.Y = expr_1D4_cp_0_cp_0.velocity.Y - 0.5f;
						}
						if (this.melee && Main.player[this.owner].meleeEnchant > 0 && !this.noEnchantments)
						{
							if (Main.player[this.owner].meleeEnchant == 1 && Main.rand.Next(3) == 0)
							{
								int num2 = Dust.NewDust(this.position, this.width, this.height, 171, 0f, 0f, 100, default(Color), 1f);
								Main.dust[num2].noGravity = true;
								Main.dust[num2].fadeIn = 1.5f;
								Main.dust[num2].velocity *= 0.25f;
							}
							if (Main.player[this.owner].meleeEnchant == 1)
							{
								if (Main.rand.Next(3) == 0)
								{
									int num3 = Dust.NewDust(this.position, this.width, this.height, 171, 0f, 0f, 100, default(Color), 1f);
									Main.dust[num3].noGravity = true;
									Main.dust[num3].fadeIn = 1.5f;
									Main.dust[num3].velocity *= 0.25f;
								}
							}
							else if (Main.player[this.owner].meleeEnchant == 2)
							{
								if (Main.rand.Next(2) == 0)
								{
									int num4 = Dust.NewDust(this.position, this.width, this.height, 75, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
									Main.dust[num4].noGravity = true;
									Main.dust[num4].velocity *= 0.7f;
									Dust expr_402_cp_0_cp_0 = Main.dust[num4];
									expr_402_cp_0_cp_0.velocity.Y = expr_402_cp_0_cp_0.velocity.Y - 0.5f;
								}
							}
							else if (Main.player[this.owner].meleeEnchant == 3)
							{
								if (Main.rand.Next(2) == 0)
								{
									int num5 = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
									Main.dust[num5].noGravity = true;
									Main.dust[num5].velocity *= 0.7f;
									Dust expr_4CB_cp_0_cp_0 = Main.dust[num5];
									expr_4CB_cp_0_cp_0.velocity.Y = expr_4CB_cp_0_cp_0.velocity.Y - 0.5f;
								}
							}
							else if (Main.player[this.owner].meleeEnchant == 4)
							{
								if (Main.rand.Next(2) == 0)
								{
									int num6 = Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.1f);
									Main.dust[num6].noGravity = true;
									Dust expr_57B_cp_0_cp_0 = Main.dust[num6];
									expr_57B_cp_0_cp_0.velocity.X = expr_57B_cp_0_cp_0.velocity.X / 2f;
									Dust expr_596_cp_0_cp_0 = Main.dust[num6];
									expr_596_cp_0_cp_0.velocity.Y = expr_596_cp_0_cp_0.velocity.Y / 2f;
								}
							}
							else if (Main.player[this.owner].meleeEnchant == 5)
							{
								if (Main.rand.Next(2) == 0)
								{
									int num7 = Dust.NewDust(this.position, this.width, this.height, 169, 0f, 0f, 100, default(Color), 1f);
									Dust expr_616_cp_0_cp_0 = Main.dust[num7];
									expr_616_cp_0_cp_0.velocity.X = expr_616_cp_0_cp_0.velocity.X + (float)this.direction;
									Dust expr_633_cp_0_cp_0 = Main.dust[num7];
									expr_633_cp_0_cp_0.velocity.Y = expr_633_cp_0_cp_0.velocity.Y + 0.2f;
									Main.dust[num7].noGravity = true;
								}
							}
							else if (Main.player[this.owner].meleeEnchant == 6)
							{
								if (Main.rand.Next(2) == 0)
								{
									int num8 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
									Dust expr_6C1_cp_0_cp_0 = Main.dust[num8];
									expr_6C1_cp_0_cp_0.velocity.X = expr_6C1_cp_0_cp_0.velocity.X + (float)this.direction;
									Dust expr_6DE_cp_0_cp_0 = Main.dust[num8];
									expr_6DE_cp_0_cp_0.velocity.Y = expr_6DE_cp_0_cp_0.velocity.Y + 0.2f;
									Main.dust[num8].noGravity = true;
								}
							}
							else if (Main.player[this.owner].meleeEnchant == 7)
							{
								Vector2 vector = this.velocity;
								if (vector.Length() > 4f)
								{
									vector *= 4f / vector.Length();
								}
								if (Main.rand.Next(20) == 0)
								{
									int num9 = Main.rand.Next(139, 143);
									int num10 = Dust.NewDust(this.position, this.width, this.height, num9, vector.X, vector.Y, 0, default(Color), 1.2f);
									Dust expr_7AF_cp_0_cp_0 = Main.dust[num10];
									expr_7AF_cp_0_cp_0.velocity.X = expr_7AF_cp_0_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
									Dust expr_7E0_cp_0_cp_0 = Main.dust[num10];
									expr_7E0_cp_0_cp_0.velocity.Y = expr_7E0_cp_0_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
									Dust expr_811_cp_0_cp_0 = Main.dust[num10];
									expr_811_cp_0_cp_0.velocity.X = expr_811_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
									Dust expr_83C_cp_0_cp_0 = Main.dust[num10];
									expr_83C_cp_0_cp_0.velocity.Y = expr_83C_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
									Main.dust[num10].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
								}
								if (Main.rand.Next(40) == 0)
								{
									int num11 = Main.rand.Next(276, 283);
									int num12 = Gore.NewGore(this.position, vector, num11, 1f);
									Gore expr_8D3_cp_0_cp_0 = Main.gore[num12];
									expr_8D3_cp_0_cp_0.velocity.X = expr_8D3_cp_0_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
									Gore expr_904_cp_0_cp_0 = Main.gore[num12];
									expr_904_cp_0_cp_0.velocity.Y = expr_904_cp_0_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
									Main.gore[num12].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
									Gore expr_964_cp_0_cp_0 = Main.gore[num12];
									expr_964_cp_0_cp_0.velocity.X = expr_964_cp_0_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
									Gore expr_98F_cp_0_cp_0 = Main.gore[num12];
									expr_98F_cp_0_cp_0.velocity.Y = expr_98F_cp_0_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
								}
							}
							else if (Main.player[this.owner].meleeEnchant == 8 && Main.rand.Next(4) == 0)
							{
								int num13 = Dust.NewDust(this.position, this.width, this.height, 46, 0f, 0f, 100, default(Color), 1f);
								Main.dust[num13].noGravity = true;
								Main.dust[num13].fadeIn = 1.5f;
								Main.dust[num13].velocity *= 0.25f;
							}
						}
						if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments && Main.rand.Next(3) != 0)
						{
							int num14 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y - 4f), this.width + 8, this.height + 8, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
							if (Main.rand.Next(2) == 0)
							{
								Main.dust[num14].scale = 1.5f;
							}
							Main.dust[num14].noGravity = true;
							Dust expr_B31_cp_0_cp_0 = Main.dust[num14];
							expr_B31_cp_0_cp_0.velocity.X = expr_B31_cp_0_cp_0.velocity.X * 2f;
							Dust expr_B4C_cp_0_cp_0 = Main.dust[num14];
							expr_B4C_cp_0_cp_0.velocity.Y = expr_B4C_cp_0_cp_0.velocity.Y * 2f;
						}
					}
					if (this.minion && this.numUpdates == -1 && this.type != 625 && this.type != 628)
					{
						this.minionPos = Main.player[this.owner].numMinions;
						if (Main.player[this.owner].slotsMinions + this.minionSlots > (float)Main.player[this.owner].maxMinions && this.owner == Main.myPlayer)
						{
							if (this.type == 627 || this.type == 626)
							{
								int byUUID = Projectile.GetByUUID(this.owner, this.ai[0]);
								if (byUUID != -1)
								{
									Projectile projectile = Main.projectile[byUUID];
									if (projectile.type != 625)
									{
										projectile.localAI[1] = this.localAI[1];
									}
									projectile = Main.projectile[(int)this.localAI[1]];
									projectile.ai[0] = this.ai[0];
									projectile.ai[1] = 1f;
									projectile.netUpdate = true;
								}
							}
							this.Kill();
						}
						else
						{
							Main.player[this.owner].numMinions++;
							Main.player[this.owner].slotsMinions += this.minionSlots;
						}
					}
					float num15 = 1f + Math.Abs(this.velocity.X) / 3f;
					if (this.gfxOffY > 0f)
					{
						this.gfxOffY -= num15 * this.stepSpeed;
						if (this.gfxOffY < 0f)
						{
							this.gfxOffY = 0f;
						}
					}
					else if (this.gfxOffY < 0f)
					{
						this.gfxOffY += num15 * this.stepSpeed;
						if (this.gfxOffY > 0f)
						{
							this.gfxOffY = 0f;
						}
					}
					if (this.gfxOffY > 16f)
					{
						this.gfxOffY = 16f;
					}
					if (this.gfxOffY < -16f)
					{
						this.gfxOffY = -16f;
					}
					Vector2 velocity = this.velocity;
					this.oldVelocity = this.velocity;
					this.whoAmI = i;
					if (this.soundDelay > 0)
					{
						this.soundDelay--;
					}
					this.netUpdate = false;
					for (int j = 0; j < 255; j++)
					{
						if (this.playerImmune[j] > 0)
						{
							this.playerImmune[j]--;
						}
					}
					if (this.usesLocalNPCImmunity)
					{
						for (int k = 0; k < 200; k++)
						{
							if (this.localNPCImmunity[k] > 0)
							{
								this.localNPCImmunity[k]--;
							}
						}
					}
					this.AI();
					if (this.owner < 255 && !Main.player[this.owner].active)
					{
						this.Kill();
					}
					if (this.type == 242 || this.type == 302 || this.type == 638)
					{
						this.wet = false;
					}
					if (!this.ignoreWater)
					{
						bool flag;
						bool flag2;
						try
						{
							flag = Collision.LavaCollision(this.position, this.width, this.height);
							flag2 = Collision.WetCollision(this.position, this.width, this.height);
							if (flag)
							{
								this.lavaWet = true;
							}
							if (Collision.honey)
							{
								this.honeyWet = true;
							}
						}
						catch
						{
							this.active = false;
							return;
						}
						if (this.wet && !this.lavaWet)
						{
							if (this.type == 85 || this.type == 15 || this.type == 34 || this.type == 188)
							{
								this.Kill();
							}
							if (this.type == 2)
							{
								this.type = 1;
								this.light = 0f;
							}
						}
						if (this.type == 80)
						{
							flag2 = false;
							this.wet = false;
							if (flag && this.ai[0] >= 0f)
							{
								this.Kill();
							}
						}
						if (flag2)
						{
							if (this.type != 155 && this.wetCount == 0 && !this.wet)
							{
								if (!flag)
								{
									if (this.honeyWet)
									{
										for (int l = 0; l < 10; l++)
										{
											int num16 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
											Dust expr_1020_cp_0_cp_0 = Main.dust[num16];
											expr_1020_cp_0_cp_0.velocity.Y = expr_1020_cp_0_cp_0.velocity.Y - 1f;
											Dust expr_103B_cp_0_cp_0 = Main.dust[num16];
											expr_103B_cp_0_cp_0.velocity.X = expr_103B_cp_0_cp_0.velocity.X * 2.5f;
											Main.dust[num16].scale = 1.3f;
											Main.dust[num16].alpha = 100;
											Main.dust[num16].noGravity = true;
										}
										Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									}
									else
									{
										for (int m = 0; m < 10; m++)
										{
											int num17 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
											Dust expr_112E_cp_0_cp_0 = Main.dust[num17];
											expr_112E_cp_0_cp_0.velocity.Y = expr_112E_cp_0_cp_0.velocity.Y - 4f;
											Dust expr_1149_cp_0_cp_0 = Main.dust[num17];
											expr_1149_cp_0_cp_0.velocity.X = expr_1149_cp_0_cp_0.velocity.X * 2.5f;
											Main.dust[num17].scale = 1.3f;
											Main.dust[num17].alpha = 100;
											Main.dust[num17].noGravity = true;
										}
										Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									}
								}
								else
								{
									for (int n = 0; n < 10; n++)
									{
										int num18 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
										Dust expr_1239_cp_0_cp_0 = Main.dust[num18];
										expr_1239_cp_0_cp_0.velocity.Y = expr_1239_cp_0_cp_0.velocity.Y - 1.5f;
										Dust expr_1254_cp_0_cp_0 = Main.dust[num18];
										expr_1254_cp_0_cp_0.velocity.X = expr_1254_cp_0_cp_0.velocity.X * 2.5f;
										Main.dust[num18].scale = 1.3f;
										Main.dust[num18].alpha = 100;
										Main.dust[num18].noGravity = true;
									}
									Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								}
							}
							this.wet = true;
						}
						else if (this.wet)
						{
							this.wet = false;
							if (this.type == 155)
							{
								this.velocity.Y = this.velocity.Y * 0.5f;
							}
							else if (this.wetCount == 0)
							{
								this.wetCount = 10;
								if (!this.lavaWet)
								{
									if (this.honeyWet)
									{
										for (int num19 = 0; num19 < 10; num19++)
										{
											int num20 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
											Dust expr_13AF_cp_0_cp_0 = Main.dust[num20];
											expr_13AF_cp_0_cp_0.velocity.Y = expr_13AF_cp_0_cp_0.velocity.Y - 1f;
											Dust expr_13CA_cp_0_cp_0 = Main.dust[num20];
											expr_13CA_cp_0_cp_0.velocity.X = expr_13CA_cp_0_cp_0.velocity.X * 2.5f;
											Main.dust[num20].scale = 1.3f;
											Main.dust[num20].alpha = 100;
											Main.dust[num20].noGravity = true;
										}
										Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									}
									else
									{
										for (int num21 = 0; num21 < 10; num21++)
										{
											int num22 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2)), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
											Dust expr_14B7_cp_0_cp_0 = Main.dust[num22];
											expr_14B7_cp_0_cp_0.velocity.Y = expr_14B7_cp_0_cp_0.velocity.Y - 4f;
											Dust expr_14D2_cp_0_cp_0 = Main.dust[num22];
											expr_14D2_cp_0_cp_0.velocity.X = expr_14D2_cp_0_cp_0.velocity.X * 2.5f;
											Main.dust[num22].scale = 1.3f;
											Main.dust[num22].alpha = 100;
											Main.dust[num22].noGravity = true;
										}
										Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									}
								}
								else
								{
									for (int num23 = 0; num23 < 10; num23++)
									{
										int num24 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
										Dust expr_15C2_cp_0_cp_0 = Main.dust[num24];
										expr_15C2_cp_0_cp_0.velocity.Y = expr_15C2_cp_0_cp_0.velocity.Y - 1.5f;
										Dust expr_15DD_cp_0_cp_0 = Main.dust[num24];
										expr_15DD_cp_0_cp_0.velocity.X = expr_15DD_cp_0_cp_0.velocity.X * 2.5f;
										Main.dust[num24].scale = 1.3f;
										Main.dust[num24].alpha = 100;
										Main.dust[num24].noGravity = true;
									}
									Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								}
							}
						}
						if (!this.wet)
						{
							this.lavaWet = false;
							this.honeyWet = false;
						}
						if (this.wetCount > 0)
						{
							this.wetCount -= 1;
						}
					}
					this.oldPosition = this.position;
					this.oldDirection = this.direction;
					int num25;
					int num26;
					this.HandleMovement(velocity, out num25, out num26);
					if ((this.aiStyle != 3 || this.ai[0] != 1f) && (this.aiStyle != 7 || this.ai[0] != 1f) && (this.aiStyle != 13 || this.ai[0] != 1f) && this.aiStyle != 65 && this.aiStyle != 69 && this.aiStyle != 114 && this.aiStyle != 123 && this.aiStyle != 112 && !this.manualDirectionChange && this.aiStyle != 67 && this.aiStyle != 26 && this.aiStyle != 15)
					{
						if (this.velocity.X < 0f)
						{
							this.direction = -1;
						}
						else
						{
							this.direction = 1;
						}
					}
					if (!this.active)
					{
						return;
					}
					this.ProjLight();
					if (!this.npcProj && this.friendly && Main.player[this.owner].magicQuiver && this.extraUpdates < 1 && this.arrow)
					{
						this.extraUpdates = 1;
					}
					if (this.type == 2 || this.type == 82)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
					}
					else if (this.type == 172)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
					}
					else if (this.type == 103)
					{
						int num27 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num27].noGravity = true;
							Main.dust[num27].scale *= 2f;
						}
					}
					else if (this.type == 278)
					{
						int num28 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 169, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num28].noGravity = true;
							Main.dust[num28].scale *= 1.5f;
						}
					}
					else if (this.type == 4)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0f, 0f, 150, default(Color), 1.1f);
						}
					}
					else if (this.type == 5)
					{
						int num29 = Main.rand.Next(3);
						if (num29 == 0)
						{
							num29 = 15;
						}
						else if (num29 == 1)
						{
							num29 = 57;
						}
						else
						{
							num29 = 58;
						}
						Dust.NewDust(this.position, this.width, this.height, num29, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.2f);
					}
					this.Damage();
					if (this.type == 434 && this.localAI[0] == 0f && this.numUpdates == 0)
					{
						this.extraUpdates = 1;
						this.velocity = Vector2.Zero;
						this.localAI[0] = 1f;
						this.localAI[1] = 0.9999f;
						this.netUpdate = true;
					}
					if (Main.netMode != 1 && (this.type == 99 || this.type == 444))
					{
						Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 3);
					}
					if (ProjectileID.Sets.TrailingMode[this.type] == 0)
					{
						for (int num30 = this.oldPos.Length - 1; num30 > 0; num30--)
						{
							this.oldPos[num30] = this.oldPos[num30 - 1];
						}
						this.oldPos[0] = this.position;
					}
					else if (ProjectileID.Sets.TrailingMode[this.type] == 1)
					{
						if (this.frameCounter == 0 || this.oldPos[0] == Vector2.Zero)
						{
							for (int num31 = this.oldPos.Length - 1; num31 > 0; num31--)
							{
								this.oldPos[num31] = this.oldPos[num31 - 1];
							}
							this.oldPos[0] = this.position;
							if (this.velocity == Vector2.Zero && this.type == 466)
							{
								float num32 = this.rotation + 1.57079637f + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
								float num33 = (float)Main.rand.NextDouble() * 2f + 2f;
								Vector2 vector2 = new Vector2((float)Math.Cos((double)num32) * num33, (float)Math.Sin((double)num32) * num33);
								int num34 = Dust.NewDust(this.oldPos[this.oldPos.Length - 1], 0, 0, 229, vector2.X, vector2.Y, 0, default(Color), 1f);
								Main.dust[num34].noGravity = true;
								Main.dust[num34].scale = 1.7f;
							}
							if (this.velocity == Vector2.Zero && this.type == 580)
							{
								float num35 = this.rotation + 1.57079637f + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.57079637f;
								float num36 = (float)Main.rand.NextDouble() * 2f + 2f;
								Vector2 vector3 = new Vector2((float)Math.Cos((double)num35) * num36, (float)Math.Sin((double)num35) * num36);
								int num37 = Dust.NewDust(this.oldPos[this.oldPos.Length - 1], 0, 0, 229, vector3.X, vector3.Y, 0, default(Color), 1f);
								Main.dust[num37].noGravity = true;
								Main.dust[num37].scale = 1.7f;
							}
						}
					}
					else if (ProjectileID.Sets.TrailingMode[this.type] == 2)
					{
						for (int num38 = this.oldPos.Length - 1; num38 > 0; num38--)
						{
							this.oldPos[num38] = this.oldPos[num38 - 1];
							this.oldRot[num38] = this.oldRot[num38 - 1];
							this.oldSpriteDirection[num38] = this.oldSpriteDirection[num38 - 1];
						}
						this.oldPos[0] = this.position;
						this.oldRot[0] = this.rotation;
						this.oldSpriteDirection[0] = this.spriteDirection;
					}
					if (ProjectileID.Sets.IsADD2Turret[this.type] && DD2Event.Ongoing)
					{
						this.timeLeft++;
					}
					this.timeLeft--;
					if (this.timeLeft <= 0)
					{
						this.Kill();
					}
					if (this.penetrate == 0)
					{
						this.Kill();
					}
					if (this.active && this.owner == Main.myPlayer)
					{
						if (this.netUpdate2)
						{
							this.netUpdate = true;
						}
						if (!this.active)
						{
							this.netSpam = 0;
						}
						if (this.netUpdate)
						{
							if (this.netSpam < 60)
							{
								this.netSpam += 5;
								NetMessage.SendData(27, -1, -1, null, i, 0f, 0f, 0f, 0, 0, 0);
								this.netUpdate2 = false;
							}
							else
							{
								this.netUpdate2 = true;
							}
						}
						if (this.netSpam > 0)
						{
							this.netSpam--;
						}
					}
				}
			}
			this.netUpdate = false;
		}

		// Token: 0x060001C8 RID: 456 RVA: 0x00049628 File Offset: 0x00047828
		private void UpdatePosition(Vector2 wetVelocity)
		{
			if (this.aiStyle != 4 && this.aiStyle != 38 && this.aiStyle != 84 && (this.aiStyle != 7 || this.ai[0] != 2f) && ((this.type != 440 && this.type != 449 && this.type != 606) || this.ai[1] != 1f) && (this.aiStyle != 93 || this.ai[0] >= 0f) && this.type != 540)
			{
				if (this.wet)
				{
					this.position += wetVelocity;
				}
				else
				{
					this.position += this.velocity;
				}
				if (Main.projPet[this.type] && this.tileCollide)
				{
					Vector4 vector = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height, 0f, false);
					this.position.X = vector.X;
					this.position.Y = vector.Y;
					this.velocity.X = vector.Z;
					this.velocity.Y = vector.W;
				}
			}
		}

		// Token: 0x060001BC RID: 444 RVA: 0x0003E6D0 File Offset: 0x0003C8D0
		public void vampireHeal(int dmg, Vector2 Position)
		{
			float num = (float)dmg * 0.075f;
			if ((int)num == 0)
			{
				return;
			}
			if (Main.player[Main.myPlayer].lifeSteal <= 0f)
			{
				return;
			}
			Main.player[Main.myPlayer].lifeSteal -= num;
			int num2 = this.owner;
			Projectile.NewProjectile(Position.X, Position.Y, 0f, 0f, 305, 0, 0f, this.owner, (float)num2, num);
		}

		// Token: 0x1700004C RID: 76
		public int MaxUpdates
		{
			// Token: 0x060001B1 RID: 433 RVA: 0x0003025D File Offset: 0x0002E45D
			get
			{
				return this.extraUpdates + 1;
			}
			// Token: 0x060001B2 RID: 434 RVA: 0x00030267 File Offset: 0x0002E467
			set
			{
				this.extraUpdates = value - 1;
			}
		}

		// Token: 0x17000049 RID: 73
		public string Name
		{
			// Token: 0x060001A9 RID: 425 RVA: 0x00030101 File Offset: 0x0002E301
			get
			{
				return Lang.GetProjectileName(this.type).Value;
			}
		}

		// Token: 0x1700004B RID: 75
		public float Opacity
		{
			// Token: 0x060001AF RID: 431 RVA: 0x00030223 File Offset: 0x0002E423
			get
			{
				return 1f - (float)this.alpha / 255f;
			}
			// Token: 0x060001B0 RID: 432 RVA: 0x00030238 File Offset: 0x0002E438
			set
			{
				this.alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
			}
		}

		// Token: 0x1700004D RID: 77
		public NPC OwnerMinionAttackTargetNPC
		{
			// Token: 0x060001B3 RID: 435 RVA: 0x00030272 File Offset: 0x0002E472
			get
			{
				if (Main.player[this.owner].MinionAttackTargetNPC < 0)
				{
					return null;
				}
				return Main.npc[Main.player[this.owner].MinionAttackTargetNPC];
			}
		}

		// Token: 0x1700004A RID: 74
		public bool WipableTurret
		{
			// Token: 0x060001AD RID: 429 RVA: 0x000301B0 File Offset: 0x0002E3B0
			get
			{
				return this.owner == Main.myPlayer && this.sentry && !this.TurretShouldPersist();
			}
		}

		// Token: 0x040001C0 RID: 448
		public float[] ai = new float[Projectile.maxAI];

		// Token: 0x040001C4 RID: 452
		public int aiStyle;

		// Token: 0x040001BC RID: 444
		public int alpha;

		// Token: 0x040001B2 RID: 434
		public bool arrow;

		// Token: 0x040001B4 RID: 436
		public bool bobber;

		// Token: 0x040001E9 RID: 489
		public bool coldDamage;

		// Token: 0x040001B8 RID: 440
		public bool counterweight;

		// Token: 0x040001C7 RID: 455
		public int damage;

		// Token: 0x040001DE RID: 478
		public int extraUpdates;

		// Token: 0x040001EE RID: 494
		public int frame;

		// Token: 0x040001ED RID: 493
		public int frameCounter;

		// Token: 0x040001CB RID: 459
		public bool friendly;

		// Token: 0x040001C2 RID: 450
		public float gfxOffY;

		// Token: 0x040001BE RID: 446
		public short glowMask;

		// Token: 0x040001E1 RID: 481
		public bool hide;

		// Token: 0x040001C9 RID: 457
		public bool hostile;

		// Token: 0x040001D1 RID: 465
		public int identity;

		// Token: 0x040001F2 RID: 498
		public int idStaticNPCHitCooldown = -1;

		// Token: 0x040001E0 RID: 480
		public bool ignoreWater;

		// Token: 0x040001CA RID: 458
		public float knockBack;

		// Token: 0x040001D2 RID: 466
		public float light;

		// Token: 0x040001C1 RID: 449
		public float[] localAI = new float[Projectile.maxAI];

		// Token: 0x040001F1 RID: 497
		public int localNPCHitCooldown = -2;

		// Token: 0x040001CD RID: 461
		private int[] localNPCImmunity = new int[200];

		// Token: 0x040001E8 RID: 488
		public bool magic;

		// Token: 0x040001EF RID: 495
		public bool manualDirectionChange;

		// Token: 0x040001B7 RID: 439
		public static int maxAI = 2;

		// Token: 0x040001D0 RID: 464
		public int maxPenetrate = 1;

		// Token: 0x040001E5 RID: 485
		public bool melee;

		// Token: 0x040001D9 RID: 473
		public bool minion;

		// Token: 0x040001DB RID: 475
		public int minionPos;

		// Token: 0x040001DA RID: 474
		public float minionSlots;

		// Token: 0x040001E4 RID: 484
		public string miscText = "";

		// Token: 0x040001B5 RID: 437
		public bool netImportant;

		// Token: 0x040001D5 RID: 469
		public int netSpam;

		// Token: 0x040001D3 RID: 467
		public bool netUpdate;

		// Token: 0x040001D4 RID: 468
		public bool netUpdate2;

		// Token: 0x040001B6 RID: 438
		public bool noDropItem;

		// Token: 0x040001EA RID: 490
		public bool noEnchantments;

		// Token: 0x040001EC RID: 492
		public bool npcProj;

		// Token: 0x040001B3 RID: 435
		public int numHits;

		// Token: 0x040001DF RID: 479
		public int numUpdates;

		// Token: 0x040001D6 RID: 470
		public Vector2[] oldPos = new Vector2[10];

		// Token: 0x040001D7 RID: 471
		public float[] oldRot = new float[10];

		// Token: 0x040001D8 RID: 472
		public int[] oldSpriteDirection = new int[10];

		// Token: 0x040001BF RID: 447
		public int owner = 255;

		// Token: 0x040001E2 RID: 482
		public bool ownerHitCheck;

		// Token: 0x040001B1 RID: 433
		public float ownerHitCheckDistance = 1000f;

		// Token: 0x040001CC RID: 460
		public int penetrate = 1;

		// Token: 0x040001AF RID: 431
		public static uint[][] perIDStaticNPCImmunity = new uint[714][];

		// Token: 0x040001E3 RID: 483
		public int[] playerImmune = new int[255];

		// Token: 0x040001F0 RID: 496
		public int projUUID = -1;

		// Token: 0x040001E6 RID: 486
		public bool ranged;

		// Token: 0x040001DC RID: 476
		public int restrikeDelay;

		// Token: 0x040001BA RID: 442
		public float rotation;

		// Token: 0x040001B9 RID: 441
		public float scale = 1f;

		// Token: 0x040001BD RID: 445
		public bool sentry;

		// Token: 0x040001B0 RID: 432
		public static int SentryLifeTime = 7200;

		// Token: 0x040001C6 RID: 454
		public int soundDelay;

		// Token: 0x040001C8 RID: 456
		public int spriteDirection = 1;

		// Token: 0x040001C3 RID: 451
		public float stepSpeed = 1f;

		// Token: 0x040001E7 RID: 487
		public bool thrown;

		// Token: 0x040001DD RID: 477
		public bool tileCollide;

		// Token: 0x040001C5 RID: 453
		public int timeLeft;

		// Token: 0x040001EB RID: 491
		public bool trap;

		// Token: 0x040001BB RID: 443
		public int type;

		// Token: 0x040001CF RID: 463
		private bool usesIDStaticNPCImmunity;

		// Token: 0x040001CE RID: 462
		private bool usesLocalNPCImmunity;

		// Token: 0x040001F3 RID: 499
		private static float[] _CompanionCubeScreamCooldown = new float[255];
	}
}
